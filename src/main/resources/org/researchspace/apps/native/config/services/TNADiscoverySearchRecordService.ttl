PREFIX sp: <http://spinrdf.org/sp#>
PREFIX spin: <http://spinrdf.org/spin#>
PREFIX spl: <http://spinrdf.org/spl#>
PREFIX ephedra: <http://www.researchspace.org/resource/system/ephedra#>
PREFIX sail: <http://www.openrdf.org/config/sail#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX : <http://www.researchspace.org/resource/system/services/tnadiscovery/>

:TNADiscoverySearchRecordService a ephedra:Service ;    
    sail:sailType "researchspace:RESTSail" ;
    rdfs:label "A wrapper for the TNA Discovery Search Record API service.";    

    ephedra:hasSPARQLPattern (
       [
           sp:subject :_results ;
           sp:predicate :q ;
           sp:object :_sps.searchQuery
        ]
        [
           sp:subject :_results ;
           sp:predicate :sps.page ;
           sp:object :_sps.page
        ]
        [
           sp:subject :_results ;
           sp:predicate :sps.resultsPageSize ;
           sp:object :_sps.resultsPageSize
        ]
        [
           sp:subject :_results ;
           sp:predicate :sps.recordSeries ;
           sp:object :_sps.recordSeries
        ]
        [
           sp:subject :_results ;
           sp:predicate :sps.recordCollections ;
           sp:object :_sps.recordCollections
        ]
        [
           sp:subject :_results ;
           sp:predicate :sps.references ;
           sp:object :_sps.references
        ]
        [
           sp:subject :_results ;
           sp:predicate :sps.dateFrom ;
           sp:object :_sps.dateFrom
        ]
        [
           sp:subject :_results ;
           sp:predicate :sps.dateTo ;
           sp:object :_sps.dateTo
        ]
        [
           sp:subject :_results ;
           sp:predicate :sps.timePeriods ;
           sp:object :_sps.timePeriods
        ]
        [
           sp:subject :_results ;
           sp:predicate :sps.recordRepositories ;
           sp:object :_sps.recordRepositories
        ]
        [
           sp:subject :_results ;
           sp:predicate :sps.departments ;
           sp:object :_sps.departments
        ]
        [
           sp:subject :_results ;
           sp:predicate :sps.taxonomySubjects ;
           sp:object :_sps.taxonomySubjects
        ]
        [
           sp:subject :_results ;
           sp:predicate :sps.catalogueLevels ;
           sp:object :_sps.catalogueLevels
        ]
        [
           sp:subject :_results ;
           sp:predicate :sps.closureStatuses ;
           sp:object :_sps.closureStatuses
        ]
        [
           sp:subject :_results ;
           sp:predicate :sps.corporateNames ;
           sp:object :_sps.corporateNames
        ]
        [
           sp:subject :_results ;
           sp:predicate :sps.heldByCode ;
           sp:object :_sps.heldByCode
        ]
        [
           sp:subject :_results ;
           sp:predicate :sps.documentType ;
           sp:object :_sps.documentType
        ]
        [
           sp:subject :_results ;
           sp:predicate :sps.titleName ;
           sp:object :_sps.titleName
        ]
        [
           sp:subject :_results ;
           sp:predicate :sps.firstName ;
           sp:object :_sps.firstName
        ]
        [
           sp:subject :_results ;
           sp:predicate :sps.lastName ;
           sp:object :_sps.lastName
        ]
        [
           sp:subject :_results ;
           sp:predicate :sps.dateOfBirthFrom ;
           sp:object :_sps.dateOfBirthFrom
        ]
        [
           sp:subject :_results ;
           sp:predicate :sps.dateOfBirthTo ;
           sp:object :_sps.dateOfBirthTo
        ]
        [
           sp:subject :_results ;
           sp:predicate :sps.number ;
           sp:object :_sps.number
        ]
        [
           sp:subject :_results ;
           sp:predicate :sps.occupation ;
           sp:object :_sps.occupation
        ]
        [
           sp:subject :_results ;
           sp:predicate :sps.recordPlace ;
           sp:object :_sps.recordPlace
        ]
        [
           sp:subject :_results ;
           sp:predicate :sps.oldCountyName ;
           sp:object :_sps.oldCountyName
        ]
        [
           sp:subject :_results ;
           sp:predicate :sps.townName ;
           sp:object :_sps.townName
        ]
        [
           sp:subject :_results ;
           sp:predicate :sps.recordOpeningFromDate ;
           sp:object :_sps.recordOpeningFromDate
        ]
        [
           sp:subject :_results ;
           sp:predicate :sps.recordOpeningToDate ;
           sp:object :_sps.recordOpeningToDate
        ]
        [
           sp:subject :_results ;
           sp:predicate :sps.referenceFirstLetter ;
           sp:object :_sps.referenceFirstLetter
        ]
        [
           sp:subject :_results ;
           sp:predicate :sps.referenceQuery ;
           sp:object :_sps.referenceQuery
        ]
        [
            sp:subject :_results ;
            sp:predicate :sps.sortByOption ;
            sp:object :_sps.sortByOption
        ]
        [
            sp:subject :_results ;
            sp:predicate :sps.returnHighlighted ;
            sp:object :_sps.returnHighlighted
        ]
        [
           sp:subject :_results ;
           sp:predicate :hasTaxonomies ;
           sp:object :_hasTaxonomies;
        ]
        [
           sp:subject :_results ;
           sp:predicate :hasId ;
           sp:object :_hasId
        ]
        [
           sp:subject :_results ;
           sp:predicate :hasTitle ;
           sp:object :_hasTitle
        ]
        [
           sp:subject :_results ;
           sp:predicate :hasContext ;
           sp:object :_hasContext
        ]
        [
           sp:subject :_results ;
           sp:predicate :hasContent ;
           sp:object :_hasContent
        ]
        [
           sp:subject :_results ;
           sp:predicate :hasURLParameters ;
           sp:object :_hasURLParameters
        ]
        [
           sp:subject :_results ;
           sp:predicate :hasDepartment ;
           sp:object :_hasDepartment
        ]
        [
           sp:subject :_results ;
           sp:predicate :hasNote ;
           sp:object :_hasNote
        ]
        [
           sp:subject :_results ;
           sp:predicate :hasAdminHistory ;
           sp:object :_hasAdminHistory
        ]
        [
           sp:subject :_results ;
           sp:predicate :hasArrangement ;
           sp:object :_hasArrangement
        ]
        [
           sp:subject :_results ;
           sp:predicate :hasMapDesignation ;
           sp:object :_hasMapDesignation
        ]
        [
           sp:subject :_results ;
           sp:predicate :hasMapScale ;
           sp:object :_hasMapScale
        ]
        [
           sp:subject :_results ;
           sp:predicate :hasPhysicalCondition ;
           sp:object :_hasPhysicalCondition
        ]
        [
           sp:subject :_results ;
           sp:predicate :hasCatalogueLevel ;
           sp:object :_hasCatalogueLevel
        ]
        [
           sp:subject :_results ;
           sp:predicate :hasOpeningDate ;
           sp:object :_hasOpeningDate
        ]
        [
           sp:subject :_results ;
           sp:predicate :hasClosureStatus ;
           sp:object :_hasClosureStatus
        ]
        [
           sp:subject :_results ;
           sp:predicate :hasClosureType ;
           sp:object :_hasClosureType
        ]
        [
           sp:subject :_results ;
           sp:predicate :hasDocumentType ;
           sp:object :_hasDocumentType
        ]
        [
           sp:subject :_results ;
           sp:predicate :hasCoveringDates ;
           sp:object :_hasCoveringDates
        ]
        [
           sp:subject :_results ;
           sp:predicate :hasDescription ;
           sp:object :_hasDescription
        ]
        [
           sp:subject :_results ;
           sp:predicate :hasEndDate ;
           sp:object :_hasEndDate
        ]
        [
           sp:subject :_results ;
           sp:predicate :hasNumEndDate ;
           sp:object :_hasNumEndDate
        ]
        [
           sp:subject :_results ;
           sp:predicate :hasNumStartDate ;
           sp:object :_hasNumStartDate
        ]
        [
           sp:subject :_results ;
           sp:predicate :hasStartDate ;
           sp:object :_hasStartDate
        ]
        [
           sp:subject :_results ;
           sp:predicate :hasReference ;
           sp:object :_hasReference
        ]
        [
           sp:subject :_results ;
           sp:predicate :hasScore ;
           sp:object :_hasScore
        ]
        [
           sp:subject :_results ;
           sp:predicate :hasHeldBy ;
           sp:object :_hasHeldBy
        ]
        [
           sp:subject :_results ;
           sp:predicate :hasSource ;
           sp:object :_hasSource
        ]
    );              
    spin:constraint [
        a spl:Argument ;
        rdfs:comment "Search by query text" ;
        spl:predicate :_sps.searchQuery ;
        spl:valueType xsd:string
    ] ;    

    spin:constraint [
        a spl:Argument ;
        rdfs:comment "Page number. Range [0, 100]" ;
        spl:predicate :_sps.page ;
        spl:valueType xsd:integer
        ] ;    

    spin:constraint [
        a spl:Argument ;
        rdfs:comment "Number of items per page, default is 15" ;
        spl:predicate :_sps.resultsPageSize ;
        spl:valueType xsd:integer
        ] ;    

    spin:constraint [
        a spl:Argument ;
        rdfs:comment "Catalogue Series (collection) filter" ;
        spl:predicate :_sps.recordSeries ;
        spl:valueType xsd:string
        ] ;    
    spin:constraint [
        a spl:Argument ;
        rdfs:comment "Catalogue Series (collection) filter" ;
        spl:predicate :_sps.recordSeries ;
        spl:valueType xsd:string
        ] ;  
    spin:constraint [
        a spl:Argument ;
        rdfs:comment "References" ;
        spl:predicate :_sps.references ;
        spl:valueType xsd:string
        ] ;  
    spin:constraint [
        a spl:Argument ;
        rdfs:comment "Record Collections" ;
        spl:predicate :_sps.recordCollections ;
        spl:valueType xsd:string
        ] ;  
    spin:constraint [
        a spl:Argument ;
        rdfs:comment "Date From" ;
        spl:predicate :_sps.dateFrom ;
        spl:valueType xsd:string
        ] ;  
    spin:constraint [
        a spl:Argument ;
        rdfs:comment "Date To" ;
        spl:predicate :_sps.dateTo ;
        spl:valueType xsd:string
        ] ;     
    spin:constraint [
        a spl:Argument ;
        rdfs:comment "Time Periods" ;
        spl:predicate :_sps.timePeriods ;
        spl:valueType xsd:string
        ] ;  
    spin:constraint [
        a spl:Argument ;
        rdfs:comment "Record Repositories" ;
        spl:predicate :_sps.recordRepositories ;
        spl:valueType xsd:string
        ] ;  
    spin:constraint [
        a spl:Argument ;
        rdfs:comment "Date To" ;
        spl:predicate :_sps.dateTo ;
        spl:valueType xsd:string
        ] ;  
    spin:constraint [
        a spl:Argument ;
        rdfs:comment "Departments" ;
        spl:predicate :_sps.departments ;
        spl:valueType xsd:string
        ] ;  
    spin:constraint [
        a spl:Argument ;
        rdfs:comment "Taxonomy Subjects" ;
        spl:predicate :_sps.taxonomySubjects ;
        spl:valueType xsd:string
        ] ;  
    spin:constraint [
        a spl:Argument ;
        rdfs:comment "Catalogue Levels" ;
        spl:predicate :_sps.catalogueLevels ;
        spl:valueType xsd:string
        ] ; 
    spin:constraint [
        a spl:Argument ;
        rdfs:comment "Closure Statuses" ;
        spl:predicate :_sps.closureStatuses ;
        spl:valueType xsd:string
        ] ; 
    spin:constraint [
        a spl:Argument ;
        rdfs:comment "Corporate Names" ;
        spl:predicate :_sps.corporateNames ;
        spl:valueType xsd:string
        ] ; 
    spin:constraint [
        a spl:Argument ;
        rdfs:comment "Held by Code" ;
        spl:predicate :_sps.heldByCode ;
        spl:valueType xsd:string
        ] ; 
    spin:constraint [
        a spl:Argument ;
        rdfs:comment "Document Type" ;
        spl:predicate :_sps.documentType ;
        spl:valueType xsd:string
        ] ; 
    spin:constraint [
        a spl:Argument ;
        rdfs:comment "Title Name" ;
        spl:predicate :_sps.titleName ;
        spl:valueType xsd:string
        ] ; 
    spin:constraint [
        a spl:Argument ;
        rdfs:comment "First Name" ;
        spl:predicate :_sps.firstName ;
        spl:valueType xsd:string
        ] ; 
    spin:constraint [
        a spl:Argument ;
        rdfs:comment "Last Name" ;
        spl:predicate :_sps.lastName ;
        spl:valueType xsd:string
        ] ; 
    spin:constraint [
        a spl:Argument ;
        rdfs:comment "Date of Birth From" ;
        spl:predicate :_sps.dateOfBirthFrom ;
        spl:valueType xsd:dateTime
        ] ; 
    spin:constraint [
        a spl:Argument ;
        rdfs:comment "Taxonomy Subjects" ;
        spl:predicate :_sps.dateOfBirthTo ;
        spl:valueType xsd:dateTime
        ] ; 
    spin:constraint [
        a spl:Argument ;
        rdfs:comment "Number" ;
        spl:predicate :_sps.number ;
        spl:valueType xsd:long
        ] ; 
    spin:constraint [
        a spl:Argument ;
        rdfs:comment "Occupation" ;
        spl:predicate :_sps.occupation ;
        spl:valueType xsd:string
        ] ; 
    spin:constraint [
        a spl:Argument ;
        rdfs:comment "Record Place" ;
        spl:predicate :_sps.recordPlace ;
        spl:valueType xsd:string
        ] ; 
    spin:constraint [
        a spl:Argument ;
        rdfs:comment "Old County Name" ;
        spl:predicate :_sps.oldCountyName ;
        spl:valueType xsd:string
        ] ; 
    spin:constraint [
        a spl:Argument ;
        rdfs:comment "Town Name" ;
        spl:predicate :_sps.townName ;
        spl:valueType xsd:string
        ] ; 
    spin:constraint [
        a spl:Argument ;
        rdfs:comment "Record Opening From Date" ;
        spl:predicate :_sps.recordOpeningFromDate ;
        spl:valueType xsd:string
        ] ; 
    spin:constraint [
        a spl:Argument ;
        rdfs:comment "Record Opening to Date" ;
        spl:predicate :_sps.recordOpeningToDate ;
        spl:valueType xsd:string
        ] ; 
    spin:constraint [
        a spl:Argument ;
        rdfs:comment "Reference First Letter" ;
        spl:predicate :_sps.referenceFirstLetter ;
        spl:valueType xsd:string
        ] ; 
    spin:constraint [
        a spl:Argument ;
        rdfs:comment "Reference Query" ;
        spl:predicate :_sps.referenceQuery ;
        spl:valueType xsd:string
        ] ; 

    spin:constraint [
        a spl:Argument ;
        rdfs:comment "Sort by option, possible values: RELEVANCE, REFERENCE_ASCENDING, DATE_ASCENDING, DATE_DESCENDING, TITLE_ASCENDING, TITLE_DESCENDING" ;
        spl:predicate :_sps.sortByOption ;
        spl:valueType xsd:string
        ] ;

    spin:constraint [
        a spl:Argument ;
        rdfs:comment "Highlight search terms in search results. If highlight is enabled only a snippet containing highlighted text is returned" ;
        spl:predicate :_sps.returnHighlighted ;
        spl:valueType xsd:boolean
        ] ;

    spin:column [
        a spin:Column ;
        rdfs:comment "results" ;
        spl:predicate :_results ;
        spl:valueType rdfs:Resource;
        ephedra:jsonPath "$.records.[*]"
        ] ;    
    
    spin:column [
        a spin:Column ;
        rdfs:comment "id" ;
        spl:predicate :_hasId ;
        spl:valueType xsd:string ;
        ephedra:jsonPath "$.id"
    ] ;  

    spin:column [
        a spin:Column ;
        rdfs:comment "Context";
        spl:predicate :_hasContext ;
        spl:valueType xsd:string;
        ephedra:jsonPath "$.context"
    ] ;

    spin:column [
        a spin:Column ;
        rdfs:comment "Content" ;     
        spl:predicate :_hasContent ;
        spl:valueType xsd:string;
        ephedra:jsonPath "$.content"
    ] ;

    spin:column [
        a spin:Column ;
        rdfs:comment  "URLParameters";
        spl:predicate :_hasURLParameters ;
        spl:valueType xsd:string;
        ephedra:jsonPath "$.urlparameters"
    ] ;

    spin:column [
        a spin:Column ;
        rdfs:comment "Department" ;     
        spl:predicate :_hasDepartment ;
        spl:valueType xsd:string;
        ephedra:jsonPath "$.department"
    ] ;

    spin:column [
        a spin:Column ;
        rdfs:comment "Note";      
        spl:predicate :_hasNote ;
        spl:valueType xsd:string;
        ephedra:jsonPath "$.note"
    ] ;

    spin:column [
        a spin:Column ;
        rdfs:comment "Admin History";       
        spl:predicate :_hasAdminHistory ;
        spl:valueType xsd:string;
        ephedra:jsonPath "$.adminHistory"
    ] ;

    spin:column [
        a spin:Column ;
        rdfs:comment  "Arrangement";     
        spl:predicate :_hasArrangement ;
        spl:valueType xsd:string;
        ephedra:jsonPath "$.arrangement"
    ] ;

    spin:column [
        a spin:Column ;
        rdfs:comment "Map Designation";     
        spl:predicate :_hasMapDesignation ;
        spl:valueType xsd:string;
        ephedra:jsonPath "$.mapDesignation"
    ] ;

    spin:column [
        a spin:Column ;
        rdfs:comment "Map Scale";      
        spl:predicate :_hasMapScale ;
        spl:valueType xsd:string;
        ephedra:jsonPath "$.mapScale"
    ] ;

    spin:column [
        a spin:Column ;
        rdfs:comment "Physical Condition" ;    
        spl:predicate :_hasPhysicalCondition ;
        spl:valueType xsd:string;
        ephedra:jsonPath "$.physicalCondition"
    ] ;

    spin:column [
        a spin:Column ;
        rdfs:comment "Catalogue Level" ;    
        spl:predicate :_hasCatalogueLevel ;
        spl:valueType xsd:integer;
        ephedra:jsonPath "$.catalogueLevel"
    ] ;

    spin:column [
        a spin:Column ;
        rdfs:comment "Opening Date" ;    
        spl:predicate :_hasOpeningDate ;
        spl:valueType xsd:string;
        ephedra:jsonPath "$.openingDate"
    ] ;

    spin:column [
        a spin:Column ;
        rdfs:comment "Closure Status" ;    
        spl:predicate :_hasClosureStatus ;
        spl:valueType xsd:string;
        ephedra:jsonPath "$.closureStatus"
    ] ;

    spin:column [
        a spin:Column ;
        rdfs:comment "Closure Type" ;     
        spl:predicate :_hasClosureType ;
        spl:valueType xsd:string;
        ephedra:jsonPath "$.closureType"
    ] ;

    spin:column [
        a spin:Column ;
        rdfs:comment  "DocumentType";     
        spl:predicate :_hasDocumentType ;
        spl:valueType xsd:string;
        ephedra:jsonPath "$.documentType"
    ] ;

    spin:column [
        a spin:Column ;
        rdfs:comment  "Covering Dates";    
        spl:predicate :_hasCoveringDates ;
        spl:valueType xsd:string;
        ephedra:jsonPath "$.coveringDates"
    ] ;

    spin:column [
        a spin:Column ;
        rdfs:comment  "Description";    
        spl:predicate :_hasDescription ;
        spl:valueType xsd:string;
        ephedra:jsonPath "$.description"
    ] ;

    spin:column [
        a spin:Column ;
        rdfs:comment  "EndDate";     
        spl:predicate :_hasEndDate ;
        spl:valueType xsd:string;
        ephedra:jsonPath "$.endDate"
    ] ;

    spin:column [
        a spin:Column ;
        rdfs:comment "NumEndDate";   
        spl:predicate :_hasNumEndDate ;
        spl:valueType xsd:string;
        ephedra:jsonPath "$.numEndDate"
    ] ;

    spin:column [
        a spin:Column ;
        rdfs:comment "NumStartDate";      
        spl:predicate :_hasNumStartDate ;
        spl:valueType xsd:string;
        ephedra:jsonPath "$.numStartDate"
    ] ;

    spin:column [
        a spin:Column ;
        rdfs:comment "Start Date";      
        spl:predicate :_hasStartDate ;
        spl:valueType xsd:string;
        ephedra:jsonPath "$.startDate"
    ] ;

    spin:column [
        a spin:Column ;
        rdfs:comment "Reference" ;     
        spl:predicate :_hasReference ;
        spl:valueType xsd:string;
        ephedra:jsonPath "$.reference"
    ] ;

    spin:column [
        a spin:Column ;
        rdfs:comment  "Score";   
        spl:predicate :_hasScore ;
        spl:valueType xsd:string;
        ephedra:jsonPath "$.score"
    ] ;

    spin:column [
        a spin:Column;
        rdfs:comment "Taxonomies";
        spl:predicate :_hasTaxonomies;
        spl:valueType xsd:string;
        ephedra:jsonPath "$.taxonomies.[*]"
    ];

    spin:column [
        a spin:Column;
        rdfs:comment "Held By";
        spl:predicate :_hasHeldBy;
        spl:valueType xsd:string;
        ephedra:jsonPath "$.heldBy[0]"
    ];

    spin:column [
        a spin:Column ;
        rdfs:comment "Title" ;
        spl:predicate :_hasTitle ;
        spl:valueType xsd:string ;
        ephedra:jsonPath "$.title"
    ] . 

