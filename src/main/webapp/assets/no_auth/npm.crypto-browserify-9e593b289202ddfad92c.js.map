{"version":3,"sources":["webpack:///./node_modules/crypto-browserify/index.js"],"names":["exports","randomBytes","rng","pseudoRandomBytes","prng","createHash","Hash","createHmac","Hmac","algos","algoKeys","Object","keys","hashes","concat","getHashes","p","pbkdf2","pbkdf2Sync","aes","Cipher","createCipher","Cipheriv","createCipheriv","Decipher","createDecipher","Decipheriv","createDecipheriv","getCiphers","listCiphers","dh","DiffieHellmanGroup","createDiffieHellmanGroup","getDiffieHellman","createDiffieHellman","DiffieHellman","sign","createSign","Sign","createVerify","Verify","createECDH","publicEncrypt","privateEncrypt","publicDecrypt","privateDecrypt","rf","randomFill","randomFillSync","createCredentials","Error","join","constants"],"mappings":"4FAEAA,EAAQC,YAAcD,EAAQE,IAAMF,EAAQG,kBAAoBH,EAAQI,KAAO,EAAQ,MACvFJ,EAAQK,WAAaL,EAAQM,KAAO,EAAQ,MAC5CN,EAAQO,WAAaP,EAAQQ,KAAO,EAAQ,MAE5C,IAAIC,EAAQ,EAAQ,MAChBC,EAAWC,OAAOC,KAAKH,GACvBI,EAAS,CAAC,OAAQ,SAAU,SAAU,SAAU,SAAU,MAAO,UAAUC,OAAOJ,GACtFV,EAAQe,UAAY,WAClB,OAAOF,GAGT,IAAIG,EAAI,EAAQ,MAChBhB,EAAQiB,OAASD,EAAEC,OACnBjB,EAAQkB,WAAaF,EAAEE,WAEvB,IAAIC,EAAM,EAAQ,MAElBnB,EAAQoB,OAASD,EAAIC,OACrBpB,EAAQqB,aAAeF,EAAIE,aAC3BrB,EAAQsB,SAAWH,EAAIG,SACvBtB,EAAQuB,eAAiBJ,EAAII,eAC7BvB,EAAQwB,SAAWL,EAAIK,SACvBxB,EAAQyB,eAAiBN,EAAIM,eAC7BzB,EAAQ0B,WAAaP,EAAIO,WACzB1B,EAAQ2B,iBAAmBR,EAAIQ,iBAC/B3B,EAAQ4B,WAAaT,EAAIS,WACzB5B,EAAQ6B,YAAcV,EAAIU,YAE1B,IAAIC,EAAK,EAAQ,MAEjB9B,EAAQ+B,mBAAqBD,EAAGC,mBAChC/B,EAAQgC,yBAA2BF,EAAGE,yBACtChC,EAAQiC,iBAAmBH,EAAGG,iBAC9BjC,EAAQkC,oBAAsBJ,EAAGI,oBACjClC,EAAQmC,cAAgBL,EAAGK,cAE3B,IAAIC,EAAO,EAAQ,MAEnBpC,EAAQqC,WAAaD,EAAKC,WAC1BrC,EAAQsC,KAAOF,EAAKE,KACpBtC,EAAQuC,aAAeH,EAAKG,aAC5BvC,EAAQwC,OAASJ,EAAKI,OAEtBxC,EAAQyC,WAAa,EAAQ,MAE7B,IAAIC,EAAgB,EAAQ,MAE5B1C,EAAQ0C,cAAgBA,EAAcA,cACtC1C,EAAQ2C,eAAiBD,EAAcC,eACvC3C,EAAQ4C,cAAgBF,EAAcE,cACtC5C,EAAQ6C,eAAiBH,EAAcG,eAevC,IAAIC,EAAK,EAAQ,MAEjB9C,EAAQ+C,WAAaD,EAAGC,WACxB/C,EAAQgD,eAAiBF,EAAGE,eAE5BhD,EAAQiD,kBAAoB,WAC1B,MAAM,IAAIC,MAAM,CACd,kDACA,0BACA,0DACAC,KAAK,QAGTnD,EAAQoD,UAAY,CAClB,0BAA6B,EAC7B,qBAAwB,EACxB,6BAAgC,EAChC,0BAA6B,EAC7B,YAAe,EACf,aAAgB,EAChB,kBAAqB,EACrB,mBAAsB,EACtB,eAAkB,EAClB,uBAA0B,EAC1B,iBAAoB,EACpB,sBAAyB,EACzB,4BAA+B,EAC/B,8BAAiC,EACjC,wBAA2B","file":"npm.crypto-browserify-9e593b289202ddfad92c.js","sourcesContent":["'use strict'\n\nexports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')\nexports.createHash = exports.Hash = require('create-hash')\nexports.createHmac = exports.Hmac = require('create-hmac')\n\nvar algos = require('browserify-sign/algos')\nvar algoKeys = Object.keys(algos)\nvar hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys)\nexports.getHashes = function () {\n  return hashes\n}\n\nvar p = require('pbkdf2')\nexports.pbkdf2 = p.pbkdf2\nexports.pbkdf2Sync = p.pbkdf2Sync\n\nvar aes = require('browserify-cipher')\n\nexports.Cipher = aes.Cipher\nexports.createCipher = aes.createCipher\nexports.Cipheriv = aes.Cipheriv\nexports.createCipheriv = aes.createCipheriv\nexports.Decipher = aes.Decipher\nexports.createDecipher = aes.createDecipher\nexports.Decipheriv = aes.Decipheriv\nexports.createDecipheriv = aes.createDecipheriv\nexports.getCiphers = aes.getCiphers\nexports.listCiphers = aes.listCiphers\n\nvar dh = require('diffie-hellman')\n\nexports.DiffieHellmanGroup = dh.DiffieHellmanGroup\nexports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup\nexports.getDiffieHellman = dh.getDiffieHellman\nexports.createDiffieHellman = dh.createDiffieHellman\nexports.DiffieHellman = dh.DiffieHellman\n\nvar sign = require('browserify-sign')\n\nexports.createSign = sign.createSign\nexports.Sign = sign.Sign\nexports.createVerify = sign.createVerify\nexports.Verify = sign.Verify\n\nexports.createECDH = require('create-ecdh')\n\nvar publicEncrypt = require('public-encrypt')\n\nexports.publicEncrypt = publicEncrypt.publicEncrypt\nexports.privateEncrypt = publicEncrypt.privateEncrypt\nexports.publicDecrypt = publicEncrypt.publicDecrypt\nexports.privateDecrypt = publicEncrypt.privateDecrypt\n\n// the least I can do is make error messages for the rest of the node.js/crypto api.\n// ;[\n//   'createCredentials'\n// ].forEach(function (name) {\n//   exports[name] = function () {\n//     throw new Error([\n//       'sorry, ' + name + ' is not implemented yet',\n//       'we accept pull requests',\n//       'https://github.com/crypto-browserify/crypto-browserify'\n//     ].join('\\n'))\n//   }\n// })\n\nvar rf = require('randomfill')\n\nexports.randomFill = rf.randomFill\nexports.randomFillSync = rf.randomFillSync\n\nexports.createCredentials = function () {\n  throw new Error([\n    'sorry, createCredentials is not implemented yet',\n    'we accept pull requests',\n    'https://github.com/crypto-browserify/crypto-browserify'\n  ].join('\\n'))\n}\n\nexports.constants = {\n  'DH_CHECK_P_NOT_SAFE_PRIME': 2,\n  'DH_CHECK_P_NOT_PRIME': 1,\n  'DH_UNABLE_TO_CHECK_GENERATOR': 4,\n  'DH_NOT_SUITABLE_GENERATOR': 8,\n  'NPN_ENABLED': 1,\n  'ALPN_ENABLED': 1,\n  'RSA_PKCS1_PADDING': 1,\n  'RSA_SSLV23_PADDING': 2,\n  'RSA_NO_PADDING': 3,\n  'RSA_PKCS1_OAEP_PADDING': 4,\n  'RSA_X931_PADDING': 5,\n  'RSA_PKCS1_PSS_PADDING': 6,\n  'POINT_CONVERSION_COMPRESSED': 2,\n  'POINT_CONVERSION_UNCOMPRESSED': 4,\n  'POINT_CONVERSION_HYBRID': 6\n}\n"],"sourceRoot":""}