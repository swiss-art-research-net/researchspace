{"version":3,"sources":["webpack:///./src/main/web/components/3-rd-party/ontodia/authoring/FieldConfigurationCommon.ts"],"names":["assertFieldConfigurationItem","item","configure","Error","isObjectProperty","field","metadata","isImageField","imageField","iri","isForceField","datatypeFields","has","xsdDatatype","xsd","anyURI","equals"],"mappings":"iIAuBA,aAgDA,wCAAgBA,6BAA6BC,GAC3C,GAA8B,mBAAnBA,EAAKC,UACd,MAAM,IAAIC,MAAM,qCAIpB,4BAAgBC,iBAAiBC,EAA8BC,GAC7D,IAAMC,EAAeD,EAASE,YAAcF,EAASE,WAAWC,MAAQJ,EAAMI,IACxEC,EAAeJ,EAASK,eAAeC,IAAIP,EAAMI,KACvD,OAAQF,IAAiBG,KAAkBL,EAAMQ,aAAe,EAAAC,IAAIC,OAAOC,OAAOX,EAAMQ","file":"default~diagram-search-result~ontodia~ontodia-entity-metadata~ontodia-field-input-override~rs-ontodi~de3f880a-599887d965046d53298d.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { ReactNode } from 'react';\nimport { ElementTypeIri, CancellationToken } from 'ontodia';\n\nimport { Rdf } from 'platform/api/rdf';\nimport { xsd } from 'platform/api/rdf/vocabularies';\n\nimport * as Forms from 'platform/components/forms';\n\nimport { FormBasedPersistenceProps } from './FormBasedPersistence';\n\nexport interface FieldConfiguration {\n  readonly authoringMode: boolean;\n  readonly enforceConstraints: boolean;\n  readonly metadata: Map<ElementTypeIri, EntityMetadata> | undefined;\n  readonly persistence: OntodiaPersistenceMode | undefined;\n  readonly allFields: ReadonlyArray<Forms.FieldDefinition>;\n  readonly datatypeFields: ReadonlyMap<string, Forms.FieldDefinition>;\n  readonly inputOverrides: ReadonlyArray<Forms.InputOverride>;\n}\n\nexport type OntodiaPersistenceMode = FormBasedPersistenceProps;\n\nexport interface FieldConfigurationItem {\n  getRequiredFields?(props: any, ct: CancellationToken): Promise<ReadonlyArray<Rdf.Iri>>;\n  configure(props: any, context: FieldConfigurationContext): Promise<void>;\n}\n\nexport interface FieldConfigurationContext {\n  readonly fieldByIri: Immutable.Map<string, Forms.FieldDefinition>;\n  readonly typeIri: string;\n  readonly datatypeFields: ReadonlyArray<string>;\n  readonly defaultLabelIri?: string;\n  readonly defaultImageIri?: string;\n  readonly defaultSubjectTemplate?: string;\n\n  readonly cancellationToken: CancellationToken;\n  readonly collectedMetadata: Map<ElementTypeIri, EntityMetadata>;\n  readonly collectedInputOverrides: Forms.InputOverride[];\n}\n\nexport interface EntityMetadata {\n  readonly entityType: ElementTypeIri;\n  readonly fields: ReadonlyArray<Forms.FieldDefinition>;\n  readonly fieldByIri: Immutable.Map<string, Forms.FieldDefinition>;\n  readonly datatypeFields: Immutable.Set<string>;\n  readonly typeField: Forms.FieldDefinition;\n  readonly labelField: Forms.FieldDefinition;\n  readonly imageField?: Forms.FieldDefinition;\n  readonly newSubjectTemplate: string;\n  readonly formChildren: ReactNode;\n}\n\nexport function assertFieldConfigurationItem(item: FieldConfigurationItem) {\n  if (typeof item.configure !== 'function') {\n    throw new Error('Invalid field configuration item');\n  }\n}\n\nexport function isObjectProperty(field: Forms.FieldDefinition, metadata: EntityMetadata) {\n  const isImageField = metadata.imageField && metadata.imageField.iri === field.iri;\n  const isForceField = metadata.datatypeFields.has(field.iri);\n  return !isImageField && !isForceField && (!field.xsdDatatype || xsd.anyURI.equals(field.xsdDatatype));\n}\n"],"sourceRoot":""}