{"version":3,"sources":["webpack:///./src/main/web/components/semantic/tree/SemanticTree.ts","webpack:///./src/main/web/components/semantic/tree/Tree.ts","webpack:///./src/main/web/components/semantic/tree/D3Tree.tsx"],"names":["props","context","cancellation","Cancellation","querying","derive","processSparqlResult","res","SparqlUtil","isSelectResultEmpty","setState","data","isLoading","nodeBindingName","parentBindingName","graph","transformBindingsToGraph","params","bindings","map","Map","nodes","edges","binding","key","value","parent","undefined","existing","get","_","isEmpty","node","children","Set","set","push","child","childNode","parentNode","synthesizeParentNode","add","results","breakGraphCycles","roots","notFound","makeImmutableForest","length","notFoundRoots","root","join","errorMessage","maybe","Just","onNodeClick","state","Nothing","componentDidMount","this","loadData","componentWillReceiveProps","query","componentWillUnmount","cancelAll","semanticContext","deriveAndCancel","loading","SparqlClient","select","onError","onValue","onEnd","id","trigger","eventType","BuiltInEvents","ComponentLoaded","source","ComponentLoading","render","isJust","createElement","ErrorNotification","Spinner","renderTree","TemplateItem","template","noResultTemplate","providerProps","tupleTemplate","handleDeprecatedLayout","nodeData","nodeKey","collapsed","keysOpened","provider","d3TreeOptions","D3Tree","options","console","warn","D","div","Tree","findRoots","findExpectedRoots","expectedRoots","rootKey","has","defaultProps","Component","Rdf","iri","Array","from","makeImmutableNode","SemanticTree","collectOpenKeys","reduce","collectedKeys","nodeHasChildren","hasNestedOpenedKey","concat","getNodeKey","getAllKeys","all","current","handleClick","e","activeNode","handleCollapsibleClick","i","collapsedBookkeeping","getTrees","renderNode","nodeLabelTemplate","hasChildren","isUndefined","isCollapsed","renderedNode","span","className","getCssClassesForNode","onClick","bind","ReactTreeView","nodeLabel","isActive","base","styles","treeNode","leafNode","classnames","includes","n","Math","random","toString","slice","tree","componentWillMount","bookkeeping","keys","forEach","k","D3Bundle","onUnmount","treeRendered","unmounted","onMount","tryRenderTree","openedKeys","ref","loadD3","Promise","then","d3","sankey","scale","handler","drawTree","target","renderData","createRenderer","redraw","selectAll","remove","minHeight","nodeWidth","nodeHeight","nodeLeftMargin","selector","width","clientWidth","marginTop","marginBottom","componentContext","window","addEventListener","removeEventListener","convertDataToD3Dendrogram","config","index","array","dendrogram","margin","computeDendrogramMargin","opts","computeEffectiveWidth","left","right","height","computeEffectiveHeight","top","bottom","radius","svg","append","attr","cluster","layout","size","links","diagonal","projection","d","y","x","enter","appendDendrogramNode","collapsibleDendrogram","toggleExpanded","update","onDoubleClick","nodeWidthWithMargin","setFixedNodeDepth","depth","computeLayout","rootGroup","on","x0","y0","collapse","expandKeys","shouldExpand","name","_children","transition","duration","nodeEnter","style","nodeUpdate","nodeExit","exit","linkPath","insert","o","convertDataToD3Sankey","indices","traverse","item","label","nodePadding","color","scaleOrdinal","schemeCategory10","sankeyLinkHorizontal","max","text","x1","y1","createTemplateAsForeignObject","Error","selection","delete","estimateTotalWidth","maxChildWidth","estimateTotalHeight","childrenHeight","document","createElementNS","setAttribute","String","ReactDOM","NodeCell","getChildContext","childContext","hasOwnProperty","childContextTypes","ContextTypes"],"mappings":"6IAmBA,QACA,OACA,QACA,QAEA,QACA,SACA,QACA,QACA,QAEA,UACA,SACA,SACA,SAEA,UACA,UAgIA,cAaE,sBAAYA,EAAcC,GAA1B,MACE,YAAMD,EAAOC,IAAQ,K,OAJN,EAAAC,aAAe,IAAI,EAAAC,aAC5B,EAAAC,SAAW,EAAKF,aAAaG,SAsF7B,EAAAC,oBAAsB,SAACC,GAC7B,GAAI,EAAAC,WAAWC,oBAAoBF,GACjC,EAAKG,SAAS,CAAEC,KAAM,GAAIC,WAAW,QADvC,CAKM,cAAEC,EAAA,EAAAA,gBAAiBC,EAAA,EAAAA,kBAGnBC,EA4DV,SAASC,yBAAyBC,GAYhC,IAPQ,IAAAC,EAAA,EAAAA,SAAUL,EAAA,EAAAA,gBAAiBC,EAAA,EAAAA,kBAE7BK,EAAM,IAAIC,IACVC,EAAuB,GACvBC,EAAkD,GAGlC,MAAAJ,EAAA,eAAU,CAA3B,IAAMK,EAAO,KACVC,EAAMD,EAAQV,GAAiBY,MAC/BC,EAASH,EAAQT,GAAqBS,EAAQT,GAAmBW,WAAQE,EAEzEC,EAAWT,EAAIU,IAAIL,GACzB,GAAKI,EAIME,EAAEC,QAAQH,EAASjB,QAC5BiB,EAASjB,KAAOY,OALH,CACb,IAAMS,EAAoB,CAAER,IAAG,EAAEb,KAAMY,EAASU,SAAU,IAAIC,KAC9Df,EAAIgB,IAAIX,EAAKQ,GACbX,EAAMe,KAAKJ,GAKS,iBAAXN,GACTJ,EAAMc,KAAK,CAAEV,OAAM,EAAEW,MAAOb,IAKhC,IAAgC,UAAAF,EAAA,eAAO,CAA5B,WAAUe,GAARX,EAAA,EAAAA,OAAQ,EAAAW,OACbC,EAAYnB,EAAIU,IAAIQ,GACtBE,EAAapB,EAAIU,IAAIH,GACpBa,IACHA,EAAaC,qBAAqBd,EAAQb,GAC1CM,EAAIgB,IAAIT,EAAQa,GAChBlB,EAAMe,KAAKG,IAEbA,EAAWN,SAASQ,IAAIH,GAG1B,MAAO,CAAEnB,IAAG,EAAEE,MAAK,GAtGHL,CAAyB,CACrCE,SAAUX,EAAImC,QAAQxB,SACtBL,gBAAe,EACfC,kBAAiB,IAGnB,EAAA6B,iBAAiB5B,EAAMM,OACjB,qBAAEuB,EAAA,EAAAA,MAAOC,EAAA,EAAAA,SACTlC,EAAOmC,oBAAoBF,GAEjC,GAAwB,IAApBC,EAASE,OACX,EAAKrC,SAAS,CAAEC,KAAI,EAAEC,WAAW,QAC5B,CACL,IAAMoC,EAAgBH,EAAS1B,KAAI,SAAC8B,GAAS,UAAIA,EAAI,OAAKC,KAAK,MAC/D,EAAKxC,SAAS,CACZC,KAAI,EACJC,WAAW,EACXuC,aAAcC,EAAMC,KAAK,6BAA6BL,QAepD,EAAAM,YAAc,SAACtB,KA3HrB,EAAKuB,MAAQ,CACX3C,WAAW,EACXuC,aAAcC,EAAMI,W,EAoI1B,OArJkC,4BAqBzB,uBAAAC,kBAAP,WACEC,KAAKC,SAASD,KAAK1D,QAGd,uBAAA4D,0BAAP,SAAiC5D,GAC3BA,EAAM6D,QAAUH,KAAK1D,MAAM6D,OAC7BH,KAAKC,SAAS3D,IAIX,uBAAA8D,qBAAP,WACEJ,KAAKxD,aAAa6D,aAGZ,uBAAAJ,SAAR,SAAiB3D,GAAjB,WACQC,EAAUyD,KAAKzD,QAAQ+D,gBAC7BN,KAAKtD,SAAWsD,KAAKxD,aAAa+D,gBAAgBP,KAAKtD,UACvD,IAAM8D,EACJR,KAAKtD,SAASe,IACZ,EAAAgD,aAAaC,OAAOpE,EAAM6D,MAAO,CAAE5D,QAAO,KAE3CoE,SAAQ,SAAClB,GAAiB,SAAKzC,SAAS,CAAEE,WAAW,EAAOuC,aAAcC,EAAMC,KAAKF,QACrFmB,QAAQZ,KAAKpD,qBACbiE,OAAM,WACD,EAAKvE,MAAMwE,IACb,EAAAC,QAAQ,CAAEC,UAAW,EAAAC,cAAcC,gBAAiBC,OAAQ7E,EAAMwE,QAIpExE,EAAMwE,IACR,EAAAC,QAAQ,CACNC,UAAW,EAAAC,cAAcG,iBACzBD,OAAQnB,KAAK1D,MAAMwE,GACnB7D,KAAMuD,KAKL,uBAAAa,OAAP,WACE,OAAIrB,KAAKH,MAAMJ,aAAa6B,OACnB,EAAAC,cAAc,EAAAC,kBAAmB,CAAE/B,aAAcO,KAAKH,MAAMJ,aAAatB,QAE3E6B,KAAKH,MAAM3C,UAAY,EAAAqE,cAAc,EAAAE,SAAWzB,KAAK0B,cAGtD,uBAAAA,WAAR,WACU,IAAAzE,EAAA,WAAAA,KACR,GAAoB,IAAhBA,EAAKoC,OACP,OAAO,EAAAkC,cAAc,EAAAI,aAAc,CAAEC,SAAU,CAAET,OAAQnB,KAAK1D,MAAMuF,oBAGtE,IAAMC,EAA+B,CACnCC,cAAe/B,KAAKgC,yBACpBpC,YAAaI,KAAKJ,YAClBqC,SAAUhF,EACViF,QAAS,MACTC,UAAWnC,KAAK1D,MAAM6F,UACtBC,WAAYpC,KAAK1D,MAAM8F,YAGnB,aAAEC,EAAA,EAAAA,SAAUC,EAAA,EAAAA,cAGlB,MAFkC,cAAbD,GAAyC,kBAAbA,GAA6C,wBAAbA,EAGxE,EAAAd,cAAc,EAAAgB,OAAQ,EAAF,uBACtBT,GAAa,CAChBO,SAAUA,EACVG,QAASF,MAEkB,iBAAbD,GAAsC,SAAbA,GACzCI,QAAQC,KAAK,mCAAmCL,EAAQ,KAGnDM,EAAEC,IAAI,GAAI,EAAArB,cAAc,EAAAsB,KAAMf,MAkC/B,uBAAAgB,UAAR,SAAkBzF,GAChB,OAAIe,EAAEC,QAAQ2B,KAAK1D,MAAM4C,OAEhB,CAAEA,MADK,EAAA4D,UAAUzF,EAAMM,OACdwB,SAAU,IAwFhC,SAAS4D,kBAAkB,EAAuBC,GAGhD,I,IAH2BvF,EAAA,EAAAA,IACrByB,EAAQ,IAAIV,IACZW,EAAqB,GACL,MAAA6D,EAAA,eAAe,CAAhC,IAAMC,EAAO,KACV1D,EAAO9B,EAAIU,IAAI8E,GACjB1D,EACFL,EAAMH,IAAIQ,GAEVJ,EAAST,KAAKuE,GAGlB,MAAO,CAAE/D,MAAK,EAAEC,SAAQ,GAhGb4D,CAAkB1F,EAAO2C,KAAK1D,MAAM4C,QAQvC,uBAAA8C,uBAAR,WACE,OAAI5D,EAAE8E,IAAIlD,KAAK1D,MAAO,WACpBmG,QAAQC,KAAK,sFACN1C,KAAK1D,MAAc,OAAiB,eAEtC0D,KAAK1D,MAAMyF,eAlJJ,aAAAoB,aAA+B,CAC7Cd,SAAU,OACVjF,kBAAmB,SACnBD,gBAAiB,OACjB+B,MAAO,GACPkD,WAAY,GACZL,cAAe,wDA8InB,aArJA,CAAkC,EAAAqB,WAmNlC,SAAStE,qBAAqBhB,EAAaX,G,MACzC,MAAO,CACLW,IAAG,EACHb,MAAI,KAAI,EAACE,GAAkB,EAAAkG,IAAIC,IAAIxF,GAAI,GACvCS,SAAU,IAAIC,KAkBlB,SAASY,oBAAoBzB,GAC3B,OAAO4F,MAAMC,KAAK7F,EAAO8F,mBAG3B,SAASA,kBAAkBnF,GACzB,MAAO,CACLR,IAAKQ,EAAKR,IACVb,KAAMqB,EAAKrB,KACXsB,SAAUa,oBAAoBd,EAAKC,WAjP1B,EAAAmF,eAqPb,UAAeA,G,kFCtYf,OACA,QACA,QACA,UACA,OAEA,SAIA,QACA,cAaA,cAEE,cAAYpH,EAAkBC,GAA9B,MACE,YAAMD,EAAOC,IAAQ,K,OAgCf,EAAAoH,gBAAkB,SAAChG,GACzB,OAAOS,EAAEwF,OACPjG,GACA,SAACkG,EAAevF,GACd,OAAI,EAAKwF,gBAAgBxF,IAAS,EAAKyF,mBAAmBzF,GACjDuF,EAAcG,OAAO,EAAKL,gBAAgBrF,EAAKC,UAAUyF,OAAO,CAAC,EAAKC,WAAW3F,MAEnFuF,IAET,KAII,EAAAI,WAAa,SAAC3F,GACpB,OAAOA,EAAK,EAAKhC,MAAM4F,UAGjB,EAAAgC,WAAa,SAAC5F,GACpB,OAAKA,EAAe,SAGbF,EAAEwF,OAAOtF,EAAe,UAAG,SAAC6F,EAAKC,GAAY,OAAAD,EAAIH,OAAO,EAAKE,WAAWE,MAAW,CACxF9F,EAAK,EAAKhC,MAAM4F,WAHT,CAAC,EAAK+B,WAAW3F,KAOpB,EAAA+F,YAAc,SAAC/F,EAAWgG,GAC5B,EAAKhI,MAAMsD,aACb,EAAKtD,MAAMsD,YAAYtB,GAEzB,EAAKtB,SAAS,CACZuH,WAAYjG,KAIR,EAAAkG,uBAAyB,SAACC,GAChC,EAAKzH,UAAS,SAAC6C,GACb,IAAM6E,EAAuB,EAAK7E,MAAM6E,qBAExC,OADAA,EAAqBD,IAAMC,EAAqBD,GACzC,CAAEC,qBAAsBA,OAI3B,EAAAC,SAAW,SAAC1H,GAClB,OAAOA,EAAKQ,KAAI,SAACa,EAAMmG,GAAc,SAAKG,WAAWtG,EAAMmG,OAGrD,EAAAG,WAAa,SAACtG,EAAWmG,GAC/B,IAAMI,EAAoB,EAAAtD,cAAc,EAAAI,aAAc,CACpDC,SAAU,CACRT,OAAQ,EAAK7E,MAAMyF,cACnBS,QAAS,EAAF,uBAAOlE,GAASA,EAAKrB,SAG1B6H,EAAc,EAAKhB,gBAAgBxF,GAEnC4D,EAAU9D,EAAE2G,YAAY,EAAKzI,MAAM4F,SAAWuC,EAAInG,EAAK,EAAKhC,MAAM4F,SAClE3D,EAAWuG,IAAgB,EAAKE,YAAY9C,EAAS5D,GAAQ,EAAKqG,SAASrG,EAAe,UAAK,KAE/F0G,EAAc,EAAKA,YAAY9C,EAAS5D,GACxC2G,EAAetC,EAAEuC,KACrB,CACEpH,IAAK,EAAKA,IAAMoE,EAAUuC,EAC1BU,UAAW,EAAKC,qBAAqB7G,EAAU,EAAKsB,MAAM0E,aAAejG,GACzE+G,QAAS,EAAKhB,YAAYiB,KAAK,KAAMhH,IAEvCuG,GAGF,OAAOC,EACH,EAAAvD,cACEgE,EACA,CACEzH,IAAKoE,EAAU8C,EACfQ,UAAWP,EACX9C,UAAW6C,EACXK,QAAS,EAAKb,uBAAuBc,KAAK,KAAMpD,IAElD3D,GAEF0G,GAGE,EAAAnB,gBAAkB,SAACxF,GACzB,OAAQF,EAAE2G,YAAYzG,EAAe,YAAOF,EAAEC,QAAQC,EAAe,WAG/D,EAAA8G,qBAAuB,SAACN,EAAsBW,GACpD,IAAMC,EAAOZ,EAAca,EAAOC,SAAWD,EAAOE,SACpD,OAAOJ,EAAWK,EAAW,CAACJ,EAAMC,EAAOpB,aAAemB,GAGpD,EAAAV,YAAc,SAACP,EAAQnG,GAM7B,OAAO,EAAKuB,MAAM6E,qBAAqBD,IAGjC,EAAAV,mBAAqB,SAACzF,GAC5B,GAAIF,EAAE2H,SAAS,EAAKzJ,MAAM8F,WAAY,EAAK6B,WAAW3F,IACpD,OAAO,EAET,GAAIF,EAAE2G,YAAYzG,EAAe,UAC/B,OAAO,EAET,IAAK,IAAM0H,KAAK1H,EAAe,SAC7B,GAAI,EAAKyF,mBAAmBzF,EAAe,SAAE0H,IAC3C,OAAO,EAGX,OAAO,GAhJP,EAAKlI,IAAMmI,KAAKC,SAASC,SAAS,IAAIC,MAAM,GAC5C,EAAKvG,MAAQ,CACX6E,qBAAsB,I,EAgJ5B,OAtJ0B,oBAUjB,eAAArD,OAAP,WAEE,OAAOsB,EAAEC,IAAI,CAAEuC,UAAWQ,EAAOU,MAAQrG,KAAK2E,SAAS3E,KAAK1D,MAAM2F,YAG7D,eAAAqE,mBAAP,sBACQC,EAAoC,GAEpCC,EAAOpI,EAAEwF,OAAO5D,KAAK1D,MAAM2F,UAAU,SAACkC,EAAKC,GAAY,OAAAD,EAAIH,OAAO,EAAKE,WAAWE,MAAW,IAEnGhG,EAAEqI,QAAQD,GAAM,SAACE,GACfH,EAAYG,GAAK,EAAKpK,MAAM6F,aAK1BnC,KAAK1D,MAAM6F,WACb/D,EAAEqI,QAAQzG,KAAK2D,gBAAgB3D,KAAK1D,MAAM2F,WAAW,SAACyE,GACpDH,EAAYG,IAAK,KAIrB1G,KAAKhD,SAAS,CAAE0H,qBAAsB6B,KAsH1C,KAtJA,CAA0B,EAAAnD,WAAb,EAAAP,OAwJb,UAAeA,G,0ECnIX8D,E,QA9CJ,OACA,QAGA,QAGA,SAIA,UA0CA,kBAWE,gBAAYrK,EAAoBC,GAAhC,MACE,YAAMD,EAAOC,IAAQ,K,OALf,EAAAqK,UAA+B,GAC/B,EAAAC,cAAe,EACf,EAAAC,WAAY,EA6BZ,EAAAC,QAAU,SAACxH,GACjB,EAAKA,KAAOA,EACZ,EAAKyH,iBA3BL,EAAKC,WAAa,IAAIzI,IAAIlC,EAAM8F,Y,EA6GpC,OA1H4B,sBAgB1B,iBAAAf,OAAA,WACE,OAAO,uBAAK8D,UAAWQ,EAAOpG,KAAM2H,IAAKlH,KAAK+G,WAGhD,iBAAAhH,kBAAA,sBACO4G,GA3BT,SAASQ,SACP,OAAOC,QAAQjD,IAAI,CAAC,QAAD,oCAAQ,SAAI,4CAAU,SAAW,4CAAU,WAAckD,MAAK,SAAC,G,IAACC,EAAA,KAAIC,EAAA,KAAQC,EAAA,KAC7Fb,EAAW,EAAH,kCAAQW,GAAOC,GAAWC,MA0BhCL,GAASE,MAAK,WACP,EAAKP,WACR,EAAKE,oBAMb,iBAAA5G,qBAAA,WACE,IAAsB,UAAAJ,KAAK4G,UAAL,eAAgB,EACpCa,EADgB,QAGlBzH,KAAK4G,UAAUvH,OAAS,EACxBW,KAAK8G,WAAY,GAQX,iBAAAE,cAAR,WACMhH,KAAK6G,cAGLF,GAAY3G,KAAKT,MACnBS,KAAK0H,SAASf,EAAU3G,KAAKT,OAIzB,iBAAAmI,SAAR,SAAiBJ,EAASK,GAA1B,WACQC,EAAa5H,KAAK6H,eAAeP,GAEjCQ,OAAS,WACbR,EAAG5G,OAAOiH,GAAQI,UAAU,OAAOC,SAE7B,sBAAE,IAAAC,iBAAA,IAAY,EAAZ,MAAiB,IAAAC,iBAAA,IAAY,EAAZ,MAAiB,IAAAC,kBAAA,IAAa,EAAb,KAAiB,IAAAC,sBAAA,IAAiB,EAAjB,IAE3DR,EAAW,CACTS,SAAUV,EACVrL,MAAO,EAAKA,MACZ2K,WAAY,EAAKA,WACjBqB,MAAOX,EAAOY,YACdC,UAAW,EACXC,aAAc,EACdR,UAAS,EACTC,UAAS,EACTC,WAAU,EACVC,eAAc,EACdM,iBAAkB,EAAKnM,WAI3BoM,OAAOC,iBAAiB,SAAUd,QAClC9H,KAAK4G,UAAUlI,MAAK,WAClBiK,OAAOE,oBAAoB,SAAUf,QACrCR,EAAG5G,OAAOiH,GAAQjH,OAAO,OAAOsH,YAGlCF,UAGM,iBAAAD,eAAR,SAAuBP,GACf,iBAAEjF,EAAA,EAAAA,SAAUJ,EAAA,EAAAA,SAClB,GAAiB,kBAAbI,EAA8B,CAChC,IAAM,EAAiBJ,EAASxE,IAAIqL,2BACpC,OAAO,SAACC,GACN,EAAetC,SAAQ,SAACxJ,EAAM+L,EAAOC,GACnC,OA6GV,SAASC,WAAW5B,EAASjB,EAAsB0C,GACjD,IAAMI,EAASC,wBAAwBL,GACjCM,EAAO,CACXf,MAAOgB,sBAAsBjD,EAAM0C,EAAQI,EAAOI,KAAOJ,EAAOK,OAChEC,OAAQC,uBAAuBrD,EAAM0C,EAAQI,EAAOQ,IAAMR,EAAOS,QACjEC,OAAQ,EACRxB,SAAUU,EAAOV,UAAY,MAGzByB,EAAMxC,EACT5G,OAAOqI,EAAOV,UACd0B,OAAO,OACPC,KAAK,QAASX,EAAKf,OACnB0B,KAAK,SAAUX,EAAKI,QACpBM,OAAO,KACPC,KAAK,YAAa,aAAeb,EAAOI,KAAO,IAAMJ,EAAOQ,IAAM,KAE/DM,EAAU3C,EAAG4C,OAChBD,UACAE,KAAK,CAACd,EAAKI,OAASN,EAAOQ,IAAMR,EAAOS,OAAQP,EAAKf,MAAQa,EAAOI,KAAOJ,EAAOK,QAC/E7L,EAAQsM,EAAQtM,MAAM0I,GACtB+D,EAAQH,EAAQG,MAAMzM,GAEtB0M,EAAW/C,EAAGwC,IAAIO,WAAWC,YAAW,SAACC,GAAM,OAACA,EAAEC,EAAGD,EAAEE,MAE7DX,EAAI/B,UAAU,SAAS9K,KAAKmN,GAAOM,QAAQX,OAAO,QAAQC,KAAK,QAAS,QAAQA,KAAK,IAAKK,GAE1F,IAAM/L,EAAOwL,EACV/B,UAAU,SACV9K,KAAKU,GACL+M,QACAX,OAAO,KACPC,KAAK,QAAS,QACdA,KAAK,aAAa,SAACO,GAAM,mBAAeA,EAAEC,EAAI,IAAMD,EAAEE,EAAI,OAC7DnM,EAAKyL,OAAO,UAAUC,KAAK,QAAS,eAAeA,KAAK,IAAKX,EAAKQ,QAClEc,qBAAqBrM,EAAMyK,GAhJnBG,CAAW5B,EAAIrK,EAAM,EAAF,uBACd8L,GAAM,CACTd,UAAWc,EAAOd,UAAYgB,EAAM5J,OACpCmJ,UAAqB,IAAVQ,EAAc,GAAK,EAC9BP,aAAcO,IAAUC,EAAM5J,OAAS,EAAI,GAAK,SAIjD,GAAiB,wBAAbgD,EAAoC,CAC7C,IAAM,EAAiBJ,EAASxE,IAAIqL,2BACpC,OAAO,SAACC,GACN,EAAetC,SAAQ,SAACxJ,EAAM+L,EAAOC,GACnC,OA+IV,SAAS2B,sBAAsBtD,EAASjB,EAAsB0C,GAC5D,SAAS1D,QAAQkF,GACfM,eAAeN,EAAGxB,EAAO9B,YACzB6D,OAAOP,GAGT,SAASQ,cAAcR,GACjBA,EAAEvM,SACJ6M,eAAeN,EAAEvM,OAAQ+K,EAAO9B,YAChC6D,OAAOP,EAAEvM,SAIb,IAAMgN,EAAsBjC,EAAOX,eAAiBW,EAAOb,UAC3D,SAAS+C,kBAAkBtN,GACzBA,EAAM8I,SAAQ,SAAC8D,GACbA,EAAEC,EAAID,EAAEW,MAAQF,KAIpB,IAAM7B,EAASC,wBAAwBL,GACjCM,EAAO,CACXQ,OAAQ,EACRxB,SAAUU,EAAOV,UAGnB,SAAS8C,gBACP,IAAMhB,EAAO,CACX7B,MAAOgB,sBAAsBjD,EAAM0C,EAAQI,EAAOI,KAAOJ,EAAOK,OAChEC,OAAQC,uBAAuBrD,EAAM0C,EAAQI,EAAOQ,IAAMR,EAAOS,SAE7DK,EAAU3C,EAAG4C,OAChBD,UACAE,KAAK,CAACA,EAAKV,OAASN,EAAOQ,IAAMR,EAAOS,OAAQO,EAAK7B,MAAQa,EAAOI,KAAOJ,EAAOK,QAC/E7L,EAAQsM,EAAQtM,MAAM0I,GAE5B,MAAO,CAAE8D,KAAI,EAAExM,MAAK,EAAEyM,MADRH,EAAQG,MAAMzM,IAIxB,sBAAEwM,EAAA,EAAAA,KAAMxM,EAAA,EAAAA,MAAOyM,EAAA,EAAAA,MACrBa,kBAAkBtN,GAElB,IAAM0M,EAAW/C,EAAGwC,IAAIO,WAAWC,YAAW,SAACC,GAAM,OAACA,EAAEC,EAAGD,EAAEE,MACvDX,EAAMxC,EACT5G,OAAO2I,EAAKhB,SAAU,cACtB0B,OAAO,OACPC,KAAK,QAASG,EAAK7B,OACnB0B,KAAK,SAAUG,EAAKV,QACjB2B,EAAYtB,EAAIC,OAAO,KAAKC,KAAK,YAAa,aAAeb,EAAOI,KAAO,IAAMJ,EAAOQ,IAAM,KAGpGyB,EAAUrD,UAAU,SAAS9K,KAAKmN,GAAOM,QAAQX,OAAO,QAAQC,KAAK,QAAS,QAAQA,KAAK,IAAKK,GAEhG,IAAM/L,EAAO8M,EACVrD,UAAU,SACV9K,KAAKU,GACL+M,QACAX,OAAO,KACPC,KAAK,QAAS,QACdA,KAAK,aAAa,SAACO,GAAM,mBAAeA,EAAEC,EAAI,IAAMD,EAAEE,EAAI,OAC1DY,GAAG,QAAShG,SAEf/G,EACGyL,OAAO,UACPC,KAAK,QAAS,eACdA,KAAK,KAAK,SAACO,GAAM,OAAqB,GAApB,EAAIA,EAAExM,MAAQ,KAAWsL,EAAKQ,UAEnDc,qBAAqBrM,EAAMyK,GAE3B,IAAMxJ,EAAO8G,EACb9G,EAAK+L,GAAKnB,EAAKV,OAAS,EACxBlK,EAAKgM,GAAK,EAENxC,EAAOzM,MAAM6F,YACfqJ,SAASjM,GA0Hb,SAASkM,WAAWnN,EAAsBkI,GACxC,IAAIkF,EAAelF,EAAKtD,IAAI5E,EAAKqN,MAGjC,GADqBrN,EAAKC,UAAYD,EAAKsN,UAEzC,IAAoB,UAAAtN,EAAKC,UAAYD,EAAKsN,UAAtB,eAAiC,CAAhD,IAAMjN,EAAK,KACV8M,WAAW9M,EAAO6H,KACpBkF,GAAe,GAKjBA,IAAiBpN,EAAKC,UACxBsM,eAAevM,GAGjB,OAAOoN,EAzILD,CAAWlM,EAAMwJ,EAAO9B,aAK1B,SAAS6D,OAAO3J,GACd,IAGM+I,EAASiB,gBAEfF,kBAAkBf,EAAOvM,OACzBmM,EAAI+B,aAAaC,SANA,KAMmB9B,KAAK,QAASE,EAAOC,KAAK7B,OAAO0B,KAAK,SAAUE,EAAOC,KAAKV,QAGhG,IAAIhF,EAAI,EACFnG,EAAO8M,EAAUrD,UAAU,UAAU9K,KAAKiN,EAAOvM,OAAO,SAAC4M,GAC7D,OAAOA,EAAEzJ,KAAOyJ,EAAEzJ,KAAO2D,MAIrBsH,EAAYzN,EACfoM,QACAX,OAAO,KACPC,KAAK,QAAS,QACdA,KAAK,aAAa,SAACO,GAAM,mBAAepJ,EAAOoK,GAAK,IAAMpK,EAAOmK,GAAK,OACtED,GAAG,QAAShG,SACZgG,GAAG,WAAYN,eAElBgB,EACGhC,OAAO,UACPC,KAAK,SAAS,SAACO,GAAM,OAACA,EAAEqB,UAAY,uBAAyB,iBAC7D5B,KAAK,KAAK,SAACO,GAAM,OAAqB,GAApB,EAAIA,EAAExM,MAAQ,KAAWsL,EAAKQ,UACnDc,qBAAqBoB,EAAWhD,GAAQiD,MAAM,eAAgB,MAG9D,IAAMC,EAAa3N,EAChBuN,aACAC,SAhCc,KAiCd9B,KAAK,aAAa,SAACO,GAAM,mBAAeA,EAAEC,EAAI,IAAMD,EAAEE,EAAI,OAC7DwB,EACGvL,OAAO,UACPsJ,KAAK,SAAS,SAACO,GAAM,OAACA,EAAEqB,UAAY,uBAAyB,iBAC7D5B,KAAK,KAAK,SAACO,GAAM,OAAqB,GAApB,EAAIA,EAAExM,MAAQ,KAAWsL,EAAKQ,UACnDoC,EAAWvL,OAAO,QAAQsJ,KAAK,OAAQ,aAAagC,MAAM,eAAgB,GAG1E,IAAME,EAAW5N,EACd6N,OACAN,aACAC,SA5Cc,KA6Cd9B,KAAK,aAAa,SAACO,GAAM,mBAAepJ,EAAOqJ,EAAI,IAAMrJ,EAAOsJ,EAAI,OACpEzC,SACHkE,EACGxL,OAAO,UACPsJ,KAAK,QAAS,eACdA,KAAK,KAAK,SAACO,GAAM,OAAqB,GAApB,EAAIA,EAAExM,MAAQ,KAAWsL,EAAKQ,UACnDqC,EAASxL,OAAO,QAAQsJ,KAAK,OAAQ,aAAagC,MAAM,eAAgB,MAGxE,IAAMI,EAAWhB,EAAUrD,UAAU,aAAa9K,KAAKiN,EAAOE,OAAO,SAACG,GAAM,OAAAA,EAAE5C,OAAO7G,MAGrFsL,EACG1B,QACA2B,OAAO,OAAQ,KACfrC,KAAK,QAAS,QACdA,KAAK,KAAK,SAACO,GACV,IAAM+B,EAAI,CAAE7B,EAAGtJ,EAAOmK,GAAId,EAAGrJ,EAAOoK,IACpC,OAAOlB,EAAS,CAAElJ,OAAQmL,EAAG3E,OAAQ2E,OAIzCF,EAASP,aAAaC,SAnEL,KAmEwB9B,KAAK,IAAKK,GAGnD+B,EACGD,OACAN,aACAC,SAzEc,KA0Ed9B,KAAK,KAAK,SAACO,GACV,IAAM+B,EAAI,CAAE7B,EAAGtJ,EAAOsJ,EAAGD,EAAGrJ,EAAOqJ,GACnC,OAAOH,EAAS,CAAElJ,OAAQmL,EAAG3E,OAAQ2E,OAEtCtE,SAGHkC,EAAOvM,MAAM8I,SAAQ,SAAC8D,GACpBA,EAAEe,GAAKf,EAAEE,EACTF,EAAEgB,GAAKhB,EAAEC,KAtFbM,OAAOvL,GA7NCqL,CAAsBtD,EAAIrK,EAAM,EAAF,uBACzB8L,GAAM,CACTd,UAAWc,EAAOd,UAAYgB,EAAM5J,OACpCmJ,UAAqB,IAAVQ,EAAc,GAAK,EAC9BP,aAAcO,IAAUC,EAAM5J,OAAS,EAAI,GAAK,SAIjD,GAAiB,cAAbgD,EAA0B,CACnC,IAAM,EAoDZ,SAASkK,sBAAsBtP,GAC7B,IAAMU,EAAsB,GACtByM,EAAsB,GACtBoC,EAAqC,GACvCxD,EAAQ,EAENyD,SAAW,SAACC,GAEhB,GAAiC,iBAAtBF,EAAQE,EAAK5O,KAAxB,CAGAH,EAAMe,KAAK,CAAEZ,IAAK4O,EAAK5O,IAAKb,KAAMyP,EAAKzP,KAAM0P,MAAOD,EAAK5O,IAAK6N,KAAMe,EAAK5O,MACzE0O,EAAQE,EAAK5O,KAAOkL,IACpB,IAAoB,UAAA0D,EAAKnO,SAAWmO,EAAKnO,SAAW,GAAhC,eAAoC,CAAnD,IAAMI,EAAK,KACd8N,SAAS9N,GACTyL,EAAM1L,KAAK,CAAEyC,OAAQqL,EAAQE,EAAK5O,KAAM6J,OAAQ6E,EAAQ7N,EAAMb,UAKlE,OADAb,EAAKwJ,QAAQgG,UACN,CAAE9O,MAAK,EAAEyM,MAAK,GAxEEmC,CAAsBtK,GACzC,OAAO,SAAC8G,GACN,OA6YR,SAASxB,OAAOD,EAASjK,EAAmB0L,GAS1C,IARA,IAAMI,EAAS,CAAEQ,IAAKZ,EAAOP,UAAWoB,OAAQb,EAAON,aAAcc,KAAM,IAAKC,MAAO,KACjFH,EAAO,CACXf,MAAOS,EAAOT,MACdmB,OAAQV,EAAOU,QAAUV,EAAOd,UAChCI,SAAUU,EAAOV,UAGb+B,EAAQ/M,EAAM+M,MACX3F,EAAI,EAAGA,EAAI2F,EAAM/K,OAAQoF,IAChC2F,EAAM3F,GAAG1G,MAAQ,EAGJuJ,EACZC,SACAW,UAAU,IACV0E,YAAY,IACZzC,KAAK,CAACd,EAAKf,MAAQa,EAAOI,KAAOJ,EAAOK,MAAOH,EAAKI,OAASN,EAAOQ,IAAMR,EAAOS,QACpFrC,CAAOlK,GAEP,IAAMyM,EAAMxC,EACT5G,OAAO2I,EAAKhB,SAAU,UACtB0B,OAAO,OACPC,KAAK,QAASX,EAAKf,OACnB0B,KAAK,SAAUX,EAAKI,QACpBM,OAAO,KACPC,KAAK,YAAa,aAAeb,EAAOI,KAAO,IAAMJ,EAAOQ,IAAM,KAE/DkD,EAAQvF,EAAGwF,aAAaxF,EAAGyF,kBAEpBjD,EACVC,OAAO,KACPC,KAAK,QAAS,SACdjC,UAAU,QACV9K,KAAKI,EAAM+M,OACXM,QACAX,OAAO,QACPC,KAAK,IAAK1C,EAAG0F,wBACbhD,KAAK,gBAAgB,SAACO,GAAM,OAAAtE,KAAKgH,IAAI,EAAG1C,EAAEjC,UAExCyB,OAAO,SAASmD,MAAK,SAAC3C,GAAM,oBAEjC,IAAMjM,EAAOwL,EACVC,OAAO,KACPC,KAAK,QAAS,SACdjC,UAAU,KACV9K,KAAKI,EAAMM,OACX+M,QACAX,OAAO,KACPC,KAAK,QAAS,QAEjB1L,EACGyL,OAAO,QACPC,KAAK,KAAK,SAACO,GAAM,OAAAA,EAAEe,MACnBtB,KAAK,KAAK,SAACO,GAAM,OAAAA,EAAEgB,MACnBvB,KAAK,SAAS,SAACO,GAAM,OAAAA,EAAE4C,GAAK5C,EAAEe,MAC9BtB,KAAK,UAAU,SAACO,GAAM,OAAAA,EAAE6C,GAAK7C,EAAEgB,MAC/BvB,KAAK,QAAQ,SAACO,GAAM,OAAAsC,EAAMtC,EAAEoB,SAC5B3B,KAAK,UAAW,IAEnB1L,EACGyL,QAAO,SAACQ,GAAkB,OAAA8C,8BAA8BtE,EAAQwB,EAAEtN,SAClE+M,KAAK,QAAS,aACdA,KAAK,KAAK,SAACO,GAAM,OAAAA,EAAE4C,GAAK,KACxBnD,KAAK,KAAK,SAACO,GAAM,OAACA,EAAE6C,GAAK7C,EAAEgB,GAAKxC,EAAOZ,YAAc,KAExD7J,EAAKyL,OAAO,SAASmD,MAAK,SAAC3C,GAAM,oBA/c3BhD,CAAOD,EAAI,EAAY,EAAF,uBAChByB,GAAM,CACTP,UAAW,GACXC,aAAc,OAGlB,MAAM,IAAI6E,MAAM,6BAA6BjL,EAAQ,MAtHzC,OAAAc,aAAqC,CACnDX,QAAS,IAwHb,OA1HA,CAA4B,EAAAY,WAyI5B,SAAS0F,0BAA0BxK,GACjC,MAAO,CACLqN,KAAMrN,EAAKR,IACXb,KAAMqB,EAAKrB,KACXsB,SAAUD,EAAKC,SAAWD,EAAKC,SAASd,IAAIqL,2BAA6B,IAgG7E,SAAS6B,qBAAqB4C,EAAmCxE,GAC/D,OAAOwE,EACJxD,QAAO,SAACQ,GAAsB,OAAA8C,8BAA8BtE,EAAQwB,EAAEtN,SACtE+M,KAAK,QAAS,aACdA,KAAK,KAAK,SAACO,GAAM,OAAAxB,EAAOX,kBACxB4B,KAAK,KAAMjB,EAAOZ,WAAa,GA4KpC,SAASqD,SAASjB,GACZA,EAAEhM,WACJgM,EAAEqB,UAAYrB,EAAEhM,SAChBgM,EAAEhM,SAAW,KACbgM,EAAEqB,UAAUnF,QAAQ+E,WAIxB,SAASX,eAAevM,EAAsB2I,GACxC3I,EAAKC,UACPD,EAAKsN,UAAYtN,EAAKC,SACtBD,EAAKC,SAAW,KACZ0I,GACFA,EAAWuG,OAAOlP,EAAKqN,OAEhBrN,EAAKsN,YACdtN,EAAKC,SAAWD,EAAKsN,UACrBtN,EAAKsN,UAAY,KACb3E,GACFA,EAAWlI,IAAIT,EAAKqN,OA2B1B,SAASvC,wBAAwBL,GAC/B,MAAO,CACLY,IAAKZ,EAAOP,UACZoB,OAAQb,EAAON,aACfc,KAAMR,EAAOX,eAAiBW,EAAOb,UAAY,EACjDsB,MAAOT,EAAOX,eAAoC,EAAnBW,EAAOb,WAI1C,SAASoB,sBAAsBjD,EAAsB0C,EAAoBI,GACvE,IACMb,EAeR,SAASmF,mBAAmBnP,EAAsByK,GAChD,IAAIT,EAAQS,EAAOb,UACnB,GAAI5J,EAAKC,SAAU,CAEjB,IADA,IAAImP,EAAgB,EACA,MAAApP,EAAKC,SAAL,eAAe,CAA9B,IAAMI,EAAK,KACd+O,EAAgBzH,KAAKgH,IAAIS,EAAeD,mBAAmB9O,EAAOoK,IAEhE2E,EAAgB,IAClBpF,GAASS,EAAOX,eAAiBsF,GAGrC,OAAOpF,EA3BWmF,CAAmBpH,EAAM0C,GACjBI,EAC1B,OAAOlD,KAAKgH,IAAI3E,EAAOS,EAAOT,OAGhC,SAASoB,uBAAuBrD,EAAsB0C,EAAoBI,GACxE,IAAIM,EACyB,iBAAlBV,EAAOU,OAChBA,EAASV,EAAOU,OAGhBA,EAmBJ,SAASkE,oBAAoBrP,EAAsB6J,GACjD,IAAIyF,EAAiB,EACrB,GAAItP,EAAKC,SACP,IAAoB,UAAAD,EAAKC,SAAL,eAAe,CAA9B,IAAMI,EAAK,KACdiP,GAAkBD,oBAAoBhP,EAAOwJ,GAGjD,OAAOlC,KAAKgH,IAAIW,EAAgBzF,GA3BZwF,CAAoBtH,EAAM0C,EAAOZ,YAC9BgB,EAEvB,OAAOlD,KAAKgH,IAAIxD,EAAQV,EAAOd,WAgGjC,SAASoF,8BACPtE,EACA9L,GAEA,IAAMsC,EAAOsO,SAASC,gBAAgB,6BAA8B,iBAC5D5F,EAAA,EAAAA,UAAWC,EAAA,EAAAA,WAAY,EAAA7L,MAM/B,OALAiD,EAAKwO,aAAa,QAASC,OAAO9F,IAClC3I,EAAKwO,aAAa,SAAUC,OAAO7F,IAGnC8F,EAAS5M,OAAO,gBAAC6M,EAAQ,CAACnF,OAAQA,EAAQ9L,KAAMA,IAAUsC,GACnDA,EA9kBI,EAAAgD,SAslBb,sC,+CA+BA,OA/BuB,wBAGrB,mBAAA4L,gBAAA,WACU,IAAAzF,EAAA,kBAAAA,iBAEF0F,EAAuC,GAC7C,IAAK,IAAMtQ,KAAO4K,EACZA,EAAiB2F,eAAevQ,IAAQoQ,SAASI,kBAAkBxQ,KACrEsQ,EAAatQ,GAAO4K,EAAiB5K,IAGzC,OAAOsQ,GAGT,mBAAA/M,OAAA,WACQ,iBACJ,IAAA0H,OAAUb,EAAA,EAAAA,UAAWC,EAAA,EAAAA,WAAY7L,EAAA,EAAAA,MACjCW,EAAA,EAAAA,KAEF,OACE,uBAAKkI,UAAU,YAAY6G,MAAO,CAAE1D,MAAOJ,EAAWuB,OAAQtB,IAC5D,gBAAC,EAAAxG,aAAY,CACXC,SAAU,CACRT,OAAQ7E,EAAMyF,cACdS,QAAS,EAAF,UAAIvF,KAAI,GAAKA,QAxBvB,SAAAqR,kBAAoB,EAAAC,aA8B7B,SA/BA,CAAuB,EAAAnL","file":"semantic-tree-4774801b259d36d69ec5.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as _ from 'lodash';\nimport { Props as ReactProps, createElement } from 'react';\nimport * as D from 'react-dom-factories';\nimport * as maybe from 'data.maybe';\n\nimport { Cancellation } from 'platform/api/async';\nimport { BuiltInEvents, trigger } from 'platform/api/events';\nimport { Rdf } from 'platform/api/rdf';\nimport { SparqlClient, SparqlUtil } from 'platform/api/sparql';\nimport { Component } from 'platform/api/components';\n\nimport { breakGraphCycles, findRoots } from 'platform/components/semantic/lazy-tree';\nimport { ErrorNotification } from 'platform/components/ui/notification';\nimport { Spinner } from 'platform/components/ui/spinner';\nimport { TemplateItem } from 'platform/components/ui/template';\n\nimport { Tree } from './Tree';\nimport { D3Tree, D3TreeProviderKind, D3TreeOptions } from './D3Tree';\n\nexport interface SemanticTreeConfig {\n  /**\n   * Determines visual style of the tree. Defaults to HTML rendering if left unspecified.\n   * @default 'html'\n   */\n  provider?: SemanticTreeKind;\n\n  /**\n   * SPARQL Select query. The query should have at least two projection\n   * variables -  `node` and `parent` i.e. the tree structure needs to be returned\n   * as adjacency list of node-parent relations.\n   * It is possible to override the expected binding variable names (c.f. options below)\n   * Example:\n   * ```\n   * SELECT ?node ?parent WHERE {\n   *  ?node a owl:Class .\n   *  OPTIONAL{?node rdfs:subClassOf ?parent }\n   * }\n   * ```\n   * Depending on your data, you may need to traverse the graph using **SPARQL\n   * property path operations** (e.g. rdfs:subClassOf+ or rdsf:subClassOf*)\n   * in order to collect all node-parent relations.\n   *\n   * Example:\n   * ```\n   * SELECT DISTINCT ?node ?parent WHERE {\n   *   { { ?? rdfs:subClassOf* ?node }\n   *   UNION\n   *   { ?node rdfs:subClassOf* ?? } }\n   *   OPTIONAL { ?node rdfs:subClassOf ?parent. FILTER(ISIRI(?parent)) }\n   *   FILTER(ISIRI(?node))\n   * }\n   * ```\n   */\n  query: string;\n\n  /**\n   * <semantic-link uri='http://help.researchspace.org/resource/FrontendTemplating'>Template</semantic-link>\n   * which is used to render every tree node. Template has access to all projection\n   * variables for a single result tuple.\n   * By default `<semantic-link>` component is used for node visualization.\n   */\n  tupleTemplate?: string;\n\n  /**\n   * <semantic-link uri='http://help.researchspace.org/resource/FrontendTemplating'>Template</semantic-link>\n   * which is applied when the query returns no results.\n   */\n  noResultTemplate?: string;\n\n  /**\n   * List of node IRIs that should be used as root nodes for the tree visualization.\n   * If omitted default roots are calculated with the assumption that\n   * the node is root if it doesn't have any parent.\n   */\n  roots?: string[];\n\n  /**\n   * SPARQL Select projection variable name that is used to represent\n   * **parent** value in parent-child relation\n   * @default 'parent'\n   */\n  parentBindingName?: string;\n\n  /**\n   * SPARQL Select projection variable name that is used to represent\n   * **child** value in parent-child relation.\n   * @default 'node'\n   */\n  nodeBindingName?: string;\n\n  /**\n   * Specifies if tree should be collapsed by default\n   *\n   * @default false\n   */\n  collapsed?: boolean;\n\n  /**\n   * Array of node IRIs that should be opened by default.\n   */\n  keysOpened?: string[];\n\n  /**\n   * Options for D3-based tree to customize, for example, the width of the nodes\n   * to fit longer labels.\n   *\n   * Example:\n   * ```\n   * d3-tree-options='{\"nodeWidth\":160, \"nodeHeight\":25}'\n   * ```\n   * **Make sure that numbers aren't quoted in `\"\"`**.\n   */\n  d3TreeOptions?: D3TreeOptions;\n\n  /**\n   * ID for issuing component events.\n   */\n  id?: string;\n}\n\nexport type SemanticTreeKind = 'html' | D3TreeProviderKind;\n\nexport type Props = SemanticTreeConfig & ReactProps<SemanticTree>;\n\nexport interface ProviderProps {\n  tupleTemplate: string;\n  onNodeClick?: (node: TreeNode) => void;\n  nodeData: ReadonlyArray<TreeNode>;\n  nodeKey?: string;\n  collapsed: boolean;\n  keysOpened: ReadonlyArray<string>;\n}\n\nexport interface TreeNode {\n  readonly key: string;\n  readonly data: SparqlClient.Binding;\n  readonly children: ReadonlyArray<TreeNode>;\n}\n\ninterface State {\n  data?: ReadonlyArray<TreeNode>;\n  isLoading?: boolean;\n  errorMessage?: Data.Maybe<string>;\n}\n\nexport class SemanticTree extends Component<Props, State> {\n  static readonly defaultProps: Partial<Props> = {\n    provider: 'html',\n    parentBindingName: 'parent',\n    nodeBindingName: 'node',\n    roots: [],\n    keysOpened: [],\n    tupleTemplate: '<semantic-link iri=\"{{node.value}}\"></semantic-link>',\n  };\n\n  private readonly cancellation = new Cancellation();\n  private querying = this.cancellation.derive();\n\n  constructor(props: Props, context: any) {\n    super(props, context);\n    this.state = {\n      isLoading: true,\n      errorMessage: maybe.Nothing<string>(),\n    };\n  }\n\n  public componentDidMount() {\n    this.loadData(this.props);\n  }\n\n  public componentWillReceiveProps(props: Props) {\n    if (props.query !== this.props.query) {\n      this.loadData(props);\n    }\n  }\n\n  public componentWillUnmount() {\n    this.cancellation.cancelAll();\n  }\n\n  private loadData(props: Props) {\n    const context = this.context.semanticContext;\n    this.querying = this.cancellation.deriveAndCancel(this.querying);\n    const loading =\n      this.querying.map(\n        SparqlClient.select(props.query, { context })\n      )\n      .onError((errorMessage) => this.setState({ isLoading: false, errorMessage: maybe.Just(errorMessage) }))\n      .onValue(this.processSparqlResult)\n      .onEnd(() => {\n        if (this.props.id) {\n          trigger({ eventType: BuiltInEvents.ComponentLoaded, source: props.id });\n        }\n      });\n\n    if (props.id) {\n      trigger({\n        eventType: BuiltInEvents.ComponentLoading,\n        source: this.props.id,\n        data: loading,\n      });\n    }\n  }\n\n  public render() {\n    if (this.state.errorMessage.isJust) {\n      return createElement(ErrorNotification, { errorMessage: this.state.errorMessage.get() });\n    }\n    return this.state.isLoading ? createElement(Spinner) : this.renderTree();\n  }\n\n  private renderTree() {\n    const { data } = this.state;\n    if (data.length === 0) {\n      return createElement(TemplateItem, { template: { source: this.props.noResultTemplate } });\n    }\n\n    const providerProps: ProviderProps = {\n      tupleTemplate: this.handleDeprecatedLayout(),\n      onNodeClick: this.onNodeClick,\n      nodeData: data,\n      nodeKey: 'key',\n      collapsed: this.props.collapsed,\n      keysOpened: this.props.keysOpened,\n    };\n\n    const { provider, d3TreeOptions } = this.props;\n    const isD3Provider = provider === 'd3-sankey' || provider === 'd3-dendrogram' || provider === 'd3-collapsible-tree';\n\n    if (isD3Provider) {\n      return createElement(D3Tree, {\n        ...providerProps,\n        provider: provider as D3TreeProviderKind,\n        options: d3TreeOptions,\n      });\n    } else if (typeof provider === 'string' && provider !== 'html') {\n      console.warn(`Unknown semantic tree provider '${provider}'`);\n    }\n\n    return D.div({}, createElement(Tree, providerProps));\n  }\n\n  private processSparqlResult = (res: SparqlClient.SparqlSelectResult): void => {\n    if (SparqlUtil.isSelectResultEmpty(res)) {\n      this.setState({ data: [], isLoading: false });\n      return;\n    }\n\n    const { nodeBindingName, parentBindingName } = this.props;\n    // transform binding into graph instead of tree to support multiple parent nodes\n    // and to reuse graph algorithms to gracefully handle cycles and tree roots\n    const graph = transformBindingsToGraph({\n      bindings: res.results.bindings,\n      nodeBindingName,\n      parentBindingName,\n    });\n\n    breakGraphCycles(graph.nodes);\n    const { roots, notFound } = this.findRoots(graph);\n    const data = makeImmutableForest(roots);\n\n    if (notFound.length === 0) {\n      this.setState({ data, isLoading: false });\n    } else {\n      const notFoundRoots = notFound.map((root) => `'${root}'`).join(', ');\n      this.setState({\n        data,\n        isLoading: false,\n        errorMessage: maybe.Just(`Expected roots not found: ${notFoundRoots}`),\n      });\n    }\n  };\n\n  private findRoots(graph: MutableGraph) {\n    if (_.isEmpty(this.props.roots)) {\n      const roots = findRoots(graph.nodes);\n      return { roots, notFound: [] };\n    } else {\n      // if roots are specified we take those\n      return findExpectedRoots(graph, this.props.roots);\n    }\n  }\n\n  private onNodeClick = (node: any) => {\n    // empty default onNodeClick\n  };\n\n  private handleDeprecatedLayout(): string {\n    if (_.has(this.props, 'layout')) {\n      console.warn('layout property in semantic-tree is deprecated, please use flat properties instead');\n      return this.props['layout']['tupleTemplate'];\n    }\n    return this.props.tupleTemplate;\n  }\n}\n\ninterface MutableNode {\n  key: string;\n  data: SparqlClient.Binding;\n  /**\n   * Children are kept in insertion order from the query result.\n   * The collection is represented by Set to be compatible with graph algorithms.\n   */\n  children: Set<MutableNode>;\n}\n\ninterface MutableGraph {\n  map: Map<string, MutableNode>;\n  nodes: MutableNode[];\n}\n\nfunction transformBindingsToGraph(params: {\n  bindings: SparqlClient.Bindings;\n  nodeBindingName: string;\n  parentBindingName: string;\n}): MutableGraph {\n  const { bindings, nodeBindingName, parentBindingName } = params;\n\n  const map = new Map<string, MutableNode>();\n  const nodes: MutableNode[] = [];\n  const edges: Array<{ parent: string; child: string }> = [];\n\n  // construct nodes from bindings\n  for (const binding of bindings) {\n    const key = binding[nodeBindingName].value;\n    const parent = binding[parentBindingName] ? binding[parentBindingName].value : undefined;\n\n    const existing = map.get(key);\n    if (!existing) {\n      const node: MutableNode = { key, data: binding, children: new Set<MutableNode>() };\n      map.set(key, node);\n      nodes.push(node);\n    } else if (_.isEmpty(existing.data)) {\n      existing.data = binding;\n    }\n\n    if (typeof parent === 'string') {\n      edges.push({ parent, child: key });\n    }\n  }\n\n  // link nodes into graph\n  for (const { parent, child } of edges) {\n    const childNode = map.get(child);\n    let parentNode = map.get(parent);\n    if (!parentNode) {\n      parentNode = synthesizeParentNode(parent, nodeBindingName);\n      map.set(parent, parentNode);\n      nodes.push(parentNode);\n    }\n    parentNode.children.add(childNode);\n  }\n\n  return { map, nodes };\n}\n\nfunction synthesizeParentNode(key: string, nodeBindingName: string): MutableNode {\n  return {\n    key,\n    data: { [nodeBindingName]: Rdf.iri(key) },\n    children: new Set<MutableNode>(),\n  };\n}\n\nfunction findExpectedRoots({ map }: MutableGraph, expectedRoots: ReadonlyArray<string>) {\n  const roots = new Set<MutableNode>();\n  const notFound: string[] = [];\n  for (const rootKey of expectedRoots) {\n    const root = map.get(rootKey);\n    if (root) {\n      roots.add(root);\n    } else {\n      notFound.push(rootKey);\n    }\n  }\n  return { roots, notFound };\n}\n\nfunction makeImmutableForest(nodes: Set<MutableNode>): ReadonlyArray<TreeNode> {\n  return Array.from(nodes, makeImmutableNode);\n}\n\nfunction makeImmutableNode(node: MutableNode): TreeNode {\n  return {\n    key: node.key,\n    data: node.data,\n    children: makeImmutableForest(node.children),\n  };\n}\n\nexport default SemanticTree;\n","/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { Component, createElement, MouseEvent } from 'react';\nimport * as D from 'react-dom-factories';\nimport * as _ from 'lodash';\nimport * as ReactTreeView from 'react-treeview';\nimport * as classnames from 'classnames';\n\nimport { TemplateItem } from 'platform/components/ui/template';\n\nimport { ProviderProps, TreeNode } from './SemanticTree';\n\nimport 'react-treeview/react-treeview.css';\nimport * as styles from './Tree.scss';\n\nexport interface TreeProps extends ProviderProps {}\n\ninterface State {\n  collapsedBookkeeping?: BookeepingDictionary;\n  activeNode?: any;\n}\n\ninterface BookeepingDictionary {\n  [index: string]: boolean;\n}\n\nexport class Tree extends Component<TreeProps, State> {\n  private key: string;\n  constructor(props: TreeProps, context: any) {\n    super(props, context);\n    this.key = Math.random().toString(36).slice(2);\n    this.state = {\n      collapsedBookkeeping: {},\n    };\n  }\n\n  public render() {\n    // TODO add optional button to collapse/expand all nodes\n    return D.div({ className: styles.tree }, this.getTrees(this.props.nodeData));\n  }\n\n  public componentWillMount() {\n    const bookkeeping: BookeepingDictionary = {};\n    // initalize the bookkeeping map with all keys of all nodes\n    const keys = _.reduce(this.props.nodeData, (all, current) => all.concat(this.getAllKeys(current)), []);\n    // set all markers to default as provided by the props\n    _.forEach(keys, (k) => {\n      bookkeeping[k] = this.props.collapsed;\n    });\n\n    // if in collapsed mode, check of keys that should be opened\n    // and set all keys on the path to false (i.e. not collapsed)\n    if (this.props.collapsed) {\n      _.forEach(this.collectOpenKeys(this.props.nodeData), (k) => {\n        bookkeeping[k] = false;\n      });\n    }\n\n    this.setState({ collapsedBookkeeping: bookkeeping });\n  }\n\n  private collectOpenKeys = (nodes: ReadonlyArray<TreeNode>): string[] => {\n    return _.reduce(\n      nodes,\n      (collectedKeys, node) => {\n        if (this.nodeHasChildren(node) && this.hasNestedOpenedKey(node)) {\n          return collectedKeys.concat(this.collectOpenKeys(node.children).concat([this.getNodeKey(node)]));\n        }\n        return collectedKeys;\n      },\n      []\n    );\n  };\n\n  private getNodeKey = (node: TreeNode): string => {\n    return node[this.props.nodeKey];\n  };\n\n  private getAllKeys = (node: TreeNode): any[] => {\n    if (!node['children']) {\n      return [this.getNodeKey(node)];\n    }\n    return _.reduce(node['children'], (all, current) => all.concat(this.getAllKeys(current)), [\n      node[this.props.nodeKey],\n    ]);\n  };\n\n  private handleClick = (node: any, e: MouseEvent<HTMLSpanElement>) => {\n    if (this.props.onNodeClick) {\n      this.props.onNodeClick(node);\n    }\n    this.setState({\n      activeNode: node,\n    });\n  };\n\n  private handleCollapsibleClick = (i) => {\n    this.setState((state) => {\n      const collapsedBookkeeping = this.state.collapsedBookkeeping;\n      collapsedBookkeeping[i] = !collapsedBookkeeping[i];\n      return { collapsedBookkeeping: collapsedBookkeeping };\n    });\n  };\n\n  private getTrees = (data: ReadonlyArray<TreeNode>) => {\n    return data.map((node, i: number) => this.renderNode(node, i));\n  };\n\n  private renderNode = (node: any, i: number) => {\n    const nodeLabelTemplate = createElement(TemplateItem, {\n      template: {\n        source: this.props.tupleTemplate,\n        options: { ...node, ...node.data },\n      },\n    });\n    const hasChildren = this.nodeHasChildren(node);\n\n    const nodeKey = _.isUndefined(this.props.nodeKey) ? i : node[this.props.nodeKey];\n    const children = hasChildren && !this.isCollapsed(nodeKey, node) ? this.getTrees(node['children']) : null;\n\n    const isCollapsed = this.isCollapsed(nodeKey, node);\n    const renderedNode = D.span(\n      {\n        key: this.key + nodeKey + i,\n        className: this.getCssClassesForNode(children, this.state.activeNode === node),\n        onClick: this.handleClick.bind(null, node),\n      },\n      nodeLabelTemplate\n    );\n\n    return hasChildren\n      ? createElement(\n          ReactTreeView,\n          {\n            key: nodeKey + isCollapsed,\n            nodeLabel: renderedNode,\n            collapsed: isCollapsed,\n            onClick: this.handleCollapsibleClick.bind(null, nodeKey),\n          },\n          children\n        )\n      : renderedNode;\n  };\n\n  private nodeHasChildren = (node: any): boolean => {\n    return !_.isUndefined(node['children']) && !_.isEmpty(node['children']);\n  };\n\n  private getCssClassesForNode = (hasChildren: boolean, isActive: boolean): string => {\n    const base = hasChildren ? styles.treeNode : styles.leafNode;\n    return isActive ? classnames([base, styles.activeNode]) : base;\n  };\n\n  private isCollapsed = (i: any, node: any): boolean => {\n    // check whether any of the deeply nested children nodes is listed\n    // to be opened on intial rendering\n    // if (this.props.collapsed && this.hasNestedOpenedKey(node)) {\n    //   return false;\n    // }\n    return this.state.collapsedBookkeeping[i];\n  };\n\n  private hasNestedOpenedKey = (node: any) => {\n    if (_.includes(this.props.keysOpened, this.getNodeKey(node))) {\n      return true;\n    }\n    if (_.isUndefined(node['children'])) {\n      return false;\n    }\n    for (const n in node['children']) {\n      if (this.hasNestedOpenedKey(node['children'][n])) {\n        return true;\n      }\n    }\n    return false;\n  };\n}\n\nexport default Tree;\n","/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport { Rdf } from 'platform/api/rdf';\nimport { Component, ComponentContext, ContextTypes } from 'platform/api/components';\nimport { SparqlClient } from 'platform/api/sparql';\n\nimport { TemplateItem } from 'platform/components/ui/template';\n\nimport { ProviderProps, TreeNode } from './SemanticTree';\n\nimport * as styles from './D3Tree.scss';\n\nexport interface D3TreeProps extends ProviderProps {\n  provider: D3TreeProviderKind;\n  options?: D3TreeOptions;\n}\n\nexport interface D3TreeOptions {\n  /**\n   *  Numeric minHeight of the entire tree.\n   *  If the content is larger than the minimum height,\n   *  the min-height property has no effect.\n   *  By default the height will be estimated.\n   *  @default '300'\n   */\n  minHeight?: number;\n  /**\n   *  Numeric width of each node (template) element.\n   *  @default '30'\n   */\n  nodeWidth?: number;\n  /**\n   *  Numeric height of each node (template) element.\n   *  @default '120'\n   */\n  nodeHeight?: number;\n  /**\n   *  Numeric left margin of each node (template) element.\n   *  @default '8'\n   */\n  nodeLeftMargin?: number;\n}\n\nexport type D3TreeProviderKind = 'd3-sankey' | 'd3-dendrogram' | 'd3-collapsible-tree';\n\nlet D3Bundle: any;\nfunction loadD3() {\n  return Promise.all([import('d3'), import('d3-sankey'), import('d3-scale')]).then(([d3, sankey, scale]) => {\n    D3Bundle = { ...d3, ...sankey, ...scale };\n  });\n}\n\nexport class D3Tree extends Component<D3TreeProps, {}> {\n  static readonly defaultProps: Partial<D3TreeProps> = {\n    options: {},\n  };\n\n  private root: HTMLDivElement;\n  private openedKeys: Set<string>;\n  private onUnmount: Array<() => void> = [];\n  private treeRendered = false;\n  private unmounted = false;\n\n  constructor(props: D3TreeProps, context: any) {\n    super(props, context);\n    this.openedKeys = new Set(props.keysOpened);\n  }\n\n  render() {\n    return <div className={styles.root} ref={this.onMount} />;\n  }\n\n  componentDidMount() {\n    if (!D3Bundle) {\n      loadD3().then(() => {\n        if (!this.unmounted) {\n          this.tryRenderTree();\n        }\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    for (const handler of this.onUnmount) {\n      handler();\n    }\n    this.onUnmount.length = 0;\n    this.unmounted = true;\n  }\n\n  private onMount = (root: HTMLDivElement) => {\n    this.root = root;\n    this.tryRenderTree();\n  };\n\n  private tryRenderTree() {\n    if (this.treeRendered) {\n      return;\n    }\n    if (D3Bundle && this.root) {\n      this.drawTree(D3Bundle, this.root);\n    }\n  }\n\n  private drawTree(d3: any, target: HTMLDivElement) {\n    const renderData = this.createRenderer(d3);\n\n    const redraw = () => {\n      d3.select(target).selectAll('svg').remove();\n\n      const { minHeight = 300, nodeWidth = 120, nodeHeight = 25, nodeLeftMargin = 8 } = this.props.options;\n\n      renderData({\n        selector: target,\n        props: this.props,\n        openedKeys: this.openedKeys,\n        width: target.clientWidth,\n        marginTop: 0,\n        marginBottom: 0,\n        minHeight,\n        nodeWidth,\n        nodeHeight,\n        nodeLeftMargin,\n        componentContext: this.context,\n      });\n    };\n\n    window.addEventListener('resize', redraw);\n    this.onUnmount.push(() => {\n      window.removeEventListener('resize', redraw);\n      d3.select(target).select('svg').remove();\n    });\n\n    redraw();\n  }\n\n  private createRenderer(d3: any): (config: TreeConfig) => void {\n    const { provider, nodeData } = this.props;\n    if (provider === 'd3-dendrogram') {\n      const dendrogramData = nodeData.map(convertDataToD3Dendrogram);\n      return (config) => {\n        dendrogramData.forEach((data, index, array) =>\n          dendrogram(d3, data, {\n            ...config,\n            minHeight: config.minHeight / array.length,\n            marginTop: index === 0 ? 20 : 0,\n            marginBottom: index === array.length - 1 ? 20 : 0,\n          })\n        );\n      };\n    } else if (provider === 'd3-collapsible-tree') {\n      const dendrogramData = nodeData.map(convertDataToD3Dendrogram);\n      return (config) => {\n        dendrogramData.forEach((data, index, array) =>\n          collapsibleDendrogram(d3, data, {\n            ...config,\n            minHeight: config.minHeight / array.length,\n            marginTop: index === 0 ? 20 : 0,\n            marginBottom: index === array.length - 1 ? 20 : 0,\n          })\n        );\n      };\n    } else if (provider === 'd3-sankey') {\n      const sankeyData = convertDataToD3Sankey(nodeData);\n      return (config) =>\n        sankey(d3, sankeyData, {\n          ...config,\n          marginTop: 20,\n          marginBottom: 20,\n        });\n    } else {\n      throw new Error(`Unknown D3 tree provider '${provider}'`);\n    }\n  }\n}\n\ninterface DendrogramNode {\n  name: string;\n  data: SparqlClient.Dictionary<Rdf.Node>;\n  children?: DendrogramNode[];\n  _children?: DendrogramNode[];\n  parent?: DendrogramNode;\n  depth?: number;\n  x?: number;\n  y?: number;\n  x0?: number;\n  y0?: number;\n}\n\nfunction convertDataToD3Dendrogram(node: TreeNode): DendrogramNode {\n  return {\n    name: node.key,\n    data: node.data,\n    children: node.children ? node.children.map(convertDataToD3Dendrogram) : [],\n  };\n}\n\ninterface SankeyData {\n  nodes: SankeyNode[];\n  links: SankeyLink[];\n}\n\ninterface SankeyNode {\n  key: string;\n  data: SparqlClient.Dictionary<Rdf.Node>;\n  label: string;\n  name: string;\n}\n\ninterface SankeyLink {\n  source: number;\n  target: number;\n  value?: number;\n}\n\nfunction convertDataToD3Sankey(data: ReadonlyArray<TreeNode>): SankeyData {\n  const nodes: SankeyNode[] = [];\n  const links: SankeyLink[] = [];\n  const indices: { [key: string]: number } = {};\n  let index = 0;\n\n  const traverse = (item: TreeNode) => {\n    // reuse sankey node when tree node has the same key\n    if (typeof indices[item.key] === 'number') {\n      return;\n    }\n    nodes.push({ key: item.key, data: item.data, label: item.key, name: item.key });\n    indices[item.key] = index++;\n    for (const child of item.children ? item.children : []) {\n      traverse(child);\n      links.push({ source: indices[item.key], target: indices[child.key] });\n    }\n  };\n\n  data.forEach(traverse);\n  return { nodes, links };\n}\n\ninterface TreeConfig extends D3TreeOptions {\n  selector: HTMLElement;\n  props: D3TreeProps;\n  openedKeys: Set<string>;\n\n  width?: number;\n  height?: number;\n  marginTop: number;\n  marginBottom: number;\n\n  componentContext: ComponentContext;\n}\n\nfunction dendrogram(d3: any, tree: DendrogramNode, config: TreeConfig) {\n  const margin = computeDendrogramMargin(config);\n  const opts = {\n    width: computeEffectiveWidth(tree, config, margin.left + margin.right),\n    height: computeEffectiveHeight(tree, config, margin.top + margin.bottom),\n    radius: 5,\n    selector: config.selector || null,\n  };\n\n  const svg = d3\n    .select(config.selector)\n    .append('svg')\n    .attr('width', opts.width)\n    .attr('height', opts.height)\n    .append('g')\n    .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n  const cluster = d3.layout\n    .cluster()\n    .size([opts.height - margin.top - margin.bottom, opts.width - margin.left - margin.right]);\n  const nodes = cluster.nodes(tree);\n  const links = cluster.links(nodes);\n\n  const diagonal = d3.svg.diagonal().projection((d) => [d.y, d.x]);\n\n  svg.selectAll('.link').data(links).enter().append('path').attr('class', 'link').attr('d', diagonal);\n\n  const node = svg\n    .selectAll('.node')\n    .data(nodes)\n    .enter()\n    .append('g')\n    .attr('class', 'node')\n    .attr('transform', (d) => 'translate(' + d.y + ',' + d.x + ')');\n  node.append('circle').attr('class', 'node-circle').attr('r', opts.radius);\n  appendDendrogramNode(node, config);\n}\n\nfunction appendDendrogramNode(selection: any /* D3 selection */, config: TreeConfig) {\n  return selection\n    .append((d: DendrogramNode) => createTemplateAsForeignObject(config, d.data))\n    .attr('class', 'node-text')\n    .attr('x', (d) => config.nodeLeftMargin)\n    .attr('y', -config.nodeHeight / 2);\n}\n\nfunction collapsibleDendrogram(d3: any, tree: DendrogramNode, config: TreeConfig) {\n  function onClick(d: DendrogramNode) {\n    toggleExpanded(d, config.openedKeys);\n    update(d);\n  }\n\n  function onDoubleClick(d: DendrogramNode) {\n    if (d.parent) {\n      toggleExpanded(d.parent, config.openedKeys);\n      update(d.parent);\n    }\n  }\n\n  const nodeWidthWithMargin = config.nodeLeftMargin + config.nodeWidth;\n  function setFixedNodeDepth(nodes: DendrogramNode[]) {\n    nodes.forEach((d) => {\n      d.y = d.depth * nodeWidthWithMargin;\n    });\n  }\n\n  const margin = computeDendrogramMargin(config);\n  const opts = {\n    radius: 5,\n    selector: config.selector,\n  };\n\n  function computeLayout() {\n    const size = {\n      width: computeEffectiveWidth(tree, config, margin.left + margin.right),\n      height: computeEffectiveHeight(tree, config, margin.top + margin.bottom),\n    };\n    const cluster = d3.layout\n      .cluster()\n      .size([size.height - margin.top - margin.bottom, size.width - margin.left - margin.right]);\n    const nodes = cluster.nodes(tree);\n    const links = cluster.links(nodes);\n    return { size, nodes, links };\n  }\n\n  const { size, nodes, links } = computeLayout();\n  setFixedNodeDepth(nodes);\n\n  const diagonal = d3.svg.diagonal().projection((d) => [d.y, d.x]);\n  const svg = d3\n    .select(opts.selector, 'dendrogram')\n    .append('svg')\n    .attr('width', size.width)\n    .attr('height', size.height);\n  const rootGroup = svg.append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n  // link\n  rootGroup.selectAll('.link').data(links).enter().append('path').attr('class', 'link').attr('d', diagonal);\n\n  const node = rootGroup\n    .selectAll('.node')\n    .data(nodes)\n    .enter()\n    .append('g')\n    .attr('class', 'node')\n    .attr('transform', (d) => 'translate(' + d.y + ',' + d.x + ')')\n    .on('click', onClick);\n  // circle\n  node\n    .append('circle')\n    .attr('class', 'node-circle')\n    .attr('r', (d) => (1 + d.value / 12) * 4 || opts.radius);\n  // node template\n  appendDendrogramNode(node, config);\n\n  const root = tree;\n  root.x0 = size.height / 4;\n  root.y0 = 0;\n\n  if (config.props.collapsed) {\n    collapse(root);\n    expandKeys(root, config.openedKeys);\n  }\n\n  update(root);\n\n  function update(source: DendrogramNode) {\n    const duration = 750;\n\n    // Compute the new tree layout.\n    const layout = computeLayout();\n\n    setFixedNodeDepth(layout.nodes);\n    svg.transition().duration(duration).attr('width', layout.size.width).attr('height', layout.size.height);\n\n    // Update the nodes…\n    let i = 0;\n    const node = rootGroup.selectAll('g.node').data(layout.nodes, (d) => {\n      return d.id || (d.id = ++i);\n    });\n\n    // Enter any new nodes at the parent's previous position.\n    const nodeEnter = node\n      .enter()\n      .append('g')\n      .attr('class', 'node')\n      .attr('transform', (d) => 'translate(' + source.y0 + ',' + source.x0 + ')')\n      .on('click', onClick)\n      .on('dblclick', onDoubleClick);\n\n    nodeEnter\n      .append('circle')\n      .attr('class', (d) => (d._children ? 'node-circle-children' : 'node-circle'))\n      .attr('r', (d) => (1 + d.value / 12) * 4 || opts.radius);\n    appendDendrogramNode(nodeEnter, config).style('fill-opacity', 1e-6);\n\n    // Transition nodes to their new position.\n    const nodeUpdate = node\n      .transition()\n      .duration(duration)\n      .attr('transform', (d) => 'translate(' + d.y + ',' + d.x + ')');\n    nodeUpdate\n      .select('circle')\n      .attr('class', (d) => (d._children ? 'node-circle-children' : 'node-circle'))\n      .attr('r', (d) => (1 + d.value / 12) * 4 || opts.radius);\n    nodeUpdate.select('text').attr('text', 'node-text').style('fill-opacity', 1);\n\n    // Transition exiting nodes to the parent's new position.\n    const nodeExit = node\n      .exit()\n      .transition()\n      .duration(duration)\n      .attr('transform', (d) => 'translate(' + source.y + ',' + source.x + ')')\n      .remove();\n    nodeExit\n      .select('circle')\n      .attr('class', 'node-circle')\n      .attr('r', (d) => (1 + d.value / 12) * 4 || opts.radius);\n    nodeExit.select('text').attr('text', 'node-text').style('fill-opacity', 1e-6);\n\n    // Update the links…\n    const linkPath = rootGroup.selectAll('path.link').data(layout.links, (d) => d.target.id);\n\n    // Enter any new links at the parent's previous position.\n    linkPath\n      .enter()\n      .insert('path', 'g')\n      .attr('class', 'link')\n      .attr('d', (d) => {\n        const o = { x: source.x0, y: source.y0 };\n        return diagonal({ source: o, target: o });\n      });\n\n    // Transition links to their new position.\n    linkPath.transition().duration(duration).attr('d', diagonal);\n\n    // Transition exiting nodes to the parent's new position.\n    linkPath\n      .exit()\n      .transition()\n      .duration(duration)\n      .attr('d', (d) => {\n        const o = { x: source.x, y: source.y };\n        return diagonal({ source: o, target: o });\n      })\n      .remove();\n\n    // Stash the old positions for transition.\n    layout.nodes.forEach((d) => {\n      d.x0 = d.x;\n      d.y0 = d.y;\n    });\n  }\n}\n\nfunction collapse(d: DendrogramNode) {\n  if (d.children) {\n    d._children = d.children;\n    d.children = null;\n    d._children.forEach(collapse);\n  }\n}\n\nfunction toggleExpanded(node: DendrogramNode, openedKeys?: Set<string>) {\n  if (node.children) {\n    node._children = node.children;\n    node.children = null;\n    if (openedKeys) {\n      openedKeys.delete(node.name);\n    }\n  } else if (node._children) {\n    node.children = node._children;\n    node._children = null;\n    if (openedKeys) {\n      openedKeys.add(node.name);\n    }\n  }\n}\n\n/**\n * @returns true if `keys` contains any descedant node key; otherwise false.\n */\nfunction expandKeys(node: DendrogramNode, keys: ReadonlySet<string>): boolean {\n  let shouldExpand = keys.has(node.name);\n\n  const nodeChildren = node.children || node._children;\n  if (nodeChildren) {\n    for (const child of node.children || node._children) {\n      if (expandKeys(child, keys)) {\n        shouldExpand = true;\n      }\n    }\n  }\n\n  if (shouldExpand && !node.children) {\n    toggleExpanded(node);\n  }\n\n  return shouldExpand;\n}\n\nfunction computeDendrogramMargin(config: TreeConfig) {\n  return {\n    top: config.marginTop,\n    bottom: config.marginBottom,\n    left: config.nodeLeftMargin + config.nodeWidth / 2,\n    right: config.nodeLeftMargin + config.nodeWidth * 2,\n  };\n}\n\nfunction computeEffectiveWidth(tree: DendrogramNode, config: TreeConfig, margin: number) {\n  const estimated = estimateTotalWidth(tree, config);\n  const width = estimated + margin;\n  return Math.max(width, config.width);\n}\n\nfunction computeEffectiveHeight(tree: DendrogramNode, config: TreeConfig, margin: number) {\n  let height: number;\n  if (typeof config.height === 'number') {\n    height = config.height;\n  } else {\n    const estimated = estimateTotalHeight(tree, config.nodeHeight);\n    height = estimated + margin;\n  }\n  return Math.max(height, config.minHeight);\n}\n\nfunction estimateTotalWidth(node: DendrogramNode, config: TreeConfig): number {\n  let width = config.nodeWidth;\n  if (node.children) {\n    let maxChildWidth = 0;\n    for (const child of node.children) {\n      maxChildWidth = Math.max(maxChildWidth, estimateTotalWidth(child, config));\n    }\n    if (maxChildWidth > 0) {\n      width += config.nodeLeftMargin + maxChildWidth;\n    }\n  }\n  return width;\n}\n\nfunction estimateTotalHeight(node: DendrogramNode, nodeHeight: number): number {\n  let childrenHeight = 0;\n  if (node.children) {\n    for (const child of node.children) {\n      childrenHeight += estimateTotalHeight(child, nodeHeight);\n    }\n  }\n  return Math.max(childrenHeight, nodeHeight);\n}\n\nfunction sankey(d3: any, graph: SankeyData, config: TreeConfig) {\n  const margin = { top: config.marginTop, bottom: config.marginBottom, left: 120, right: 200 };\n  const opts = {\n    width: config.width,\n    height: config.height || config.minHeight,\n    selector: config.selector,\n  };\n\n  const links = graph.links;\n  for (let i = 0; i < links.length; i++) {\n    links[i].value = 2;\n  }\n\n  const sankey = d3\n    .sankey()\n    .nodeWidth(15)\n    .nodePadding(10)\n    .size([opts.width - margin.left - margin.right, opts.height - margin.top - margin.bottom]);\n  sankey(graph);\n\n  const svg = d3\n    .select(opts.selector, 'sankey')\n    .append('svg')\n    .attr('width', opts.width)\n    .attr('height', opts.height)\n    .append('g')\n    .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n  const color = d3.scaleOrdinal(d3.schemeCategory10);\n\n  const link = svg\n    .append('g')\n    .attr('class', 'links')\n    .selectAll('path')\n    .data(graph.links)\n    .enter()\n    .append('path')\n    .attr('d', d3.sankeyLinkHorizontal())\n    .attr('stroke-width', (d) => Math.max(1, d.width));\n\n  link.append('title').text((d) => 'no title');\n\n  const node = svg\n    .append('g')\n    .attr('class', 'nodes')\n    .selectAll('g')\n    .data(graph.nodes)\n    .enter()\n    .append('g')\n    .attr('class', 'node');\n\n  node\n    .append('rect')\n    .attr('x', (d) => d.x0)\n    .attr('y', (d) => d.y0)\n    .attr('width', (d) => d.x1 - d.x0)\n    .attr('height', (d) => d.y1 - d.y0)\n    .attr('fill', (d) => color(d.name))\n    .attr('opacity', 0.5);\n\n  node\n    .append((d: SankeyNode) => createTemplateAsForeignObject(config, d.data))\n    .attr('class', 'node-text')\n    .attr('x', (d) => d.x1 + 6)\n    .attr('y', (d) => (d.y1 + d.y0 - config.nodeHeight) / 2);\n\n  node.append('title').text((d) => 'no title');\n}\n\nfunction createTemplateAsForeignObject(\n  config: TreeConfig,\n  data: SparqlClient.Dictionary<Rdf.Node>\n): SVGForeignObjectElement {\n  const root = document.createElementNS('http://www.w3.org/2000/svg', 'foreignObject');\n  const { nodeWidth, nodeHeight, props } = config;\n  root.setAttribute('width', String(nodeWidth));\n  root.setAttribute('height', String(nodeHeight));\n  // TODO: is it required to call `unmountComponentAtNode()`\n  // in case when container already detached from the DOM?\n  ReactDOM.render(<NodeCell config={config} data={data} />, root);\n  return root;\n}\n\ninterface NodeCellProps {\n  config: TreeConfig;\n  data: SparqlClient.Dictionary<Rdf.Node>;\n}\n\nclass NodeCell extends Component<NodeCellProps, {}> {\n  static childContextTypes = ContextTypes;\n\n  getChildContext() {\n    const { componentContext } = this.props.config;\n    // filter componentContext to keep only properties defined in childContextTypes\n    const childContext: { [key: string]: any } = {};\n    for (const key in componentContext) {\n      if (componentContext.hasOwnProperty(key) && NodeCell.childContextTypes[key]) {\n        childContext[key] = componentContext[key];\n      }\n    }\n    return childContext as ComponentContext;\n  }\n\n  render() {\n    const {\n      config: { nodeWidth, nodeHeight, props },\n      data,\n    } = this.props;\n    return (\n      <div className=\"node-cell\" style={{ width: nodeWidth, height: nodeHeight }}>\n        <TemplateItem\n          template={{\n            source: props.tupleTemplate,\n            options: { data, ...data },\n          }}\n        />\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}