{"version":3,"sources":["webpack:///./src/main/web/components/events/EventProxy.ts"],"names":["cancelation","Cancellation","onEvent","event","data","props","additionalData","onEventData","isMatch","trigger","eventType","proxyEventType","source","id","targets","proxyTargets","componentDidMount","this","onEventTypes","forEach","map","listen","onEventSource","target","onEventTarget","onValue","onEventType","componentWillUnmount","cancelAll","render","Component","EventProxy"],"mappings":"6IAmBA,OACA,QAEA,QACA,SAsEA,kF,OACU,EAAAA,YAAc,IAAI,EAAAC,aAkClB,EAAAC,QAAU,SAACC,GACjB,IAAIC,EAAO,EAAKC,MAAMD,MAAQD,EAAMC,KACpCA,EAAO,EAAH,uBAAQA,GAAS,EAAKC,MAAMC,gBAE5B,EAAKD,MAAME,cAAgB,EAAAC,QAAQL,EAAMC,KAAM,EAAKC,MAAME,cAI9D,EAAAE,QAAQ,CACNC,UAAW,EAAKL,MAAMM,eACtBC,OAAQ,EAAKP,MAAMQ,GACnBC,QAAS,EAAKT,MAAMU,aACpBX,KAAI,K,EAOV,OAtDgC,0BAG9B,qBAAAY,kBAAA,sBACMC,KAAKZ,MAAMa,aACbD,KAAKZ,MAAMa,aAAaC,SACtB,SAAAT,GACE,EAAKV,YACFoB,IACC,EAAAC,OAAO,CACLX,UAAS,EACTE,OAAQ,EAAKP,MAAMiB,cACnBC,OAAQ,EAAKlB,MAAMmB,iBAGtBC,QAAQ,EAAKvB,YAIpBe,KAAKjB,YACFoB,IACC,EAAAC,OAAO,CACLX,UAAWO,KAAKZ,MAAMqB,YACtBd,OAAQK,KAAKZ,MAAMiB,cACnBC,OAAQN,KAAKZ,MAAMmB,iBAGtBC,QAAQR,KAAKf,UAIpB,qBAAAyB,qBAAA,WACEV,KAAKjB,YAAY4B,aAmBnB,qBAAAC,OAAA,WACE,OAAO,MAEX,WAtDA,CAAgC,EAAAC,WAAnB,EAAAC,aAuDb,UAAeA","file":"mp-event-proxy-cf009c9036066c683f03.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { Component } from 'react';\nimport { isMatch } from 'lodash';\n\nimport { Cancellation } from 'platform/api/async';\nimport { Event, listen, trigger } from 'platform/api/events';\n\nexport interface EventProxyConfig {\n  /**\n   * Used as a source id for re-triggered event\n   */\n  id: string;\n\n  /**\n   * Type of event to listen to. Can't be used together with onEventTypes\n   */\n  onEventType?: string;\n\n  /**\n   * Types of event to listen to. Can't be used together with onEventType.\n   */\n  onEventTypes?: string[];\n\n  /**\n   * Source component that we listen for events.\n   * When empty will listen for all events of a given type.\n   */\n  onEventSource?: string;\n\n  /**\n   * Listen only to events sent to the given target.\n   */\n  onEventTarget?: string;\n\n  /**\n   * Proxy only events with payload that includes the following data.\n   */\n  onEventData?: Record<string, any>\n\n  /**\n   * Type of the event that this component triggers when\n   * receives event.\n   */\n  proxyEventType: string;\n\n  /**\n   * Ids of targets for triggered event.\n   */\n  proxyTargets?: string[];\n\n  /**\n   * Data that will be sent to all targets instead of the original event's data\n   */\n  data?: object;\n\n  /**\n   * Data that will be merged with proxied event data.\n   */\n  additionalData?: object;\n}\nexport type EventProxyProps = EventProxyConfig;\n\n/**\n * Components that listen to specified event, and when it happens triggers some other event.\n *\n * For example one can refresh some area on events from <mp-set-management> component.\n * @example\n *\n * <mp-event-proxy id='some-refresh' on-event-source='set-management-component-id'\n *                   proxy-event-type='Component.Refresh' proxy-targets='[\"some-element\"]'\n * ></mp-event-proxy>\n *\n * So when there is any event from component with id 'set-management-component-id',\n * <mp-event-proxy> will send Component.Refresh event to component with id 'some-element'.\n */\nexport class EventProxy extends Component<EventProxyProps, void> {\n  private cancelation = new Cancellation();\n\n  componentDidMount() {\n    if (this.props.onEventTypes) {\n      this.props.onEventTypes.forEach(\n        eventType => {\n          this.cancelation\n            .map(\n              listen({\n                eventType,\n                source: this.props.onEventSource,\n                target: this.props.onEventTarget,\n              })\n            )\n            .onValue(this.onEvent);\n        }\n      )\n    } else {\n      this.cancelation\n        .map(\n          listen({\n            eventType: this.props.onEventType,\n            source: this.props.onEventSource,\n            target: this.props.onEventTarget,\n          })\n        )\n        .onValue(this.onEvent);\n    }\n  }\n\n  componentWillUnmount() {\n    this.cancelation.cancelAll();\n  }\n\n  private onEvent = (event: Event<any>) => {\n    let data = this.props.data || event.data;\n    data = { ...data, ...this.props.additionalData };\n\n    if (this.props.onEventData && !isMatch(event.data, this.props.onEventData)) {\n      return;\n    }\n\n    trigger({\n      eventType: this.props.proxyEventType,\n      source: this.props.id,\n      targets: this.props.proxyTargets,\n      data,\n    });\n  };\n\n  render() {\n    return null;\n  }\n}\nexport default EventProxy;\n"],"sourceRoot":""}