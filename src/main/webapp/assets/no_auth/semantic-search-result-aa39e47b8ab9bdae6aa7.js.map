{"version":3,"sources":["webpack:///./src/main/web/components/semantic/search/web-components/SemanticSearchResult.tsx","webpack:///./src/main/web/components/semantic/results/index.ts"],"names":["render","SemanticSearchContext","Consumer","context","SemanticSearchResultInner","props","React","Component","cancellation","Cancellation","listenToChildLoading","child","id","map","listen","eventType","BuiltInEvents","ComponentLoading","source","observe","value","e","isResultCount","componentHasType","ResultsNumber","notifyResultLoading","type","task","data","setState","error","buildResultQuery","query","resultQuery","subQuery","baseQuery","SparqlUtil","parseQuerySync","where","unshift","projectionVar","variables","substring","SEMANTIC_SEARCH_VARIABLES","PROJECTION_ALIAS_VAR","push","expression","variable","limit","baseConfig","_","has","bindings","RESULT_VARIABLES","CONTEXT_RELATION_VAR","bindRelationPattern","queryWithBindings","SparqlClient","setBindings","serializeQuery","generateQueryForMultipleDatasets","selectedDatasets","datasetsConfig","searchProfileStore","profileStore","relation","visualizationContext","getOrElse","relations","first","patternConfig","tryGetRelationPatterns","find","p","kind","patterns","parsePatterns","queryPattern","prefixes","range","begin","DATE_BEGING_VAR","end","DATE_END_VAR","transformRangePattern","NUMERIC_RANGE_BEGIN_VAR","NUMERIC_RANGE_END_VAR","PatternBinder","CONTEXT_RELATION_PATTERN_VAR","sparqlQuery","state","shouldComponentUpdate","nextProps","nextState","isEqual","nextContext","this","availableDomains","componentWillUnmount","cancelAll","ErrorNotification","errorMessage","mapChildren","children","universalChildren","Children","toArray","isValidChild","tryMakeControlled","updateChildQuery","cloneElement","hasControlledProps","handler","onControlledPropChange","propsChange","updateResultState","controlledProps","resultState","newQuery","newConfig","assign","SemanticSearchResult","ResultsNumberComponent","Props"],"mappings":"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","file":"semantic-search-result-aa39e47b8ab9bdae6aa7.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\nimport * as Kefir from 'kefir';\nimport * as _ from 'lodash';\nimport * as SparqlJs from 'sparqljs';\n\nimport { Cancellation } from 'platform/api/async';\nimport {\n  isValidChild,\n  componentHasType,\n  hasControlledProps,\n  ControlledPropsHandler,\n  universalChildren,\n} from 'platform/components/utils';\nimport { BuiltInEvents, listen } from 'platform/api/events';\nimport { Rdf } from 'platform/api/rdf';\nimport { SparqlUtil, SparqlClient, PatternBinder } from 'platform/api/sparql';\nimport { ErrorNotification } from 'platform/components/ui/notification';\n\nimport { ResultsNumber } from 'platform/components/semantic/results';\n\nimport { SemanticSearchContext, ResultContext } from './SemanticSearchApi';\nimport {\n  SEMANTIC_SEARCH_VARIABLES,\n  RESULT_VARIABLES,\n  Resource as PatternResource,\n  Literal as PatternLiteral,\n  DateRange as PatternDateRange,\n  NumericRange as PatternNumericRange,\n} from '../config/SearchConfig';\nimport { transformRangePattern } from '../data/Common';\nimport { tryGetRelationPatterns, generateQueryForMultipleDatasets } from '../data/search/SparqlQueryGenerator';\n\nclass SemanticSearchResult extends React.Component {\n  render() {\n    return (\n      <SemanticSearchContext.Consumer>\n        {(context) => <SemanticSearchResultInner {...this.props} context={context} />}\n      </SemanticSearchContext.Consumer>\n    );\n  }\n}\n\ninterface InnerProps {\n  context: ResultContext;\n}\n\ninterface State {\n  error?: string;\n}\n\ntype Bindings = { [variable: string]: Rdf.Node };\n\nclass SemanticSearchResultInner extends React.Component<InnerProps, State> {\n  private readonly cancellation = new Cancellation();\n\n  constructor(props: InnerProps) {\n    super(props);\n    this.state = {};\n  }\n\n  shouldComponentUpdate(nextProps: InnerProps, nextState: State) {\n    const { context } = this.props;\n    const { context: nextContext } = nextProps;\n    if (\n      !_.isEqual(nextContext.resultQuery.getOrElse(null), context.resultQuery.getOrElse(null)) ||\n      !_.isEqual(nextContext.bindings, context.bindings) ||\n      !_.isEqual(this.state, nextState) ||\n      !nextContext.availableDomains.isEqual(context.availableDomains)\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  componentWillUnmount() {\n    this.cancellation.cancelAll();\n  }\n\n  render() {\n    if (this.state.error) {\n      return <ErrorNotification errorMessage={this.state.error} />;\n    } else {\n      return this.mapChildren(this.props.children);\n    }\n  }\n\n  private listenToChildLoading = (child: React.ReactElement<any>) => {\n    if (child) {\n      if (typeof child !== 'string' && child.props.id) {\n        this.cancellation\n          .map(\n            listen({\n              eventType: BuiltInEvents.ComponentLoading,\n              source: child.props.id,\n            })\n          )\n          .observe({\n            value: (e) => {\n              const isResultCount = componentHasType(child, ResultsNumber);\n              this.props.context.notifyResultLoading(\n                isResultCount\n                  ? { type: 'count', task: e.data as Kefir.Property<number> }\n                  : {\n                      type: 'other',\n                      task: e.data.map(() => {\n                        /* void */\n                      }),\n                    }\n              );\n            },\n          });\n      } else {\n        this.setState({\n          error: `semantic-search-result child component should have the 'id' property`,\n        });\n      }\n    }\n  };\n\n  /**\n   * Goes through all children to find the one that takes query parameter\n   */\n  private mapChildren(children: React.ReactNode) {\n    return universalChildren(\n      React.Children.toArray(children).map((child) => {\n        if (!isValidChild(child)) {\n          return child;\n        } else {\n          if (_.has(child.props, 'query')) {\n            const controlled = this.tryMakeControlled(child);\n            return this.buildResultQuery(this.props, this.props.context, child.props.query)\n              .map((query) => this.updateChildQuery(controlled, query))\n              .getOrElse(null);\n          } else {\n            return React.cloneElement(child, child.props, this.mapChildren(child.props.children));\n          }\n        }\n      })\n    );\n  }\n\n  /**\n   * Delegates holding and updating state of child component to parent component through\n   * search API if child result component supports it.\n   * @see {hasControlledProps}\n   */\n  private tryMakeControlled(child: React.ReactElement<any>) {\n    if (hasControlledProps(child.type) && child.props.id) {\n      const handler: ControlledPropsHandler<object> = {\n        onControlledPropChange: (propsChange: object) => {\n          this.props.context.updateResultState(child.props.id, propsChange);\n        },\n      };\n      const controlledProps = this.props.context.resultState[child.props.id] || {};\n      return React.cloneElement(child, { ...controlledProps, ...handler });\n    }\n    return child;\n  }\n\n  private updateChildQuery(child: React.ReactElement<any>, newQuery: string) {\n    this.listenToChildLoading(child);\n    let newConfig = _.assign({}, child.props, { query: newQuery });\n    return React.cloneElement(child, newConfig, child.props.children);\n  }\n\n  private buildResultQuery = (props: InnerProps, context: ResultContext, query: string) => {\n    return context.resultQuery.map((subQuery) => {\n      const baseQuery = SparqlUtil.parseQuerySync<SparqlJs.SelectQuery>(query);\n      baseQuery.where.unshift(...subQuery.where);\n      const projectionVar = subQuery.variables[0] as string;\n\n      // if subQuery projection variable is different from default we need to make sure that\n      // the result is still available under default variable (?subject)\n      if (projectionVar.substring(1) !== SEMANTIC_SEARCH_VARIABLES.PROJECTION_ALIAS_VAR) {\n        baseQuery.where.push({\n          expression: projectionVar as SparqlJs.Term,\n          type: 'bind',\n          variable: ('?' + SEMANTIC_SEARCH_VARIABLES.PROJECTION_ALIAS_VAR) as SparqlJs.Term,\n        });\n      }\n\n      // override limit only when query doesn't already have one\n      if (!baseQuery.limit && this.props.context.baseConfig.limit) {\n        baseQuery.limit = context.baseConfig.limit;\n      }\n      // if context is set for result visualization we also need to\n      // rewrite the query to take into account virtual relations\n      if (_.has(context.bindings, RESULT_VARIABLES.CONTEXT_RELATION_VAR)) {\n        this.bindRelationPattern(baseQuery, context.bindings);\n      }\n\n      const queryWithBindings = SparqlClient.setBindings(baseQuery, this.props.context.bindings);\n      return SparqlUtil.serializeQuery(\n        generateQueryForMultipleDatasets(queryWithBindings, context.selectedDatasets, context.baseConfig.datasetsConfig)\n      );\n    });\n  };\n\n  /**\n   * Replace `FILTER(?__contextRelationPattern__)` with query pattern that\n   * corresponds to the pattern of the selected virtual FR\n   */\n  private bindRelationPattern = (query: SparqlJs.Query, bindings: Bindings) => {\n    this.props.context.searchProfileStore.map((profileStore) => {\n      const relation = this.props.context.visualizationContext.getOrElse(profileStore.relations.first());\n      const patternConfig = tryGetRelationPatterns(this.props.context.baseConfig, relation).find(\n        (p) => p.kind === 'resource' || p.kind === 'literal' || p.kind === 'date-range' || p.kind === 'numeric-range'\n      ) as PatternLiteral | PatternResource | PatternDateRange | PatternNumericRange;\n\n      if (patternConfig) {\n        let patterns = SparqlUtil.parsePatterns(patternConfig.queryPattern, query.prefixes);\n\n        // when we are using date-range or numeric-range virtual pattern\n        // as a context we need to make sure that we replace FILTERs with simple projections\n        if (patternConfig.kind === 'date-range') {\n          const range = {\n            begin: SEMANTIC_SEARCH_VARIABLES.DATE_BEGING_VAR,\n            end: SEMANTIC_SEARCH_VARIABLES.DATE_END_VAR,\n          };\n          patterns = transformRangePattern(patterns, range, range);\n        } else if (patternConfig.kind === 'numeric-range') {\n          const range = {\n            begin: SEMANTIC_SEARCH_VARIABLES.NUMERIC_RANGE_BEGIN_VAR,\n            end: SEMANTIC_SEARCH_VARIABLES.NUMERIC_RANGE_END_VAR,\n          };\n          patterns = transformRangePattern(patterns, range, range);\n        }\n\n        new PatternBinder(RESULT_VARIABLES.CONTEXT_RELATION_PATTERN_VAR, patterns).sparqlQuery(query);\n      }\n      return query;\n    });\n  };\n}\n\nexport default SemanticSearchResult;\n","/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nexport { ResultsNumberComponent as ResultsNumber, Props as ResultsNumberProps } from './ResultsNumber';\n"],"sourceRoot":""}