{"version":3,"sources":["webpack:///./src/main/web/components/query-editor/QueryValidatorComponent.ts"],"names":["FormGroup","createFactory","ReactBootstrap","FormControl","ControlLabel","HelpBlock","props","context","label","Kefir","pool","query","fetchQuery","iri","queryService","getQuery","Rdf","onValue","value","plug","constant","initPool","labelMapped","flatMap","validateLabel","v","setState","Just","onError","isValid","onChangeResult","queryMapped","validateQuery","onChangeVariables","combine","map","toProperty","state","isJust","get","o","onChange","variables","length","constantError","error","Error","undefined","type","queryType","SparqlUtil","parseQueryAsync","q","getVariables","flatMapErrors","e","message","getFormValue","target","visitor","variableTerm","variable","name","substr","this","indexOf","push","QueryVisitor","sparqlQuery","getValidationState","semanticContext","QueryService","Nothing","componentWillMount","componentDidMount","onUpdateProps","componentWillReceiveProps","nextProps","previous","labelValue","render","viewOnly","queryValue","D","div","className","validationState","disabled","pre","code","createElement","SparqlEditor","syntaxErrorCheck","style","marginBottom","Component","QueryValidatorComponent","component","factory"],"mappings":"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","file":"default~mp-sparql-query-editor~mp-spin-query-editor~mp-spin-query-template-editor-7d18e220c3f2948f0d5f.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { createFactory, createElement, FormEvent } from 'react';\nimport * as D from 'react-dom-factories';\nimport * as ReactBootstrap from 'react-bootstrap';\nimport { Just, Nothing } from 'data.maybe';\nimport * as Kefir from 'kefir';\nimport * as SparqlJs from 'sparqljs';\n\nimport { Component } from 'platform/api/components';\nimport { Rdf } from 'platform/api/rdf';\nimport { SparqlUtil, QueryVisitor } from 'platform/api/sparql';\nimport { Query, OperationType, QueryService, QueryServiceClass } from 'platform/api/services/ldp-query';\nimport { SparqlEditor } from 'platform/components/sparql-editor';\n\nimport './query-validator.scss';\n\nconst FormGroup = createFactory(ReactBootstrap.FormGroup);\nconst FormControl = createFactory(ReactBootstrap.FormControl);\nconst ControlLabel = createFactory(ReactBootstrap.ControlLabel);\nconst HelpBlock = createFactory(ReactBootstrap.HelpBlock);\n\nexport interface Value {\n  value: string | QueryValue;\n  error?: Error;\n}\n\nexport interface QueryValue {\n  query: string;\n  type: SparqlJs.SparqlQuery['type'] | '';\n  queryType: OperationType | '';\n  variables: string[];\n}\n\nexport interface Props {\n  iri?: string;\n  query?: Query;\n  viewOnly?: boolean;\n  onChange?: (query: Query, isValid: boolean) => void;\n  onChangeVariables?: (variables: string[]) => void;\n}\n\nexport interface State {\n  label?: Data.Maybe<Value>;\n  query?: Data.Maybe<Value>;\n  isValid?: boolean;\n}\n\nexport class QueryValidatorComponent extends Component<Props, State> {\n  private label: Kefir.Pool<string> = Kefir.pool<string>();\n  private query: Kefir.Pool<string> = Kefir.pool<string>();\n  private queryService: QueryServiceClass;\n\n  constructor(props: Props, context: any) {\n    super(props, context);\n    const semanticContext = this.context.semanticContext;\n    this.queryService = QueryService(semanticContext);\n    this.state = {\n      label: Nothing<Value>(),\n      query: Nothing<Value>(),\n      isValid: false,\n    };\n  }\n\n  componentWillMount() {\n    this.initPool();\n  }\n\n  componentDidMount() {\n    this.onUpdateProps({}, this.props);\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    this.onUpdateProps(this.props, nextProps);\n  }\n\n  private onUpdateProps(previous: Partial<Props>, props: Props) {\n    const { iri, query } = props;\n    if (iri && iri !== previous.iri) {\n      this.fetchQuery(props.iri);\n    } else if (query && query !== previous.query) {\n      // TODO: need to lift up state\n      if (!(previous.query && previous.query.value === query.value)) {\n        this.query.plug(Kefir.constant(query.value));\n      }\n      if (!(previous.query && previous.query.label === query.label)) {\n        const labelValue: Value = { value: query.label };\n        this.setState({ label: Just(labelValue) });\n      }\n    }\n  }\n\n  private fetchQuery = (iri: string) => {\n    this.queryService.getQuery(Rdf.iri(iri)).onValue((query) => {\n      const { label, value } = query;\n\n      this.label.plug(Kefir.constant(label));\n      this.query.plug(Kefir.constant(value));\n    });\n  };\n\n  private initPool = () => {\n    const labelMapped = this.label.flatMap<Value>(this.validateLabel);\n    labelMapped\n      .onValue((v) => this.setState({ label: Just(v) }))\n      .onError((v) => this.setState({ label: Just(v), isValid: false }, this.onChangeResult));\n\n    const queryMapped = this.query.flatMap<Value>(this.validateQuery);\n    queryMapped\n      .onValue((v) =>\n        this.setState({ query: Just(v), isValid: true }, () => {\n          this.onChangeVariables();\n          this.onChangeResult();\n        })\n      )\n      .onError((v) =>\n        this.setState({ query: Just(v), isValid: false }, () => {\n          this.onChangeVariables();\n          this.onChangeResult();\n        })\n      );\n\n    Kefir.combine(\n      [\n        labelMapped\n          .map((v) => v.value)\n          .toProperty(() => {\n            if (this.state.label.isJust) {\n              return this.state.label.get().value;\n            }\n          }),\n        queryMapped\n          .map((v) => v.value)\n          .toProperty(() => {\n            if (this.state.query.isJust) {\n              return this.state.query.get().value;\n            }\n          }),\n      ],\n      (label, query) => {\n        if (!label || !query) {\n          return;\n        }\n\n        this.setState({ isValid: true }, this.onChangeResult);\n        return {};\n      }\n    ).onValue((o) => o);\n  };\n\n  private onChangeResult = () => {\n    if (this.props.onChange) {\n      this.props.onChange(this.getQuery(), this.state.isValid);\n    }\n  };\n\n  private onChangeVariables = () => {\n    if (this.props.onChangeVariables) {\n      const value = this.state.query.get().value as QueryValue;\n      this.props.onChangeVariables(value.variables);\n    }\n  };\n\n  private validateLabel = (v: string): Kefir.Property<Value> => {\n    if (v.length < 1) {\n      return Kefir.constantError<Value>({\n        value: v,\n        error: new Error('Short description is required.'),\n      });\n    }\n    return Kefir.constant<Value>({ value: v });\n  };\n\n  private validateQuery = (query: string): Kefir.Property<Value> => {\n    if (query === undefined) {\n      return Kefir.constantError<Value>({\n        value: {\n          query: undefined,\n          type: undefined,\n          queryType: undefined,\n          variables: [],\n        },\n        error: new Error('Query is empty'),\n      });\n    }\n    return SparqlUtil.parseQueryAsync(query)\n      .flatMap<Value>((q: SparqlJs.SparqlQuery) => {\n        const queryType = q.type === 'update' ? 'UPDATE' : q.queryType;\n        return Kefir.constant<Value>({\n          value: {\n            query,\n            type: q.type,\n            queryType: queryType,\n            variables: this.getVariables(q),\n          },\n        });\n      })\n      .flatMapErrors<Value>((e) => {\n        return Kefir.constantError<Value>({\n          value: {\n            query,\n            type: undefined,\n            queryType: undefined,\n            variables: [],\n          },\n          error: e.error || new Error(e.message),\n        });\n      })\n      .toProperty();\n  };\n\n  private getFormValue = (e: FormEvent<ReactBootstrap.FormControl>): Kefir.Property<any> => {\n    return Kefir.constant((e.target as any).value);\n  };\n\n  private getVariables = (query: SparqlJs.SparqlQuery): string[] => {\n    const visitor = new (class extends QueryVisitor {\n      variables: string[] = [];\n\n      variableTerm(variable: SparqlJs.Term) {\n        const name = variable.substr(1);\n\n        if (this.variables.indexOf(name) === -1 && name !== '') {\n          this.variables.push(name);\n        }\n\n        return super.variableTerm(variable);\n      }\n    })();\n\n    visitor.sparqlQuery(query);\n\n    return visitor.variables;\n  };\n\n  private getQuery = (): Query => {\n    const { label, query } = this.state;\n    return {\n      label: label.isJust ? (label.get().value as string) : '',\n      value: query.isJust ? (query.get().value as QueryValue).query : '',\n      type: query.isJust ? (query.get().value as QueryValue).type : '',\n      queryType: query.isJust ? (query.get().value as QueryValue).queryType : '',\n    };\n  };\n\n  private getValidationState = (value: Data.Maybe<Value>): 'success' | 'warning' | 'error' => {\n    if (value.isJust && value.get().error) {\n      return 'error';\n    }\n  };\n\n  render() {\n    const { viewOnly } = this.props;\n\n    const { label, query } = this.state;\n\n    const queryValue = query.isJust ? (query.get().value as QueryValue).query : '';\n\n    return D.div(\n      { className: 'mp-query-validator' },\n      FormGroup(\n        { validationState: this.getValidationState(label) },\n        ControlLabel({}, 'Short Description*'),\n        FormControl({\n          type: 'text',\n          value: label.isJust ? (label.get().value as string) : '',\n          onChange: (e) => this.label.plug(this.getFormValue(e)),\n          disabled: viewOnly,\n        }),\n        this.getValidationState(label) === 'error' ? HelpBlock({}, label.get().error.message) : null\n      ),\n      FormGroup(\n        {},\n        ControlLabel({}, 'Query Type'),\n        FormControl({\n          type: 'text',\n          value: query.isJust ? (query.get().value as QueryValue).queryType : '',\n          disabled: true,\n        })\n      ),\n      viewOnly\n        ? D.pre({}, D.code({}, queryValue))\n        : createElement(SparqlEditor, {\n            query: queryValue,\n            syntaxErrorCheck: false,\n            onChange: (e) => this.query.plug(Kefir.constant(e.value)),\n          }),\n      FormGroup(\n        { validationState: this.getValidationState(query), style: { marginBottom: 0 } },\n        this.getValidationState(query) === 'error'\n          ? HelpBlock({ style: { marginBottom: 0 } }, query.get().error.message)\n          : null\n      )\n    );\n  }\n}\n\nexport type component = QueryValidatorComponent;\nexport const component = QueryValidatorComponent;\nexport const factory = createFactory(component);\nexport default component;\n"],"sourceRoot":""}