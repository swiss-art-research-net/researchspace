{"version":3,"sources":["webpack:///./src/main/web/components/semantic/graph/api/Api.ts","webpack:///./src/main/web/components/semantic/graph/api/Context.ts","webpack:///./src/main/web/components/semantic/graph/api/CytoscapeExtension.ts","webpack:///./src/main/web/components/semantic/graph/api/CytoscapeLayout.ts"],"names":["DATA_LOADED_EVENT","CytoscapeContextTypes","cytoscapeApi","PropTypes","any","isRequired","registerCytoscapeExtension","name","registrationFn","initializationFn","props","context","onCytoscapeReady","api","options","event","extensionContext","setState","instance","state","maybe","Nothing","componentDidMount","this","registerExtension","componentWillUnmount","map","cy","getOrElse","destroy","CytoscapeCore","prototype","assign","ready","render","Component","contextTypes","initializeLayout","mapOptionsFunction","layoutOptions","actions","setLayout","registerCytoscapeLayout","registerFn","type","cytoscape","jQuery"],"mappings":"4IAmBA,0BACA,0BACA,0BAEa,EAAAA,kBAAoB,e,sECJjC,WAEa,EAAAC,sBAAwB,CACnCC,aAAcC,EAAUC,IAAIC,a,kFCH9B,QACA,OACA,QAEA,UAEA,UA+BA,SAAgBC,2BAAoC,G,MAClDC,EAAA,EAAAA,KACAC,EAAA,EAAAA,eACAC,EAAA,EAAAA,iBAMA,OAAO,EAAP,YAIE,qCAAYC,EAAgBC,GAA5B,MACE,YAAMD,EAAOC,IAAQ,K,OAsCf,EAAAC,iBAAmB,SAACC,EAAmBC,GAAqB,gBAACC,GACnE,IAAMC,EAAmB,CAAEF,QAASA,EAASZ,aAAcW,GAC3D,EAAKI,SAAS,CACZC,SAAUT,EAAiBO,OAvC7B,EAAKG,MAAQ,CACXD,SAAUE,EAAMC,W,EA6CtB,OArDiD,2CAY/C,sCAAAC,kBAAA,WACEC,KAAKC,kBAAkBD,KAAKb,MAAOa,KAAKZ,QAAQT,eAGlD,sCAAAuB,qBAAA,sBACEF,KAAKJ,MAAMD,SAASQ,KAAI,SAACR,IAGF,EAAKP,QAAQT,aAAagB,SAASQ,KAAI,SAACC,GAAO,OAAAA,IAAOT,KAAUU,WAAU,IAC1EV,EAASW,SAC5BX,EAASW,cAKP,sCAAAL,kBAAR,SAA0Bd,EAAgBR,GAA1C,WACUgB,EAAA,EAAAA,SAMHY,EAAcC,UAAUxB,IAC3BC,EAAeN,GAEjBgB,EAASQ,KAAI,SAACC,GACZ,IAAMd,EAAM,EAAAmB,OAAO,GAAI9B,EAAc,CAAEgB,SAAUS,IACjDA,EAAGM,MAAM,EAAKrB,iBAAiBC,EAAKH,QAWxC,sCAAAwB,OAAA,WACE,OAAO,MAEX,4BArDA,CAAiD,EAAAC,YACxCC,aAAe,EAAAnC,sB,EAV1B,wDAiEA,UAAeK,4B,sECtGf,YACA,QAGA,UAyBA,SAAS+B,iBAAiB9B,EAAc+B,GACtC,OAAO,SAAU,G,IAAEpC,EAAA,EAAAA,aAAcY,EAAA,EAAAA,QAC3ByB,EAAgB,EAAAP,OAAyB,CAAEzB,KAAMA,GAAQO,GAG7D,OAFAyB,EAAgBD,EAAqBA,EAAmBpC,EAAcqC,GAAiBA,EACvFrC,EAAasC,QAAQC,UAAUF,GACxBnB,EAAMC,WApBjB,mCAAgBqB,wBACdnC,EACAoC,EACAL,GAIA,OAAO,EAAAhC,2BAA2B,CAChCC,KAAMA,EACNqC,KAAM,SACNpC,eALwB,SAACK,GAA6B,OAAA8B,EAAW9B,EAAIgC,UAAWhC,EAAIiC,SAMpFrC,iBAAkB4B,iBAAiB9B,EAAM+B","file":"default~semantic-graph~semantic-graph-extension-expand-collapse~semantic-graph-extension-navigator~s~e81a3fcc-eb2a16eb20bd93bbf772.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nexport * from './Context';\nexport * from './CytoscapeExtension';\nexport * from './CytoscapeLayout';\n\nexport const DATA_LOADED_EVENT = 'DATA_LOADED';\n","/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as PropTypes from 'prop-types';\n\nexport const CytoscapeContextTypes = {\n  cytoscapeApi: PropTypes.any.isRequired,\n};\n\nexport interface CytoscapeContext {\n  cytoscapeApi: ContextCytoscapeApi;\n}\n\ninterface BaseCytoscapeApi {\n  jQuery: JQueryStatic;\n  cytoscape: Cy.Static;\n  actions: {\n    setLayout: (layout: Cy.LayoutOptions) => void;\n    runLayout: () => void;\n  };\n}\n\nexport interface ContextCytoscapeApi extends BaseCytoscapeApi {\n  instance: Data.Maybe<Cy.Instance>;\n}\n\nexport interface CytoscapeApi extends BaseCytoscapeApi {\n  instance: Cy.Instance;\n}\n","/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { assign } from 'lodash';\nimport { Component, ComponentClass } from 'react';\nimport * as maybe from 'data.maybe';\n\nimport * as CytoscapeCore from 'cytoscape/src/core/index';\n\nimport { CytoscapeContext, CytoscapeContextTypes, CytoscapeApi, ContextCytoscapeApi } from './Context';\n\nexport interface CytoscapeExtension {\n  destroy(): void;\n}\n\nexport interface ExtensionContext<Options> {\n  cytoscapeApi: CytoscapeApi;\n  options: Options;\n}\n\nexport interface InitializationFunction<Options> {\n  (context: ExtensionContext<Options>): Data.Maybe<CytoscapeExtension>;\n}\n\nexport interface RegistrationFunction {\n  (api: ContextCytoscapeApi);\n}\n\n/**\n * http://js.cytoscape.org/#extensions/api\n */\nexport type ExtensionType = 'core' | 'collection' | 'layout' | 'renderer';\n\nexport interface ExtensionParams<Options> {\n  name: string;\n  type: ExtensionType;\n  registrationFn: RegistrationFunction;\n  initializationFn: InitializationFunction<Options>;\n}\n\nexport function registerCytoscapeExtension<Options>({\n  name,\n  registrationFn,\n  initializationFn,\n}: ExtensionParams<Options>): ComponentClass<Options> {\n  interface ExtensionState {\n    instance: Data.Maybe<CytoscapeExtension>;\n  }\n\n  return class CytoscapeExtensionComponent extends Component<Options, ExtensionState> {\n    static contextTypes = CytoscapeContextTypes;\n    context: CytoscapeContext;\n\n    constructor(props: Options, context: CytoscapeContext) {\n      super(props, context);\n\n      this.state = {\n        instance: maybe.Nothing<CytoscapeExtension>(),\n      };\n    }\n\n    componentDidMount() {\n      this.registerExtension(this.props, this.context.cytoscapeApi);\n    }\n\n    componentWillUnmount() {\n      this.state.instance.map((instance) => {\n        // for layouts, instance can be actual cytoscape instance\n        // we shouldn't destroy it here\n        const isCyInstance = this.context.cytoscapeApi.instance.map((cy) => cy === instance).getOrElse(false);\n        if (!isCyInstance && instance.destroy) {\n          instance.destroy();\n        }\n      });\n    }\n\n    private registerExtension(props: Options, cytoscapeApi: ContextCytoscapeApi) {\n      const { instance } = cytoscapeApi;\n\n      // quick and dirty way to check if extension has been already registered,\n      // it uses non-public cytoscape API\n      // maybe someday there will be better solution\n      // see https://github.com/cytoscape/cytoscape.js/issues/1585\n      if (!CytoscapeCore.prototype[name]) {\n        registrationFn(cytoscapeApi);\n      }\n      instance.map((cy) => {\n        const api = assign({}, cytoscapeApi, { instance: cy }) as CytoscapeApi;\n        cy.ready(this.onCytoscapeReady(api, props));\n      });\n    }\n\n    private onCytoscapeReady = (api: CytoscapeApi, options: Options) => (event: Cy.EventObject) => {\n      const extensionContext = { options: options, cytoscapeApi: api };\n      this.setState({\n        instance: initializationFn(extensionContext),\n      });\n    };\n\n    render() {\n      return null;\n    }\n  };\n}\n\nexport default registerCytoscapeExtension;\n","/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { assign } from 'lodash';\nimport * as maybe from 'data.maybe';\n\nimport { ContextCytoscapeApi, CytoscapeApi } from './Context';\nimport { registerCytoscapeExtension, ExtensionContext, CytoscapeExtension } from './CytoscapeExtension';\n\ntype RegistrationFunction = (cytoscape: Cy.Static, jquery: JQueryStatic) => void;\n\n/**\n * To map layout attributes values, e.g when layout accept function as an option\n * but function can't be passed as html attribute value.\n */\ntype MapOptionsFunction = (api: CytoscapeApi, options: Cy.LayoutOptions) => Cy.LayoutOptions;\n\nexport function registerCytoscapeLayout(\n  name: string,\n  registerFn: RegistrationFunction,\n  mapOptionsFunction?: MapOptionsFunction\n) {\n  const registerFnWrapper = (api: ContextCytoscapeApi) => registerFn(api.cytoscape, api.jQuery);\n\n  return registerCytoscapeExtension({\n    name: name,\n    type: 'layout',\n    registrationFn: registerFnWrapper,\n    initializationFn: initializeLayout(name, mapOptionsFunction),\n  });\n}\n\nfunction initializeLayout(name: string, mapOptionsFunction?: MapOptionsFunction) {\n  return function ({ cytoscapeApi, options }: ExtensionContext<Cy.LayoutOptions>): Data.Maybe<CytoscapeExtension> {\n    let layoutOptions = assign<Cy.LayoutOptions>({ name: name }, options);\n    layoutOptions = mapOptionsFunction ? mapOptionsFunction(cytoscapeApi, layoutOptions) : layoutOptions;\n    cytoscapeApi.actions.setLayout(layoutOptions);\n    return maybe.Nothing<CytoscapeExtension>();\n  };\n}\n"],"sourceRoot":""}