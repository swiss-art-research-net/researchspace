{"version":3,"sources":["webpack:///./src/main/web/components/3-rd-party/ontodia/AsyncAdapters.ts"],"names":["makeCancelledError","Error","observableToCancellablePromise","observable","ct","aborted","Promise","reject","resolve","observableSubscription","tokenSubscription","resolved","markResolvedAndCleanup","unsubscribe","removeEventListener","observe","value","error","end","addEventListener","deriveCancellationToken","cancellation","event","handler","onCancel","offCancel"],"mappings":"8EAyFA,SAASA,qBACP,OAAO,IAAIC,MAAM,+B,iDAlEnB,0CAAgBC,+BAAkCC,EAAiCC,GACjF,OAAIA,EAAGC,QACEC,QAAQC,OAAOP,sBAEjB,IAAIM,SAAW,SAACE,EAASD,GAC9B,IACIE,EACAC,EAFAC,GAAW,EAITC,uBAAyB,WACzBD,IAGJA,GAAW,EACPF,GACFA,EAAuBI,cAErBH,GACFN,EAAGU,oBAAoB,QAASJ,KAIpCD,EAAyBN,EAAWY,QAAQ,CAC1CC,MAAO,SAACA,GACFL,IAGJC,yBACIR,EAAGC,QACLE,EAAOP,sBAGTQ,EAAQQ,KAEVC,MAAO,SAACA,GACFN,IAGJC,yBACIR,EAAGC,QACLE,EAAOP,sBAGTO,EAAOU,KAETC,IAAK,WACCP,IAGJC,yBACAL,EAAO,IAAIN,MAAM,+DAIhBU,IACCP,EAAGC,QACLO,0BAEAF,EAAoB,WAAM,OAAAE,0BAC1BR,EAAGe,iBAAiB,QAAST,SAUrC,mCAAgBU,wBAAwBC,GACtC,MAAO,CACL,cACE,OAAOA,EAAahB,SAEtBc,iBAAkB,SAACG,EAAgBC,GACjCF,EAAaG,SAASD,IAExBT,oBAAqB,SAACQ,EAAgBC,GACpCF,EAAaI,UAAUF","file":"default~diagram-search-result~ontodia~ontodia-field-configuration~rs-ontodia-metadata-from-fields~rs~5e2fb631-99ecbea511bf76e06bc6.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as Kefir from 'kefir';\nimport { CancellationToken } from 'ontodia';\n\nimport { Cancellation as PlatformCancellation } from 'platform/api/async';\n\nexport function observableToCancellablePromise<T>(observable: Kefir.Observable<T>, ct: CancellationToken): Promise<T> {\n  if (ct.aborted) {\n    return Promise.reject(makeCancelledError());\n  }\n  return new Promise<T>((resolve, reject) => {\n    let resolved = false;\n    let observableSubscription: Kefir.Subscription | undefined;\n    let tokenSubscription: (() => void) | undefined;\n\n    const markResolvedAndCleanup = () => {\n      if (resolved) {\n        return;\n      }\n      resolved = true;\n      if (observableSubscription) {\n        observableSubscription.unsubscribe();\n      }\n      if (tokenSubscription) {\n        ct.removeEventListener('abort', tokenSubscription);\n      }\n    };\n\n    observableSubscription = observable.observe({\n      value: (value) => {\n        if (resolved) {\n          return;\n        }\n        markResolvedAndCleanup();\n        if (ct.aborted) {\n          reject(makeCancelledError());\n          return;\n        }\n        resolve(value);\n      },\n      error: (error) => {\n        if (resolved) {\n          return;\n        }\n        markResolvedAndCleanup();\n        if (ct.aborted) {\n          reject(makeCancelledError());\n          return;\n        }\n        reject(error);\n      },\n      end: () => {\n        if (resolved) {\n          return;\n        }\n        markResolvedAndCleanup();\n        reject(new Error('Observable ended without producing a value or an error'));\n      },\n    });\n\n    if (!resolved) {\n      if (ct.aborted) {\n        markResolvedAndCleanup();\n      } else {\n        tokenSubscription = () => markResolvedAndCleanup();\n        ct.addEventListener('abort', tokenSubscription);\n      }\n    }\n  });\n}\n\nfunction makeCancelledError() {\n  return new Error('The operation was cancelled');\n}\n\nexport function deriveCancellationToken(cancellation: PlatformCancellation): CancellationToken {\n  return {\n    get aborted() {\n      return cancellation.aborted;\n    },\n    addEventListener: (event: 'abort', handler) => {\n      cancellation.onCancel(handler);\n    },\n    removeEventListener: (event: 'abort', handler) => {\n      cancellation.offCancel(handler);\n    },\n  };\n}\n"],"sourceRoot":""}