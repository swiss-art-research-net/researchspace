{"version":3,"sources":["webpack:///./node_modules/cipher-base/index.js"],"names":["Buffer","Transform","StringDecoder","CipherBase","hashMode","call","this","_finalOrDigest","final","_final","__final","_decoder","_encoding","inherits","prototype","update","data","inputEnc","outputEnc","from","outData","_update","_toString","setAutoPadding","getAuthTag","Error","setAuthTag","setAAD","_transform","_","next","err","push","e","_flush","done","alloc","value","enc","fin","out","write","end","module","exports"],"mappings":"+EAAA,IAAIA,EAAS,EAAQ,MAAeA,OAChCC,EAAY,EAAQ,KAAUA,UAC9BC,EAAgB,EAAQ,KAAkBA,cAG9C,SAASC,WAAYC,GACnBH,EAAUI,KAAKC,MACfA,KAAKF,SAA+B,iBAAbA,EACnBE,KAAKF,SACPE,KAAKF,GAAYE,KAAKC,eAEtBD,KAAKE,MAAQF,KAAKC,eAEhBD,KAAKG,SACPH,KAAKI,QAAUJ,KAAKG,OACpBH,KAAKG,OAAS,MAEhBH,KAAKK,SAAW,KAChBL,KAAKM,UAAY,KAfJ,EAAQ,GAiBvBC,CAASV,WAAYF,GAErBE,WAAWW,UAAUC,OAAS,SAAUC,EAAMC,EAAUC,GAClC,iBAATF,IACTA,EAAOhB,EAAOmB,KAAKH,EAAMC,IAG3B,IAAIG,EAAUd,KAAKe,QAAQL,GAC3B,OAAIV,KAAKF,SAAiBE,MAEtBY,IACFE,EAAUd,KAAKgB,UAAUF,EAASF,IAG7BE,IAGTjB,WAAWW,UAAUS,eAAiB,aACtCpB,WAAWW,UAAUU,WAAa,WAChC,MAAM,IAAIC,MAAM,gDAGlBtB,WAAWW,UAAUY,WAAa,WAChC,MAAM,IAAID,MAAM,gDAGlBtB,WAAWW,UAAUa,OAAS,WAC5B,MAAM,IAAIF,MAAM,2CAGlBtB,WAAWW,UAAUc,WAAa,SAAUZ,EAAMa,EAAGC,GACnD,IAAIC,EACJ,IACMzB,KAAKF,SACPE,KAAKe,QAAQL,GAEbV,KAAK0B,KAAK1B,KAAKe,QAAQL,IAEzB,MAAOiB,GACPF,EAAME,EACN,QACAH,EAAKC,KAGT5B,WAAWW,UAAUoB,OAAS,SAAUC,GACtC,IAAIJ,EACJ,IACEzB,KAAK0B,KAAK1B,KAAKI,WACf,MAAOuB,GACPF,EAAME,EAGRE,EAAKJ,IAEP5B,WAAWW,UAAUP,eAAiB,SAAUW,GAC9C,IAAIE,EAAUd,KAAKI,WAAaV,EAAOoC,MAAM,GAI7C,OAHIlB,IACFE,EAAUd,KAAKgB,UAAUF,EAASF,GAAW,IAExCE,GAGTjB,WAAWW,UAAUQ,UAAY,SAAUe,EAAOC,EAAKC,GAMrD,GALKjC,KAAKK,WACRL,KAAKK,SAAW,IAAIT,EAAcoC,GAClChC,KAAKM,UAAY0B,GAGfhC,KAAKM,YAAc0B,EAAK,MAAM,IAAIb,MAAM,0BAE5C,IAAIe,EAAMlC,KAAKK,SAAS8B,MAAMJ,GAK9B,OAJIE,IACFC,GAAOlC,KAAKK,SAAS+B,OAGhBF,GAGTG,EAAOC,QAAUzC","file":"npm.cipher-base-df59b85ca6e4e46f325a.js","sourcesContent":["var Buffer = require('safe-buffer').Buffer\nvar Transform = require('stream').Transform\nvar StringDecoder = require('string_decoder').StringDecoder\nvar inherits = require('inherits')\n\nfunction CipherBase (hashMode) {\n  Transform.call(this)\n  this.hashMode = typeof hashMode === 'string'\n  if (this.hashMode) {\n    this[hashMode] = this._finalOrDigest\n  } else {\n    this.final = this._finalOrDigest\n  }\n  if (this._final) {\n    this.__final = this._final\n    this._final = null\n  }\n  this._decoder = null\n  this._encoding = null\n}\ninherits(CipherBase, Transform)\n\nCipherBase.prototype.update = function (data, inputEnc, outputEnc) {\n  if (typeof data === 'string') {\n    data = Buffer.from(data, inputEnc)\n  }\n\n  var outData = this._update(data)\n  if (this.hashMode) return this\n\n  if (outputEnc) {\n    outData = this._toString(outData, outputEnc)\n  }\n\n  return outData\n}\n\nCipherBase.prototype.setAutoPadding = function () {}\nCipherBase.prototype.getAuthTag = function () {\n  throw new Error('trying to get auth tag in unsupported state')\n}\n\nCipherBase.prototype.setAuthTag = function () {\n  throw new Error('trying to set auth tag in unsupported state')\n}\n\nCipherBase.prototype.setAAD = function () {\n  throw new Error('trying to set aad in unsupported state')\n}\n\nCipherBase.prototype._transform = function (data, _, next) {\n  var err\n  try {\n    if (this.hashMode) {\n      this._update(data)\n    } else {\n      this.push(this._update(data))\n    }\n  } catch (e) {\n    err = e\n  } finally {\n    next(err)\n  }\n}\nCipherBase.prototype._flush = function (done) {\n  var err\n  try {\n    this.push(this.__final())\n  } catch (e) {\n    err = e\n  }\n\n  done(err)\n}\nCipherBase.prototype._finalOrDigest = function (outputEnc) {\n  var outData = this.__final() || Buffer.alloc(0)\n  if (outputEnc) {\n    outData = this._toString(outData, outputEnc, true)\n  }\n  return outData\n}\n\nCipherBase.prototype._toString = function (value, enc, fin) {\n  if (!this._decoder) {\n    this._decoder = new StringDecoder(enc)\n    this._encoding = enc\n  }\n\n  if (this._encoding !== enc) throw new Error('can\\'t switch encodings')\n\n  var out = this._decoder.write(value)\n  if (fin) {\n    out += this._decoder.end()\n  }\n\n  return out\n}\n\nmodule.exports = CipherBase\n"],"sourceRoot":""}