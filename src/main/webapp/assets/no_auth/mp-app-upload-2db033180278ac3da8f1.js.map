{"version":3,"sources":["webpack:///./src/main/web/components/admin/app-upload/AppUpload.tsx"],"names":["props","context","cancellation","Cancellation","uploadFile","file","req","request","post","attach","send","requestAsProperty","map","res","text","onDrop","files","setState","messages","fileNumber","upload","observe","value","appendUploadMessage","error","name","state","componentWillUnmount","this","cancelAll","message","uploadError","RestartButton","RestartWrapper","Button","bsStyle","alert","AlertType","WARNING","SUCCESS","children","ErrorPresenter","render","config","index","Alert","key","className","Dropzone","multiple","style","margin","Component","AppUpload"],"mappings":"6IAkBA,OAEA,UACA,UACA,QACA,QACA,QACA,QAEA,SACA,SAMA,cAGE,mBAAYA,EAAWC,GAAvB,MACE,YAAMD,EAAOC,IAAQ,K,OAHN,EAAAC,aAAe,IAAI,EAAAC,aAa5B,EAAAC,WAAa,SAACC,GACpB,IAAMC,EAAMC,EAAQC,KAAK,uCAAuCC,OAAO,OAAQJ,GAG/E,OADAC,EAAII,KAAKL,GACF,EAAAM,kBAAkBL,GAAKM,KAAI,SAACC,GAAQ,OAAAA,EAAIC,SAGzC,EAAAC,OAAS,SAACC,GAChB,EAAKC,SAAS,CACZC,SAAU,KAGZF,EAAMJ,KAAI,SAACP,EAAYc,GACrB,IAAMC,EAAS,EAAKhB,WAAWC,GAQ/B,OANA,EAAKH,aAAaU,IAAIQ,GAAQC,QAAQ,CACpCC,MAAO,SAACA,GAAU,SAAKC,oBAAoBD,IAC3CE,MAAO,SAACA,GACN,EAAKD,oBAAoB,SAAWlB,EAAKoB,KAAO,WAAYD,MAGzDJ,MA9BT,EAAKM,MAAQ,CACXR,SAAU,I,EAqEhB,OA3E+B,yBAU7B,oBAAAS,qBAAA,WACEC,KAAK1B,aAAa2B,aA4BZ,oBAAAN,oBAAR,SAA4BO,EAAiBC,GAC3C,IAAMC,EACJ,gBAAC,EAAAC,eAAc,KACb,gBAAC,EAAAC,OAAM,CAACC,QAAQ,WAAS,gBAG7BP,KAAKX,UACH,SAACS,GACC,MAAO,CACLR,SAAU,EAAF,eACHQ,EAAMR,SAAQ,CACjB,CACEkB,MAAOL,EAAc,EAAAM,UAAUC,QAAU,EAAAD,UAAUE,QACnDT,QAAO,EACPU,SAAUT,EAAc,gBAAC,EAAAU,eAAc,CAACjB,MAAOO,IAAkBC,UAQ7E,oBAAAU,OAAA,WACE,IAAMxB,EAAWU,KAAKF,MAAMR,SAASN,KAAI,SAAC+B,EAAQC,GAAU,uBAAC,EAAAC,MAAK,YAACC,IAAKF,GAAWD,OACnF,OACE,uBAAKI,UAAW,eACd,gBAAC,EAAAC,SAAQ,CAACC,UAAU,EAAOlC,OAAQa,KAAKb,OAAQmC,MAAO,CAAEC,OAAQ,SAC/D,8IAKDjC,IAIT,UA3EA,CAA+B,EAAAkC,WAAlB,EAAAC,YA6Eb,UAAeA","file":"mp-app-upload-2db033180278ac3da8f1.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\nimport * as Kefir from 'kefir';\nimport { Dropzone } from 'platform/components/ui/dropzone';\nimport { RestartWrapper } from 'platform/components/admin/RestartWrapper';\nimport { Button } from 'react-bootstrap';\nimport * as request from 'platform/api/http';\nimport { Component } from 'platform/api/components';\nimport { Cancellation, requestAsProperty } from 'platform/api/async';\n\nimport { Alert, AlertConfig, AlertType } from 'platform/components/ui/alert';\nimport { ErrorPresenter } from 'platform/components/ui/notification';\n\ninterface State {\n  messages?: ReadonlyArray<AlertConfig>;\n}\n\nexport class AppUpload extends Component<{}, State> {\n  private readonly cancellation = new Cancellation();\n\n  constructor(props: {}, context: any) {\n    super(props, context);\n    this.state = {\n      messages: [],\n    };\n  }\n\n  componentWillUnmount() {\n    this.cancellation.cancelAll();\n  }\n\n  private uploadFile = (file: File): Kefir.Property<string> => {\n    const req = request.post('/rest/admin/apps/upload-and-install').attach('file', file as any);\n\n    req.send(file as any);\n    return requestAsProperty(req).map((res) => res.text);\n  };\n\n  private onDrop = (files: ReadonlyArray<File>) => {\n    this.setState({\n      messages: [],\n    });\n\n    files.map((file: File, fileNumber: number) => {\n      const upload = this.uploadFile(file);\n\n      this.cancellation.map(upload).observe({\n        value: (value) => this.appendUploadMessage(value),\n        error: (error) => {\n          this.appendUploadMessage('File: ' + file.name + ' failed.', error);\n        },\n      });\n      return upload;\n    });\n  };\n\n  private appendUploadMessage(message: string, uploadError?: any) {\n    const RestartButton = (\n      <RestartWrapper>\n        <Button bsStyle=\"primary\">Restart Now</Button>\n      </RestartWrapper>\n    );\n    this.setState(\n      (state: State): State => {\n        return {\n          messages: [\n            ...state.messages,\n            {\n              alert: uploadError ? AlertType.WARNING : AlertType.SUCCESS,\n              message,\n              children: uploadError ? <ErrorPresenter error={uploadError} /> : RestartButton,\n            },\n          ],\n        };\n      }\n    );\n  }\n\n  render() {\n    const messages = this.state.messages.map((config, index) => <Alert key={index} {...config} />);\n    return (\n      <div className={'text-center'}>\n        <Dropzone multiple={false} onDrop={this.onDrop} style={{ margin: 'auto' }}>\n          <span>\n            Please drag&amp;drop your app zip file here OR click into the field to open the browser's standard file\n            selector.\n          </span>\n        </Dropzone>\n        {messages}\n      </div>\n    );\n  }\n}\n\nexport default AppUpload;\n"],"sourceRoot":""}