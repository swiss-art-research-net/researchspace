{"version":3,"sources":["webpack:///./src/main/web/components/admin/namespace-manager/NamespaceManager.tsx"],"names":["props","context","cancellation","Cancellation","onPrefixInput","e","setState","isLoading","selectedPrefix","target","value","trim","onNamespaceInput","selectedNamespace","onSelectedAppChange","selectedAppId","onSetNamespace","stopPropagation","preventDefault","isApplyingModifications","map","NamespaceService","setPrefix","state","observe","refresh","error","modificationError","render","this","loadingError","ErrorNotification","errorMessage","Spinner","className","styles","component","getTable","Alert","alert","AlertType","DANGER","message","ErrorPresenter","getUpdatePanel","componentDidMount","Kefir","combine","data","getNamespaceRecords","appStatus","ConfigService","getStorageStatus","chooseDefaultTargetApp","componentWillUnmount","cancelAll","params","columnConfig","variableName","displayName","cellComponent","onDelete","record","deleteNamespace","onDeleteClick","confirm","onConfirm","rowData","onCancel","isSystemNamespacePrefix","prefix","Button","onClick","Component","tableData","filter","length","namespace","iri","appId","orderBy","Table","numberOfDisplayedRows","maybe","Just","columnConfiguration","Either","Left","layout","options","resultsPerPage","tupleTemplate","Nothing","classnames","updatePanel","FormControl","type","placeholder","onChange","updatePanel_submit","StorageSelector","allApps","sourceApps","targetApp","ButtonToolbar","bsSize","bsStyle","disabled","deletePrefix","NamespaceManager"],"mappings":"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","file":"mp-admin-namespace-manager-a34a083b65ae227a66d6.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\nimport { KeyboardEvent, MouseEvent } from 'react';\nimport { Button, ButtonToolbar, FormControl } from 'react-bootstrap';\nimport * as Kefir from 'kefir';\nimport { orderBy } from 'lodash';\nimport * as maybe from 'data.maybe';\nimport * as Either from 'data.either';\nimport * as classnames from 'classnames';\n\nimport { Cancellation } from 'platform/api/async';\nimport { Component } from 'platform/api/components';\nimport { SparqlClient } from 'platform/api/sparql';\nimport { refresh } from 'platform/api/navigation';\nimport * as ConfigService from 'platform/api/services/config';\nimport * as NamespaceService from 'platform/api/services/namespace';\n\nimport { StorageSelector, chooseDefaultTargetApp } from 'platform/components/admin/config-manager';\nimport { Table, TableColumnConfiguration, CellRendererProps } from 'platform/components/semantic/table';\nimport { Error, Alert, AlertType, AlertConfig } from 'platform/components/ui/alert';\nimport { ErrorNotification, ErrorPresenter } from 'platform/components/ui/notification';\nimport { Spinner } from 'platform/components/ui/spinner';\n\nimport * as styles from './NamespaceManager.scss';\n\ninterface State {\n  isLoading?: boolean;\n  data?: ReadonlyArray<NamespaceService.NamespaceRecord>;\n  appStatus?: ReadonlyArray<ConfigService.ConfigStorageStatus>;\n  loadingError?: any;\n  isApplyingModifications?: boolean;\n  modificationError?: any;\n  selectedPrefix?: string;\n  selectedNamespace?: string;\n  selectedAppId?: string;\n}\n\ninterface PrefixRecord {\n  prefix: string;\n  namespace: string;\n  appId: string;\n}\n\nexport class NamespaceManager extends Component<{}, State> {\n  private readonly cancellation = new Cancellation();\n\n  constructor(props: {}, context: any) {\n    super(props, context);\n    this.state = {\n      isLoading: true,\n      selectedPrefix: '',\n      selectedNamespace: '',\n    };\n  }\n\n  render() {\n    if (this.state.loadingError) {\n      return <ErrorNotification errorMessage={this.state.loadingError} />;\n    } else if (this.state.isLoading) {\n      return <Spinner />;\n    }\n\n    return (\n      <div className={styles.component}>\n        {this.getTable()}\n        {this.state.modificationError ? (\n          <Alert alert={AlertType.DANGER} message=\"\">\n            <ErrorPresenter error={this.state.modificationError} />\n          </Alert>\n        ) : null}\n        {this.getUpdatePanel()}\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    this.cancellation\n      .map(\n        Kefir.combine({\n          data: NamespaceService.getNamespaceRecords(),\n          appStatus: ConfigService.getStorageStatus(),\n        })\n      )\n      .observe({\n        value: ({ data, appStatus }) => {\n          const selectedAppId = chooseDefaultTargetApp(appStatus);\n          this.setState({ isLoading: false, data, appStatus, selectedAppId });\n        },\n        error: (loadingError) => this.setState({ isLoading: false, loadingError }),\n      });\n  }\n\n  componentWillUnmount() {\n    this.cancellation.cancelAll();\n  }\n\n  private getTable() {\n    const deleteNamespace = (record: PrefixRecord) => this.deleteNamespace(record);\n\n    const columnConfig: TableColumnConfiguration[] = [\n      { variableName: 'prefix', displayName: 'Prefix' },\n      { variableName: 'namespace', displayName: 'Namespace' },\n      { variableName: 'appId', displayName: 'Source App' },\n      {\n        displayName: 'Actions',\n        cellComponent: createActionsCellRenderer({\n          onDelete: (record) => this.deleteNamespace(record),\n        }),\n      },\n    ];\n\n    let tableData = this.state.data\n      .filter((record) => record.prefix.length > 0)\n      .map(\n        (record): PrefixRecord => ({\n          prefix: record.prefix,\n          namespace: record.iri,\n          appId: record.appId,\n        })\n      );\n    tableData = orderBy(tableData, [\n      (record) => record.prefix,\n      (record) => (NamespaceService.isSystemNamespacePrefix(record.prefix) ? 0 : 1),\n    ]);\n\n    const griddleOptions = {\n      resultsPerPage: 20,\n    };\n    return (\n      <Table\n        numberOfDisplayedRows={maybe.Just(10)}\n        columnConfiguration={columnConfig}\n        data={Either.Left<any[], SparqlClient.SparqlSelectResult>(tableData)}\n        layout={maybe.Just<{}>({ options: griddleOptions, tupleTemplate: maybe.Nothing<string>() })}\n      />\n    );\n  }\n\n  private getUpdatePanel() {\n    if (this.state.isApplyingModifications) {\n      return <Spinner />;\n    }\n    return (\n      <div className={classnames(styles.updatePanel, 'row')}>\n        <div className=\"col-xs-1 px-0\">\n          <FormControl\n            type=\"text\"\n            placeholder=\"Prefix\"\n            value={this.state.selectedPrefix}\n            onChange={this.onPrefixInput}\n          />\n        </div>\n        <div className=\"col-xs-5\">\n          <FormControl\n            type=\"text\"\n            placeholder=\"Namespace\"\n            value={this.state.selectedNamespace}\n            onChange={this.onNamespaceInput}\n          />\n        </div>\n        <div className={classnames(styles.updatePanel_submit, 'col-xs-6')}>\n          <StorageSelector\n            allApps={this.state.appStatus}\n            sourceApps={[]}\n            targetApp={this.state.selectedAppId}\n            onChange={this.onSelectedAppChange}\n          />\n          <ButtonToolbar>\n            <Button\n              type=\"submit\"\n              bsSize=\"small\"\n              bsStyle=\"primary\"\n              onClick={this.onSetNamespace}\n              disabled={!(this.state.selectedPrefix && this.state.selectedNamespace && this.state.selectedAppId)}\n            >\n              Set Namespace\n            </Button>\n          </ButtonToolbar>\n        </div>\n      </div>\n    );\n  }\n\n  private onPrefixInput = (e: React.KeyboardEvent<FormControl>) => {\n    this.setState({\n      isLoading: false,\n      selectedPrefix: (e.target as HTMLInputElement).value.trim(),\n    });\n  };\n\n  private onNamespaceInput = (e: KeyboardEvent<FormControl>): void => {\n    this.setState({\n      isLoading: false,\n      selectedNamespace: (e.target as HTMLInputElement).value.trim(),\n    });\n  };\n\n  private onSelectedAppChange = (selectedAppId: string) => {\n    this.setState({ selectedAppId });\n  };\n\n  private deleteNamespace(record: PrefixRecord) {\n    this.setState({ isApplyingModifications: true });\n    this.cancellation.map(NamespaceService.deletePrefix(record.prefix, record.appId)).observe({\n      value: () => refresh(),\n      error: (modificationError) =>\n        this.setState({\n          isApplyingModifications: false,\n          modificationError,\n        }),\n    });\n  }\n\n  private onSetNamespace = (e: MouseEvent<Button>) => {\n    e.stopPropagation();\n    e.preventDefault();\n\n    this.setState({ isApplyingModifications: true });\n    this.cancellation\n      .map(\n        NamespaceService.setPrefix(this.state.selectedPrefix, this.state.selectedNamespace, this.state.selectedAppId)\n      )\n      .observe({\n        value: () => refresh(),\n        error: (modificationError) =>\n          this.setState({\n            isApplyingModifications: false,\n            modificationError,\n          }),\n      });\n  };\n}\n\nfunction createActionsCellRenderer(params: { onDelete: (record: PrefixRecord) => void }) {\n  return class extends Component<CellRendererProps, { confirm?: boolean }> {\n    constructor(props: CellRendererProps, context: any) {\n      super(props, context);\n      this.state = { confirm: false };\n    }\n\n    render() {\n      const record = this.props.rowData as PrefixRecord;\n      if (NamespaceService.isSystemNamespacePrefix(record.prefix)) {\n        return null;\n      } else if (this.state.confirm) {\n        return (\n          <div>\n            Delete prefix \"{record.prefix}\"?\n            <div>\n              <Button className=\"btn-grey btn-danger\" onClick={this.onConfirm}>\n                Delete\n              </Button>\n              <Button className=\"btn-grey\" onClick={this.onCancel}>\n                Cancel\n              </Button>\n            </div>\n          </div>\n        );\n      } else {\n        return (\n          <Button className=\"btn-grey btn-danger\" onClick={this.onDeleteClick}>\n            <span className=\"fa fa-trash-o\" />\n            &nbsp;Delete\n          </Button>\n        );\n      }\n    }\n\n    private onDeleteClick = () => {\n      this.setState({ confirm: true });\n    };\n\n    private onConfirm = () => {\n      this.setState({ confirm: false });\n      const record = this.props.rowData as PrefixRecord;\n      const { onDelete } = params;\n      onDelete(record);\n    };\n\n    private onCancel = () => {\n      this.setState({ confirm: false });\n    };\n  };\n}\n\nexport default NamespaceManager;\n"],"sourceRoot":""}