{"version":3,"sources":["webpack:///./src/main/web/components/workflow/WorkflowSelectionAction.tsx"],"names":["props","context","cancellation","Cancellation","state","values","componentDidMount","this","map","listen","eventType","SelectionEvents","Toggle","target","selection","bufferWithTimeOrCount","filter","events","length","onValue","setState","prevState","forEach","data","tag","value","componentDidUpdate","prevProps","onChange","componentWillUnmount","cancelAll","mapChildren","children","universalChildren","React","Children","child","isValidChild","componentHasType","WorkflowManagerComponent","selectedValues","Object","keys","iri","cloneElement","iris","render","contextTypes","Component","SelectionGroupContextTypes","WorkflowSelectionAction"],"mappings":"6IAkBA,OAEA,QACA,SACA,QACA,SACA,UAEA,UA8BA,cASE,iCAAYA,EAAcC,GAA1B,MACE,YAAMD,EAAOC,IAAQ,K,OATN,EAAAC,aAAe,IAAI,EAAAC,aAUlC,EAAKC,MAAQ,CACXC,OAAQ,I,EAyDd,OArE6C,uCAgB3C,kCAAAC,kBAAA,sBACEC,KAAKL,aACFM,IACC,EAAAC,OAAO,CACLC,UAAW,EAAAC,gBAAgBC,OAC3BC,OAAQN,KAAKP,MAAMc,YAGlBC,sBAAsB,IAAK,KAC3BC,QAAO,SAACC,GAAW,OAAAA,EAAOC,OAAS,MAEvCC,SAAQ,SAACF,GACR,SAAKG,UACH,SAACC,GACC,IAAMhB,EAAS,GAEf,OADAY,EAAOK,SAAQ,SAAC,G,IAAEC,EAAA,EAAAA,KAAW,OAAClB,EAAOkB,EAAKC,KAAOD,EAAKE,SAC/C,CAAEpB,OAAQ,EAAF,uBAAOgB,EAAUhB,QAAWA,WAMrD,kCAAAqB,mBAAA,SAAmBC,EAAkBN,GAC/Bd,KAAKH,MAAMC,SAAWgB,EAAUhB,QAAUE,KAAKN,QAAQ2B,UACzDrB,KAAKN,QAAQ2B,SAASrB,KAAKH,MAAMC,SAIrC,kCAAAwB,qBAAA,WACEtB,KAAKL,aAAa4B,aAGZ,kCAAAC,YAAR,SAAoBC,GAApB,WACE,OAAO,EAAAC,kBACLC,EAAMC,SAAS3B,IAAIwB,GAAU,SAACI,GAC5B,GAAI,EAAAC,aAAaD,GAAQ,CACvB,GAAI,EAAAE,iBAAiBF,EAAO,EAAAG,0BAA2B,CAC7C,cAAAlC,OACFmC,EAAiBC,OAAOC,KAAK,GAAQ1B,QAAO,SAAC2B,GAAQ,SAAOA,MAClE,OAAOT,EAAMU,aAAaR,EAAO,CAAES,KAAML,IAE3C,GAAIJ,EAAMpC,MAAMgC,SACd,OAAOE,EAAMU,aAAaR,EAAO,GAAI,EAAKL,YAAYK,EAAMpC,MAAMgC,WAGtE,OAAOI,OAKb,kCAAAU,OAAA,WACE,OAAOvC,KAAKwB,YAAYxB,KAAKP,MAAMgC,WAhE9B,wBAAAe,aAAe,EAAH,uBACd,EAAAC,UAAUD,cACV,EAAAE,4BAgEP,wBArEA,CAA6C,EAAAD,WAAhC,EAAAE,0BAuEb,UAAeA","file":"mp-workflow-selection-action-e51329922ae83584ce21.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\n\nimport { Component, ComponentContext } from 'platform/api/components';\nimport { listen } from 'platform/api/events';\nimport { Cancellation } from 'platform/api/async';\nimport { isValidChild, componentHasType, universalChildren } from 'platform/components/utils';\nimport { SelectionEvents, SelectionGroupContext, SelectionGroupContextTypes } from 'platform/components/ui/selection';\n\nimport { WorkflowManagerComponent } from './WorkflowManagerComponent';\n\nexport interface Props {\n  /**\n   * Identifier\n   */\n  selection: string;\n}\n\nexport interface State {\n  values?: { [tag: string]: boolean };\n}\n\n/**\n * Listens to the Selection Toggle event, collects selected workflow instantiations and\n * propagates them to the Workflow Manager component.\n *\n * @example\n * <mp-selection-group>\n *  [[!-- checkblox --]]\n *  <mp-selection-toggle selection=\"workflow-instantiations-selection\" tag=\"http://example.com/workflow/instantiation\">\n *  </mp-selection-toggle>\n *\n *  [[!-- workflow manager --]]\n *  <mp-workflow-selection-action selection=\"workflow-instantiations-selection\">\n *     <mp-workflow-manager definition='http://example.com/workflow/definition'>\n *     </mp-workflow-manager>\n *  </mp-workflow-selection-action>\n * </mp-selection-group>\n */\nexport class WorkflowSelectionAction extends Component<Props, State> {\n  private readonly cancellation = new Cancellation();\n\n  static contextTypes = {\n    ...Component.contextTypes,\n    ...SelectionGroupContextTypes,\n  };\n  context: ComponentContext & SelectionGroupContext;\n\n  constructor(props: Props, context: any) {\n    super(props, context);\n    this.state = {\n      values: {},\n    };\n  }\n\n  componentDidMount() {\n    this.cancellation\n      .map(\n        listen({\n          eventType: SelectionEvents.Toggle,\n          target: this.props.selection,\n        })\n          // batch selections\n          .bufferWithTimeOrCount(300, 100)\n          .filter((events) => events.length > 0)\n      )\n      .onValue((events) =>\n        this.setState(\n          (prevState): State => {\n            const values = {};\n            events.forEach(({ data }) => (values[data.tag] = data.value));\n            return { values: { ...prevState.values, ...values } };\n          }\n        )\n      );\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    if (this.state.values !== prevState.values && this.context.onChange) {\n      this.context.onChange(this.state.values);\n    }\n  }\n\n  componentWillUnmount() {\n    this.cancellation.cancelAll();\n  }\n\n  private mapChildren(children: React.ReactNode) {\n    return universalChildren(\n      React.Children.map(children, (child) => {\n        if (isValidChild(child)) {\n          if (componentHasType(child, WorkflowManagerComponent)) {\n            const { values } = this.state;\n            const selectedValues = Object.keys(values).filter((iri) => values[iri]);\n            return React.cloneElement(child, { iris: selectedValues });\n          }\n          if (child.props.children) {\n            return React.cloneElement(child, {}, this.mapChildren(child.props.children));\n          }\n        }\n        return child;\n      })\n    );\n  }\n\n  render() {\n    return this.mapChildren(this.props.children);\n  }\n}\n\nexport default WorkflowSelectionAction;\n"],"sourceRoot":""}