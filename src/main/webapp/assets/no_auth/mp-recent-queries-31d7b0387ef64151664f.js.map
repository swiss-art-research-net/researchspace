{"version":3,"sources":["webpack:///./src/main/web/components/sparql-editor/RecentQueries.tsx"],"names":["cancellation","Cancellation","addRecentQueries","query","repository","recentQueries","BrowserPersistence","getItem","recentQuery","date","moment","format","queries","toArray","lastQuery","get","unshift","splice","length","pop","setItem","forceUpdate","render","className","style","marginBottom","map","item","index","key","href","title","onClick","e","preventDefault","queryEditorContext","setQuery","overflow","textOverflow","whiteSpace","componentDidMount","this","queryChanges","onValue","isJust","getOrElse","undefined","contextTypes","ContextTypes","Component","RecentQueries"],"mappings":"6IAkBA,OACA,OACA,QAEA,QACA,SAEA,UAOA,qF,OAImB,EAAAA,aAAe,IAAI,EAAAC,aAoD5B,EAAAC,iBAAmB,SAACC,EAAeC,GACzC,IAAMC,EAAgB,EAAAC,mBAAmBC,QA5DnB,iBA8DhBC,EAAc,CAClBL,MAAOA,EACPM,KAAMC,IAASC,OAAO,mBACtBP,WAAU,GAGZ,GAAIC,EAAe,CACjB,IAAMO,EAAUP,EAAcQ,UAExBC,EAAYF,EAAQ,GACtBE,EAAUC,IAAI,WAAaZ,GAASW,EAAUC,IAAI,gBAAkBX,EACtEQ,EAAQI,QAAQR,GAEhBI,EAAQK,OAAO,EAAG,EAAGT,GAGnBI,EAAQM,OA7EY,IA8EtBN,EAAQO,MAGV,EAAAb,mBAAmBc,QAlFC,gBAkF0BR,QAE9C,EAAAN,mBAAmBc,QApFC,gBAoF0B,CAACZ,IAGjD,EAAKa,e,EAET,OAtFmC,6BAQjC,wBAAAC,OAAA,sBACQjB,EAAgB,EAAAC,mBAAmBC,QAZnB,iBAatB,OAAKF,EAKH,uBAAKkB,UAAU,aAAaC,MAAO,CAAEC,aAAc,IAChDpB,EAAcqB,KAAI,SAACC,EAAMC,GAAU,OAClC,qBACEC,IAAKD,EACLE,KAAK,GACLP,UAAU,kBACVQ,MAAOJ,EAAKZ,IAAI,SAChBiB,QAAS,SAACC,GACRA,EAAEC,iBACM,IAAAC,EAAA,UAAAA,mBACFhC,EAAgBwB,EAAKZ,IAAI,SACzBX,EAAiCuB,EAAKZ,IAAI,cAChD,EAAKD,UAAY,CAAEX,MAAK,EAAEC,WAAU,GACpC+B,EAAmBC,SAASjC,EAAO,CAAEC,WAAU,MAGjD,wBAAMmB,UAAU,yBAAyBI,EAAKZ,IAAI,SACjDY,EAAKZ,IAAI,cAAgB,wBAAMQ,UAAU,yBAAyBI,EAAKZ,IAAI,eAAwB,KACpG,uBAAKS,MAAO,CAAEa,SAAU,SAAUC,aAAc,WAAYC,WAAY,WACrEZ,EAAKZ,IAAI,eAvBX,2CA+BX,wBAAAyB,kBAAA,sBACUL,EAAA,aAAAA,mBACRM,KAAKzC,aAAa0B,IAAIS,EAAmBO,cAAcC,SAAQ,SAAC,G,IAAExC,EAAA,EAAAA,MAAOC,EAAA,EAAAA,YAErED,EAAMyC,QACJ,EAAK9B,WACLX,EAAMY,QAAU,EAAKD,UAAUX,OAC/BC,EAAWyC,eAAUC,KAAe,EAAKhC,UAAUV,YAErD,EAAKF,iBAAiBC,EAAMY,MAAOX,EAAWyC,eAAUC,QAlD9C,cAAAC,aAAe,EAAAC,aAqFjC,cAtFA,CAAmC,EAAAC,WAAtB,EAAAC,gBAwFb,UAAeA","file":"mp-recent-queries-31d7b0387ef64151664f.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\nimport { Component } from 'react';\nimport * as moment from 'moment';\n\nimport { Cancellation } from 'platform/api/async';\nimport { BrowserPersistence } from 'platform/components/utils';\n\nimport { ContextTypes, ComponentContext } from './SparqlQueryEditorContext';\n\nexport interface RecentQueriesProps {}\n\nconst LS_RECENT_QUERIES = 'recentQueries';\nconst MAX_LS_RECENT_QUERIES = 30;\n\nexport class RecentQueries extends Component<RecentQueriesProps, void> {\n  static readonly contextTypes = ContextTypes;\n  context: ComponentContext;\n\n  private readonly cancellation = new Cancellation();\n\n  private lastQuery: { query: string; repository?: string };\n\n  render() {\n    const recentQueries = BrowserPersistence.getItem(LS_RECENT_QUERIES);\n    if (!recentQueries) {\n      return <span>no queries</span>;\n    }\n\n    return (\n      <div className=\"list-group\" style={{ marginBottom: 0 }}>\n        {recentQueries.map((item, index) => (\n          <a\n            key={index}\n            href=\"\"\n            className=\"list-group-item\"\n            title={item.get('query')}\n            onClick={(e) => {\n              e.preventDefault();\n              const { queryEditorContext } = this.context;\n              const query: string = item.get('query');\n              const repository: string | undefined = item.get('repository');\n              this.lastQuery = { query, repository };\n              queryEditorContext.setQuery(query, { repository });\n            }}\n          >\n            <span className=\"list-group-item-label\">{item.get('date')}</span>\n            {item.get('repository') ? <span className=\"list-group-item-label\">{item.get('repository')}</span> : null}\n            <div style={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}>\n              {item.get('query')}\n            </div>\n          </a>\n        ))}\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    const { queryEditorContext } = this.context;\n    this.cancellation.map(queryEditorContext.queryChanges).onValue(({ query, repository }) => {\n      if (\n        query.isJust &&\n        (!this.lastQuery ||\n          query.get() !== this.lastQuery.query ||\n          repository.getOrElse(undefined) !== this.lastQuery.repository)\n      ) {\n        this.addRecentQueries(query.get(), repository.getOrElse(undefined));\n      }\n    });\n  }\n\n  private addRecentQueries = (query: string, repository?: string) => {\n    const recentQueries = BrowserPersistence.getItem(LS_RECENT_QUERIES);\n\n    const recentQuery = {\n      query: query,\n      date: moment().format('MM/DD/YY, HH:mm'),\n      repository,\n    };\n\n    if (recentQueries) {\n      const queries = recentQueries.toArray();\n\n      const lastQuery = queries[0];\n      if (lastQuery.get('query') !== query || lastQuery.get('repository') !== repository) {\n        queries.unshift(recentQuery);\n      } else {\n        queries.splice(0, 1, recentQuery);\n      }\n\n      if (queries.length > MAX_LS_RECENT_QUERIES) {\n        queries.pop();\n      }\n\n      BrowserPersistence.setItem(LS_RECENT_QUERIES, queries);\n    } else {\n      BrowserPersistence.setItem(LS_RECENT_QUERIES, [recentQuery]);\n    }\n\n    this.forceUpdate();\n  };\n}\n\nexport default RecentQueries;\n"],"sourceRoot":""}