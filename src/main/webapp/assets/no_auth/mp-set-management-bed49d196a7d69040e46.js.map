{"version":3,"sources":["webpack:///./src/main/web/components/sets/SetManagement.tsx","webpack:///./src/main/web/components/sets/Defaults.ts","webpack:///./src/main/web/components/sets/ViewModel.ts","webpack:///./src/main/web/components/sets/SetsModel.ts","webpack:///./src/main/web/components/sets/views/SearchAndFilters.tsx","webpack:///./src/main/web/components/sets/views/SetsAndItems.tsx","webpack:///./src/main/web/components/sets/views/Footer.tsx"],"names":["CLASS_NAME","props","context","cancellation","Cancellation","onDragStart","setViewState","draggingItem","onDragEnd","state","pendingState","ViewModel","loadState","model","getState","setState","getContext","semanticContext","trigger","eventType","data","getChildContext","superContext","childContext","removeSet","this","removeSetItem","startRenamingSet","fetchSetItems","componentDidMount","loadSets","keepItems","registerEventsListener","map","listen","BuiltInEvents","ComponentRefresh","target","id","onValue","sets","undefined","source","componentWillUnmount","cancelAll","render","className","classnames","readonly","itemViewMode","openedSet","ViewState","isSearchOpened","view","renderView","renderDropArea","children","displayedSetIri","DropArea","shouldReactToDrag","query","acceptResourceQuery","onDrop","iri","onDropItemToSet","dropMessage","ResourceLabel","value","itemsOrdering","hasOpenedSet","Boolean","hasSearchOpened","displayedSet","setHasItems","items","length","renderSearchAndFilters","renderBackToContentsButton","renderSearchResults","renderOpenedSet","renderAllSets","Footer","baseClass","onModeChanged","setItemViewMode","canReorder","isReordering","onPressReorder","Ordering","empty","onPressCreateNewSet","startCreatingNewSet","onPressReorderApply","applyItemsOrder","Children","toArray","loadingError","ErrorNotification","key","errorMessage","defaultSet","renderedSets","filterNot","set","equals","SetWithItems","showItems","template","templateForKind","onOpen","openAndLoadSet","onEditCompleted","newName","onSetEditCompleted","Spinner","ItemsView","get","onOrderChanged","order","search","SearchAndFilters","keywordFilter","setIsOpen","minInputLength","minSearchTermLength","filters","searchText","filterValues","onSearchTextChanged","onFilterChanged","renderSearchResultsContent","results","size","highlightedTerm","error","onClick","OpenedSetView","defaultProps","Defaults","ForAllProps","childContextTypes","Component","SetManagementContextTypes","SetManagement","SetKind","Rdf","DefaultSetItemActions","DefaultItemLabel","GridTemplate","SetListTemplate","ItemListTemplate","KeywordSearch","placeholder","placeholderInSet","queryPattern","MinSearchTermLength","SetItemsQuery","SetItemsMetadataQuery","SetCountQuery","itemConfig","kind","toString","isSet","gridTemplate","listTemplate","AcceptResourceQuery","setItemsQuery","setItemsMetadataQuery","setCountQuery","defaultViewMode","persistViewMode","LocalStorageState","BrowserPersistence","adapter","quering","options","bindAllMethods","instance","type","methodName","prototype","hasOwnProperty","method","bind","loadingSets","derive","searching","fetchingSetNameToRename","expectedToBeSet","config","viewMode","Error","minLength","rootSetIri","Kefir","constant","fromPromise","getUserSetRootContainerIri","toProperty","defaultSetIri","getUserDefaultSetIri","localStorageId","suffix","localState","update","params","flatMap","rootSet","combine","searchForSetsAndItems","observe","loadedSets","reuseOldSetItems","newSets","oldSets","oldSet","itemCount","toOrderedMap","has","console","warn","emptySet","activeSet","loadSetItems","forceReload","setIri","isLoading","onSetItemsLoaded","allSetsItems","item","targetSet","getSetServiceForUser","service","addToExistingSet","SetManagementEvents","ItemAdded","addNotification","level","message","textInput","hasSearchText","hasFilterValues","later","startSearching","ItemsFiltered","filterPatterns","createFilterPatterns","searchPattern","setToSearch","filter","toMap","itemsIris","Set","forEach","add","iris","Array","from","newSet","editing","EditType","Create","Immutable","OrderedMap","concat","modifiedSet","createNewSet","delete","Rename","fetchingName","oldName","renameSet","placeholderSetIri","name","ApplyingChanges","createSet","SetAdded","renameResource","SetRenamed","deleteResource","SetRemoved","actionableSet","SetService","ItemRemoved","getLabel","apply","holders","List","holder","itemHolder","reorderItems","ItemsReordered","metadata","FilterValue","SetItemsBindings","SetItemsMetadataBindings","SetCountBindings","FilterBindings","querySetItems","parsedQuery","SparqlUtil","parseQuery","hasFilterPatterns","PatternBinder","FilterPatterns","sparqlQuery","labelPath","ConfigHolder","getUIConfig","labelPropertyPath","PropertyPathBinder","PreferredLabel","parametrizedQuery","SparqlClient","setBindings","RootSet","IsSearch","literal","SetToSearch","select","e","constantError","loadSetItemCounts","counts","Map","bindings","count","isIri","isLiteral","Number","isNaN","parseSetItems","result","isItem","setItems","asMutable","binding","parent","clipboardItem","parentItems","asImmutable","queryMetadata","requested","Item","Kind","prepareQuery","datum","mergeMetadata","fv","label","SelectedValue","InputText","itemsResult","parseSets","itemCounts","allItems","reduce","all","unlistedSets","metadataItems","combineItemsIntoSets","withMutations","setsWithMetadata","patterns","parsedPatterns","parsePatterns","prefixes","TextBinder","test","replace","p","pattern","push","patternGroups","filterPattern","binder","VariableBinder","showAdditionalFilters","renderKeywordSearch","index","renderFilter","hasFilters","ClearableInput","onChange","currentTarget","onClear","active","style","display","title","AutoCompletionInput","suggestionsQuery","defaultQuery","minimumInput","multi","actions","onSelected","isArray","newFilterValues","toList","React","getCurrentSet","SetCaption","icon","SetViewContextTypes","handleOnClick","actionHolder","findDOMNode","querySelector","contains","otherProps","onCaptionClick","isEditing","caption","renderName","wrapDraggable","EditableLabel","TemplateItem","componentProps","shouldWrap","node","Draggable","onKeyDownWhileEditing","keyCode","preventDefault","onBlurWhileEditing","spinnerDelay","autoFocus","defaultValue","ref","input","setSelectionRange","onKeyDown","stopPropagation","onBlur","renderItemsPane","renderedItems","ItemView","ReorderableList","itemClass","ordering","TransitionGroup","component","CSSTransition","classNames","timeout","enter","exit","getItem","getSetItemIri","highlight","SetItemViewContextTypes","ReorderConfirmation","role","ItemViewModeSwitch","mode","ReorderItemsButton","renderAddNewSetButton","renderModeButton","isPressed"],"mappings":"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","file":"mp-set-management-bed49d196a7d69040e46.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\nimport { ReactElement, Children } from 'react';\nimport * as classnames from 'classnames';\n\nimport { Cancellation } from 'platform/api/async';\nimport { Component, ComponentProps } from 'platform/api/components';\nimport { BuiltInEvents, trigger, listen } from 'platform/api/events';\n\nimport { ErrorNotification } from 'platform/components/ui/notification';\nimport { Ordering } from 'platform/components/ui/reorderable-list';\nimport { ResourceLabel } from 'platform/components/ui/resource-label';\nimport { Spinner } from 'platform/components/ui/spinner';\nimport { DropArea } from 'platform/components/dnd/DropArea';\n\nimport { SetManagementContextTypes, SetManagementContext } from './SetManagementApi';\nimport { SetManagementEventType } from 'platform/api/services/ldp-set/SetManagementEvents';\n\nimport * as Defaults from './Defaults';\nimport { SetManagementProps } from './Configuration';\nimport { ViewState, ViewModel } from './ViewModel';\n\nimport { SearchAndFilters } from './views/SearchAndFilters';\nimport { SetWithItems, ItemsView, OpenedSetView } from './views/SetsAndItems';\nimport { Footer } from './views/Footer';\n\nimport './set-management.scss';\n\nexport const CLASS_NAME = 'set-management';\n\ntype Props = SetManagementProps & ComponentProps;\nexport class SetManagement extends Component<Props, ViewState> {\n  static readonly defaultProps: Partial<Props> = Defaults.ForAllProps;\n\n  static readonly childContextTypes = {\n    ...Component.childContextTypes,\n    ...SetManagementContextTypes,\n  };\n  getChildContext() {\n    const superContext = super.getChildContext();\n    const childContext: SetManagementContext = {\n      'mp-set-management': {\n        removeSet: this.model.removeSet,\n        removeSetItem: this.model.removeSetItem,\n        startRenamingSet: this.model.startRenamingSet,\n        fetchSetItems: this.model.fetchSetItems,\n      },\n    };\n    type ChildContext = typeof superContext & typeof childContext;\n    return { ...superContext, ...childContext } as ChildContext;\n  }\n\n  private readonly cancellation = new Cancellation();\n  private model: ViewModel;\n  private pendingState: ViewState;\n\n  constructor(props: Props, context: any) {\n    super(props, context);\n\n    this.state = this.pendingState = ViewModel.loadState(this.props);\n\n    this.model = new ViewModel({\n      props: this.props,\n      cancellation: this.cancellation,\n      getState: () => this.pendingState,\n      setState: (state) => this.setViewState(state),\n      getContext: () => this.context.semanticContext,\n      trigger: (eventType, data) => this.trigger(eventType, data),\n    });\n  }\n\n  /** Disallow to directly call setState() for this component */\n  setState(state: never) {\n    super.setState(state);\n  }\n\n  setViewState(state: ViewState) {\n    this.pendingState = { ...this.pendingState, ...state };\n    super.setState(this.pendingState);\n  }\n\n  componentDidMount() {\n    this.model.loadSets({ keepItems: false });\n    this.registerEventsListener();\n  }\n\n  /*\n   * Update data on refresh event.\n   */\n  private registerEventsListener() {\n    this.cancellation\n      .map(\n        listen({\n          eventType: BuiltInEvents.ComponentRefresh,\n          target: this.props.id,\n        })\n      )\n      .onValue(() => {\n        // fully reload sets and items (including labels)\n        this.setViewState({ sets: undefined });\n        this.model.loadSets({ keepItems: false });\n      });\n  }\n\n  private trigger(eventType: SetManagementEventType, data?: any) {\n    trigger({ eventType, source: this.props.id, data });\n  }\n\n  componentWillUnmount() {\n    this.cancellation.cancelAll();\n  }\n\n  render() {\n    const className = classnames({\n      [CLASS_NAME]: true,\n      [`${CLASS_NAME}--readonly`]: this.props.readonly,\n      [`${CLASS_NAME}--list-view`]: this.state.itemViewMode === 'list',\n      [`${CLASS_NAME}--grid-view`]: this.state.itemViewMode === 'grid',\n      [`${CLASS_NAME}--only-opened-set`]: this.state.openedSet && !ViewState.isSearchOpened(this.state),\n    });\n\n    const view = this.renderView();\n    if (this.props.readonly) {\n      return (\n        <div className={className}>\n          <div className={`${CLASS_NAME}__children`}>{...view}</div>\n        </div>\n      );\n    } else {\n      return this.renderDropArea(view, className);\n    }\n  }\n\n  private renderDropArea(children: ReadonlyArray<React.ReactNode>, className: string) {\n    const displayedSetIri = ViewState.displayedSetIri(this.state);\n    return (\n      <DropArea\n        className={className}\n        shouldReactToDrag={() => !this.state.draggingItem}\n        query={this.props.acceptResourceQuery}\n        onDrop={(iri) => {\n          this.model.onDropItemToSet(iri, displayedSetIri);\n        }}\n        dropMessage={\n          displayedSetIri ? (\n            <span>Drop items here to add to set \"{<ResourceLabel iri={displayedSetIri.value} />}\"</span>\n          ) : (\n            <span>Drop items here to add to the default set</span>\n          )\n        }\n      >\n        {...children}\n      </DropArea>\n    );\n  }\n\n  private renderView() {\n    const { readonly } = this.props;\n    const { itemViewMode, itemsOrdering } = this.state;\n    const hasOpenedSet = Boolean(this.state.openedSet);\n    const hasSearchOpened = ViewState.isSearchOpened(this.state);\n\n    const displayedSet = ViewState.displayedSet(this.state);\n    const setHasItems = displayedSet && displayedSet.items && displayedSet.items.length > 0;\n\n    const view = (\n      <div className={`${CLASS_NAME}__drop-area-children`}>\n        {this.renderSearchAndFilters()}\n        {hasOpenedSet ? this.renderBackToContentsButton() : undefined}\n        {hasSearchOpened ? this.renderSearchResults() : hasOpenedSet ? this.renderOpenedSet() : this.renderAllSets()}\n        <Footer\n          baseClass={CLASS_NAME}\n          readonly={readonly}\n          itemViewMode={itemViewMode}\n          onModeChanged={this.model.setItemViewMode}\n          canReorder={setHasItems}\n          isReordering={Boolean(itemsOrdering)}\n          onPressReorder={() =>\n            this.setViewState({\n              // toggle reordering mode\n              itemsOrdering: itemsOrdering ? undefined : Ordering.empty,\n            })\n          }\n          onPressCreateNewSet={this.model.startCreatingNewSet}\n          onPressReorderApply={this.model.applyItemsOrder}\n        />\n      </div>\n    );\n    return Children.toArray((view.props as React.Props<any>).children);\n  }\n\n  private renderAllSets(): ReactElement<any> {\n    if (this.state.loadingError) {\n      return <ErrorNotification key=\"sets-error\" errorMessage={this.state.loadingError} />;\n    }\n\n    const { defaultSet, sets, itemsOrdering } = this.state;\n\n    const renderedSets = sets\n      ? sets\n          .filterNot((set) => set.iri.equals(defaultSet))\n          .map((set) => (\n            <SetWithItems\n              key={set.iri.value}\n              baseClass={CLASS_NAME}\n              set={set}\n              showItems={false}\n              template={this.model.templateForKind}\n              onOpen={(iri) => this.model.openAndLoadSet(iri)}\n              onDragStart={this.onDragStart}\n              onDragEnd={this.onDragEnd}\n              onEditCompleted={(newName) => this.model.onSetEditCompleted(set, newName)}\n            />\n          ))\n          .toArray()\n      : [<Spinner key=\"sets-loading\" />];\n\n    return (\n      <div key=\"all-sets\" className={`${CLASS_NAME}__sets`}>\n        {renderedSets}\n        <ItemsView\n          key={'default-set-items'}\n          baseClass={CLASS_NAME}\n          set={sets ? sets.get(defaultSet.value) : undefined}\n          template={this.model.templateForKind}\n          onDragStart={this.onDragStart}\n          onDragEnd={this.onDragEnd}\n          itemsOrdering={itemsOrdering}\n          onOrderChanged={(order) => this.setViewState({ itemsOrdering: order })}\n        />\n      </div>\n    );\n  }\n\n  private renderSearchAndFilters() {\n    const { search } = this.state;\n    return (\n      <SearchAndFilters\n        key=\"search-and-filters\"\n        baseClass={CLASS_NAME}\n        keywordFilter={this.props.keywordFilter}\n        setIsOpen={Boolean(this.state.openedSet)}\n        minInputLength={this.model.minSearchTermLength()}\n        filters={this.props.filters}\n        searchText={search.searchText}\n        filterValues={search.filterValues}\n        onSearchTextChanged={(searchText) => {\n          this.model.onFilterChanged(true, searchText, this.state.search.filterValues);\n        }}\n        onFilterChanged={(filterValues) => {\n          this.model.onFilterChanged(false, this.state.search.searchText, filterValues);\n        }}\n      />\n    );\n  }\n\n  private renderSearchResults(): ReactElement<any> {\n    return (\n      <div key=\"search-results\" className={`${CLASS_NAME}__search-results`}>\n        {this.renderSearchResultsContent()}\n      </div>\n    );\n  }\n\n  private renderSearchResultsContent() {\n    if (this.state.search.results) {\n      if (this.state.search.results.size === 0) {\n        return <div className={`${CLASS_NAME}__search-results-empty`}>No results found</div>;\n      }\n      return this.state.search.results\n        .map((set) => (\n          <SetWithItems\n            key={set.iri.value}\n            baseClass={CLASS_NAME}\n            set={set}\n            template={this.model.templateForKind}\n            highlightedTerm={this.state.search.searchText}\n            onOpen={(iri) => this.model.openAndLoadSet(iri)}\n            onDragStart={this.onDragStart}\n            onDragEnd={this.onDragEnd}\n            onEditCompleted={(newName) => this.model.onSetEditCompleted(set, newName)}\n          />\n        ))\n        .toArray();\n    } else if (this.state.search.error) {\n      return <ErrorNotification key=\"search-error\" errorMessage={this.state.search.error} />;\n    } else {\n      return <Spinner key=\"search-loading\" />;\n    }\n  }\n\n  private renderBackToContentsButton() {\n    return (\n      <button\n        className={`${CLASS_NAME}__back-to-contents btn btn-success`}\n        onClick={() =>\n          this.setViewState({\n            openedSet: undefined,\n            search: {},\n            itemsOrdering: undefined,\n          })\n        }\n      >\n        <span className=\"fa fa-chevron-left\"></span> Back to contents\n      </button>\n    );\n  }\n\n  private renderOpenedSet(): ReactElement<any> {\n    const { openedSet, itemsOrdering, sets } = this.state;\n    const set = sets ? sets.get(openedSet.value) : undefined;\n    return (\n      <OpenedSetView\n        set={set}\n        baseClass={CLASS_NAME}\n        template={this.model.templateForKind}\n        onDragStart={this.onDragStart}\n        onDragEnd={this.onDragEnd}\n        onEditCompleted={(newName) => this.model.onSetEditCompleted(set, newName)}\n        itemsOrdering={itemsOrdering}\n        onOrderChanged={(order) => this.setViewState({ itemsOrdering: order })}\n      />\n    );\n  }\n\n  private onDragStart = () => this.setViewState({ draggingItem: true });\n  private onDragEnd = () => this.setViewState({ draggingItem: false });\n}\n\nexport default SetManagement;\n","/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { Rdf } from 'platform/api/rdf';\n\nimport { SetManagementProps, KeywordFilter } from './Configuration';\n\nexport const SetKind = Rdf.iri('http://www.researchspace.org/resource/system/Set');\nconst DefaultSetItemActions = `\n  <div class='set-management__item-actions'>\n    <bs-dropdown-button pull-right=true bs-style='link' title=''\n                        id='set-actions-{{iri.value}}'>\n      <mp-set-management-action-remove-set-item>\n        <bs-menu-item event-key='remove'>Remove</bs-menu-item>\n      </mp-set-management-action-remove-set-item>\n    </bs-dropdown-button>\n  </div>\n`;\nconst DefaultItemLabel = `\n  <span style='display: flex;'>\n    <mp-label iri='{{iri.value}}' highlight='{{highlight}}'\n              highlight-props='{\"style\": {\"color\": \"#dc8a4b\"}}'\n              style='white-space: nowrap; overflow: hidden; text-overflow: ellipsis;'\n    ></mp-label>\n  </span>\n`;\nexport const GridTemplate = `\n  <mp-resource-card iri='{{iri.value}}'>${DefaultSetItemActions}</mp-resource-card>\n`;\nexport const SetListTemplate = `\n  <div style='display: flex; align-items: center; justify-content: space-between;'>\n    <div style='overflow: hidden;'>\n      ${DefaultItemLabel}\n    </div>\n    <div class='set-management__item-actions' style='margin-left: auto;'>\n      <bs-dropdown-button pull-right=true bs-style='link' title=''\n                          id='set-actions-{{iri.value}}'>\n        <mp-set-management-action-manage-set>\n          <bs-menu-item event-key='manage'>Manage set</bs-menu-item>\n        </mp-set-management-action-manage-set>\n        <mp-set-management-action-rename-set>\n          <bs-menu-item event-key='rename'>Rename set</bs-menu-item>\n        </mp-set-management-action-rename-set>\n        <mp-set-management-action-remove-set>\n          <bs-menu-item event-key='remove'>Remove set</bs-menu-item>\n        </mp-set-management-action-remove-set>\n      </bs-dropdown-button>\n    </div>\n  </div>\n`;\nexport const ItemListTemplate = `\n  <div style='display: flex; align-items: center; justify-content: space-between;'>\n    <div style='overflow: hidden;'>\n      <mp-resource-link-container uri=\"{{iri.value}}\" draggable=false>\n        ${DefaultItemLabel}\n      </mp-resource-link-container>\n    </div>\n    ${DefaultSetItemActions}\n  </div>\n`;\n\nexport const KeywordSearch: KeywordFilter = {\n  placeholder: 'Search all...',\n  placeholderInSet: 'Search in the set...',\n  queryPattern: `\n    ?itemHolder ?__preferredLabel__ ?itemLabel .\n    FILTER REGEX(STR(?itemLabel), \"(.*?)?__token__\", \"i\")`,\n};\nexport const MinSearchTermLength = 3;\n\nexport const SetItemsQuery = `\nPREFIX ldp: <http://www.w3.org/ns/ldp#>\nPREFIX prov: <http://www.w3.org/ns/prov#>\nPREFIX platform: <http://www.researchspace.org/resource/system/>\nPREFIX bds: <http://www.bigdata.com/rdf/search#>\nSELECT ?item ?itemHolder ?parent ?kind WHERE {\n  {\n    FILTER(!(?__isSearch__)) .\n    ?__rootSet__ ldp:contains ?itemHolder .\n    BIND(?__rootSet__ as ?parent) .\n    OPTIONAL { ?itemHolder platform:setItem ?setItem }\n    BIND(COALESCE(?setItem, ?itemHolder) AS ?item) .\n  } UNION {\n    FILTER(?__isSearch__) .\n    ?__rootSet__ ldp:contains ?__setToSearch__ .\n    ?__setToSearch__ ldp:contains ?itemHolder.\n    BIND(?__setToSearch__ as ?parent) .\n    ?itemHolder platform:setItem ?item .\n    FILTER(?__filterPatterns__)\n  }\n\n  OPTIONAL {\n    ?itemHolder platform:setItemIndex ?i .\n  }\n  OPTIONAL {\n    ?itemHolder prov:generatedAtTime ?modificationDate .\n  }\n  BIND(COALESCE(?i, 0) AS ?index) .\n  OPTIONAL {\n    ?item a platform:Set .\n    BIND(platform:Set as ?type)\n  }\n  BIND(COALESCE(?type, platform:SetItem) AS ?kind) .\n} ORDER BY ?index DESC(?modificationDate)`;\n\nexport const SetItemsMetadataQuery = `SELECT ?item WHERE {}`;\n\nexport const SetCountQuery = `\nPREFIX ldp: <http://www.w3.org/ns/ldp#>\nSELECT ?set (COUNT(?item) as ?count) WHERE {\n  ?__rootSet__ ldp:contains ?set .\n  OPTIONAL { ?set ldp:contains ?item }\n} GROUP BY ?set`;\n\nexport function itemConfig(kind: Rdf.Node) {\n  switch (kind.toString()) {\n    case SetKind.toString():\n      return { isSet: true, gridTemplate: SetListTemplate, listTemplate: SetListTemplate };\n    case '<http://www.researchspace.org/resource/system/SetItem>':\n      return { isSet: false, gridTemplate: GridTemplate, listTemplate: ItemListTemplate };\n    default:\n      return undefined;\n  }\n}\n\nexport const AcceptResourceQuery = 'ASK {}';\n\nexport const ForAllProps: Partial<SetManagementProps> = {\n  setItemsQuery: SetItemsQuery,\n  setItemsMetadataQuery: SetItemsMetadataQuery,\n  setCountQuery: SetCountQuery,\n  acceptResourceQuery: AcceptResourceQuery,\n  keywordFilter: KeywordSearch,\n  filters: [],\n  defaultViewMode: 'list',\n  persistViewMode: true,\n};\n","/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as Immutable from 'immutable';\nimport * as Kefir from 'kefir';\n\nimport { Cancellation } from 'platform/api/async';\nimport { Rdf } from 'platform/api/rdf';\nimport { QueryContext } from 'platform/api/sparql';\n\nimport {\n  getSetServiceForUser,\n  getUserSetRootContainerIri,\n  getUserDefaultSetIri,\n  SetService,\n} from 'platform/api/services/ldp-set';\nimport { getLabel } from 'platform/api/services/resource-label';\n\nimport { addNotification } from 'platform/components/ui/notification';\nimport { Ordering } from 'platform/components/ui/reorderable-list';\nimport { BrowserPersistence } from 'platform/components/utils';\n\nimport {\n  SetManagementEvents,\n  SetManagementEventType,\n  ItemsFilteredData,\n} from 'platform/api/services/ldp-set/SetManagementEvents';\nimport { SetManagementProps, ItemViewMode } from './Configuration';\nimport * as Defaults from './Defaults';\nimport {\n  PlatformSet,\n  SetItem,\n  FilterValue,\n  searchForSetsAndItems,\n  fetchSetItems,\n  createFilterPatterns,\n  EditType,\n} from './SetsModel';\n\nexport interface ViewState {\n  readonly defaultSet?: Rdf.Iri;\n  readonly sets?: Immutable.Map<string, PlatformSet>;\n  readonly loadingSets?: boolean;\n  readonly loadingError?: any;\n\n  readonly search?: SearchState;\n\n  readonly openedSet?: Rdf.Iri;\n  readonly draggingItem?: boolean;\n  readonly itemViewMode?: ItemViewMode;\n  readonly itemsOrdering?: Ordering;\n}\n\nexport interface SearchState {\n  readonly quering?: boolean;\n  readonly searchText?: string;\n  readonly filterValues?: Immutable.List<FilterValue>;\n  readonly results?: Immutable.Map<string, PlatformSet>;\n  readonly error?: any;\n}\n\nconst LocalStorageState = BrowserPersistence.adapter<{\n  readonly itemViewMode?: ItemViewMode;\n}>();\n\nexport namespace ViewState {\n  export function openedSet(state: ViewState): PlatformSet | undefined {\n    return state.openedSet ? state.sets.get(state.openedSet.value) : undefined;\n  }\n\n  export function displayedSetIri(state: ViewState): Rdf.Iri {\n    if (state.openedSet) {\n      return state.openedSet;\n    } else if (state.defaultSet) {\n      return state.defaultSet;\n    } else {\n      return undefined;\n    }\n  }\n\n  export function displayedSet(state: ViewState): PlatformSet | undefined {\n    const iri = displayedSetIri(state);\n    return iri && state.sets ? state.sets.get(iri.value) : undefined;\n  }\n\n  export function isSearchOpened(state: ViewState) {\n    const { quering, results, error } = state.search;\n    return quering || results || error;\n  }\n}\n\nconst SEARCH_DELAY_MS = 300;\n\nexport type Trigger = (eventType: SetManagementEventType, data?: any) => void;\n\nexport class ViewModel {\n  private readonly props: SetManagementProps;\n\n  private readonly getState: () => ViewState;\n  private readonly setState: (state: ViewState) => void;\n\n  private readonly getContext: () => QueryContext;\n  private readonly trigger: Trigger;\n\n  private readonly cancellation: Cancellation;\n  private loadingSets: Cancellation;\n  private searching: Cancellation;\n  private fetchingSetNameToRename: Cancellation;\n\n  constructor(options: {\n    props: SetManagementProps;\n    cancellation: Cancellation;\n    getState: () => ViewState;\n    setState: {\n      (state: ViewState): void;\n      (updater: (state: ViewState) => ViewState): void;\n    };\n    getContext: () => QueryContext;\n    trigger: Trigger;\n  }) {\n    bindAllMethods(this, ViewModel);\n\n    this.props = options.props;\n    this.getState = options.getState;\n    this.setState = options.setState;\n    this.getContext = options.getContext;\n    this.trigger = options.trigger;\n\n    this.cancellation = options.cancellation;\n    this.loadingSets = this.cancellation.derive();\n    this.searching = this.cancellation.derive();\n    this.fetchingSetNameToRename = this.cancellation.derive();\n  }\n\n  itemConfig(kind: Rdf.Node) {\n    if (this.props.itemConfig) {\n      return this.props.itemConfig[kind.toString()];\n    } else {\n      return Defaults.itemConfig(kind);\n    }\n  }\n\n  templateForKind(kind: Rdf.Node, expectedToBeSet: boolean) {\n    const config = this.itemConfig(kind);\n    const viewMode = this.getState().itemViewMode;\n    if (viewMode === 'list') {\n      return (\n        (config && config.listTemplate) || (expectedToBeSet ? Defaults.SetListTemplate : Defaults.ItemListTemplate)\n      );\n    } else if (viewMode === 'grid') {\n      const template = config && config.gridTemplate;\n      return template || (expectedToBeSet ? Defaults.SetListTemplate : Defaults.GridTemplate);\n    } else {\n      throw new Error(`Unknown item view mode`);\n    }\n  }\n\n  isSet(kind: Rdf.Node) {\n    const config = this.itemConfig(kind);\n    return config && config.isSet;\n  }\n\n  minSearchTermLength() {\n    const minLength = this.props.keywordFilter.minSearchTermLength;\n    return minLength === undefined ? Defaults.MinSearchTermLength : minLength;\n  }\n\n  rootSetIri(): Kefir.Property<Rdf.Iri> {\n    return this.props.rootSetIri\n      ? Kefir.constant(Rdf.iri(this.props.rootSetIri))\n      : Kefir.fromPromise(getUserSetRootContainerIri()).toProperty();\n  }\n\n  defaultSetIri(): Kefir.Property<Rdf.Iri> {\n    return this.props.defaultSetIri\n      ? Kefir.constant(Rdf.iri(this.props.defaultSetIri))\n      : Kefir.fromPromise(getUserDefaultSetIri()).toProperty();\n  }\n\n  static localStorageId(props: SetManagementProps) {\n    const suffix = props.id;\n    return `mp-set-management${suffix ? `-${suffix}` : ''}`;\n  }\n\n  static loadState(props: SetManagementProps): ViewState {\n    let itemViewMode: ItemViewMode;\n    if (props.persistViewMode) {\n      const localState = LocalStorageState.get(ViewModel.localStorageId(props));\n      if (localState.itemViewMode === 'list' || localState.itemViewMode === 'grid') {\n        itemViewMode = localState.itemViewMode;\n      }\n    }\n    return {\n      search: {},\n      itemViewMode: itemViewMode || props.defaultViewMode,\n    };\n  }\n\n  setItemViewMode(itemViewMode: ItemViewMode) {\n    if (this.props.persistViewMode) {\n      LocalStorageState.update(ViewModel.localStorageId(this.props), { itemViewMode });\n    }\n    this.setState({ itemViewMode });\n  }\n\n  loadSets(params: { keepItems: boolean }) {\n    const { setItemsQuery, setItemsMetadataQuery, setCountQuery } = this.props;\n    const context = this.getContext();\n\n    this.loadingSets.cancelAll();\n    this.loadingSets = this.cancellation.derive();\n\n    this.setState({ loadingSets: true });\n\n    this.loadingSets\n      .map(\n        this.rootSetIri().flatMap((rootSet) =>\n          Kefir.combine([\n            this.defaultSetIri(),\n            searchForSetsAndItems({\n              setItemsQuery,\n              setItemsMetadataQuery,\n              setCountQuery,\n              context,\n              rootSet,\n              isSet: this.isSet,\n            }),\n          ])\n        )\n      )\n      .observe({\n        value: ([defaultSet, loadedSets]) => {\n          const state = this.getState();\n          let sets = params.keepItems ? reuseOldSetItems(loadedSets, state.sets) : loadedSets;\n          if (!sets.has(defaultSet.value)) {\n            console.warn(`Default set ${defaultSet} not found`);\n            sets = sets.set(defaultSet.value, emptySet(defaultSet));\n          }\n\n          // if active set was removed while user is inside of it\n          // we need to switch back to default one\n          const openedSet = state.openedSet && sets.has(state.openedSet.value) ? state.openedSet : undefined;\n          this.setState({ loadingSets: false, sets, defaultSet, openedSet });\n\n          const activeSet = openedSet || defaultSet;\n          this.loadSetItems(activeSet, { forceReload: !params.keepItems });\n          if (!activeSet.equals(defaultSet)) {\n            // if refresh event happened inside named set we also need to update default set content\n            // because otherwise it can show stalled data when user clicked 'navigate back to content'\n            this.loadSetItems(defaultSet, { forceReload: !params.keepItems });\n          }\n        },\n        error: (loadingError) => this.setState({ loadingSets: false, loadingError }),\n      });\n  }\n\n  private loadSetItems(setIri: Rdf.Iri, params: { forceReload?: boolean } = {}) {\n    const state = this.getState();\n    const set = state.sets.get(setIri.value);\n    // do nothing when asked to load items of missing set\n    if (!set) {\n      return;\n    }\n\n    if (set.items && !params.forceReload) {\n      return;\n    }\n\n    this.setState({\n      sets: state.sets.set(set.iri.value, {\n        ...set,\n        isLoading: true,\n        loadingError: undefined,\n      }),\n    });\n\n    this.loadingSets\n      .map(\n        fetchSetItems(\n          this.props.setItemsQuery,\n          this.props.setItemsMetadataQuery,\n          this.getContext(),\n          setIri,\n          (kind) => !this.isSet(kind)\n        )\n      )\n      .observe({\n        value: (items) => this.onSetItemsLoaded(setIri, items, undefined),\n        error: (error) => this.onSetItemsLoaded(setIri, undefined, error),\n      });\n  }\n\n  private onSetItemsLoaded(\n    setIri: Rdf.Iri,\n    allSetsItems: Map<string, ReadonlyArray<SetItem>> | undefined,\n    loadingError: any\n  ) {\n    const state = this.getState();\n    this.setState({\n      sets: state.sets.update(setIri.value, (set) => {\n        let { items, itemCount } = set;\n        if (!loadingError) {\n          items = allSetsItems.get(setIri.value) || [];\n          itemCount = items.length;\n        }\n        return { ...set, isLoading: false, loadingError, items, itemCount };\n      }),\n    });\n  }\n\n  openAndLoadSet(setIri: Rdf.Iri) {\n    const state = this.getState();\n    if (state.openedSet && state.openedSet.equals(setIri)) {\n      return;\n    }\n    this.loadSetItems(setIri);\n    this.setState({ openedSet: setIri, search: {}, itemsOrdering: undefined });\n  }\n\n  onDropItemToSet(item: Rdf.Iri, targetSet: Rdf.Iri) {\n    this.cancellation\n      .map(getSetServiceForUser(this.getContext()).flatMap((service) => service.addToExistingSet(targetSet, item)))\n      .observe({\n        value: () => {\n          // This is ugly hack to fully reload all sets if we add something to the\n          // Uncategorized set, we need this to fetch Knowledg Maps when they are added\n          // to the clipboard\n          if (targetSet.equals(this.getState().defaultSet)) {\n            this.loadSets({keepItems: false});\n          } else {\n            this.trigger(SetManagementEvents.ItemAdded);\n            this.loadSetItems(targetSet, {forceReload: true});\n          }\n        },\n        error: (error) => {\n          addNotification(\n            {\n              level: 'error',\n              message: 'Error adding item to set',\n            },\n            error\n          );\n        },\n      });\n  }\n\n  onFilterChanged(textInput: boolean, searchText: string, filterValues: Immutable.List<FilterValue> | undefined) {\n    const cancellation = this.cancellation.derive();\n    this.searching.cancelAll();\n    this.searching = cancellation;\n\n    const state = this.getState();\n    const search: SearchState = { ...state.search, searchText, filterValues };\n\n    const hasSearchText = searchText && searchText.length >= this.minSearchTermLength();\n    const hasFilterValues = filterValues && filterValues.size > 0;\n\n    if (textInput && hasSearchText) {\n      this.setState({ search: { ...search, quering: true } });\n      cancellation.map(Kefir.later(SEARCH_DELAY_MS, {})).onValue(() => {\n        this.startSearching(cancellation, searchText, filterValues);\n      });\n    } else if (hasSearchText || hasFilterValues) {\n      this.setState({ search: { ...search, quering: true } });\n      this.startSearching(cancellation, hasSearchText ? searchText : undefined, filterValues);\n    } else {\n      this.setState({ search: { ...search, quering: false, results: undefined, error: undefined } });\n      this.trigger(SetManagementEvents.ItemsFiltered, {});\n    }\n  }\n\n  private startSearching(cancellation: Cancellation, searchText: string, filterValues: Immutable.List<FilterValue>) {\n    const { setItemsQuery, setItemsMetadataQuery, setCountQuery } = this.props;\n\n    const state = this.getState();\n    const filterPatterns = createFilterPatterns({\n      setItemsQuery: this.props.setItemsQuery,\n      searchPattern: this.props.keywordFilter.queryPattern,\n      searchText,\n      filterValues,\n    });\n\n    cancellation\n      .map(\n        this.rootSetIri().flatMap((rootSetIri) =>\n          searchForSetsAndItems({\n            setItemsQuery,\n            setCountQuery,\n            setItemsMetadataQuery,\n            context: this.getContext(),\n            rootSet: rootSetIri,\n            isSet: this.isSet,\n            setToSearch: state.openedSet,\n            filterPatterns,\n          })\n        )\n      )\n      .map((results) => results.filter((set) => set.items && set.items.length > 0).toMap())\n      .observe({\n        value: (results) => {\n          this.setState({ search: { ...state.search, quering: false, results } });\n\n          const itemsIris = new Set<string>();\n          results.forEach(({ items }) => items.forEach(({ iri }) => itemsIris.add(iri.value)));\n          const data: ItemsFilteredData = { iris: Array.from(itemsIris) };\n          this.trigger(SetManagementEvents.ItemsFiltered, data);\n        },\n        error: (error) => this.setState({ search: { ...state.search, quering: false, error } }),\n      });\n  }\n\n  startCreatingNewSet() {\n    const newSet: PlatformSet = {\n      ...emptySet(Rdf.iri('')),\n      editing: { type: EditType.Create, newName: 'My New Set' },\n    };\n    const state = this.getState();\n    const sets = Immutable.OrderedMap({ [newSet.iri.value]: newSet })\n      .concat(state.sets)\n      .toOrderedMap();\n    this.setState({ sets, openedSet: undefined, search: {} });\n  }\n\n  onSetEditCompleted(modifiedSet: PlatformSet, newName: string | undefined) {\n    const state = this.getState();\n    const { editing } = modifiedSet;\n    if (editing && editing.type === EditType.Create) {\n      if (newName) {\n        this.createNewSet(modifiedSet.iri, newName);\n      } else {\n        // creating cancelled\n        const sets = state.sets.delete(modifiedSet.iri.value);\n        this.setState({ sets });\n      }\n    } else if (editing && editing.type === EditType.Rename) {\n      if (!editing.fetchingName && newName && newName !== editing.oldName) {\n        this.renameSet(modifiedSet.iri, editing.oldName, newName);\n      } else {\n        // renaming cancelled\n        const sets = state.sets.update(modifiedSet.iri.value, (set) => ({\n          ...set,\n          editing: undefined,\n          newName: undefined,\n        }));\n        this.setState({ sets });\n      }\n    }\n  }\n\n  private createNewSet(placeholderSetIri: Rdf.Iri, name: string) {\n    const { sets } = this.getState();\n    this.setState({\n      sets: sets.update(placeholderSetIri.value, (set) => ({ ...set, editing: { type: EditType.ApplyingChanges } })),\n    });\n\n    this.cancellation\n      .map(getSetServiceForUser(this.getContext()).flatMap((service) => service.createSet(name)))\n      .observe({\n        value: () => {\n          this.loadSets({ keepItems: true });\n          this.trigger(SetManagementEvents.SetAdded);\n        },\n        error: (error) => {\n          addNotification(\n            {\n              level: 'error',\n              message: `Error creating new set '${name}`,\n            },\n            error\n          );\n        },\n      });\n  }\n\n  private renameSet(setIri: Rdf.Iri, oldName: string, newName: string) {\n    const { sets } = this.getState();\n    this.setState({\n      sets: sets.update(setIri.value, (set) => ({ ...set, editing: { type: EditType.ApplyingChanges } })),\n    });\n\n    this.cancellation\n      .map(getSetServiceForUser(this.getContext()).flatMap((service) => service.renameResource(setIri, newName)))\n      .observe({\n        value: () => {\n          this.loadSets({ keepItems: true });\n          this.trigger(SetManagementEvents.SetRenamed);\n        },\n        error: (error) => {\n          addNotification(\n            {\n              level: 'error',\n              message: `Error renaming set '${oldName}' to '${newName}'`,\n            },\n            error\n          );\n        },\n      });\n  }\n\n  removeSet(set: Rdf.Iri) {\n    this.cancellation\n      .map(getSetServiceForUser(this.getContext()).flatMap((service) => service.deleteResource(set)))\n      .observe({\n        value: () => {\n          this.setState({ openedSet: undefined });\n          this.loadSets({ keepItems: true });\n          this.trigger(SetManagementEvents.SetRemoved);\n        },\n        error: (error) => {\n          addNotification(\n            {\n              level: 'error',\n              message: `Error removing set`,\n            },\n            error\n          );\n        },\n      });\n  }\n\n  removeSetItem(set: Rdf.Iri | undefined, item: Rdf.Iri) {\n    const actionableSet = set || this.getState().defaultSet;\n    this.cancellation.map(\n      getSetServiceForUser(this.getContext()).flatMap(\n        () => new SetService(actionableSet.value).deleteResource(item)),\n    ).observe({\n      value: () => {\n        // The same hack as in onDropItemToSet\n        if (!set) {\n          this.loadSets({keepItems: false});\n        } else {\n          this.loadSetItems(actionableSet, {forceReload: true});\n        }\n        this.trigger(SetManagementEvents.ItemRemoved);\n      },\n      error: error => {\n        addNotification({\n          level: 'error',\n          message: 'Error removing set item',\n        }, error);\n      },\n    });\n  }\n\n  startRenamingSet(targetSet: Rdf.Iri) {\n    const state = this.getState();\n    this.setState({\n      search: {},\n      sets: state.sets.update(targetSet.value, (set) => {\n        if (!set || set.editing) {\n          return set;\n        }\n        return { ...set, editing: { type: EditType.Rename, fetchingName: true } };\n      }),\n    });\n\n    const context = this.getContext();\n\n    this.fetchingSetNameToRename.cancelAll();\n    this.fetchingSetNameToRename = this.cancellation.derive();\n    this.fetchingSetNameToRename.map(getLabel(targetSet, { context })).observe({\n      value: (oldName) => {\n        const { sets } = this.getState();\n        this.setState({\n          sets: sets.update(targetSet.value, (set) => {\n            if (!(set && set.editing)) {\n              return set;\n            }\n            const { editing } = set;\n            if (!(editing.type === EditType.Rename && editing.fetchingName)) {\n              return set;\n            }\n            return { ...set, editing: { type: EditType.Rename, oldName, newName: oldName } };\n          }),\n        });\n      },\n    });\n  }\n\n  applyItemsOrder() {\n    const state = this.getState();\n    const displayedSet = ViewState.displayedSet(state);\n    if (!displayedSet) {\n      return;\n    }\n\n    const items = state.itemsOrdering.apply(displayedSet.items);\n    this.setState({\n      itemsOrdering: undefined,\n      sets: state.sets.update(displayedSet.iri.value, (set) => ({ ...set, items, isLoading: true })),\n    });\n\n    const holders = Immutable.List(items.map((item) => ({ holder: item.itemHolder, item: item.iri })));\n\n    this.cancellation\n      .map(\n        getSetServiceForUser(this.getContext()).flatMap((service) => service.reorderItems(displayedSet.iri, holders))\n      )\n      .observe({\n        value: () => {\n          this.loadSetItems(displayedSet.iri, { forceReload: true });\n          this.trigger(SetManagementEvents.ItemsReordered);\n        },\n        error: (error) => {\n          const { sets } = this.getState();\n          const set = sets.get(displayedSet.iri.value);\n          if (set && set.isLoading) {\n            this.setState({\n              sets: sets.set(set.iri.value, { ...set, isLoading: false }),\n            });\n          }\n          addNotification(\n            {\n              level: 'error',\n              message: 'Error reordering set items',\n            },\n            error\n          );\n        },\n      });\n  }\n\n  fetchSetItems(setIri: Rdf.Iri) {\n    return fetchSetItems(\n      this.props.setItemsQuery,\n      this.props.setItemsMetadataQuery,\n      this.getContext(),\n      setIri,\n      (kind) => !this.isSet(kind)\n    ).map((allSetsItems) => allSetsItems.get(setIri.value) || []);\n  }\n}\n\nfunction bindAllMethods<T>(instance: T, type: { prototype: T }) {\n  for (const methodName in type.prototype) {\n    if (type.prototype.hasOwnProperty(methodName)) {\n      const method: Function | void = (type.prototype as any)[methodName];\n      if (typeof method === 'function') {\n        (instance as any)[methodName] = method.bind(instance);\n      }\n    }\n  }\n}\n\nexport function emptySet(iri: Rdf.Iri): PlatformSet {\n  return { iri, kind: Defaults.SetKind, metadata: {} };\n}\n\nfunction reuseOldSetItems(\n  newSets: Immutable.Map<string, PlatformSet>,\n  oldSets: Immutable.Map<string, PlatformSet> | undefined\n) {\n  if (!oldSets) {\n    return newSets;\n  }\n  return newSets\n    .map((set, key) => {\n      const oldSet = oldSets.get(key);\n      if (!oldSet || !oldSet.items || set.items) {\n        return set;\n      }\n      return { ...set, items: oldSet.items, itemCount: oldSet.itemCount };\n    })\n    .toOrderedMap();\n}\n","/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as Immutable from 'immutable';\nimport * as Kefir from 'kefir';\nimport * as SparqlJs from 'sparqljs';\n\nimport { Rdf } from 'platform/api/rdf';\nimport {\n  SparqlClient,\n  SparqlUtil,\n  QueryContext,\n  VariableBinder,\n  PropertyPathBinder,\n  TextBinder,\n  PatternBinder,\n} from 'platform/api/sparql';\nimport { ConfigHolder } from 'platform/api/services/config-holder';\n\nimport { SetFilter } from './Configuration';\nimport * as Defaults from './Defaults';\n\nexport interface PlatformSet {\n  readonly iri: Rdf.Iri;\n  readonly itemHolder?: Rdf.Iri;\n  readonly kind: Rdf.Node;\n  readonly itemCount?: number;\n  readonly items?: ReadonlyArray<SetItem>;\n  readonly metadata: SparqlClient.Binding;\n\n  readonly isLoading?: boolean;\n  readonly loadingError?: any;\n\n  readonly editing?: EditState;\n}\n\nexport enum EditType {\n  Create = 1,\n  Rename,\n  ApplyingChanges,\n}\nexport type EditState =\n  | { type: EditType.Create; newName: string }\n  | {\n      type: EditType.Rename;\n      fetchingName?: boolean;\n      oldName?: string;\n      newName?: string;\n    }\n  | { type: EditType.ApplyingChanges };\n\nexport interface SetItem {\n  readonly iri: Rdf.Iri;\n  readonly itemHolder: Rdf.Iri;\n  readonly kind: Rdf.Node;\n  readonly metadata: SparqlClient.Binding;\n}\n\nexport interface FilterValue {\n  filter: SetFilter;\n  binding: SparqlClient.Binding;\n}\nexport namespace FilterValue {\n  export function value(fv: FilterValue) {\n    return fv.binding['value'];\n  }\n  export function label(fv: FilterValue): string {\n    const label = fv.binding['label'];\n    return label && label.value;\n  }\n}\n\ntype MetadataItem = { iri: Rdf.Iri; kind: Rdf.Node };\n\nnamespace SetItemsBindings {\n  export const RootSet = '__rootSet__';\n  export const IsSearch = '__isSearch__';\n  export const SetToSearch = '__setToSearch__';\n  export const FilterPatterns = '__filterPatterns__';\n  export const PreferredLabel = '__preferredLabel__';\n}\n\nnamespace SetItemsMetadataBindings {\n  export const Item = 'item';\n  export const Kind = 'kind';\n}\n\nnamespace SetCountBindings {\n  export const RootSet = '__rootSet__';\n}\n\nnamespace FilterBindings {\n  export const SelectedValue = '__value__';\n  export const InputText = /\\?__token__/;\n}\n\nexport function searchForSetsAndItems(params: {\n  setItemsQuery: string;\n  setItemsMetadataQuery: string;\n  setCountQuery: string;\n  context: QueryContext;\n  rootSet: Rdf.Iri;\n  isSet: (kind: Rdf.Node) => boolean;\n  setToSearch?: Rdf.Iri;\n  filterPatterns?: SparqlJs.Pattern[];\n}): Kefir.Property<Immutable.Map<string, PlatformSet>> {\n  const {\n    setItemsQuery,\n    setItemsMetadataQuery,\n    setCountQuery,\n    context,\n    rootSet,\n    isSet,\n    setToSearch,\n    filterPatterns,\n  } = params;\n\n  const hasFilterPatterns = filterPatterns && filterPatterns.length > 0;\n\n  return Kefir.combine(\n    [\n      querySetItems(setItemsQuery, context, rootSet, setToSearch, filterPatterns),\n      hasFilterPatterns\n        ? Kefir.constant(new Map<string, number>())\n        : loadSetItemCounts(setCountQuery, context, rootSet),\n    ],\n    (itemsResult, counts) => {\n      const sets = parseSets(itemsResult, isSet, counts);\n      const items = parseSetItems(itemsResult, (kind) => !isSet(kind));\n\n      const allItems = items.reduce<MetadataItem[]>((all, setItems) => [...all, ...setItems], []);\n      const unlistedSets = items.map<MetadataItem>((setItems, setIri) => ({\n        iri: Rdf.iri(setIri),\n        kind: Defaults.SetKind,\n      }));\n      const metadataItems: MetadataItem[] = [...allItems, ...sets.toArray(), ...unlistedSets.toArray()];\n\n      return queryMetadata(setItemsMetadataQuery, context, metadataItems).map((metadata) =>\n        combineItemsIntoSets(sets, items, metadata)\n      );\n    }\n  )\n    .flatMap((sets) => sets)\n    .toProperty();\n}\n\nfunction querySetItems(\n  setItemsQuery: string,\n  context: QueryContext,\n  rootSet: Rdf.Iri,\n  setToSearch?: Rdf.Iri,\n  filterPatterns?: SparqlJs.Pattern[]\n) {\n  try {\n    const parsedQuery = SparqlUtil.parseQuery(setItemsQuery);\n\n    const hasFilterPatterns = Boolean(filterPatterns && filterPatterns.length > 0);\n    new PatternBinder(SetItemsBindings.FilterPatterns, hasFilterPatterns ? filterPatterns : []).sparqlQuery(\n      parsedQuery\n    );\n\n    const labelPath = ConfigHolder.getUIConfig().labelPropertyPath;\n    new PropertyPathBinder({\n      [SetItemsBindings.PreferredLabel]: labelPath,\n    }).sparqlQuery(parsedQuery);\n\n    const parametrizedQuery = SparqlClient.setBindings(parsedQuery, {\n      [SetItemsBindings.RootSet]: rootSet,\n      [SetItemsBindings.IsSearch]: Rdf.literal(hasFilterPatterns),\n      [SetItemsBindings.SetToSearch]: setToSearch,\n    });\n\n    return SparqlClient.select(parametrizedQuery, { context });\n  } catch (e) {\n    console.error(e);\n    return Kefir.constantError(e);\n  }\n}\n\nfunction parseSets(\n  result: SparqlClient.SparqlSelectResult,\n  isSet: (kind: Rdf.Node) => boolean,\n  itemCounts: Map<string, number>\n): Immutable.OrderedMap<string, PlatformSet> {\n  const sets = Immutable.OrderedMap<string, PlatformSet>().asMutable();\n\n  for (const { item, kind, itemHolder } of result.results.bindings) {\n    if (!(item && item.isIri())) {\n      continue;\n    }\n    if (!isSet(kind)) {\n      continue;\n    }\n\n    const itemCount = itemCounts.get(item.value);\n    sets.set(item.value, { iri: item, kind, itemCount, itemHolder: itemHolder as Rdf.Iri, metadata: {} });\n  }\n\n  return sets.asImmutable();\n}\n\nfunction loadSetItemCounts(setCountQuery: string, context: QueryContext, rootSet: Rdf.Iri) {\n  const parsedQuery = SparqlUtil.parseQuery(setCountQuery);\n  const parametrizedQuery = SparqlClient.setBindings(parsedQuery, {\n    [SetCountBindings.RootSet]: rootSet,\n  });\n\n  return SparqlClient.select(parametrizedQuery, { context }).map(({ results }) => {\n    const counts = new Map<string, number>();\n\n    for (const { set, count } of results.bindings) {\n      if (!(set && set.isIri() && count && count.isLiteral())) {\n        continue;\n      }\n      const itemCount = Number(count.value);\n      if (!isNaN(itemCount)) {\n        counts.set(set.value, itemCount);\n      }\n    }\n\n    return counts;\n  });\n}\n\nexport function fetchSetItems(\n  setItemsQuery: string,\n  setItemsMetadataQuery: string,\n  context: QueryContext,\n  rootSet: Rdf.Iri,\n  isItem: (kind: Rdf.Node) => boolean,\n  setToSearch?: Rdf.Iri,\n  filterPatterns?: SparqlJs.Pattern[]\n): Kefir.Stream<Map<string, ReadonlyArray<SetItem>>> {\n  return querySetItems(setItemsQuery, context, rootSet, setToSearch, filterPatterns)\n    .map((result) => parseSetItems(result, isItem))\n    .flatMap((sets) =>\n      queryMetadata(\n        setItemsMetadataQuery,\n        context,\n        sets.reduce<MetadataItem[]>((all, items) => [...all, ...items], [])\n      ).map((metadata) => {\n        const setsWithMetadata = new Map<string, ReadonlyArray<SetItem>>();\n        sets.forEach((items, setIri) => {\n          setsWithMetadata.set(setIri, mergeMetadata(items, metadata));\n        });\n        return setsWithMetadata;\n      })\n    );\n}\n\nfunction parseSetItems(\n  result: SparqlClient.SparqlSelectResult,\n  isItem: (kind: Rdf.Node) => boolean\n): Immutable.Map<string, ReadonlyArray<SetItem>> {\n  const setItems = Immutable.OrderedMap<string, Immutable.Map<string, SetItem>>().asMutable();\n\n  for (const binding of result.results.bindings) {\n    const { item, kind, parent, itemHolder } = binding;\n    if (!(item && item.isIri())) {\n      continue;\n    }\n    if (!(itemHolder && itemHolder.isIri())) {\n      continue;\n    }\n    if (!(parent && parent.isIri())) {\n      continue;\n    }\n\n    if (!isItem(kind)) {\n      continue;\n    }\n\n    const clipboardItem: SetItem = { iri: item, itemHolder, kind, metadata: {} };\n    const parentItems = setItems.get(parent.value) || Immutable.OrderedMap<string, SetItem>();\n    setItems.set(parent.value, parentItems.set(item.value, clipboardItem));\n  }\n\n  return setItems\n    .asImmutable()\n    .map((items) => items.toArray())\n    .toOrderedMap();\n}\n\nfunction combineItemsIntoSets(\n  sets: Immutable.Map<string, PlatformSet>,\n  items: Immutable.Map<string, ReadonlyArray<SetItem>>,\n  metadata: Map<string, SparqlClient.Binding>\n) {\n  return Immutable.OrderedMap<string, PlatformSet>().withMutations((result) => {\n    sets.forEach((set) => {\n      const setItems = items.get(set.iri.value);\n      result.set(set.iri.value, setItems ? { ...set, items: mergeMetadata(setItems, metadata) } : set);\n    });\n    items.forEach((setItems, setIri) => {\n      if (sets.has(setIri)) {\n        return;\n      }\n      result.set(setIri, {\n        iri: Rdf.iri(setIri),\n        kind: Defaults.SetKind,\n        items: mergeMetadata(setItems, metadata),\n        itemCount: setItems.length,\n        metadata: metadata.get(setIri) || {},\n      });\n    });\n  });\n}\n\nfunction queryMetadata(\n  setItemsMetadataQuery: string,\n  context: QueryContext,\n  items: MetadataItem[]\n): Kefir.Property<Map<string, SparqlClient.Binding>> {\n  const iris = new Set<string>();\n  const isItemUnique = ({ iri }: MetadataItem) => {\n    if (iris.has(iri.value)) {\n      return false;\n    }\n    iris.add(iri.value);\n    return true;\n  };\n\n  const requested: SparqlClient.Bindings = items.filter(isItemUnique).map(({ iri, kind }) => ({\n    [SetItemsMetadataBindings.Item]: iri,\n    [SetItemsMetadataBindings.Kind]: kind,\n  }));\n\n  if (requested.length === 0) {\n    return Kefir.constant(new Map<string, SparqlClient.Binding>());\n  }\n\n  return SparqlClient.prepareQuery(setItemsMetadataQuery, requested)\n    .flatMap((query) => SparqlClient.select(query, { context }))\n    .map(({ results }) => {\n      const metadata = new Map<string, SparqlClient.Binding>();\n      for (const datum of results.bindings) {\n        const { item } = datum;\n        if (!(item && item.isIri())) {\n          continue;\n        }\n        metadata.set(item.value, datum);\n      }\n      return metadata;\n    })\n    .toProperty();\n}\n\nfunction mergeMetadata(items: ReadonlyArray<SetItem>, metadata: Map<string, SparqlClient.Binding>): SetItem[] {\n  return items.map<SetItem>((item) => ({\n    ...item,\n    metadata: metadata.get(item.iri.value) || {},\n  }));\n}\n\nexport function createFilterPatterns(params: {\n  setItemsQuery: string;\n  searchPattern: string;\n  searchText: string;\n  filterValues?: Immutable.List<FilterValue>;\n}): SparqlJs.Pattern[] {\n  const patterns: SparqlJs.Pattern[] = [];\n\n  const parsedQuery = SparqlUtil.parseQuery(params.setItemsQuery);\n\n  if (params.searchPattern && params.searchText) {\n    const parsedPatterns = SparqlUtil.parsePatterns(params.searchPattern, parsedQuery.prefixes);\n    const binder = new TextBinder([{ test: FilterBindings.InputText, replace: params.searchText }]);\n    parsedPatterns.forEach((p) => binder.pattern(p));\n    patterns.push(...parsedPatterns);\n  }\n\n  if (params.filterValues) {\n    const patternGroups = params.filterValues.map((fv) => {\n      const filterPattern = fv.filter.queryPattern;\n      const parsedPatterns = SparqlUtil.parsePatterns(filterPattern, parsedQuery.prefixes);\n      const binder = new VariableBinder({ [FilterBindings.SelectedValue]: FilterValue.value(fv) });\n      parsedPatterns.forEach((p) => binder.pattern(p));\n      return { type: 'group', patterns: parsedPatterns } as SparqlJs.GroupPattern;\n    });\n\n    patterns.push({\n      type: 'union',\n      patterns: patternGroups.toArray(),\n    } as SparqlJs.BlockPattern);\n  }\n\n  return patterns;\n}\n","/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\nimport { ReactElement } from 'react';\nimport * as Immutable from 'immutable';\nimport * as classnames from 'classnames';\n\nimport { ClearableInput, AutoCompletionInput } from 'platform/components/ui/inputs';\n\nimport { KeywordFilter, SetFilter } from '../Configuration';\nimport { FilterValue } from '../SetsModel';\n\nexport interface Props {\n  baseClass: string;\n  keywordFilter: KeywordFilter;\n  setIsOpen: boolean;\n  minInputLength: number;\n  filters: SetFilter[];\n  searchText?: string;\n  /**\n   * Determines content of additional filters panel.\n   * When collection is undefined filters panel would be hidden.\n   */\n  filterValues?: Immutable.List<FilterValue>;\n  onSearchTextChanged: (searchText: string) => void;\n  onFilterChanged: (filterValues: Immutable.List<FilterValue> | undefined) => void;\n}\n\nexport class SearchAndFilters extends React.Component<Props, {}> {\n  private showAdditionalFilters() {\n    return Boolean(this.props.filterValues);\n  }\n\n  render() {\n    const { baseClass, minInputLength, searchText, filters } = this.props;\n    return (\n      <div className={`${baseClass}__search-and-filters`}>\n        {this.renderKeywordSearch(filters.length > 0)}\n        {searchText && searchText.length < minInputLength ? (\n          <div key=\"search-message\" className={`${baseClass}__search-message`}>\n            {`Minimum length of search term is ${minInputLength} characters.`}\n          </div>\n        ) : undefined}\n        <div\n          key=\"filters-and-badges\"\n          className={classnames({\n            [`${baseClass}__filters`]: true,\n            [`${baseClass}__filters--hidden`]: !this.showAdditionalFilters(),\n          })}\n        >\n          <div key=\"filters\">{filters.map((filter, index) => this.renderFilter(filter, index))}</div>\n        </div>\n      </div>\n    );\n  }\n\n  private renderKeywordSearch(hasFilters: boolean) {\n    const { baseClass } = this.props;\n    const placeholder = this.props.keywordFilter.placeholder;\n    const { placeholderInSet = placeholder } = this.props.keywordFilter;\n    return (\n      <div key=\"keyword-search\" className={`${baseClass}__search`}>\n        <ClearableInput\n          className={`${baseClass}__search-input`}\n          value={this.props.searchText || ''}\n          placeholder={this.props.setIsOpen ? placeholderInSet : placeholder}\n          onChange={(e) => this.props.onSearchTextChanged(e.currentTarget.value)}\n          onClear={() => this.props.onSearchTextChanged('')}\n        />\n        <button\n          className={classnames({\n            [`${baseClass}__show-filters`]: true,\n            'btn btn-default': true,\n            active: this.showAdditionalFilters(),\n          })}\n          aria-pressed={this.showAdditionalFilters()}\n          style={{ display: hasFilters ? undefined : 'none' }}\n          onClick={() => {\n            if (this.showAdditionalFilters()) {\n              this.props.onFilterChanged(undefined);\n            } else {\n              this.props.onFilterChanged(Immutable.List<FilterValue>());\n            }\n          }}\n        >\n          <span className=\"fa fa-ellipsis-v\" title=\"Show additional filters\"></span>\n        </button>\n      </div>\n    );\n  }\n\n  private renderFilter(filter: SetFilter, index: number): ReactElement<any> {\n    const { baseClass, filterValues = Immutable.List<FilterValue>() } = this.props;\n    return (\n      <div key={index} className={`${baseClass}__filter`}>\n        <AutoCompletionInput\n          placeholder={filter.placeholder}\n          query={filter.suggestionsQuery}\n          defaultQuery={filter.suggestionsQuery}\n          minimumInput={this.props.minInputLength}\n          value={filterValues\n            .filter((fv) => fv.filter === filter)\n            .map((fv) => fv.binding)\n            .toArray()}\n          multi={true}\n          actions={{\n            onSelected: (bindings) => {\n              if (bindings && Array.isArray(bindings)) {\n                const newFilterValues = filterValues\n                  .filter((fv) => fv.filter !== filter)\n                  .toList()\n                  .push(...bindings.map((binding) => ({ filter, binding })));\n                this.props.onFilterChanged(newFilterValues);\n              }\n            },\n          }}\n        />\n      </div>\n    );\n  }\n}\n","/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\nimport { HTMLAttributes } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\n\nimport { Rdf } from 'platform/api/rdf';\nimport { ReorderableList, Ordering } from 'platform/components/ui/reorderable-list';\nimport { Draggable } from 'platform/components/dnd';\nimport { ErrorNotification } from 'platform/components/ui/notification';\nimport { Spinner } from 'platform/components/ui/spinner';\nimport { TemplateItem } from 'platform/components/ui/template';\n\nimport { PlatformSet, SetItem, EditState, EditType } from '../SetsModel';\nimport { SetViewContext, SetViewContextTypes, SetItemViewContext, SetItemViewContextTypes } from '../SetManagementApi';\n\nconst ESCAPE_KEY_CODE = 27;\nconst ENTER_KEY_CODE = 13;\n\nexport interface BaseProps {\n  baseClass: string;\n  template: (kind: Rdf.Node, expectedToBeSet: boolean) => string;\n  onDragStart: (iri: string) => void;\n  onDragEnd: () => void;\n}\n\nexport interface SetViewProps extends ItemsViewProps {\n  /**\n   * Callback invoked when user tries to open this set by clicking on the caption.\n   */\n  onOpen?: (openedSetIri: Rdf.Iri) => void;\n  /**\n   * Callback invoked when user accepted a new name for set or\n   * cancelled set renaming (`newName` will be undefined in this case).\n   */\n  onEditCompleted: (newName: string | undefined) => void;\n}\n\nexport class OpenedSetView extends React.Component<SetViewProps, {}> {\n  static readonly childContextTypes = SetViewContextTypes;\n  getChildContext(): SetViewContext {\n    return {\n      'mp-set-management--set-view': {\n        getCurrentSet: () => this.props.set.iri,\n      },\n    };\n  }\n\n  render() {\n    const { baseClass } = this.props;\n    return (\n      <div className={`${baseClass}__opened-set`}>\n        <SetCaption\n          {...this.props}\n          className={`${baseClass}__open-set`}\n          icon={<span className=\"fa fa-folder-open\" />}\n        ></SetCaption>\n        <ItemsView key=\"opened-set-items\" {...this.props} />\n      </div>\n    );\n  }\n}\n\nexport interface SetWithItemsProps extends SetViewProps {\n  /**\n   * Determines whether should display items of this set.\n   */\n  showItems?: boolean;\n}\n\nexport class SetWithItems extends React.Component<SetWithItemsProps, {}> {\n  static readonly childContextTypes = SetViewContextTypes;\n  getChildContext(): SetViewContext {\n    return {\n      'mp-set-management--set-view': {\n        getCurrentSet: () => this.props.set.iri,\n      },\n    };\n  }\n\n  render() {\n    const { showItems = true, ...otherProps } = this.props;\n    const { baseClass, set, onEditCompleted } = otherProps;\n\n    return (\n      <li className={`${baseClass}__set`}>\n        <SetCaption\n          {...otherProps}\n          className={`${baseClass}__set-caption`}\n          set={set}\n          onCaptionClick={this.handleOnClick}\n          onEditCompleted={onEditCompleted}\n          icon={<span className={showItems ? 'fa fa-folder-open' : 'fa fa-folder'} />}\n        ></SetCaption>\n        {showItems ? <ItemsView {...otherProps} /> : undefined}\n      </li>\n    );\n  }\n\n  private handleOnClick = (e: React.MouseEvent<any>) => {\n    // we ignore the click if it happened somewhere in set actions element\n    const actionHolder = (findDOMNode(this) as Element).querySelector('.set-management__item-actions');\n    if (!(actionHolder && actionHolder.contains(e.target as HTMLElement))) {\n      this.props.onOpen(this.props.set.iri);\n    }\n  };\n}\n\ninterface SetCaptionProps extends BaseProps {\n  className: string;\n  set: PlatformSet;\n  icon: React.ReactNode;\n  onCaptionClick?: (e: React.MouseEvent<any>) => void;\n  onEditCompleted: (newName: string | undefined) => void;\n}\n\nclass SetCaption extends React.Component<SetCaptionProps, {}> {\n  render() {\n    const { baseClass, className, set, icon } = this.props;\n    const isEditing = Boolean(set && set.editing);\n    const caption = (\n      <div className={className} onClick={isEditing ? undefined : this.props.onCaptionClick}>\n        <div className={`${baseClass}__set-icon`}>{icon}</div>\n        {this.renderName(set)}\n        {set && typeof set.itemCount === 'number' ? (\n          <span className={`${baseClass}__set-item-count badge`}>{set.itemCount}</span>\n        ) : undefined}\n      </div>\n    );\n    return this.wrapDraggable(!isEditing, caption);\n  }\n\n  private renderName(set: PlatformSet | undefined) {\n    if (!set) {\n      return <Spinner />;\n    } else if (set.editing) {\n      const { onEditCompleted } = this.props;\n      return <EditableLabel editing={set.editing} onEditCompleted={onEditCompleted} />;\n    } else {\n      const { baseClass } = this.props;\n      return (\n        <TemplateItem\n          componentProps={{ className: `${baseClass}__set-template` }}\n          template={{\n            source: this.props.template(set.kind, true),\n            options: { ...set.metadata, iri: set.iri, kind: set.kind, itemCount: set.itemCount, itemHolder: set.itemHolder },\n          }}\n        />\n      );\n    }\n  }\n\n  private wrapDraggable(shouldWrap: boolean, node: React.ReactElement<any>) {\n    const { set, onDragStart, onDragEnd } = this.props;\n    if (!set) {\n      return null;\n    }\n    return shouldWrap ? (\n      <Draggable iri={set.iri.value} onDragStart={onDragStart} onDragEnd={onDragEnd}>\n        {node}\n      </Draggable>\n    ) : (\n      node\n    );\n  }\n}\n\nexport interface EditableLabelProps extends HTMLAttributes<HTMLInputElement> {\n  editing: EditState;\n  onEditCompleted: (newName: string | undefined) => void;\n}\n\nexport class EditableLabel extends React.Component<EditableLabelProps, {}> {\n  render() {\n    // tslint:disable-next-line:no-unused-variable\n    const { editing, onEditCompleted, ...otherProps } = this.props;\n\n    if (editing.type === EditType.ApplyingChanges || (editing.type === EditType.Rename && editing.fetchingName)) {\n      return <Spinner spinnerDelay={0} />;\n    }\n\n    return (\n      <input\n        {...otherProps}\n        type=\"text\"\n        autoFocus\n        defaultValue={editing.newName}\n        ref={(input) => (input ? input.setSelectionRange(0, input.value.length) : null)}\n        onKeyDown={this.onKeyDownWhileEditing}\n        // prevent unwanted refresh on selection change by mouse click\n        onClick={(e) => e.stopPropagation()}\n        onBlur={this.onBlurWhileEditing}\n      />\n    );\n  }\n\n  private onKeyDownWhileEditing = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.keyCode === ENTER_KEY_CODE) {\n      e.preventDefault();\n      this.props.onEditCompleted(e.currentTarget.value);\n    } else if (e.keyCode === ESCAPE_KEY_CODE) {\n      e.preventDefault();\n      this.props.onEditCompleted(undefined);\n    }\n  };\n\n  private onBlurWhileEditing = (e: React.SyntheticEvent<HTMLInputElement>) => {\n    this.props.onEditCompleted(undefined);\n  };\n}\n\nexport interface ItemsViewProps extends BaseProps {\n  /** When omited displays loading animation. */\n  set: PlatformSet | undefined;\n  /** Substring of set item's label to highlight. */\n  highlightedTerm?: string;\n  itemsOrdering?: Ordering;\n  onOrderChanged?: (ordering: Ordering) => void;\n}\n\nexport class ItemsView extends React.Component<ItemsViewProps, {}> {\n  static readonly childContextTypes = SetViewContextTypes;\n  getChildContext(): SetViewContext {\n    return {\n      'mp-set-management--set-view': {\n        getCurrentSet: () => this.props.set.iri,\n      },\n    };\n  }\n\n  render() {\n    return <div className={`${this.props.baseClass}__items-view`}>{this.renderItemsPane()}</div>;\n  }\n\n  private renderItemsPane(): React.ReactElement<any>[] {\n    const { set, itemsOrdering, onOrderChanged } = this.props;\n    if (set && set.loadingError) {\n      return [<ErrorNotification key=\"error\" errorMessage={set.loadingError} />];\n    }\n\n    const setItems = set ? set.items : undefined;\n    const renderedItems = setItems\n      ? setItems.map((item) => <ItemView key={item.iri.value} item={item} {...this.props} />)\n      : undefined;\n\n    return [\n      !set || set.isLoading ? <Spinner key=\"spinner\" /> : null,\n      renderedItems ? (\n        itemsOrdering ? (\n          <ReorderableList\n            key=\"items\"\n            className={`${this.props.baseClass}__set-items`}\n            itemClass={`${this.props.baseClass}__reordered-item`}\n            ordering={itemsOrdering}\n            onOrderChanged={onOrderChanged}\n          >\n            {renderedItems}\n          </ReorderableList>\n        ) : (\n          <TransitionGroup key=\"items\" component=\"ul\" className={`${this.props.baseClass}__set-items`}>\n            {renderedItems.map((item) => (\n              <CSSTransition key={item.key} classNames=\"set-items-animation\" timeout={{ enter: 800, exit: 500 }}>\n                {item}\n              </CSSTransition>\n            ))}\n          </TransitionGroup>\n        )\n      ) : null,\n    ];\n  }\n}\n\nclass ItemView extends React.Component<\n  {\n    baseClass: string;\n    item: SetItem;\n    template: (kind: Rdf.Node, expectedToBeSet: boolean) => string;\n    /** Substring of label to highlight. */\n    highlightedTerm?: string;\n    onDragStart: (iri: string) => void;\n    onDragEnd: () => void;\n  },\n  {}\n> {\n  static readonly childContextTypes = SetItemViewContextTypes;\n  getChildContext(): SetItemViewContext {\n    return {\n      'mp-set-management--set-item-view': {\n        getItem: () => this.props.item.itemHolder,\n        getSetItemIri: () => this.props.item.iri,\n      },\n    };\n  }\n\n  render() {\n    const { template, item, baseClass, onDragEnd, onDragStart, highlightedTerm } = this.props;\n    return (\n      <Draggable key={item.iri.value} iri={item.iri.value} onDragStart={onDragStart} onDragEnd={onDragEnd}>\n        <li className={`${baseClass}__set-item`} key={item.iri.value}>\n          <TemplateItem\n            template={{\n              source: template(item.kind, false),\n              options: {\n                ...item.metadata,\n                iri: item.iri,\n                itemHolder: item.itemHolder,\n                highlight: highlightedTerm,\n              },\n            }}\n          />\n        </li>\n      </Draggable>\n    );\n  }\n}\n","/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\nimport * as classnames from 'classnames';\n\nimport { ItemViewMode } from '../Configuration';\n\nexport interface FooterProps extends ReorderingProps {\n  baseClass: string;\n  readonly: boolean;\n  itemViewMode: ItemViewMode;\n  onModeChanged: (newMode: ItemViewMode) => void;\n  onPressCreateNewSet: () => void;\n}\n\nexport class Footer extends React.Component<FooterProps, {}> {\n  render() {\n    const { baseClass, readonly, itemViewMode, onModeChanged, isReordering, canReorder } = this.props;\n\n    return (\n      <div className={`${baseClass}__footer`}>\n        {isReordering && canReorder ? <ReorderConfirmation {...this.props} /> : null}\n        <div className={`${baseClass}__footer-buttons`} role=\"group\">\n          <ItemViewModeSwitch baseClass={baseClass} mode={itemViewMode} onModeChanged={onModeChanged} />\n          {!readonly && canReorder ? <ReorderItemsButton {...this.props} /> : null}\n          <div className={`${baseClass}__footer-spacer`}></div>\n          {readonly ? null : this.renderAddNewSetButton()}\n        </div>\n      </div>\n    );\n  }\n\n  private renderAddNewSetButton() {\n    return (\n      <div className=\"btn-group btn-group-xs\" role=\"group\">\n        {!this.props.readonly && (\n          <button\n            type=\"button\"\n            title=\"Create new set\"\n            className=\"btn btn-default\"\n            onClick={this.props.onPressCreateNewSet}\n          >\n            <i className=\"fa fa-plus\"></i>&nbsp;\n            <i className=\"fa fa-folder fa-lg\"></i>\n          </button>\n        )}\n      </div>\n    );\n  }\n}\n\nexport interface ReorderingProps {\n  baseClass: string;\n  /**\n   * Reorder UI will be hidden if false.\n   */\n  canReorder: boolean;\n  isReordering: boolean;\n  /**\n   * Called to toggle reordering mode.\n   */\n  onPressReorder: () => void;\n  onPressReorderApply: () => void;\n}\n\nexport class ReorderItemsButton extends React.Component<ReorderingProps, {}> {\n  render() {\n    const { baseClass, isReordering, onPressReorder } = this.props;\n    return (\n      <div className={`btn-group btn-group-xs ${baseClass}__toggle-reorder-items`} role=\"group\">\n        <button\n          type=\"button\"\n          title=\"Reorder items\"\n          aria-pressed={isReordering}\n          className={classnames({ 'btn btn-default': true, active: isReordering })}\n          onClick={onPressReorder}\n        >\n          <i className=\"fa fa-lg fa-random\"></i>\n        </button>\n      </div>\n    );\n  }\n}\n\nexport class ReorderConfirmation extends React.Component<ReorderingProps, {}> {\n  render() {\n    const { baseClass, onPressReorder, onPressReorderApply } = this.props;\n    return (\n      <div className={`${baseClass}__footer-reorder-confirmation`}>\n        <div className={`${baseClass}__footer-reorder-message`}>Drag items to reorder</div>\n        <div className={`${baseClass}__footer-reorder-buttons`}>\n          <button\n            type=\"button\"\n            title=\"Cancel reordering items\"\n            className={`btn btn-xs btn-danger ${baseClass}__footer-reorder-cancel`}\n            onClick={onPressReorder}\n          >\n            Cancel\n          </button>\n          <button\n            type=\"button\"\n            title=\"Save items order\"\n            className=\"btn btn-xs btn-success\"\n            onClick={onPressReorderApply}\n          >\n            Save changes\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport class ItemViewModeSwitch extends React.Component<\n  {\n    baseClass: string;\n    mode: ItemViewMode;\n    onModeChanged: (newMode: ItemViewMode) => void;\n  },\n  {}\n> {\n  render() {\n    const { baseClass } = this.props;\n    const className = `${baseClass}__item-view-mode btn-group btn-group-xs`;\n    return (\n      <div className={className} role=\"group\">\n        {this.renderModeButton('grid', 'Switch to grid view', <span className=\"fa fa-lg fa-th\" />)}\n        {this.renderModeButton('list', 'Switch to list view', <span className=\"fa fa-lg fa-th-list\" />)}\n      </div>\n    );\n  }\n\n  private renderModeButton(mode: ItemViewMode, title: string, children: React.ReactNode) {\n    const isPressed = mode === this.props.mode;\n    return (\n      <button\n        key={mode}\n        type=\"button\"\n        title={title}\n        className={classnames({ 'btn btn-default': true, active: isPressed })}\n        aria-pressed={isPressed}\n        onClick={isPressed ? undefined : () => this.props.onModeChanged(mode)}\n      >\n        {children}\n      </button>\n    );\n  }\n}\n"],"sourceRoot":""}