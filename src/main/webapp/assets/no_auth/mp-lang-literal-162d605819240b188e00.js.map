{"version":3,"sources":["webpack:///./src/main/web/components/ui/lang-literal/LangLiteral.tsx"],"names":["props","context","cancellation","Cancellation","renderResult","templateString","options","style","className","source","getTemplateString","TemplateItem","template","componentProps","state","isLoading","isNoResult","data","maybe","Nothing","componentDidMount","query","this","prepareQuery","queryParsed","SparqlClient","setBindings","SparqlUtil","parseQuerySync","__subject__","subject","Rdf","iri","getCurrentResource","derive","map","select","semanticContext","onValue","res","isSelectResultEmpty","setState","f","_","forEach","results","bindings","binding","node","value","others","includes","push","equals","remove","preferredLanguage","values","Just","componentWillUnmount","cancelAll","path","property","Error","prefLangPart","getPreferredUserLanguage","prefLang","render","noResultTemplate","Spinner","getOrElse","Component","LangLiteral"],"mappings":"6IAkBA,OACA,QACA,QAGA,QACA,SACA,QACA,SACA,QACA,QACA,SACA,QAqCA,cAGE,qBAAYA,EAAqBC,GAAjC,MACE,YAAMD,EAAOC,IAAQ,K,OAHf,EAAAC,aAAe,IAAI,EAAAC,aAmInB,EAAAC,aAAe,SAACC,GAA4B,gBAACC,GAC7C,cAAEC,EAAA,EAAAA,MAAOC,EAAA,EAAAA,UACTC,EAAS,EAAKC,kBAAkBL,GACtC,OAAO,gBAAC,EAAAM,aAAY,CAACC,SAAU,CAAEH,OAAM,EAAEH,QAAO,GAAIO,eAAgB,CAAEN,MAAK,EAAEC,UAAS,OAlItF,EAAKM,MAAQ,CACXC,WAAW,EACXC,YAAY,EACZC,KAAMC,EAAMC,W,EAgJlB,OAxJiC,2BAY/B,sBAAAC,kBAAA,sBACQC,EAAQC,KAAKC,eAEbC,EAAc,EAAAC,aAAaC,YAAY,EAAAC,WAAWC,eAAeP,GAAgC,CACrGQ,YAAaP,KAAKtB,MAAM8B,QAAU,EAAAC,IAAIC,IAAIV,KAAKtB,MAAM8B,SAAW,EAAAG,uBAGlEX,KAAKpB,aAAagC,SAASC,IACzB,EAAAV,aAAaW,OAAOZ,EAAa,CAAEvB,QAASqB,KAAKrB,QAAQoC,kBAAmBC,SAAQ,SAACC,GACnF,GAAI,EAAAZ,WAAWa,oBAAoBD,GACjC,EAAKE,SAAS,CAAE1B,WAAW,EAAOC,YAAY,QADhD,CAIA,IAAM0B,EAAI,GACVC,EAAEC,QAAQL,EAAIM,QAAQC,UAAU,SAACC,GAC/B,IAAMC,EAAOD,EAAqB,KAAEE,MAC/BP,EAAEM,KACLN,EAAEM,GAAQ,GACVN,EAAEM,GAAME,OAAS,IAEdP,EAAEQ,SAAST,EAAEM,GAAME,OAAQH,EAAsB,QACpDL,EAAEM,GAAME,OAAOE,KAAKL,EAAsB,OAExCA,EAAsB,MAAEM,OAAON,EAA0B,oBAC3DJ,EAAEW,OAAOZ,EAAEM,GAAME,OAAQH,EAA0B,mBAGjDA,EAA0B,oBAC5BL,EAAEM,GAAMO,kBAAoBR,EAA0B,sBAI1D,IAAM9B,EAAO,CACX4B,QAASF,EAAEa,OAAUd,IAGvB,EAAKD,SAAS,CAAExB,KAAMC,EAAMuC,KAAKxC,GAAOF,WAAW,EAAOC,YAAY,UAK5E,sBAAA0C,qBAAA,WACEpC,KAAKpB,aAAayD,aAGZ,sBAAApC,aAAR,WACQ,iBAAEqC,EAAA,EAAAA,KAAMC,EAAA,EAAAA,SAEd,IAAKA,EACH,MAAM,IAAIC,MAAM,mDAGlB,IAEMC,EAAe,yCACgBF,EADhB,oCADN,oCADO,EAAAG,2BACsD,OACvD,8EAMrB,OAAIJ,EACK,sHAGkBA,EAHlB,oCAIwBC,EAJxB,+BAKKE,EAAY,kBAInB,uHAGqBF,EAHrB,8EAKOE,EAAY,mBAIpB,sBAAArD,kBAAR,SAA0BE,GACxB,GAAIA,EACF,OAAOA,EAGT,IAAMqD,EAAW,EAAAD,2BAgBjB,MAAO,gQAdO,kBAAkB1C,KAAKtB,MAAM6D,SAAQ,iBAuB7B,iDAAiDI,EAThE,inBA0BT,sBAAAC,OAAA,WACQ,iBAAEtD,EAAA,EAAAA,SAAUuD,EAAA,EAAAA,iBACZ,aAAElD,EAAA,EAAAA,KAAMF,EAAA,EAAAA,UAEd,OAFyB,EAAAC,WAGhB,gBAAC,EAAAL,aAAY,CAACC,SAAU,CAAEH,OAAQ0D,KAGvCpD,EACK,gBAAC,EAAAqD,QAAO,MAGV,2BAAMnD,EAAKkB,IAAIb,KAAKlB,aAAaQ,IAAWyD,UAAU,QAEjE,YAxJA,CAAiC,EAAAC,WAApB,EAAAC,cA0Jb,UAAeA","file":"mp-lang-literal-162d605819240b188e00.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\nimport * as maybe from 'data.maybe';\nimport * as _ from 'lodash';\nimport * as SparqlJs from 'sparqljs';\n\nimport { Component, ComponentContext } from 'platform/api/components';\nimport { getPreferredUserLanguage } from 'platform/api/services/language';\nimport { Cancellation } from 'platform/api/async';\nimport { TemplateItem } from 'platform/components/ui/template';\nimport { SparqlClient, SparqlUtil } from 'platform/api/sparql';\nimport { Rdf } from 'platform/api/rdf';\nimport { Spinner } from 'platform/components/ui/spinner';\nimport { getCurrentResource } from 'platform/api/navigation';\n\ninterface LiteralProps {\n  subject?: string;\n  path?: string;\n  property: string;\n  template?: string;\n  noResultTemplate?: string;\n  /**\n   * Additional class names for component root element\n   */\n  className?: string;\n  /**\n   * Additional styles for label element\n   */\n  style?: React.CSSProperties;\n}\n\ninterface State {\n  isLoading?: boolean;\n  isNoResult?: boolean;\n  readonly data?: Data.Maybe<R>;\n}\n\nconst VALUE_VARIABLE = 'value';\nconst NODE_VARIABLE = 'node';\nconst PREF_LANG_VARIABLE = 'preferredLanguage';\n\ninterface T {\n  preferredLanguage: Rdf.Node;\n  others: Rdf.Node[];\n}\n\ninterface R {\n  results: T[];\n}\n\nexport class LangLiteral extends Component<LiteralProps, State> {\n  private cancellation = new Cancellation();\n\n  constructor(props: LiteralProps, context: ComponentContext) {\n    super(props, context);\n    this.state = {\n      isLoading: true,\n      isNoResult: false,\n      data: maybe.Nothing<R>(),\n    };\n  }\n\n  componentDidMount() {\n    const query = this.prepareQuery();\n\n    const queryParsed = SparqlClient.setBindings(SparqlUtil.parseQuerySync(query) as SparqlJs.SelectQuery, {\n      __subject__: this.props.subject ? Rdf.iri(this.props.subject) : getCurrentResource(),\n    });\n\n    this.cancellation.derive().map(\n      SparqlClient.select(queryParsed, { context: this.context.semanticContext }).onValue((res) => {\n        if (SparqlUtil.isSelectResultEmpty(res)) {\n          this.setState({ isLoading: false, isNoResult: true });\n          return;\n        }\n        const f = {};\n        _.forEach(res.results.bindings, (binding) => {\n          const node = binding[NODE_VARIABLE].value;\n          if (!f[node]) {\n            f[node] = {};\n            f[node].others = [];\n          }\n          if (!_.includes(f[node].others, binding[VALUE_VARIABLE])) {\n            f[node].others.push(binding[VALUE_VARIABLE]);\n          }\n          if (binding[VALUE_VARIABLE].equals(binding[PREF_LANG_VARIABLE])) {\n            _.remove(f[node].others, binding[PREF_LANG_VARIABLE]);\n          }\n\n          if (binding[PREF_LANG_VARIABLE]) {\n            f[node].preferredLanguage = binding[PREF_LANG_VARIABLE];\n          }\n        });\n\n        const data = {\n          results: _.values<T>(f),\n        };\n\n        this.setState({ data: maybe.Just(data), isLoading: false, isNoResult: false });\n      })\n    );\n  }\n\n  componentWillUnmount() {\n    this.cancellation.cancelAll();\n  }\n\n  private prepareQuery() {\n    const { path, property } = this.props;\n\n    if (!property) {\n      throw new Error(\"At least attribute 'property' must be specified\");\n    }\n\n    const preferredLang = getPreferredUserLanguage();\n    const filter = `FILTER(LANGMATCHES(LANG(?${VALUE_VARIABLE}),'${preferredLang}'))`;\n    const prefLangPart = `OPTIONAL{\n                    ?${NODE_VARIABLE} <${property}> ?${VALUE_VARIABLE} .\n                    ${filter}\n                    BIND(?${VALUE_VARIABLE} as ?${PREF_LANG_VARIABLE})\n                }`;\n\n    if (path) {\n      return `SELECT DISTINCT\n                ?${NODE_VARIABLE} ?${VALUE_VARIABLE} ?${PREF_LANG_VARIABLE}\n            WHERE{\n                ?__subject__ ${path} ?${NODE_VARIABLE} .\n                ?${NODE_VARIABLE} <${property}> ?${VALUE_VARIABLE} .\n                ${prefLangPart}\n            }`;\n    }\n\n    return `SELECT DISTINCT\n                ?${NODE_VARIABLE} ?${VALUE_VARIABLE} ?${PREF_LANG_VARIABLE}\n            WHERE{\n                ?__subject__ <${property}> ?${VALUE_VARIABLE} .\n                BIND( ?__subject__ as ?${NODE_VARIABLE} )\n                ${prefLangPart}\n            }`;\n  }\n\n  private getTemplateString(template: string): string {\n    if (template) {\n      return template;\n    }\n\n    const prefLang = getPreferredUserLanguage();\n\n    const label = `<mp-label iri=\"${this.props.property}\"></mp-label>`;\n    const others = `\n      <mp-popover title=\"Other languages\">\n        <mp-popover-trigger placement=\"right\" trigger='[\"hover\",\"click\",\"focus\"]'>\n          <i class=\"fa fa-language hidden-print\" style=\"margin-left: 10px;\" aria-hidden=\"true\"></i>\n        </mp-popover-trigger>\n        <mp-popover-content style=\"background: white;\">\n          {{#each others}}\n            <div>{{value}} {{#if lang}}({{lang}}){{/if}}</div><hr>\n          {{/each}}\n        </mp-popover-content>\n      </mp-popover>\n    `;\n\n    return `\n    <div>\n      {{#each results}}\n        {{#if preferredLanguage}}\n          {{preferredLanguage.value}}\n          {{#if preferredLanguage.lang}}\n            ({{preferredLanguage.lang}})\n          {{/if}}\n        {{else}}\n          Property ${label} is not available in your preferred language (${prefLang})\n        {{/if}}\n        {{#if others.length}}\n          ${others}\n        {{/if}}\n        <br>\n      {{/each}}\n    </div>\n    `;\n  }\n\n  private renderResult = (templateString?: string) => (options: R) => {\n    const { style, className } = this.props;\n    const source = this.getTemplateString(templateString);\n    return <TemplateItem template={{ source, options }} componentProps={{ style, className }} />;\n  };\n\n  render() {\n    const { template, noResultTemplate } = this.props;\n    const { data, isLoading, isNoResult } = this.state;\n\n    if (isNoResult) {\n      return <TemplateItem template={{ source: noResultTemplate }} />;\n    }\n\n    if (isLoading) {\n      return <Spinner />;\n    }\n\n    return <div>{data.map(this.renderResult(template)).getOrElse(null)}</div>;\n  }\n}\n\nexport default LangLiteral;\n"],"sourceRoot":""}