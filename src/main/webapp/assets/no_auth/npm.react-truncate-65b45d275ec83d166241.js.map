{"version":3,"sources":["webpack:///./node_modules/react-truncate/lib/Truncate.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_createClass","defineProperties","props","descriptor","enumerable","configurable","writable","defineProperty","Constructor","protoProps","staticProps","_classCallCheck","instance","TypeError","_possibleConstructorReturn","self","ReferenceError","Truncate","_Component","_ref","this","_len","args","Array","_key","_this","__proto__","getPrototypeOf","apply","concat","state","styles","ellipsis","position","visibility","top","left","elements","onResize","bind","onTruncate","calcTargetWidth","measureWidth","getLines","renderLine","_inherits","subClass","superClass","create","constructor","value","setPrototypeOf","componentDidMount","_elements","text","canvas","document","createElement","canvasContext","getContext","body","appendChild","parentNode","removeChild","window","addEventListener","componentDidUpdate","prevProps","children","forceUpdate","componentWillUnmount","timeout","removeEventListener","cancelAnimationFrame","innerText","node","div","contentKey","HTMLElement","innerHTML","replace","test","didTruncate","requestAnimationFrame","callback","targetWidth","Math","floor","getBoundingClientRect","width","style","getComputedStyle","font","join","setState","measureText","ellipsisWidth","offsetWidth","_props","numLines","lines","textLines","split","map","line","textWords","resultLine","push","textRest","lower","upper","middle","slice","_lower","_upper","_middle","splice","shift","arr","br","render","_this2","_props2","spanProps","_objectWithoutProperties","obj","keys","indexOf","ref","targetEl","textEl","ellipsisEl","propTypes","oneOfType","oneOf","number","func","defaultProps"],"mappings":"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","file":"npm.react-truncate-65b45d275ec83d166241.js","sourcesContent":["var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nvar Truncate = function (_Component) {\n    _inherits(Truncate, _Component);\n\n    function Truncate() {\n        var _ref;\n\n        _classCallCheck(this, Truncate);\n\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n        }\n\n        var _this = _possibleConstructorReturn(this, (_ref = Truncate.__proto__ || Object.getPrototypeOf(Truncate)).call.apply(_ref, [this].concat(args)));\n\n        _this.state = {};\n        _this.styles = {\n            ellipsis: {\n                position: 'fixed',\n                visibility: 'hidden',\n                top: 0,\n                left: 0\n            }\n        };\n\n\n        _this.elements = {};\n\n        _this.onResize = _this.onResize.bind(_this);\n        _this.onTruncate = _this.onTruncate.bind(_this);\n        _this.calcTargetWidth = _this.calcTargetWidth.bind(_this);\n        _this.measureWidth = _this.measureWidth.bind(_this);\n        _this.getLines = _this.getLines.bind(_this);\n        _this.renderLine = _this.renderLine.bind(_this);\n        return _this;\n    }\n\n    _createClass(Truncate, [{\n        key: 'componentDidMount',\n        value: function componentDidMount() {\n            var _elements = this.elements,\n                text = _elements.text,\n                ellipsis = _elements.ellipsis,\n                calcTargetWidth = this.calcTargetWidth,\n                onResize = this.onResize;\n\n\n            var canvas = document.createElement('canvas');\n            this.canvasContext = canvas.getContext('2d');\n\n            // Keep node in document body to read .offsetWidth\n            document.body.appendChild(ellipsis);\n\n            calcTargetWidth(function () {\n                // Node not needed in document tree to read its content\n                if (text) {\n                    text.parentNode.removeChild(text);\n                }\n            });\n\n            window.addEventListener('resize', onResize);\n        }\n    }, {\n        key: 'componentDidUpdate',\n        value: function componentDidUpdate(prevProps) {\n            // Render was based on outdated refs and needs to be rerun\n            if (this.props.children !== prevProps.children) {\n                this.forceUpdate();\n            }\n        }\n    }, {\n        key: 'componentWillUnmount',\n        value: function componentWillUnmount() {\n            var ellipsis = this.elements.ellipsis,\n                onResize = this.onResize,\n                timeout = this.timeout;\n\n\n            ellipsis.parentNode.removeChild(ellipsis);\n\n            window.removeEventListener('resize', onResize);\n\n            window.cancelAnimationFrame(timeout);\n        }\n\n        // Shim innerText to consistently break lines at <br/> but not at \\n\n\n    }, {\n        key: 'innerText',\n        value: function innerText(node) {\n            var div = document.createElement('div');\n            var contentKey = 'innerText' in window.HTMLElement.prototype ? 'innerText' : 'textContent';\n\n            div.innerHTML = node.innerHTML.replace(/\\r\\n|\\r|\\n/g, ' ');\n\n            var text = div[contentKey];\n\n            var test = document.createElement('div');\n            test.innerHTML = 'foo<br/>bar';\n\n            if (test[contentKey].replace(/\\r\\n|\\r/g, '\\n') !== 'foo\\nbar') {\n                div.innerHTML = div.innerHTML.replace(/<br.*?[\\/]?>/gi, '\\n');\n                text = div[contentKey];\n            }\n\n            return text;\n        }\n    }, {\n        key: 'onResize',\n        value: function onResize() {\n            this.calcTargetWidth();\n        }\n    }, {\n        key: 'onTruncate',\n        value: function onTruncate(didTruncate) {\n            var onTruncate = this.props.onTruncate;\n\n\n            if (typeof onTruncate === 'function') {\n                this.timeout = window.requestAnimationFrame(function () {\n                    onTruncate(didTruncate);\n                });\n            }\n        }\n    }, {\n        key: 'calcTargetWidth',\n        value: function calcTargetWidth(callback) {\n            var target = this.elements.target,\n                calcTargetWidth = this.calcTargetWidth,\n                canvasContext = this.canvasContext;\n\n            // Calculation is no longer relevant, since node has been removed\n\n            if (!target) {\n                return;\n            }\n\n            // Floor the result to deal with browser subpixel precision\n            var targetWidth = Math.floor(target.parentNode.getBoundingClientRect().width);\n\n            // Delay calculation until parent node is inserted to the document\n            // Mounting order in React is ChildComponent, ParentComponent\n            if (!targetWidth) {\n                return window.requestAnimationFrame(function () {\n                    return calcTargetWidth(callback);\n                });\n            }\n\n            var style = window.getComputedStyle(target);\n\n            var font = [style['font-weight'], style['font-style'], style['font-size'], style['font-family']].join(' ');\n\n            canvasContext.font = font;\n\n            this.setState({\n                targetWidth: targetWidth\n            }, callback);\n        }\n    }, {\n        key: 'measureWidth',\n        value: function measureWidth(text) {\n            return this.canvasContext.measureText(text).width;\n        }\n    }, {\n        key: 'ellipsisWidth',\n        value: function ellipsisWidth(node) {\n            return node.offsetWidth;\n        }\n    }, {\n        key: 'getLines',\n        value: function getLines() {\n            var elements = this.elements,\n                _props = this.props,\n                numLines = _props.lines,\n                ellipsis = _props.ellipsis,\n                targetWidth = this.state.targetWidth,\n                innerText = this.innerText,\n                measureWidth = this.measureWidth,\n                onTruncate = this.onTruncate;\n\n\n            var lines = [];\n            var text = innerText(elements.text);\n            var textLines = text.split('\\n').map(function (line) {\n                return line.split(' ');\n            });\n            var didTruncate = true;\n            var ellipsisWidth = this.ellipsisWidth(this.elements.ellipsis);\n\n            for (var line = 1; line <= numLines; line++) {\n                var textWords = textLines[0];\n\n                // Handle newline\n                if (textWords.length === 0) {\n                    lines.push();\n                    textLines.shift();\n                    line--;\n                    continue;\n                }\n\n                var resultLine = textWords.join(' ');\n\n                if (measureWidth(resultLine) <= targetWidth) {\n                    if (textLines.length === 1) {\n                        // Line is end of text and fits without truncating\n                        didTruncate = false;\n\n                        lines.push(resultLine);\n                        break;\n                    }\n                }\n\n                if (line === numLines) {\n                    // Binary search determining the longest possible line inluding truncate string\n                    var textRest = textWords.join(' ');\n\n                    var lower = 0;\n                    var upper = textRest.length - 1;\n\n                    while (lower <= upper) {\n                        var middle = Math.floor((lower + upper) / 2);\n\n                        var testLine = textRest.slice(0, middle + 1);\n\n                        if (measureWidth(testLine) + ellipsisWidth <= targetWidth) {\n                            lower = middle + 1;\n                        } else {\n                            upper = middle - 1;\n                        }\n                    }\n\n                    resultLine = React.createElement(\n                        'span',\n                        null,\n                        textRest.slice(0, lower),\n                        ellipsis\n                    );\n                } else {\n                    // Binary search determining when the line breaks\n                    var _lower = 0;\n                    var _upper = textWords.length - 1;\n\n                    while (_lower <= _upper) {\n                        var _middle = Math.floor((_lower + _upper) / 2);\n\n                        var _testLine = textWords.slice(0, _middle + 1).join(' ');\n\n                        if (measureWidth(_testLine) <= targetWidth) {\n                            _lower = _middle + 1;\n                        } else {\n                            _upper = _middle - 1;\n                        }\n                    }\n\n                    // The first word of this line is too long to fit it\n                    if (_lower === 0) {\n                        // Jump to processing of last line\n                        line = numLines - 1;\n                        continue;\n                    }\n\n                    resultLine = textWords.slice(0, _lower).join(' ');\n                    textLines[0].splice(0, _lower);\n                }\n\n                lines.push(resultLine);\n            }\n\n            onTruncate(didTruncate);\n\n            return lines;\n        }\n    }, {\n        key: 'renderLine',\n        value: function renderLine(line, i, arr) {\n            if (i === arr.length - 1) {\n                return React.createElement(\n                    'span',\n                    { key: i },\n                    line\n                );\n            } else {\n                var br = React.createElement('br', { key: i + 'br' });\n\n                if (line) {\n                    return [React.createElement(\n                        'span',\n                        { key: i },\n                        line\n                    ), br];\n                } else {\n                    return br;\n                }\n            }\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var _this2 = this;\n\n            var target = this.elements.target,\n                _props2 = this.props,\n                children = _props2.children,\n                ellipsis = _props2.ellipsis,\n                lines = _props2.lines,\n                spanProps = _objectWithoutProperties(_props2, ['children', 'ellipsis', 'lines']),\n                targetWidth = this.state.targetWidth,\n                getLines = this.getLines,\n                renderLine = this.renderLine,\n                onTruncate = this.onTruncate;\n\n            var text = void 0;\n\n            var mounted = !!(target && targetWidth);\n\n            if (typeof window !== 'undefined' && mounted) {\n                if (lines > 0) {\n                    text = getLines().map(renderLine);\n                } else {\n                    text = children;\n\n                    onTruncate(false);\n                }\n            }\n\n            delete spanProps.onTruncate;\n\n            return React.createElement(\n                'span',\n                _extends({}, spanProps, { ref: function ref(targetEl) {\n                        _this2.elements.target = targetEl;\n                    } }),\n                React.createElement(\n                    'span',\n                    null,\n                    text\n                ),\n                React.createElement(\n                    'span',\n                    { ref: function ref(textEl) {\n                            _this2.elements.text = textEl;\n                        } },\n                    children\n                ),\n                React.createElement(\n                    'span',\n                    { ref: function ref(ellipsisEl) {\n                            _this2.elements.ellipsis = ellipsisEl;\n                        }, style: this.styles.ellipsis },\n                    ellipsis\n                )\n            );\n        }\n    }]);\n\n    return Truncate;\n}(Component);\n\nTruncate.propTypes = {\n    children: PropTypes.node,\n    ellipsis: PropTypes.node,\n    lines: PropTypes.oneOfType([PropTypes.oneOf([false]), PropTypes.number]),\n    onTruncate: PropTypes.func\n};\nTruncate.defaultProps = {\n    children: '',\n    ellipsis: '…',\n    lines: 1\n};\nexport default Truncate;\n;\n"],"sourceRoot":""}