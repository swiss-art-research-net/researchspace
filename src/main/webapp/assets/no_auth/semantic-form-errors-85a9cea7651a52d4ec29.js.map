{"version":3,"sources":["webpack:///./src/main/web/components/forms/static/FormErrors.ts"],"names":["CLASSNAME","render","D","ul","className","classnames","this","props","style","FieldValue","isComposite","model","renderErrors","errors","collectErrors","map","e","index","li","ERROR_CLASSNAME","FieldError","kindToString","kind","key","span","path","join","message","StaticComponent","parentPath","composite","collectedErrors","formPath","forEach","push","fields","state","fieldId","definition","definitions","get","source","getPreferredLabel","label","values","value","getErrors","FormErrors"],"mappings":"4IAmBA,QACA,OAEA,UACA,UACA,UAMMA,EAAY,uBAGlB,oC,+CA0BA,OA1BgC,0BAC9B,qBAAAC,OAAA,WACE,OAAOC,EAAEC,GACP,CACEC,UAAWC,EAAWL,EAAWM,KAAKC,MAAMH,WAC5CI,MAAOF,KAAKC,MAAMC,OAEpB,EAAAC,WAAWC,YAAYJ,KAAKC,MAAMI,OAASL,KAAKM,aAAaN,KAAKC,MAAMI,OAAS,OAI7E,qBAAAC,aAAR,SAAqBD,GACnB,IAAME,EAA2B,GAGjC,OAFAC,cAAc,GAAIH,EAAOE,GAElBA,EAAOE,KAAI,SAACC,EAAGC,GACpB,OAAAf,EAAEgB,GACA,CACEd,UAAWC,EApBML,8BAoByBmB,gCAAoB,EAAAC,WAAWC,aAAaL,EAAEM,OACxFC,IAAKN,GAEPf,EAAEsB,KAAK,CAAEpB,UAAcJ,EAAS,kBAAoBgB,EAAES,KAAKC,KAAK,QAChExB,EAAEsB,KAAK,CAAEpB,UAAcJ,EAAS,mBAAqBgB,EAAEW,cAI/D,WA1BA,CAAgC,EAAAC,iBAkChC,SAAgBd,cACde,EACAC,EACAC,GAEA,IAAMC,EAAW,EAAH,eAAOH,EAAY,UACjCC,EAAUjB,OAAOoB,SAAQ,SAAC,G,IAAEX,EAAA,EAAAA,KAAMK,EAAA,EAAAA,QAChCI,EAAgBG,KAAK,CAAET,KAAMO,EAAUV,KAAI,EAAEK,QAAO,OAGtDG,EAAUK,OAAOF,SAAQ,SAACG,EAAOC,GAC/B,IAAMC,EAAaR,EAAUS,YAAYC,IAAIH,GACvCI,EAAUH,GAAc,EAAAI,kBAAkBJ,EAAWK,QAAWN,EAChEZ,EAAO,EAAH,eAAOI,EAAY,CAAAY,IAE7BL,EAAMvB,OAAOoB,SAAQ,SAAC,G,IAAEX,EAAA,EAAAA,KAAMK,EAAA,EAAAA,QAC5BI,EAAgBG,KAAK,CAAET,KAAI,EAAEH,KAAI,EAAEK,QAAO,OAG5CS,EAAMQ,OAAOX,SAAQ,SAACY,GACpB,EAAApC,WAAWqC,UAAUD,GAAOZ,SAAQ,SAAC,G,IAAEX,EAAA,EAAAA,KAAMK,EAAA,EAAAA,QAC3CI,EAAgBG,KAAK,CAAET,KAAI,EAAEH,KAAI,EAAEK,QAAO,OAExC,EAAAlB,WAAWC,YAAYmC,IACzB/B,cAAcW,EAAMoB,EAAOd,SA1DtB,EAAAgB,aAkCb,8BA8BA,UAAeA","file":"semantic-form-errors-85a9cea7651a52d4ec29.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as D from 'react-dom-factories';\nimport * as classnames from 'classnames';\n\nimport { getPreferredLabel } from '../FieldDefinition';\nimport { ErrorKind, FieldError, FieldValue, CompositeValue } from '../FieldValues';\nimport { StaticComponent, StaticFieldProps } from './StaticComponent';\n\nexport interface FormErrorsProps extends StaticFieldProps {\n  hideFieldErrors?: boolean;\n}\n\nconst CLASSNAME = 'semantic-form-errors';\nconst ERROR_CLASSNAME = `${CLASSNAME}__error`;\n\nexport class FormErrors extends StaticComponent<FormErrorsProps, {}> {\n  render() {\n    return D.ul(\n      {\n        className: classnames(CLASSNAME, this.props.className),\n        style: this.props.style,\n      },\n      FieldValue.isComposite(this.props.model) ? this.renderErrors(this.props.model) : null\n    );\n  }\n\n  private renderErrors(model: CompositeValue) {\n    const errors: CollectedError[] = [];\n    collectErrors([], model, errors);\n\n    return errors.map((e, index) =>\n      D.li(\n        {\n          className: classnames(ERROR_CLASSNAME, `${ERROR_CLASSNAME}--${FieldError.kindToString(e.kind)}`),\n          key: index,\n        },\n        D.span({ className: `${CLASSNAME}__error-source` }, e.path.join(' - ')),\n        D.span({ className: `${CLASSNAME}__error-message` }, e.message)\n      )\n    );\n  }\n}\n\nexport interface CollectedError {\n  readonly path: ReadonlyArray<string>;\n  readonly kind: ErrorKind;\n  readonly message: string;\n}\n\nexport function collectErrors(\n  parentPath: ReadonlyArray<string>,\n  composite: CompositeValue,\n  collectedErrors: CollectedError[]\n) {\n  const formPath = [...parentPath, 'Form'];\n  composite.errors.forEach(({ kind, message }) => {\n    collectedErrors.push({ path: formPath, kind, message });\n  });\n\n  composite.fields.forEach((state, fieldId) => {\n    const definition = composite.definitions.get(fieldId);\n    const source = (definition && getPreferredLabel(definition.label)) || fieldId;\n    const path = [...parentPath, source];\n\n    state.errors.forEach(({ kind, message }) => {\n      collectedErrors.push({ path, kind, message });\n    });\n\n    state.values.forEach((value) => {\n      FieldValue.getErrors(value).forEach(({ kind, message }) => {\n        collectedErrors.push({ path, kind, message });\n      });\n      if (FieldValue.isComposite(value)) {\n        collectErrors(path, value, collectedErrors);\n      }\n    });\n  });\n}\n\nexport default FormErrors;\n"],"sourceRoot":""}