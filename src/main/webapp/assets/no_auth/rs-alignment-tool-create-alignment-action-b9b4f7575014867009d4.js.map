{"version":3,"sources":["webpack:///./src/main/web/components/alignment/CreateAlignmentAction.tsx"],"names":["ACTION_DIALOG_REF","props","context","onCreate","service","AlignmentService","semanticContext","emptyState","matches","Immutable","Map","metadata","state","alignment","serializeAlignment","addResource","iri","map","i","value","flatMap","alignmentIri","navigateToResource","onValue","swapTerminologies","setState","source","target","render","OverlayDialog","show","title","type","onHide","getOverlaySystem","hide","FormGroup","ControlLabel","FormControl","placeholder","this","getOrElse","onChange","event","_","isEmpty","Maybe","Nothing","Just","Rdf","label","description","InputGroup","readOnly","Button","className","styles","onClick","React","Component","onAction","selection","CreateAlignmentDialog","componentWillReceiveProps","disabled","length","SelectionActionComponent","closeMenu","CreateAlignmentAction"],"mappings":"6IAkBA,OACA,QACA,QACA,QACA,QAEA,QACA,QACA,QACA,SACA,SACA,UAGA,UAEA,UAEA,UAMa,EAAAA,kBAAoB,gBAMjC,kBACE,+BAAYC,EAAoBC,GAAhC,MACE,YAAMD,EAAOC,IAAQ,K,OAgFvB,EAAAC,SAAW,WACT,IAAMC,EAAU,IAAI,EAAAC,iBAAiB,EAAKH,QAAQI,iBAC5CC,EAAa,CACjBC,QAASC,EAAUC,MACnBC,SAAU,EAAKC,OAEXC,EAAY,EAAAC,mBAAmBP,GAErCH,EACGW,YACCF,EACA,EAAKD,MAAMI,IAAIC,KAAI,SAACC,GAAM,OAAAA,EAAEC,UAE7BC,SAAQ,SAACC,GACR,OAAO,EAAAC,mBAAmBD,EAAc,GAAI,aAE7CE,SAAQ,gBAKL,EAAAC,kBAAoB,WAAM,SAAKC,UAAS,SAAC,G,IAAEC,EAAA,EAAAA,OAAqB,OAAGA,OAAhB,EAAAC,OAAgCA,OAAQD,OApGjG,EAAKd,MAAQ,EAAKX,MAAMW,M,EAqG5B,OAxGoC,qCAMlC,gCAAAgB,OAAA,sBACE,OACE,gBAAC,EAAAC,cAAa,CACZC,MAAM,EACNC,MAAM,gBACNC,KAAK,QACLC,OAAQ,WAAM,SAAAC,mBAAmBC,KAAK,EAAAnC,qBAEtC,gBAAC,EAAAoC,UAAS,KACR,gBAAC,EAAAC,aAAY,YACb,gBAAC,EAAAC,YAAW,CACVN,KAAK,OACLO,YAAY,2BACZpB,MAAOqB,KAAK5B,MAAMI,IAAIC,KAAI,SAACC,GAAM,OAAAA,EAAEC,SAAOsB,UAAU,IACpDC,SAAU,SAACC,GACT,IAAMxB,EAAUwB,EAAMhB,OAAoCR,MACtDyB,EAAEC,QAAQ1B,GACZ,EAAKM,SAAS,CAAET,IAAK8B,EAAMC,YAE3B,EAAKtB,SAAS,CAAET,IAAK8B,EAAME,KAAK,EAAAC,IAAIjC,IAAIG,UAKhD,gBAAC,EAAAiB,UAAS,KACR,gBAAC,EAAAC,aAAY,eACb,gBAAC,EAAAC,YAAW,CACVN,KAAK,OACLO,YAAY,QACZpB,MAAOqB,KAAK5B,MAAMsC,MAClBR,SAAU,SAACC,GACT,SAAKlB,SAAS,CACZyB,MAASP,EAAMhB,OAAoCR,YAK3D,gBAAC,EAAAiB,UAAS,KACR,gBAAC,EAAAC,aAAY,qBACb,gBAAC,EAAAC,YAAW,CACVN,KAAK,OACLO,YAAY,cACZpB,MAAOqB,KAAK5B,MAAMuC,YAClBT,SAAU,SAACC,GACT,SAAKlB,SAAS,CACZ0B,YAAeR,EAAMhB,OAAoCR,YAKjE,gBAAC,EAAAiB,UAAS,KACR,gBAAC,EAAAC,aAAY,eACb,gBAAC,EAAAe,WAAU,KACT,gBAAC,EAAAd,YAAW,CAACN,KAAK,OAAOqB,UAAU,EAAMlC,MAAOqB,KAAK5B,MAAMc,OAAOP,QAClE,gBAAC,EAAAiC,WAAWE,OAAM,KAChB,gBAAC,EAAAA,OAAM,CACLC,UAAWC,EAAOhC,kBAClBO,MAAM,uCACN0B,QAASjB,KAAKhB,mBAEd,wBAAM+B,UAAU,wCAKxB,gBAAC,EAAAnB,UAAS,KACR,gBAAC,EAAAC,aAAY,eACb,gBAAC,EAAAC,YAAW,CAACN,KAAK,OAAOb,MAAOqB,KAAK5B,MAAMe,OAAOR,MAAOkC,UAAU,KAErE,gBAAC,EAAAjB,UAAS,KACR,gBAAC,EAAAkB,OAAM,CAACG,QAASjB,KAAKrC,UAAQ,aA4BxC,sBAxGA,CAAoCuD,EAAMC,WA4G1C,cACE,+BAAY1D,EAAmCC,GAA/C,MACE,YAAMD,EAAOC,IAAQ,K,OA8BvB,EAAA0D,SAAW,SAACC,GACV,EAAA3B,mBAAmBJ,KAAK,EAAA9B,kBAAmB,gBAAC8D,EAAqB,CAAClD,MAAO,EAAKA,UA9B9E,EAAKA,MAAQ,CACXI,IAAK8B,EAAMC,UACXrB,OAAQ,KACRC,OAAQ,KACRuB,MAAO,GACPC,YAAa,I,EA2BnB,OAnC2C,qCAWzC,gCAAAY,0BAAA,SAA0B9D,GACxBuC,KAAKf,SAAS,CACZC,OAAQ,EAAAuB,IAAIjC,IAAIf,EAAM4D,UAAU,IAChClC,OAAQ,EAAAsB,IAAIjC,IAAIf,EAAM4D,UAAU,OAIpC,gCAAAjC,OAAA,WACE,IAAMiC,EAAYrB,KAAKvC,MAAM4D,UACvBG,EAAWH,EAAUI,OAAS,EACpC,OACE,gBAAC,EAAAC,yBAAwB,CACvBnC,MAAM,QACNiC,SAAUA,EACVH,UAAWA,EACXM,UAAW3B,KAAKvC,MAAMkE,UACtBP,SAAUpB,KAAKoB,YAQvB,sBAnCA,CAA2C,EAAAD,WAA9B,EAAAS,wBAoCb,UAAeA","file":"rs-alignment-tool-create-alignment-action-b9b4f7575014867009d4.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2015-2020, Â© Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as React from 'react';\nimport * as _ from 'lodash';\nimport * as Immutable from 'immutable';\nimport * as Maybe from 'data.maybe';\nimport { FormControl, FormGroup, ControlLabel, Button, InputGroup } from 'react-bootstrap';\n\nimport { Rdf } from 'platform/api/rdf';\nimport { navigateToResource } from 'platform/api/navigation';\nimport { Component } from 'platform/api/components';\nimport { getOverlaySystem } from 'platform/components/ui/overlay';\nimport { OverlayDialog } from 'platform/components/ui/overlay/OverlayDialog';\nimport { SelectionActionComponent } from 'platform/components/ui/selection/SelectionActionComponent';\nimport { MenuProps } from 'platform/components/ui/selection/SelectionActionProps';\n\nimport { AlignmentService } from './AlignmentService';\nimport { AlignmentMatch, AlignmentMetadata } from './AlignmentNodeModel';\nimport { serializeAlignment } from './Serialization';\n\nimport * as styles from './AlignmentTool.scss';\n\nexport interface CreateAlignmentActionProps extends MenuProps {\n  selection: Array<string>;\n}\n\nexport const ACTION_DIALOG_REF = 'dialog-action';\n\ninterface DialogProps {\n  state: AlignmentMetadata;\n}\n\nclass CreateAlignmentDialog extends React.Component<DialogProps, AlignmentMetadata> {\n  constructor(props: DialogProps, context) {\n    super(props, context);\n    this.state = this.props.state;\n  }\n\n  render() {\n    return (\n      <OverlayDialog\n        show={true}\n        title=\"New Alignment\"\n        type=\"modal\"\n        onHide={() => getOverlaySystem().hide(ACTION_DIALOG_REF)}\n      >\n        <FormGroup>\n          <ControlLabel>IRI</ControlLabel>\n          <FormControl\n            type=\"text\"\n            placeholder=\"alignment IRI (optional)\"\n            value={this.state.iri.map((i) => i.value).getOrElse('')}\n            onChange={(event) => {\n              const value = ((event.target as any) as HTMLInputElement).value;\n              if (_.isEmpty(value)) {\n                this.setState({ iri: Maybe.Nothing<Rdf.Iri>() });\n              } else {\n                this.setState({ iri: Maybe.Just(Rdf.iri(value)) });\n              }\n            }}\n          />\n        </FormGroup>\n        <FormGroup>\n          <ControlLabel>label*</ControlLabel>\n          <FormControl\n            type=\"text\"\n            placeholder=\"label\"\n            value={this.state.label}\n            onChange={(event) =>\n              this.setState({\n                label: ((event.target as any) as HTMLInputElement).value,\n              })\n            }\n          />\n        </FormGroup>\n        <FormGroup>\n          <ControlLabel>description*</ControlLabel>\n          <FormControl\n            type=\"text\"\n            placeholder=\"description\"\n            value={this.state.description}\n            onChange={(event) =>\n              this.setState({\n                description: ((event.target as any) as HTMLInputElement).value,\n              })\n            }\n          />\n        </FormGroup>\n        <FormGroup>\n          <ControlLabel>Source</ControlLabel>\n          <InputGroup>\n            <FormControl type=\"text\" readOnly={true} value={this.state.source.value} />\n            <InputGroup.Button>\n              <Button\n                className={styles.swapTerminologies}\n                title=\"Swap source and target terminologies\"\n                onClick={this.swapTerminologies}\n              >\n                <span className=\"fa fa-exchange fa-flip-vertical\"></span>\n              </Button>\n            </InputGroup.Button>\n          </InputGroup>\n        </FormGroup>\n        <FormGroup>\n          <ControlLabel>Target</ControlLabel>\n          <FormControl type=\"text\" value={this.state.target.value} readOnly={true} />\n        </FormGroup>\n        <FormGroup>\n          <Button onClick={this.onCreate}>Create</Button>\n        </FormGroup>\n      </OverlayDialog>\n    );\n  }\n\n  onCreate = () => {\n    const service = new AlignmentService(this.context.semanticContext);\n    const emptyState = {\n      matches: Immutable.Map<string, ReadonlyArray<AlignmentMatch>>(),\n      metadata: this.state,\n    };\n    const alignment = serializeAlignment(emptyState);\n\n    service\n      .addResource(\n        alignment,\n        this.state.iri.map((i) => i.value)\n      )\n      .flatMap((alignmentIri) => {\n        return navigateToResource(alignmentIri, {}, 'assets');\n      })\n      .onValue(() => {\n        /**/\n      });\n  };\n\n  private swapTerminologies = () => this.setState(({ source, target }) => ({ source: target, target: source }));\n}\n\ntype ActionState = AlignmentMetadata;\n\nexport class CreateAlignmentAction extends Component<CreateAlignmentActionProps, ActionState> {\n  constructor(props: CreateAlignmentActionProps, context: any) {\n    super(props, context);\n    this.state = {\n      iri: Maybe.Nothing<Rdf.Iri>(),\n      source: null,\n      target: null,\n      label: '',\n      description: '',\n    };\n  }\n  componentWillReceiveProps(props: CreateAlignmentActionProps) {\n    this.setState({\n      source: Rdf.iri(props.selection[0]),\n      target: Rdf.iri(props.selection[1]),\n    });\n  }\n\n  render() {\n    const selection = this.props.selection;\n    const disabled = selection.length < 2;\n    return (\n      <SelectionActionComponent\n        title=\"Align\"\n        disabled={disabled}\n        selection={selection}\n        closeMenu={this.props.closeMenu}\n        onAction={this.onAction}\n      />\n    );\n  }\n\n  onAction = (selection: Array<string>) => {\n    getOverlaySystem().show(ACTION_DIALOG_REF, <CreateAlignmentDialog state={this.state} />);\n  };\n}\nexport default CreateAlignmentAction;\n"],"sourceRoot":""}