{"version":3,"sources":["webpack:///./src/main/web/components/iiif/OverlayComparison.ts","webpack:///./src/main/web/components/utils/KefirComponent.ts","webpack:///./src/main/web/data/iiif/LDPOverlayImageService.ts","webpack:///./src/main/web/components/iiif/OpenSeadragonOverlay.ts"],"names":["b","block","props","context","createOverlayImage","name","state","metadata","size","setState","updateState","creatingImage","get","iri","firstImageWeight","flatMap","res","navigateToResource","toProperty","loadState","tasks","selection","map","Rdf","queryIIIFImageOrRegion","imageIdPattern","repositories","Kefir","zip","Immutable","List","render","rendered","D","div","className","toString","span","input","readOnly","this","loading","type","min","max","step","value","onChange","event","target","opacity","parseFloat","capped","isNaN","Math","button","classNames","disabled","onClick","getOverlaySystem","show","createElement","CreateResourceDialog","onSave","onHide","hide","title","placeholder","OpenSeadragonOverlay","iiifServerUrl","defaultProps","KefirComponentBase","OverlayComparison","c","f","createFactory","requests","pool","flatMapLatest","request","never","task","e","console","error","constantError","message","onValue","previous","assign","onError","partialState","componentDidMount","plug","constant","componentWillReceiveProps","nextProps","componentWillUnmount","undefined","ErrorNotification","errorMessage","Component","container","createResourceGraph","topImage","topOpacity","bottomImage","bottomOpacity","overlayIri","eventIri","param1","param2","graph","triple","vocabularies","rdf","rso","Thing","EX_Digital_Image","crmdig","D9_Data_Object","rdfs","label","literal","displayLabel","L21_used_as_derivation_source","D3_Formal_Derivation","L22_created_derivative","L13_used_parameters","D1_Digital_Object","OverlayImageSource","OverlayOrder","OverlayOpacity","resource","addResource","LdpService","LdpOverlayImageServiceClass","LdpOverlayImageService","OverlayImageContainer","onFirstImageLoaded","osd","images","push","tiledImage","subsequentImagesOpacity","skip","forEach","imageInfo","requestUri","getImageInformationRequestUri","viewer","addTiledImage","tileSource","success","onSubsequentImageLoaded","item","shouldComponentUpdate","nextState","setOpacity","firstImageOpacity","subsequentOpacity","length","i","forceRedraw","serverAndPrefix","ImageApi","getIIIFServerUrl","constructInformationRequestUri","imageId","style","ref","element","renderOpenSeadragon","log","OpenSeadragon","id","alwaysBlend","showNavigationControl","minZoomImageRatio","maxZoomPixelRatio","tileSources","first","addOnceHandler","destroy","imageCount"],"mappings":"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","file":"rs-iiif-overlay-79fa67bafe44cf5ae602.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2015-2020, Â© Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { createFactory, createElement } from 'react';\nimport * as D from 'react-dom-factories';\nimport * as Kefir from 'kefir';\nimport * as Immutable from 'immutable';\nimport * as classNames from 'classnames';\n\nimport { Rdf } from 'platform/api/rdf';\nimport { navigateToResource } from 'platform/api/navigation';\nimport { getOverlaySystem } from 'platform/components/ui/overlay';\nimport { CreateResourceDialog } from 'platform/components/ldp';\n\n// TODO: remove KefirComponent and replace it by utilizing Cancellation object\nimport { KefirComponentBase } from 'platform/components/utils/KefirComponent';\n\nimport { queryIIIFImageOrRegion, ImageOrRegionInfo } from '../../data/iiif/ImageAnnotationService';\nimport LdpOverlayImageService from '../../data/iiif/LDPOverlayImageService';\n\nimport { OpenSeadragonOverlay } from './OpenSeadragonOverlay';\n\nimport './image-overlay.scss';\nimport * as block from 'bem-cn';\n\nconst b = block('overlay-comparison');\n\nexport interface Props {\n  selection: Array<Rdf.Iri | string>;\n  repositories?: Array<string>;\n  imageIdPattern: string;\n  iiifServerUrl: string;\n}\n\ninterface State {\n  loading?: boolean;\n  creatingImage?: boolean;\n  error?: any;\n  firstImageWeight?: number;\n}\n\ninterface LoadedState {\n  metadata?: Immutable.List<ImageOrRegionInfo>;\n}\n\n/**\n * Provides images comparison by overlaying them on top of\n * each other with variable opacity.\n *\n * @example\n * <div style='width: 50%; height: 600px;'>\n *   <rs-iiif-overlay\n *     compared-images='[\"http://example.com/bar/image1\", \"http://example.com/bar/image2\"]'\n *     image-id-pattern='BIND(REPLACE(?imageIRI, \"^http://example.com/(.*)$\", \"$1\") as ?imageID)'\n *     iiif-server-url='<iiif-server>'>\n *   </rs-iiif-overlay>\n * </div>\n */\nexport class OverlayComparison extends KefirComponentBase<Props, State, LoadedState> {\n  constructor(props: Props, context) {\n    super(props, context);\n    this.state = this.updateState({ firstImageWeight: 0.5 });\n  }\n\n  static defaultProps = {\n    repositories: ['default'],\n  };\n\n  loadState(props: Props) {\n    const tasks = props.selection\n      .map((iri) => (typeof iri === 'string' ? Rdf.iri(iri) : iri))\n      .map((iri) => queryIIIFImageOrRegion(iri, props.imageIdPattern, props.repositories));\n    return Kefir.zip(tasks).map((metadata) => ({\n      metadata: Immutable.List(metadata),\n    }));\n  }\n\n  render() {\n    const rendered = super.render();\n    return D.div(\n      {\n        className: b('').toString(),\n      },\n      D.div(\n        {\n          className: b('controls').toString(),\n        },\n        D.span({ className: b('image-label').toString() }, 'First image'),\n        D.input({\n          className: b('slider').toString(),\n          readOnly: this.state.loading,\n          type: 'range',\n          min: 0,\n          max: 1,\n          step: 0.01,\n          value: this.state.firstImageWeight as any,\n          onChange: (event) => {\n            const input = event.target as HTMLInputElement;\n            const opacity = parseFloat(input.value);\n            const capped = isNaN(opacity) ? 0.5 : Math.min(1, Math.max(0, opacity));\n            this.setState(this.updateState({ firstImageWeight: capped }));\n          },\n        }),\n        D.span({ className: b('image-label').toString() }, 'Second image'),\n        D.button(\n          {\n            type: 'button',\n            className: classNames('btn', 'btn-default', b('submit').toString()),\n            disabled: this.state.loading || this.state.creatingImage,\n            onClick: () => {\n              const dialogRef = 'create-overlay-image';\n              getOverlaySystem().show(\n                dialogRef,\n                createElement(CreateResourceDialog, {\n                  onSave: this.createOverlayImage,\n                  onHide: () => getOverlaySystem().hide(dialogRef),\n                  show: true,\n                  title: 'Create overlay image',\n                  placeholder: 'Enter image title',\n                })\n              );\n            },\n          },\n          'Create overlayed image'\n        )\n      ),\n      D.div(\n        { className: b('image-container').toString() },\n        rendered\n          ? rendered\n          : createElement(OpenSeadragonOverlay, {\n              metadata: this.state.metadata,\n              iiifServerUrl: this.props.iiifServerUrl,\n              firstImageWeight: this.state.firstImageWeight,\n            })\n      )\n    );\n  }\n\n  private createOverlayImage = (name: string): Kefir.Property<any> => {\n    if (!this.state.metadata || this.state.metadata.size < 2) {\n      return;\n    }\n\n    this.setState(this.updateState({ creatingImage: true }));\n\n    return LdpOverlayImageService.createOverlayImage(\n      name,\n      this.state.metadata.get(0).iri,\n      this.state.firstImageWeight,\n      this.state.metadata.get(1).iri,\n      1 - this.state.firstImageWeight\n    )\n      .flatMap((res) => {\n        this.setState(this.updateState({ creatingImage: false }));\n        return navigateToResource(res, {}, 'assets');\n      })\n      .toProperty();\n  };\n}\n\nexport type c = OverlayComparison;\nexport const c = OverlayComparison;\nexport const f = createFactory(c);\nexport default c;\n","/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { createElement } from 'react';\nimport * as Kefir from 'kefir';\nimport * as assign from 'object-assign';\n\nimport { Component } from 'platform/api/components';\nimport { ErrorNotification } from 'platform/components/ui/notification';\nimport Spinner from '../ui/spinner/Spinner';\n\nexport interface StateBase {\n  loading?: boolean;\n  error?: any;\n}\n\nexport abstract class KefirComponentBase<P, S extends StateBase, Loaded> extends Component<P, S & Loaded> {\n  protected requests: Kefir.Pool<P>;\n\n  constructor(props: P, context?: any) {\n    super(props, context);\n\n    this.requests = Kefir.pool<P>();\n\n    this.requests\n      .flatMapLatest<Loaded>((request) => {\n        if (!request) {\n          return Kefir.never<Loaded>();\n        }\n        try {\n          const task = this.loadState(request);\n          return task ? task : Kefir.never<Loaded>();\n        } catch (e) {\n          console.error(e);\n          return Kefir.constantError<any>(e.message);\n        }\n      })\n      .onValue((state) => this.setState((previous) => assign({}, previous, { loading: false }, state)))\n      .onError((error) => this.setState((previous) => assign({}, previous, { loading: false, error })));\n\n    this.state = this.updateState({ loading: true });\n  }\n\n  protected abstract loadState(props: P): Kefir.Stream<Loaded> | undefined;\n\n  protected updateState(partialState: StateBase | S | Loaded): Readonly<S & Loaded> {\n    return assign({}, this.state, partialState);\n  }\n\n  componentDidMount() {\n    this.requests.plug(Kefir.constant(this.props));\n  }\n\n  componentWillReceiveProps(nextProps: P) {\n    this.requests.plug(Kefir.constant(nextProps));\n  }\n\n  componentWillUnmount() {\n    this.requests.plug(Kefir.constant(undefined));\n  }\n\n  render(): React.ReactElement<any> {\n    if (this.state.loading) {\n      return Spinner({});\n    } else if (this.state.error) {\n      return createElement(ErrorNotification, { errorMessage: this.state.error });\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * ResearchSpace\n * Copyright (C) 2015-2020, Â© Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as Kefir from 'kefir';\n\nimport { Rdf, vocabularies } from 'platform/api/rdf';\nimport { LdpService } from 'platform/api/services/ldp';\n\nimport { rso, crmdig } from '../vocabularies/vocabularies';\n\n/**\n * ldp client for ImageOverlayService\n */\nexport class LdpOverlayImageServiceClass extends LdpService {\n  constructor(container: string) {\n    super(container);\n  }\n\n  private createResourceGraph(\n    name: string,\n    topImage: Rdf.Iri,\n    topOpacity: number,\n    bottomImage: Rdf.Iri,\n    bottomOpacity: number\n  ): Rdf.Graph {\n    const overlayIri = Rdf.iri('');\n\n    // These three hard-coded IRIs will be replaced at server-side,\n    // when object IRI will be known, see @ImageOverlay.java\n    const eventIri = Rdf.iri('http://www.researchspace.org/event');\n    const param1 = Rdf.iri('http://www.researchspace.org/param1');\n    const param2 = Rdf.iri('http://www.researchspace.org/param2');\n\n    const resourceGraph = Rdf.graph([\n      // common typing & labels\n      Rdf.triple(overlayIri, vocabularies.rdf.type, rso.Thing),\n      Rdf.triple(overlayIri, vocabularies.rdf.type, rso.EX_Digital_Image),\n      Rdf.triple(overlayIri, vocabularies.rdf.type, crmdig.D9_Data_Object),\n      Rdf.triple(overlayIri, vocabularies.rdfs.label, Rdf.literal(name)),\n      Rdf.triple(overlayIri, rso.displayLabel, Rdf.literal(name)),\n      // derivatives info\n      Rdf.triple(topImage, crmdig.L21_used_as_derivation_source, eventIri),\n      Rdf.triple(bottomImage, crmdig.L21_used_as_derivation_source, eventIri),\n      Rdf.triple(eventIri, vocabularies.rdf.type, crmdig.D3_Formal_Derivation),\n      Rdf.triple(eventIri, crmdig.L22_created_derivative, overlayIri),\n      // Parameters - param1\n      Rdf.triple(eventIri, crmdig.L13_used_parameters, param1),\n      Rdf.triple(param1, vocabularies.rdf.type, crmdig.D1_Digital_Object),\n      Rdf.triple(param1, rso.OverlayImageSource, bottomImage),\n      Rdf.triple(param1, rso.OverlayOrder, Rdf.literal('1')),\n      Rdf.triple(param1, rso.OverlayOpacity, Rdf.literal('' + bottomOpacity)),\n      // Parameters - param2\n      Rdf.triple(eventIri, crmdig.L13_used_parameters, param2),\n      Rdf.triple(param2, vocabularies.rdf.type, crmdig.D1_Digital_Object),\n      Rdf.triple(param2, rso.OverlayImageSource, topImage),\n      Rdf.triple(param2, rso.OverlayOrder, Rdf.literal('2')),\n      Rdf.triple(param2, rso.OverlayOpacity, Rdf.literal('' + topOpacity)),\n    ]);\n    return resourceGraph;\n  }\n\n  public createOverlayImage(\n    name: string,\n    topImage: Rdf.Iri,\n    topOpacity: number,\n    bottomImage: Rdf.Iri,\n    bottomOpacity: number\n  ): Kefir.Property<Rdf.Iri> {\n    const resource = this.createResourceGraph(name, topImage, topOpacity, bottomImage, bottomOpacity);\n    // we used to pass image name as slug, but this breaks image ID generation.\n    return this.addResource(resource);\n  }\n}\n\nexport const LdpOverlayImageService = new LdpOverlayImageServiceClass(rso.OverlayImageContainer.value);\nexport default LdpOverlayImageService;\n","/**\n * ResearchSpace\n * Copyright (C) 2015-2020, Â© Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { Component } from 'react';\nimport * as D from 'react-dom-factories';\nimport * as OpenSeadragon from 'openseadragon';\nimport * as Immutable from 'immutable';\n\nimport * as ImageApi from '../../data/iiif/ImageAPI';\nimport { ImageOrRegionInfo } from '../../data/iiif/ImageAnnotationService';\n\nimport './image-overlay.scss';\nimport * as block from 'bem-cn';\n\nconst b = block('open-seadragon-overlay');\n\nexport interface OverlayProps {\n  metadata: Immutable.List<ImageOrRegionInfo>;\n  iiifServerUrl: string;\n  firstImageWeight: number;\n}\n\nexport class OpenSeadragonOverlay extends Component<OverlayProps, {}> {\n  private osd: {\n    viewer: OpenSeadragon.Viewer;\n    images: OpenSeadragon.TiledImage[];\n  };\n\n  constructor(props: OverlayProps) {\n    super(props);\n  }\n\n  shouldComponentUpdate(nextProps: OverlayProps, nextState: {}) {\n    if (this.osd) {\n      if (nextProps.firstImageWeight !== this.props.firstImageWeight) {\n        this.setOpacity(nextProps.firstImageWeight);\n      }\n    }\n    return false;\n  }\n\n  private setOpacity(firstImageOpacity: number) {\n    const subsequentOpacity = subsequentImagesOpacity(firstImageOpacity, this.osd.images.length);\n    for (let i = 1; i < this.osd.images.length; i++) {\n      this.osd.images[i].setOpacity(subsequentOpacity);\n    }\n    this.osd.viewer.forceRedraw();\n  }\n\n  getImageInformationRequestUri(imageInfo: ImageOrRegionInfo) {\n    const serverAndPrefix = ImageApi.getIIIFServerUrl(this.props.iiifServerUrl);\n    return ImageApi.constructInformationRequestUri(serverAndPrefix, imageInfo.imageId);\n  }\n\n  render() {\n    return D.div({\n      className: b('').toString(),\n      style: {},\n      ref: (element) => {\n        try {\n          this.renderOpenSeadragon(element);\n        } catch (e) {\n          console.log(e);\n        }\n      },\n    });\n  }\n\n  private renderOpenSeadragon(element: HTMLElement) {\n    if (element && this.props.metadata && this.props.iiifServerUrl) {\n      const viewer = OpenSeadragon({\n        id: 'osd',\n        element: element,\n        alwaysBlend: true,\n        showNavigationControl: false,\n        opacity: 1,\n        minZoomImageRatio: 0.6,\n        maxZoomPixelRatio: 4,\n        tileSources: [this.getImageInformationRequestUri(this.props.metadata.first())],\n      });\n      viewer.addOnceHandler('tile-loaded', this.onFirstImageLoaded);\n      this.osd = { viewer, images: [] };\n    } else if (this.osd) {\n      this.osd.viewer.destroy();\n      this.osd = undefined;\n    }\n  }\n\n  private onFirstImageLoaded = (event: OpenSeadragon.TileLoadedEvent) => {\n    this.osd.images.push(event.tiledImage);\n    const opacity = subsequentImagesOpacity(this.props.firstImageWeight, this.props.metadata.size);\n    this.props.metadata.skip(1).forEach((imageInfo) => {\n      const requestUri = this.getImageInformationRequestUri(imageInfo);\n      this.osd.viewer.addTiledImage({\n        tileSource: requestUri,\n        opacity,\n        success: this.onSubsequentImageLoaded,\n      });\n    });\n  };\n\n  private onSubsequentImageLoaded = (event: OpenSeadragon.AddTiledImageSuccessEvent) => {\n    this.osd.images.push(event.item);\n  };\n}\n\nfunction subsequentImagesOpacity(firstImageWeight: number, imageCount: number) {\n  return (1 - firstImageWeight) / Math.max(1, imageCount - 1);\n}\n"],"sourceRoot":""}