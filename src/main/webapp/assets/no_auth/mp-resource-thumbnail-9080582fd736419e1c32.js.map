{"version":3,"sources":["webpack:///./src/main/web/components/ui/thumbnail/ResourceThumbnail.ts"],"names":["props","context","onError","error","console","setState","imageUri","undefined","findComponent","children","component","_","find","child","type","state","componentDidMount","this","fetchThumbnailUrl","Rdf","iri","componentWillReceiveProps","nextProps","subscription","unsubscribe","componentWillUnmount","resourceIri","getThumbnail","observe","value","render","className","imageSrc","noImageUri","fallbackComponent","Children","toArray","NoResourceThumbnail","D","img","src","style","title","createElement","ErrorNotification","errorMessage","Spinner","Component","ResourceThumbnail"],"mappings":"6IAmBA,OACA,QAEA,QAEA,QACA,QACA,SACA,SACA,UAEA,UAsCA,cAGE,2BAAYA,EAAcC,GAA1B,MACE,YAAMD,EAAOC,IAAQ,K,OAwDf,EAAAC,QAAU,SAACC,GACjBC,QAAQD,MAAMA,GACd,EAAKE,SAAS,CACZC,cAAUC,EACVJ,MAAO,4HAIH,EAAAK,cAAgB,SAACC,EAA4BC,GAInD,OAHgBC,EAAEC,KAAKH,GAAU,SAACI,GAAU,OAACA,EAAkCC,OAASJ,MAhExF,EAAKK,MAAQ,G,EAqEjB,OA1EuC,iCAQrC,4BAAAC,kBAAA,WACEC,KAAKC,kBAAkB,EAAAC,IAAIC,IAAIH,KAAKjB,MAAMoB,OAG5C,4BAAAC,0BAAA,SAA0BC,GAChB,IAAAF,EAAA,WAAAA,IACJE,EAAUF,MAAQA,IACpBH,KAAKM,aAAaC,cAClBP,KAAKC,kBAAkB,EAAAC,IAAIC,IAAIE,EAAUF,QAI7C,4BAAAK,qBAAA,WACER,KAAKM,aAAaC,eAGZ,4BAAAN,kBAAR,SAA0BQ,GAA1B,WACET,KAAKM,aAAe,EAAAI,aAAaD,GAAaE,QAAQ,CACpDC,MAAO,SAACvB,GAAa,SAAKD,SAAS,CAAEC,SAAQ,KAC7CH,MAAO,SAACA,GAAU,SAAKE,SAAS,CAAEC,cAAUC,EAAWJ,MAAK,QAIhE,4BAAA2B,OAAA,WACE,IAAMC,EAAY,uBAAsBd,KAAKjB,MAAM+B,WAAa,IAEhE,QAA4BxB,IAAxBU,KAAKF,MAAMT,SAAwB,CACrC,IAAM0B,EAA0C,iBAAxBf,KAAKF,MAAMT,SAAwBW,KAAKF,MAAMT,SAAWW,KAAKjB,MAAMiC,WAE5F,GAAwB,iBAAbD,EAAuB,CAEhC,IAAME,EAAoBjB,KAAKT,cAAc,EAAA2B,SAASC,QAAQnB,KAAKjB,MAAMS,UAAW,EAAA4B,qBACpF,OAAIH,GAGG,KAGT,OAAOI,EAAEC,IAAI,CACXR,UAAS,EACTS,IAAKR,EACLS,MAAOxB,KAAKjB,MAAMyC,MAClBvC,QAASe,KAAKf,QACdwC,MAAOzB,KAAKjB,MAAM0C,MAAWzB,KAAKjB,MAAMoB,IAAG,IAAIH,KAAKjB,MAAM0C,MAAUzB,KAAKjB,MAAMoB,MAE5E,YAAyBb,IAArBU,KAAKF,MAAMZ,MACb,EAAAwC,cAAc,EAAAC,kBAAmB,CAAEb,UAAS,EAAEc,aAAc5B,KAAKF,MAAMZ,QAEvE,EAAAwC,cAAc,EAAAG,QAAS,CAAEf,UAAS,KAkB/C,kBA1EA,CAAuC,EAAAgB,WAA1B,EAAAC,oBA2Eb,UAAeA","file":"mp-resource-thumbnail-9080582fd736419e1c32.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { createElement, CSSProperties, ReactElement, ReactNode, ComponentClass, Children } from 'react';\nimport * as D from 'react-dom-factories';\nimport * as Kefir from 'kefir';\nimport * as _ from 'lodash';\n\nimport { Rdf } from 'platform/api/rdf';\nimport { Component } from 'platform/api/components';\nimport { ErrorNotification } from 'platform/components/ui/notification';\nimport { Spinner } from 'platform/components/ui/spinner';\nimport { getThumbnail } from 'platform/api/services/resource-thumbnail';\n\nimport { NoResourceThumbnail } from './NoResourceThumbnail';\n\nexport interface Props {\n  /** IRI of resource to fetch thumbnail for. */\n  iri: string;\n  /** URI of image to display when resource has no thumbnail. */\n  noImageUri?: string;\n  /** Additional class names for component root element. */\n  className?: string;\n  /** Additional styles for thumbnail element. */\n  style?: CSSProperties;\n  /** Optional text to append to URI title value */\n  title?: string;\n}\n\ninterface State {\n  imageUri?: string | null;\n  error?: any;\n}\n\n/**\n * Queries for and displays thumbnail image for specified by {@Rdf.Iri} resource\n * with fallback image when no thumbnail for a resource found.\n *\n * @example\n * <mp-resource-thumbnail iri='http://example.com'\n *   no-image-uri='//no-image/available.png'\n *   style=\"max-width: 400px; max-height: 100px;\" />\n *\n * @example\n * <mp-resource-thumbnail iri='http://example.com'\n *   style=\"max-width: 400px; max-height: 100px;\"\n * >\n *   <mp-resource-thumbnail-fallback>\n *     <span>Image not found!</span>\n *   </mp-resource-thumbnail-fallback>\n * </mp-resource-thumbnail>\n */\nexport class ResourceThumbnail extends Component<Props, State> {\n  private subscription: Kefir.Subscription;\n\n  constructor(props: Props, context) {\n    super(props, context);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    this.fetchThumbnailUrl(Rdf.iri(this.props.iri));\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    const { iri } = this.props;\n    if (nextProps.iri !== iri) {\n      this.subscription.unsubscribe();\n      this.fetchThumbnailUrl(Rdf.iri(nextProps.iri));\n    }\n  }\n\n  componentWillUnmount() {\n    this.subscription.unsubscribe();\n  }\n\n  private fetchThumbnailUrl(resourceIri: Rdf.Iri) {\n    this.subscription = getThumbnail(resourceIri).observe({\n      value: (imageUri) => this.setState({ imageUri }),\n      error: (error) => this.setState({ imageUri: undefined, error }),\n    });\n  }\n\n  render(): ReactElement<any> {\n    const className = `resource-thumbnail ${this.props.className || ''}`;\n\n    if (this.state.imageUri !== undefined) {\n      const imageSrc = typeof this.state.imageUri === 'string' ? this.state.imageUri : this.props.noImageUri;\n\n      if (typeof imageSrc !== 'string') {\n        // use fallback component only if neither imageUri or noImageUri present\n        const fallbackComponent = this.findComponent(Children.toArray(this.props.children), NoResourceThumbnail);\n        if (fallbackComponent) {\n          return fallbackComponent;\n        }\n        return null;\n      }\n\n      return D.img({\n        className,\n        src: imageSrc,\n        style: this.props.style,\n        onError: this.onError,\n        title: this.props.title ? `${this.props.iri} ${this.props.title}` : this.props.iri,\n      });\n    } else if (this.state.error !== undefined) {\n      return createElement(ErrorNotification, { className, errorMessage: this.state.error });\n    } else {\n      return createElement(Spinner, { className });\n    }\n  }\n\n  private onError = (error) => {\n    console.error(error);\n    this.setState({\n      imageUri: undefined,\n      error: `Image is not accessible, probably invalid URL, CORS or mixed content error (loading HTTP resource from HTTPS context)!`,\n    });\n  };\n\n  private findComponent = (children: Array<ReactNode>, component: ComponentClass<any>): ReactElement<any> => {\n    const element = _.find(children, (child) => (child as React.ReactElement<any>).type === component) as ReactElement<\n      any\n    >;\n    return element;\n  };\n}\nexport default ResourceThumbnail;\n"],"sourceRoot":""}