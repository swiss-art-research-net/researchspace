{"version":3,"sources":["webpack:///./src/main/web/components/sets/index.ts","webpack:///./src/main/web/components/sets/SaveSetDialog.tsx","webpack:///./src/main/web/components/sets/Utils.ts"],"names":["States","render","Modal","show","className","onHide","this","props","Header","closeButton","Title","title","Body","React","createElement","HeadlessSaveSetDialog","defaultProps","placeholder","Component","SaveSetDialog","context","onKeyPress","event","keyCode","preventDefault","stopPropagation","onSave","setName","getInputElement","value","length","setState","state","ERROR","errorMessage","LOADING","saveResult","callback","type","SUCCESS","offAny","_","delay","response","text","onAny","showMessage","maxSetSize","USER_INPUT","Spinner","isJust","get","renderBody","isLoading","isSaved","classNames","ref","onKeyDown","disabled","onClick","findDOMNode","refs","createNewSetFromItems","source","name","items","getSetServiceForUser","flatMap","service","createSetAndAddItems","List","onValue","trigger","eventType","SetManagementEvents","SetAdded"],"mappings":"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","file":"default~mp-create-set-action~ontodia-contents~semantic-search-action-save-search-result~semantic-sea~1921f242-24f63fb3b1ff9a4fc029.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nexport * from './SaveSetDialog';\nexport * from './Utils';\n","/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\nimport { Component, ReactElement, KeyboardEvent, SyntheticEvent } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport { Modal, ModalDialogProps } from 'react-bootstrap';\nimport * as Kefir from 'kefir';\nimport * as _ from 'lodash';\nimport * as classNames from 'classnames';\n\nimport { Spinner } from 'platform/components/ui/spinner';\n\nexport type SaveSetDialogProps = HeadlessSaveSetDialogProps & {\n  onHide: () => void;\n};\n\nexport interface HeadlessSaveSetDialogProps extends ModalDialogProps {\n  onSave: (name: string) => Kefir.Observable<any>;\n  maxSetSize: Data.Maybe<number>;\n  title?: string;\n  placeholder?: string;\n}\n\nenum States {\n  USER_INPUT,\n  LOADING,\n  ERROR,\n  SUCCESS,\n}\n\ninterface State {\n  state: States;\n  errorMessage?: string;\n}\n\nconst KEY_RETURN = 13;\n\nexport class SaveSetDialog extends Component<SaveSetDialogProps, State> {\n  static defaultProps = {\n    title: 'Save as new set',\n    placeholder: 'Name of the set',\n  };\n\n  render() {\n    return (\n      <Modal show={true} className=\"save-as-dataset-modal\" onHide={this.props.onHide}>\n        <Modal.Header closeButton={true}>\n          <Modal.Title>{this.props.title}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>{React.createElement(HeadlessSaveSetDialog, this.props)}</Modal.Body>\n      </Modal>\n    );\n  }\n}\n\nexport class HeadlessSaveSetDialog extends Component<HeadlessSaveSetDialogProps, State> {\n  static defaultProps = {\n    placeholder: 'Name of the set',\n  };\n\n  constructor(props: HeadlessSaveSetDialogProps, context) {\n    super(props, context);\n    this.state = {\n      state: States.USER_INPUT,\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        {this.showMessage()}\n        {this.renderBody()}\n      </div>\n    );\n  }\n\n  renderBody() {\n    const state = this.state.state;\n    const isLoading = state === States.LOADING;\n    const isSaved = state === States.SUCCESS;\n    return (\n      <div className={classNames('form-inline', 'save-as-dataset-modal__form')}>\n        <input\n          className={classNames('form-control', 'save-as-dataset-modal__form__collection-name')}\n          placeholder={this.props.placeholder}\n          type=\"text\"\n          ref=\"setName\"\n          onKeyDown={this.onKeyPress}\n        />\n        <button\n          className={classNames('btn', 'btn-primary', 'save-as-dataset-modal__form__save-button')}\n          disabled={isLoading || isSaved}\n          onClick={this.onSave}\n        >\n          {isLoading ? 'Saving...' : 'Save'}\n        </button>\n      </div>\n    );\n  }\n\n  private onKeyPress = (event: KeyboardEvent<HTMLInputElement>) => {\n    if (event.keyCode === KEY_RETURN) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.onSave();\n    }\n  };\n\n  private onSave = (event?: SyntheticEvent<HTMLButtonElement>) => {\n    const setName = this.getInputElement().value;\n    // check that the setname has at least 6 characters\n    // to enforce distinguishing set names and\n    // to ensure performant auto-suggestion queries\n    if (setName.length < 6) {\n      return this.setState({\n        state: States.ERROR,\n        errorMessage: `Name of the set must have at least six characters.`,\n      });\n    }\n    event && event.preventDefault();\n    this.setState({\n      state: States.LOADING,\n    });\n    const saveResult = this.props.onSave(setName);\n    const callback = (event) => {\n      if (event.type === 'value') {\n        this.setState({\n          state: States.SUCCESS,\n        });\n        saveResult.offAny(callback);\n        _.delay(() => {\n          this.props.onHide();\n        }, 3000);\n      } else if (event.type === 'error') {\n        this.setState({\n          state: States.ERROR,\n          errorMessage: event.value.response.text,\n        });\n      }\n    };\n    saveResult.onAny(callback);\n  };\n\n  private showMessage = (): ReactElement<any> => {\n    const { maxSetSize } = this.props;\n    switch (this.state.state) {\n      case States.USER_INPUT:\n        return null;\n      case States.LOADING:\n        return <Spinner />;\n      case States.SUCCESS:\n        return (\n          <div className=\"save-as-dataset-modal__success-message\">\n            New set has been saved successfully!\n            <br />\n            {maxSetSize.isJust\n              ? 'Please be aware that the system has been configured ' +\n                'to allow for storing ' +\n                maxSetSize.get() +\n                ' at maximum.'\n              : ''}\n          </div>\n        );\n      case States.ERROR:\n        return <div className=\"save-as-dataset-modal__error-message\">{this.state.errorMessage}</div>;\n    }\n  };\n\n  private getInputElement() {\n    return findDOMNode(this.refs['setName']) as HTMLInputElement;\n  }\n}\n","/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { Rdf } from 'platform/api/rdf';\nimport { trigger } from 'platform/api/events';\nimport { getSetServiceForUser } from 'platform/api/services/ldp-set';\nimport { SetManagementEvents } from 'platform/api/services/ldp-set/SetManagementEvents';\nimport { List } from 'immutable';\n\nexport function createNewSetFromItems(source: string, name: string, items: Rdf.Iri[]) {\n  return getSetServiceForUser()\n    .flatMap((service) => service.createSetAndAddItems(name, List(items)))\n    .onValue((value) => {\n      trigger({ eventType: SetManagementEvents.SetAdded, source: source });\n    });\n}\n"],"sourceRoot":""}