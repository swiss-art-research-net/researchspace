{"version":3,"sources":["webpack:///./src/main/web/components/persistence/PersistedComponent.tsx"],"names":["props","context","cancellation","Cancellation","state","prepareComponent","iri","this","setState","component","undefined","componentContext","error","componentIri","Rdf","map","ldpc","VocabPlatform","PersistedComponentContainer","value","get","flatMap","graph","Kefir","fromPromise","renderComponentTree","rendered","constantError","observe","componentDidMount","componentWillReceiveProps","componentWillUnmount","cancelAll","render","SemanticContextProvider","semanticContext","ErrorNotification","errorMessage","Spinner","Component","root","type","children","Promise","all","then","renderedChildren","ModuleRegistry","isWebComponent","renderWebComponent","markupTemplateScope","createElement","PersistedComponent"],"mappings":"6IAkBA,QAEA,OACA,OAEA,QACA,QACA,QACA,SACA,SACA,SACA,SAEA,SACA,SAiBA,cAGE,4BAAYA,EAAcC,GAA1B,MACE,YAAMD,EAAOC,IAAQ,K,OAHN,EAAAC,aAAe,IAAI,EAAAC,aAIlC,EAAKC,MAAQ,G,EAuDjB,OA5DwC,kCAQtC,6BAAAC,iBAAA,SAAiBC,GAAjB,WACEC,KAAKC,SAAS,CACZC,eAAWC,EACXC,sBAAkBD,EAClBE,WAAOF,IAET,IAAMG,EAAe,EAAAC,IAAIR,IAAIA,GAC7BC,KAAKL,aACFa,IACC,EAAAC,KAAK,EAAAC,cAAcC,4BAA4BC,OAC5CC,IAAIP,GACJQ,SAAQ,SAACC,GACR,IACQ,8BAAEb,EAAA,EAAAA,UAAW,IAAAR,QACnB,OAAOsB,EAAMC,YAAYC,oBAAoBhB,IAAYM,KAAI,SAACW,GAAa,OAAGA,SAAQ,EAAEzB,QAAO,MAC/F,MAAOW,GACP,OAAOW,EAAMI,cAAcf,QAIlCgB,QAAQ,CACPT,MAAO,SAAC,G,IAAEO,EAAA,EAAAA,SAAUzB,EAAA,EAAAA,QAClB,SAAKO,SAAS,CACZC,UAAWiB,EACXf,iBAAkBV,KAEtBW,MAAO,SAACA,GAAU,SAAKJ,SAAS,CAAEI,MAAK,QAI7C,6BAAAiB,kBAAA,WACEtB,KAAKF,iBAAiBE,KAAKP,MAAMM,MAGnC,6BAAAwB,0BAAA,SAA0B9B,GACxBO,KAAKF,iBAAiBL,EAAMM,MAG9B,6BAAAyB,qBAAA,WACExB,KAAKL,aAAa8B,aAGpB,6BAAAC,OAAA,WACQ,iBAAExB,EAAA,EAAAA,UAAWE,EAAA,EAAAA,iBAAkBC,EAAA,EAAAA,MACrC,OAAIH,EACK,gBAAC,EAAAyB,wBAAuB,cAAKvB,EAAiBwB,iBAAkB1B,GAC9DG,EACF,gBAAC,EAAAwB,kBAAiB,CAACC,aAAczB,IAEjC,gBAAC,EAAA0B,QAAO,OAGrB,mBA5DA,CAAwC,EAAAC,WA8DxC,SAASd,oBAAoBe,GACnB,IAAAC,EAAA,EAAAA,KAAMzC,EAAA,EAAAA,MAAO0C,EAAA,EAAAA,SACrB,OAAOC,QAAQC,IAAIF,EAAS3B,IAAIU,sBAAsBoB,MAAK,SAACC,GAC1D,OAAI,EAAAC,eAAeC,eAAeP,GACzB,EAAAM,eAAeE,mBAAmBR,EAAMzC,EAAO8C,EAAkB9C,EAAMkD,qBAEvE,EAAAC,cAAa,+BAACV,EAAMzC,GAAU8C,OApE9B,EAAAM,qBAyEb,UAAeA","file":"mp-persisted-component-9b82bca2cb7af54138cc.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as Kefir from 'kefir';\n\nimport * as React from 'react';\nimport { ReactElement, createElement } from 'react';\n\nimport { Cancellation } from 'platform/api/async';\nimport { Rdf } from 'platform/api/rdf';\nimport { Component, SemanticContext, SemanticContextProvider } from 'platform/api/components';\nimport { ModuleRegistry } from 'platform/api/module-loader';\nimport { ldpc } from 'platform/api/services/ldp';\nimport { VocabPlatform } from 'platform/api/rdf/vocabularies/vocabularies';\nimport { DeserializedComponent, graphToComponent } from 'platform/api/persistence';\n\nimport { ErrorNotification } from 'platform/components/ui/notification';\nimport { Spinner } from 'platform/components/ui/spinner';\n\nexport interface Props {\n  iri: string;\n}\n\ninterface State {\n  readonly component?: ReactElement<any>;\n  readonly componentContext?: SemanticContext;\n  readonly error?: any;\n}\n\n/**\n * This component gets persisted component from DB by iri and renders it\n * @example\n *  <mp-persisted-component iri=\"<saved-component-iri>\"></mp-persisted-component>\n */\nexport class PersistedComponent extends Component<Props, State> {\n  private readonly cancellation = new Cancellation();\n\n  constructor(props: Props, context: any) {\n    super(props, context);\n    this.state = {};\n  }\n\n  prepareComponent(iri: string) {\n    this.setState({\n      component: undefined,\n      componentContext: undefined,\n      error: undefined,\n    });\n    const componentIri = Rdf.iri(iri);\n    this.cancellation\n      .map(\n        ldpc(VocabPlatform.PersistedComponentContainer.value)\n          .get(componentIri)\n          .flatMap((graph) => {\n            try {\n              const { component, context } = graphToComponent(componentIri, graph);\n              return Kefir.fromPromise(renderComponentTree(component)).map((rendered) => ({ rendered, context }));\n            } catch (error) {\n              return Kefir.constantError(error);\n            }\n          })\n      )\n      .observe({\n        value: ({ rendered, context }) =>\n          this.setState({\n            component: rendered,\n            componentContext: context,\n          }),\n        error: (error) => this.setState({ error }),\n      });\n  }\n\n  componentDidMount() {\n    this.prepareComponent(this.props.iri);\n  }\n\n  componentWillReceiveProps(props: Props) {\n    this.prepareComponent(props.iri);\n  }\n\n  componentWillUnmount() {\n    this.cancellation.cancelAll();\n  }\n\n  render() {\n    const { component, componentContext, error } = this.state;\n    if (component) {\n      return <SemanticContextProvider {...componentContext.semanticContext}>{component}</SemanticContextProvider>;\n    } else if (error) {\n      return <ErrorNotification errorMessage={error} />;\n    } else {\n      return <Spinner />;\n    }\n  }\n}\n\nfunction renderComponentTree(root: DeserializedComponent): Promise<ReactElement<any>> {\n  const { type, props, children } = root;\n  return Promise.all(children.map(renderComponentTree)).then((renderedChildren) => {\n    if (ModuleRegistry.isWebComponent(type)) {\n      return ModuleRegistry.renderWebComponent(type, props, renderedChildren, props.markupTemplateScope);\n    } else {\n      return createElement(type, props, ...renderedChildren);\n    }\n  });\n}\n\nexport default PersistedComponent;\n"],"sourceRoot":""}