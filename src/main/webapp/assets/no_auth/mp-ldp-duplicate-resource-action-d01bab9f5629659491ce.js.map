{"version":3,"sources":["webpack:///./src/main/web/components/ldp/DuplicateResource.ts"],"names":["onSave","name","LdpService","props","container","context","semanticContext","copyResource","Rdf","iri","maybe","fromNullable","map","Just","flatMap","newResourceIri","postAction","navigateToResource","onValue","v","refresh","toProperty","render","child","Children","only","this","children","onClick","getOverlaySystem","show","createElement","CreateResourceDialog","onHide","hide","title","placeholder","cloneElement","defaultProps","Component","component","DuplicateResourceComponent","factory","createFactory"],"mappings":"6IAmBA,OACA,QAGA,QACA,QACA,SACA,QACA,SAEA,UAEA,QAyBA,sG,OAyBU,EAAAA,OAAS,SAACC,GAEhB,OADgB,IAAI,EAAAC,WAAW,EAAKC,MAAMC,UAAW,EAAKC,QAAQC,iBAE/DC,aAAa,EAAAC,IAAIC,IAAI,EAAKN,MAAMM,KAAMC,EAAMC,aAAa,EAAKR,MAAMC,WAAWQ,IAAI,EAAAJ,IAAIC,KAAMC,EAAMG,KAAKZ,IACxGW,IAAI,EAAAJ,IAAIC,KACRK,SAAQ,SAACC,GACR,GAAK,EAAKZ,MAAMa,YAAwC,WAA1B,EAAKb,MAAMa,WAElC,IAA8B,aAA1B,EAAKb,MAAMa,WAEpB,OAAO,EAAAC,mBAAmBF,EAAgB,GAAI,UAAUG,SAAQ,eAIhE,EAAAD,mBAAmB,EAAAT,IAAIC,IAAI,EAAKN,MAAMa,aAAaE,SAAQ,SAACC,GAAM,OAAAA,UAPlE,EAAAC,aAUHC,c,EAEP,OA5CyC,0CAKhC,qCAAAC,OAAP,sBACQC,EAAQ,EAAAC,SAASC,KAAKC,KAAKvB,MAAMwB,UACjCxB,EAAQ,CACZyB,QAAS,WAEP,EAAAC,mBAAmBC,KADD,qBAGhB,EAAAC,cAAc,EAAAC,qBAAsB,CAClChC,OAAQ,EAAKA,OACbiC,OAAQ,WAAM,SAAAJ,mBAAmBK,KALnB,uBAMdJ,MAAM,EACNK,MAAO,EAAKhC,MAAMgC,MAAQ,EAAKhC,MAAMgC,MAAQ,qBAC7CC,YAAa,EAAKjC,MAAMiC,iBAKhC,OAAO,EAAAC,aAAad,EAAOpB,IArBf,2BAAAmC,aAAe,CAC3BtB,WAAY,YA0ChB,2BA5CA,CAAyC,EAAAuB,WA+C5B,EAAAC,UAAYC,EACZ,EAAAC,QAAU,EAAAC,cAAc,EAAAH,WACrC,UAAe,EAAAA","file":"mp-ldp-duplicate-resource-action-d01bab9f5629659491ce.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { ReactElement, cloneElement, Children, createFactory, createElement } from 'react';\nimport * as maybe from 'data.maybe';\nimport * as Kefir from 'kefir';\n\nimport { Component } from 'platform/api/components';\nimport { Rdf } from 'platform/api/rdf';\nimport { LdpService } from 'platform/api/services/ldp';\nimport { navigateToResource, refresh } from 'platform/api/navigation';\nimport { getOverlaySystem } from 'platform/components/ui/overlay';\n\nimport { CreateResourceDialog } from './CreateResourceDialog';\n\nimport './create-ldp-resource.scss';\n\nexport interface Props {\n  /** initial title for created object */\n  title?: string;\n  /** prompt to enter title */\n  placeholder?: string;\n  /** IRI of container where original and copied resource resides */\n  container?: string;\n  /** IRI of resource to duplicate */\n  iri: string;\n\n  /**\n   * @default 'redirect'\n   */\n  postAction?: 'redirect' | 'reload' | string;\n}\n\n/**\n * Duplicates existing LDP resource.\n * @example\n *  <mp-ldp-duplicate-resource-action iri=\"http://example.com/resource\">\n *      <button class=\"btn btn-default\">Duplicate resource</button>\n *  </mp-ldp-duplicate-resource-action>\n */\nclass DuplicateResourceComponent extends Component<Props, {}> {\n  public static defaultProps = {\n    postAction: 'redirect',\n  };\n\n  public render() {\n    const child = Children.only(this.props.children) as ReactElement<any>;\n    const props = {\n      onClick: () => {\n        const dialogRef = 'duplicate-resource';\n        getOverlaySystem().show(\n          dialogRef,\n          createElement(CreateResourceDialog, {\n            onSave: this.onSave,\n            onHide: () => getOverlaySystem().hide(dialogRef),\n            show: true,\n            title: this.props.title ? this.props.title : 'Duplicate resource',\n            placeholder: this.props.placeholder,\n          })\n        );\n      },\n    };\n    return cloneElement(child, props);\n  }\n\n  private onSave = (name: string): Kefir.Property<any> => {\n    const service = new LdpService(this.props.container, this.context.semanticContext);\n    return service\n      .copyResource(Rdf.iri(this.props.iri), maybe.fromNullable(this.props.container).map(Rdf.iri), maybe.Just(name))\n      .map(Rdf.iri)\n      .flatMap((newResourceIri: Rdf.Iri) => {\n        if (!this.props.postAction || this.props.postAction === 'reload') {\n          refresh();\n        } else if (this.props.postAction === 'redirect') {\n          // assumption is that ldp resources are always stored in the assets repository\n          return navigateToResource(newResourceIri, {}, 'assets').onValue(() => {\n            /**/\n          });\n        } else {\n          navigateToResource(Rdf.iri(this.props.postAction)).onValue((v) => v);\n        }\n      })\n      .toProperty();\n  };\n}\n\nexport type component = DuplicateResourceComponent;\nexport const component = DuplicateResourceComponent;\nexport const factory = createFactory(component);\nexport default component;\n"],"sourceRoot":""}