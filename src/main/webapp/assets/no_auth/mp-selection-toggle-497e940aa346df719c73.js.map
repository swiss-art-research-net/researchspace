{"version":3,"sources":["webpack:///./src/main/web/components/ui/selection/SelectionToggleComponent.tsx","webpack:///./src/main/web/components/ui/selection/SelectionEvents.tsx"],"names":["props","context","cancellation","Cancellation","toggleSelection","setState","prevState","value","state","getSelectionValue","tag","componentDidMount","this","defaultChecked","componentDidUpdate","prevProps","trigger","eventType","SelectionEvents","Toggle","source","targets","selection","data","componentWillUnmount","cancelAll","render","type","checked","onChange","contextTypes","SelectionGroupContextTypes","Component","SelectionToggleComponent"],"mappings":"6IAsBA,OACA,OACA,SACA,QACA,UACA,UAyBA,cAME,kCAAYA,EAAOC,GAAnB,MACE,YAAMD,EAAOC,IAAQ,K,OANf,EAAAC,aAAe,IAAI,EAAAC,aAqCnB,EAAAC,gBAAkB,WACxB,EAAKC,UAAS,SAACC,GAA4B,OAAGC,OAAQD,EAAUC,WA/BhE,EAAKC,MAAQ,CACXD,QAAON,EAAQQ,mBAAoBR,EAAQQ,kBAAkBT,EAAMU,M,EAgCzE,OAzCuC,wCAarC,mCAAAC,kBAAA,WACMC,KAAKZ,MAAMa,gBACbD,KAAKR,mBAIT,mCAAAU,mBAAA,SAAmBC,EAAkBT,GAC/BM,KAAKJ,MAAMD,QAAUD,EAAUC,OACjC,EAAAS,QAAQ,CACNC,UAAW,EAAAC,gBAAgBC,OAC3BC,OAAQ,kBACRC,QAAS,CAACT,KAAKZ,MAAMsB,WACrBC,KAAM,CAAEhB,MAAOK,KAAKJ,MAAMD,MAAOG,IAAKE,KAAKZ,MAAMU,QAKvD,mCAAAc,qBAAA,WACEZ,KAAKV,aAAauB,aAGpB,mCAAAC,OAAA,WACE,OAAO,yBAAOC,KAAK,WAAWC,QAAShB,KAAKJ,MAAMD,MAAOsB,SAAUjB,KAAKR,mBAhCnE,yBAAA0B,aAAe,EAAAC,2BAsCxB,yBAzCA,CAAuC,EAAAC,WA2CvC,UAAeC,G,oECtEf,SAAiBf,GACF,EAAAC,OAAqD,8BADpE,CAAiB,EAAAD,kBAAA,EAAAA,gBAAe","file":"mp-selection-toggle-497e940aa346df719c73.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @author Philip Polkovnikov\n */\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport { trigger } from 'platform/api/events';\nimport { Cancellation } from 'platform/api/async';\nimport { SelectionEvents } from './SelectionEvents';\nimport { SelectionGroupContext, SelectionGroupContextTypes } from './SelectionGroupComponent';\n\ninterface Props {\n  /**\n   * Name of checkbox listener\n   */\n  selection: string;\n  /**\n   * Extra data to pass to listener, so that it's possible to\n   * figure out, which of checkboxes was toggled\n   */\n  tag: string;\n  /**\n   * Toggles the checkbox by default\n   */\n  defaultChecked?: boolean;\n}\n\ninterface State {\n  value: boolean;\n}\n\n/**\n * Checkbox to mark rows as selected\n */\nclass SelectionToggleComponent extends Component<Props, State> {\n  private cancellation = new Cancellation();\n\n  static contextTypes = SelectionGroupContextTypes;\n  context: SelectionGroupContext;\n\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      value: context.getSelectionValue ? context.getSelectionValue(props.tag) : false,\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.defaultChecked) {\n      this.toggleSelection();\n    }\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    if (this.state.value !== prevState.value) {\n      trigger({\n        eventType: SelectionEvents.Toggle,\n        source: 'SelectionToggle',\n        targets: [this.props.selection],\n        data: { value: this.state.value, tag: this.props.tag },\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.cancellation.cancelAll();\n  }\n\n  render() {\n    return <input type=\"checkbox\" checked={this.state.value} onChange={this.toggleSelection} />;\n  }\n\n  private toggleSelection = () => {\n    this.setState((prevState: State): State => ({ value: !prevState.value }));\n  };\n}\n\nexport default SelectionToggleComponent;\n","/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport { EventType } from 'platform/api/events';\n\n/**\n * @author Philip Polkovnikov\n */\n\nexport type SelectionEvents = typeof SelectionEvents;\nexport namespace SelectionEvents {\n  export const Toggle: EventType<{ value: boolean; tag: string }> = 'Components.Selection.Toggle';\n}\n"],"sourceRoot":""}