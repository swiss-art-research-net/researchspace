{"version":3,"sources":["webpack:///./node_modules/chickencurry/lib/forEach.js","webpack:///./node_modules/chickencurry/index.js","webpack:///./node_modules/chickencurry/lib/merge.js","webpack:///./node_modules/chickencurry/lib/map.js","webpack:///./node_modules/chickencurry/lib/countDefinedItems.js"],"names":["module","exports","forEach","arr","fn","i","length","merge","countDefinedItems","slice","Array","prototype","curry","curryArgs","args","call","arguments","concatArgs","concat","mergedArgs","apply","n","__","map","key","item","shift","newArr","push","count"],"mappings":"6EAAAA,EAAOC,QAAU,SAASC,QAAQC,EAAKC,GACrC,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAIG,OAAQD,IAC9BD,EAAGC,EAAGF,EAAIE,M,oBCFd,IAAIE,EAAQ,EAAQ,KAChBC,EAAoB,EAAQ,KAC5BC,EAAQC,MAAMC,UAAUF,MAI5B,SAASG,MAAMR,EAAIE,EAAQO,GACzB,OAAO,WACL,IAAIC,EAAOL,EAAMM,KAAKC,WACpBC,EAAaJ,EAAUK,OAAOJ,GAC9BK,EAAa,GAEf,OAAIb,GAAUE,EAAkBS,IAC9BE,EAAaZ,EAAMO,EAAMD,GAClBT,EAAGgB,MAAM,KAAMD,IAElBb,GAAUW,EAAWX,OAChBM,MAAMR,EAAIE,EAAQW,GAElBL,MAAMR,EAAIE,EAAQC,EAAMO,EAAMD,KAM7Cb,EAAOC,QAAU,SAASG,GACxB,IAAIU,EAAOL,EAAMM,KAAKC,UAAW,GAEjC,OAAOJ,MAAMR,EAAIA,EAAGE,OAAQQ,IAG9Bd,EAAOC,QAAQoB,EAAI,SAASjB,EAAIE,GAC9B,IAAIQ,EAAOL,EAAMM,KAAKC,UAAW,GAEjC,OAAOJ,MAAMR,EAAIE,EAAQQ,IAG3Bd,EAAOC,QAAQqB,QAlCXA,G,oBCHJ,IAAIC,EAAM,EAAQ,KAElBvB,EAAOC,QAAU,SAASM,MAAMO,EAAMD,GAWpC,OARaU,EAAIV,GAAW,SAASW,EAAKC,GACxC,YAAoB,IAATA,EACFX,EAAKY,QAELD,KAIOP,OAAOJ,K,oBCb3B,IAAIZ,EAAU,EAAQ,KAEtBF,EAAOC,QAAU,SAASsB,IAAIpB,EAAKC,GACjC,IAAIuB,EAAS,GAMb,OAJAzB,EAAQC,GAAK,SAASqB,EAAKC,GACzBE,EAAOC,KAAKxB,EAAGoB,EAAKC,OAGfE,I,oBCTT,IAAIzB,EAAU,EAAQ,KAEtBF,EAAOC,QAAU,SAASa,GACxB,IAAIe,EAAQ,EAQZ,OANA3B,EAAQY,GAAM,SAASU,EAAKC,QACN,IAATA,IACTI,GAAgB,MAIbA","file":"npm.chickencurry-14a4c4e3ba6d4ba6c6b3.js","sourcesContent":["module.exports = function forEach(arr, fn) {\n  for (var i = 0; i < arr.length; i++) {\n    fn(i, arr[i]);\n  }\n};\n","var merge = require('./lib/merge'),\n    countDefinedItems = require('./lib/countDefinedItems'),\n    slice = Array.prototype.slice,\n    __;\n\n\nfunction curry(fn, length, curryArgs) {\n  return function() {\n    var args = slice.call(arguments),\n      concatArgs = curryArgs.concat(args),\n      mergedArgs = [];\n\n    if (length <= countDefinedItems(concatArgs)) {\n      mergedArgs = merge(args, curryArgs);\n      return fn.apply(null, mergedArgs);\n    } else {\n      if (length >= concatArgs.length) {\n        return curry(fn, length, concatArgs);\n      } else {\n        return curry(fn, length, merge(args, curryArgs));\n      }\n    }\n  };\n}\n\nmodule.exports = function(fn) {\n  var args = slice.call(arguments, 1);\n\n  return curry(fn, fn.length, args);\n};\n\nmodule.exports.n = function(fn, length) {\n  var args = slice.call(arguments, 2);\n\n  return curry(fn, length, args);\n};\n\nmodule.exports.__ = __;\n","var map = require('./map');\n\nmodule.exports = function merge(args, curryArgs) {\n  var mergedArgs = [];\n\n  mergedArgs = map(curryArgs, function(key, item) {\n    if (typeof item === 'undefined') {\n      return args.shift();\n    } else {\n      return item;\n    }\n  });\n\n  return mergedArgs.concat(args);\n};\n","var forEach = require('./forEach');\n\nmodule.exports = function map(arr, fn) {\n  var newArr = [];\n\n  forEach(arr, function(key, item) {\n    newArr.push(fn(key, item));\n  });\n\n  return newArr;\n};\n","var forEach = require('./forEach');\n\nmodule.exports = function(args) {\n  var count = 0;\n\n  forEach(args, function(key, item) {\n    if (typeof item !== 'undefined') {\n      count = count + 1;\n    }\n  });\n\n  return count;\n};\n"],"sourceRoot":""}