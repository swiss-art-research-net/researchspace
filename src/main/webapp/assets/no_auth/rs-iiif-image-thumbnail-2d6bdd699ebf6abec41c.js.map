{"version":3,"sources":["webpack:///./src/main/web/components/iiif/ImageThumbnail.ts"],"names":["props","context","state","loading","requests","Kefir","pool","flatMapLatest","request","iri","loadImageOrRegion","never","onValue","thumbnail","setState","onError","error","imageIdPattern","iiifServerUrl","width","height","format","region","repository","Maybe","fromNullable","this","semanticContext","map","c","getOrElse","queryIIIFImageOrRegion","flatMap","info","ImageApi","queryImageBounds","imageId","bounds","requestParams","requestedRegion","isRegion","boundingBox","computeDisplayedRegionWithMargin","undefined","size","Size","BestFit","iiifUri","constructImageUri","componentDidMount","requestThumbnail","componentWillReceiveProps","nextProps","isEqual","bbox","viewport","svg","plug","constant","Rdf","imageOrRegion","Number","componentWillUnmount","render","defaultSize","preserveImageSize","style","D","div","className","renderChild","image","img","src","display","onLoad","e","onImageLoad","prev","React","createElement","Spinner","ErrorNotification","errorMessage","renderImage","span","target","naturalSize","naturalWidth","naturalHeight","hasOverlay","Boolean","svgContent","componentSize","verticalAlign","preserveAspectRatio","viewBox","xlinkHref","g","dangerouslySetInnerHTML","ref","parent","renderSVGOverlay","svgElement","firstChild","setAttribute","x","y","String","overrideOverlayStrokeWidth","overlay","newWidth","paths","querySelectorAll","i","length","Component","regionBounds","imageSize","marginPercent","margin","Math","max","Region","Absolute","min","component","ImageThumbnailComponent","factory","createFactory"],"mappings":"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","file":"rs-iiif-image-thumbnail-2d6bdd699ebf6abec41c.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2015-2020, Â© Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as React from 'react';\nimport * as D from 'react-dom-factories';\nimport * as Kefir from 'kefir';\nimport { isEqual } from 'lodash';\nimport * as Maybe from 'data.maybe';\n\nimport { Rdf } from 'platform/api/rdf';\nimport { ErrorNotification } from 'platform/components/ui/notification';\nimport { Spinner } from 'platform/components/ui/spinner';\nimport { Component } from 'platform/api/components';\n\nimport * as ImageApi from '../../data/iiif/ImageAPI';\nimport {\n  queryIIIFImageOrRegion, ImageOrRegionInfo, ExplicitRegion,\n} from '../../data/iiif/ImageAnnotationService';\n\nexport interface Props {\n  imageOrRegion: string;\n  imageIdPattern: string;\n  iiifServerUrl: string;\n  width?: number | string;\n  height?: number | string;\n  preserveImageSize?: boolean;\n  format?: string\n\n  style?: React.CSSProperties;\n\n  // used when we want to render unsaved image region\n  bbox?: string\n  svg?: string\n  viewport?: string\n}\n\nexport interface State {\n  loading: boolean;\n  thumbnail?: LoadedThumbnail;\n  error?: any;\n}\n\ninterface LoadedThumbnail {\n  iiifUri: string;\n  info: ImageOrRegionInfo;\n  requestedRegion?: Rectangle;\n  naturalSize?: { width: number; height: number };\n}\n\ntype Rectangle = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n};\n\ntype ThumbnailRequest = {\n  iri?: Rdf.Iri;\n  imageIdPattern: string;\n  iiifServerUrl: string;\n  width: number;\n  height: number;\n  format?: string | 'auto';\n  region?: ExplicitRegion\n};\n\nconst REGION_OVERLAY_MARGIN_FRACTION = 0.05;\nconst REGION_OVERLAY_STROKE_WIDTH = '2%';\n\n/**\n * Displays thumbnail of rso:EX_Digital_Image or rso:EX_Digital_Image_Region.\n *\n * By default component fits image in parent bounds and (if specified) props.{width, height}\n * preserving aspect ratio of image. This could be disabled by setting 'preserveImageSize'.\n *\n * @example\n * <!-- fits inside 300x200 px rectangle -->\n * <rs-iiif-image-thumbnail image-or-region='http://example.com/bar/bar.jpg'\n *    image-id-pattern='BIND(REPLACE(?imageIRI, \"^http://example.com/(.*)$\", \"$1\") as ?imageID)'\n *    iiif-server-url='/Scaler/IIIF'\n *    width='{300}' height='{200}'>\n * </rs-iiif-image-thumbnail>\n *\n * <div style=\"height: 200px; width: 400px;\">\n *  <!-- fills container div -->\n *  <rs-iiif-image-thumbnail image-or-region='http://example.com/bar/bar.jpg'\n *    image-id-pattern='BIND(REPLACE(?imageIRI, \"^http://example.com/(.*)$\", \"$1\") as ?imageID)'\n *    iiif-server-url='/Scaler/IIIF'>\n *  </rs-iiif-image-thumbnail>\n * </div>\n */\nclass ImageThumbnailComponent extends Component<Props, State> {\n  private requests: Kefir.Pool<ThumbnailRequest>;\n\n  constructor(props: Props, context) {\n    super(props, context);\n    this.state = { loading: true };\n    this.requests = Kefir.pool<ThumbnailRequest>();\n\n    this.requests\n      .flatMapLatest((request) => (request.iri ? this.loadImageOrRegion(request) : Kefir.never()))\n      .onValue((thumbnail: LoadedThumbnail) => this.setState({ loading: true, thumbnail }))\n      .onError((error) => this.setState({ loading: false, error }));\n  }\n\n  private loadImageOrRegion({\n    iri,\n    imageIdPattern,\n    iiifServerUrl,\n    width,\n    height,\n    format,\n    region\n  }: ThumbnailRequest): Kefir.Stream<LoadedThumbnail> {\n    type QueryResult = {\n      info: ImageOrRegionInfo;\n      bounds: ImageApi.ImageBounds;\n    };\n    const repository = Maybe.fromNullable(this.context.semanticContext)\n      .map((c) => c.repository)\n      .getOrElse('default');\n    const queryResult = queryIIIFImageOrRegion(iri, imageIdPattern, [repository], region).flatMap<QueryResult>((info) =>\n      ImageApi.queryImageBounds(iiifServerUrl, info.imageId).map((bounds) => ({ info, bounds }))\n    );\n    return queryResult.map(({ info, bounds }) => {\n      const requestParams: ImageApi.ImageRequestParams = {\n        imageId: info.imageId,\n        format: format || 'jpg',\n      };\n      const requestedRegion =\n        info.isRegion && info.boundingBox\n          ? computeDisplayedRegionWithMargin(info.boundingBox, bounds, REGION_OVERLAY_MARGIN_FRACTION)\n          : undefined;\n      requestParams.region = requestedRegion;\n      if (width || height) {\n        requestParams.size = new ImageApi.Size.BestFit(width, height);\n      }\n      const imageUri = ImageApi.constructImageUri(iiifServerUrl, requestParams);\n      return {\n        iiifUri: imageUri,\n        info: info,\n        requestedRegion,\n      };\n    });\n  }\n\n  componentDidMount() {\n    this.requestThumbnail(this.props);\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    // do not re-render thumbnail if nothing changed\n    if (!isEqual(nextProps, this.props)) {\n      this.requestThumbnail(nextProps);\n    }\n  }\n\n  requestThumbnail(props: Props) {\n    const { bbox, viewport, svg } = this.props;\n    this.requests.plug(\n      Kefir.constant({\n        iri: Rdf.iri(props.imageOrRegion),\n        imageIdPattern: props.imageIdPattern,\n        iiifServerUrl: props.iiifServerUrl,\n        width: this.props.width ? Number(this.props.width) : undefined,\n        height: this.props.height ? Number(this.props.height) : undefined,\n        format: this.props.format,\n        region: this.props.bbox ? {bbox, viewport, svg} : undefined\n      })\n    );\n  }\n\n  componentWillUnmount() {\n    this.requests.plug(Kefir.constant({} as ThumbnailRequest));\n  }\n\n  render() {\n    const defaultSize = this.props.preserveImageSize ? undefined : '100%';\n\n    let { width, height, style } = this.props;\n    if (width === undefined) {\n      width = defaultSize;\n    }\n    if (height === undefined) {\n      height = defaultSize;\n    }\n\n    return D.div({ className: 'image-thumbnail', style: { width, height, ...style } }, this.renderChild());\n  }\n\n  private renderChild() {\n    if (this.state.loading) {\n      const image = this.state.thumbnail\n        ? D.img({\n            src: this.state.thumbnail.iiifUri,\n            style: { display: 'none' },\n            onLoad: (e) => this.onImageLoad(e),\n            onError: () =>\n              this.setState((prev) => ({\n                loading: false,\n                thumbnail: prev.thumbnail,\n                error: `Failed to load image at URI '${prev.thumbnail.iiifUri}'.`,\n              })),\n          })\n        : null;\n      return D.div({}, React.createElement(Spinner), image);\n    } else if (this.state.error) {\n      return React.createElement(ErrorNotification, { errorMessage: this.state.error });\n    } else if (this.state.thumbnail) {\n      return this.renderImage(this.state.thumbnail);\n    } else {\n      return D.span({}, this.props.imageOrRegion);\n    }\n  }\n\n  private onImageLoad(e: React.SyntheticEvent<HTMLImageElement>) {\n    const image = e.target as HTMLImageElement;\n    this.setState((prev) => ({\n      loading: false,\n      thumbnail: {\n        iiifUri: prev.thumbnail.iiifUri,\n        info: prev.thumbnail.info,\n        requestedRegion: prev.thumbnail.requestedRegion,\n        naturalSize: { width: image.naturalWidth, height: image.naturalHeight },\n      },\n    }));\n  }\n\n  private renderImage(thumbnail: LoadedThumbnail): React.ReactElement<any> {\n    const hasOverlay = Boolean(thumbnail.info.svgContent);\n\n    const { width, height } = thumbnail.naturalSize;\n    const componentSize = this.props.preserveImageSize ? thumbnail.naturalSize : { width: '100%', height: '100%' };\n\n    return D.svg(\n      {\n        style: {\n          verticalAlign: 'middle',\n          width: componentSize.width,\n          height: componentSize.height,\n        },\n        // fit content in viewBox center-aligned\n        preserveAspectRatio: 'xMidYMid meet',\n        viewBox: `0 0 ${width} ${height}`,\n      },\n      D.image({ xlinkHref: thumbnail.iiifUri, width, height }),\n      hasOverlay\n        ? D.g({\n            dangerouslySetInnerHTML: thumbnail.info.svgContent,\n            ref: (parent) => this.renderSVGOverlay(parent, thumbnail),\n          })\n        : undefined\n    );\n  }\n\n  private renderSVGOverlay(parent: SVGElement, thumbnail: LoadedThumbnail) {\n    if (!parent) {\n      return;\n    }\n    const svgElement = <SVGElement>parent.firstChild;\n    const region = thumbnail.requestedRegion;\n    svgElement.setAttribute('viewBox', `${region.x} ${region.y} ` + `${region.width} ${region.height}`);\n    svgElement.setAttribute('width', String(thumbnail.naturalSize.width));\n    svgElement.setAttribute('height', String(thumbnail.naturalSize.height));\n\n    overrideOverlayStrokeWidth(svgElement, REGION_OVERLAY_STROKE_WIDTH);\n  }\n}\n\nexport function computeDisplayedRegionWithMargin(\n  regionBounds: Rectangle,\n  imageSize: ImageApi.ImageBounds,\n  marginPercent: number\n) {\n  const margin = Math.max(regionBounds.width * marginPercent, regionBounds.height * marginPercent);\n  // clamp region with margin by (0,0) and image size\n  return new ImageApi.Region.Absolute(\n    Math.max(regionBounds.x - margin, 0),\n    Math.max(regionBounds.y - margin, 0),\n    Math.min(regionBounds.width + margin * 2, imageSize.width),\n    Math.min(regionBounds.height + margin * 2, imageSize.height)\n  );\n}\n\nfunction overrideOverlayStrokeWidth(overlay: SVGElement, newWidth: string) {\n  const paths = overlay.querySelectorAll('path');\n  for (let i = 0; i < paths.length; i++) {\n    paths[i].setAttribute('stroke-width', newWidth);\n  }\n}\n\nexport type component = ImageThumbnailComponent;\nexport const component = ImageThumbnailComponent;\nexport const factory = React.createFactory(component);\nexport default component;\n"],"sourceRoot":""}