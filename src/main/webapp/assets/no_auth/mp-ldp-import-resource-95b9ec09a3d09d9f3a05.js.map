{"version":3,"sources":["webpack:///./src/main/web/components/ldp/ImportResource.tsx"],"names":["props","context","performPostAction","createdResource","postAction","navigateToResource","Rdf","iri","onValue","v","refresh","importFromText","text","setState","wait","getLDPService","container","force","onServerResponse","onError","onServerError","importFromURL","url","ldpService","importGetTextFromURL","flatMap","importFromDelayedId","delayedId","containerIRI","response","status","serverDialog","serverDone","header","error","console","JSON","stringify","serverError","state","show","shouldComponentUpdate","nextProps","nextState","this","refs","hide","LdpService","semanticContext","renderContainerList","selectedContainer","possibleContainers","FormGroup","map","Radio","name","value","checked","onChange","title","ResourceLabel","renderContainerMessage","ResourceLinkComponent","uri","length","renderUnknownObjectsMessage","unknownObjects","objectIRI","ControlLabel","renderModal","Modal","onHide","undefined","ModalHeader","ModalTitle","ModalBody","delayedImportRequestId","canProceed","ModalFooter","Button","disabled","onClick","Spinner","render","child","Children","only","children","popover","Popover","id","FormControl","type","className","e","files","target","file","fileReader","FileReader","onload","result","readAsText","OverlayTrigger","ref","trigger","placement","rootClose","overlay","onExit","cloneElement","assign","Component","ImportResourceComponent"],"mappings":"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","file":"mp-ldp-import-resource-95b9ec09a3d09d9f3a05.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\nimport { ReactElement, cloneElement, Children } from 'react';\nimport {\n  FormGroup,\n  FormControl,\n  InputGroup,\n  OverlayTrigger,\n  Popover,\n  Button,\n  Radio,\n  ControlLabel,\n  Modal,\n  ModalHeader,\n  ModalTitle,\n  ModalBody,\n  ModalFooter,\n} from 'react-bootstrap';\nimport * as assign from 'object-assign';\n\nimport { Rdf } from 'platform/api/rdf';\nimport { Component, ComponentContext } from 'platform/api/components';\nimport { ResourceLinkComponent } from 'platform/api/navigation/components';\nimport { refresh, navigateToResource } from 'platform/api/navigation';\nimport { LdpService } from 'platform/api/services/ldp';\nimport { ResourceLabel } from 'platform/components/ui/resource-label';\nimport { Spinner } from 'platform/components/ui/spinner/Spinner';\n\nexport interface Props {\n  /**\n   * Explicitly target container IRI, if not specify the best suitable container will be\n   * found automatically.\n   */\n  container?: string;\n\n  /**\n   * Force import ignoring warning about dangling resources.\n   */\n  force?: boolean;\n\n  /**\n   * @default reload\n   */\n  postAction?: 'redirect' | 'reload' | string;\n}\n\ninterface State {\n  show?: boolean;\n  wait?: boolean;\n  serverError?: string;\n  serverDialog?: any;\n  serverDone?: any;\n  selectedContainer?: string;\n}\n\n/**\n * Import LDP resource.\n * Read description of import process in comment to {@see org.researchspace.data.rdf.container.LDPApi.importLDPResource}\n * @example\n *  <mp-ldp-import-resource>\n *      <button class=\"btn btn-default\">Import resource</button>\n *  </mp-ldp-import-resource>\n */\nexport class ImportResourceComponent extends Component<Props, State> {\n  constructor(props: Props, context: ComponentContext) {\n    super(props, context);\n    this.state = {\n      show: false,\n      wait: false,\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (!this.state.show && nextState.show) {\n      (this.refs['trigger'] as any).show();\n    } else if (this.state.show && !nextState.show) {\n      (this.refs['trigger'] as any).hide();\n    }\n    return true;\n  }\n\n  private performPostAction = (createdResource: string) => {\n    if (!this.props.postAction || this.props.postAction === 'reload') {\n      refresh();\n    } else if (this.props.postAction === 'redirect') {\n      navigateToResource(Rdf.iri(createdResource)).onValue((v) => v);\n    } else {\n      navigateToResource(Rdf.iri(this.props.postAction)).onValue((v) => v);\n    }\n  };\n\n  getLDPService() {\n    return new LdpService('', this.context.semanticContext);\n  }\n\n  importFromText = (text: string) => {\n    this.setState({ wait: true });\n    const ldpService = this.getLDPService();\n    ldpService\n      .importFromText(text, this.props.container, this.props.force)\n      .onValue(this.onServerResponse)\n      .onError(this.onServerError);\n  };\n\n  importFromURL = (url: string) => {\n    const ldpService = this.getLDPService();\n    ldpService\n      .importGetTextFromURL(url)\n      .flatMap((text) => {\n        return ldpService\n          .importFromText(text, this.props.container, this.props.force)\n          .onValue(this.onServerResponse)\n          .onError(this.onServerError);\n      })\n      .onError(this.onServerError);\n  };\n\n  importFromDelayedId = (delayedId: string, containerIRI: string) => {\n    const ldpService = this.getLDPService();\n    ldpService.importFromDelayedId(delayedId, containerIRI).onValue(this.onServerResponse).onError(this.onServerError);\n  };\n\n  onServerResponse = (response) => {\n    if (response.status === 202) {\n      this.setState({ serverDialog: response.text });\n    } else if (response.status === 201) {\n      this.setState({ serverDone: response.header['location'], wait: false });\n    }\n  };\n\n  onServerError = (error) => {\n    console.error('Error during import: ' + JSON.stringify(error));\n    this.setState({ serverError: error, wait: false });\n  };\n\n  public renderContainerList(selectedContainer: string, possibleContainers: any[]) {\n    return (\n      <FormGroup>\n        Select container to import into\n        <FormGroup>\n          {possibleContainers.map((containerIRI) => (\n            <Radio\n              name=\"select-container\"\n              value={containerIRI['@id']}\n              checked={selectedContainer === containerIRI['@id']}\n              onChange={() => this.setState({ selectedContainer: containerIRI['@id'] })}\n            >\n              <span title={containerIRI['@id']}>\n                <ResourceLabel iri={containerIRI['@id']} />\n              </span>\n            </Radio>\n          ))}\n        </FormGroup>\n      </FormGroup>\n    );\n  }\n\n  public renderContainerMessage(selectedContainer: string, possibleContainers: any[]) {\n    if (this.props.container) {\n      return (\n        <FormGroup>\n          Import will be made into <ResourceLinkComponent uri={this.props.container} />\n        </FormGroup>\n      );\n    }\n\n    if (possibleContainers.length === 0) {\n      return <FormGroup>Suitable for import container not found</FormGroup>;\n    }\n\n    if (possibleContainers.length === 1) {\n      return (\n        <FormGroup>\n          Import will be made into <ResourceLinkComponent uri={possibleContainers[0]['@id']} />\n        </FormGroup>\n      );\n    }\n\n    if (possibleContainers.length > 1) {\n      return this.renderContainerList(selectedContainer, possibleContainers);\n    }\n\n    return null;\n  }\n\n  private renderUnknownObjectsMessage(unknownObjects: any[]) {\n    if (unknownObjects.length > 0) {\n      return (\n        <FormGroup>\n          These object IRIs are not present in target DB:\n          {unknownObjects.map((objectIRI) => (\n            <div>\n              <ControlLabel>{objectIRI['@id'] + '\\n'}</ControlLabel>\n            </div>\n          ))}\n        </FormGroup>\n      );\n    }\n    return null;\n  }\n\n  public renderModal() {\n    const { wait, serverDone, serverDialog, serverError, selectedContainer } = this.state;\n    if (serverDone) {\n      return (\n        <Modal\n          show={true}\n          onHide={() => {\n            this.setState({ serverDone: undefined }, () => this.performPostAction(serverDone));\n          }}\n        >\n          <ModalHeader>\n            <ModalTitle>Success</ModalTitle>\n          </ModalHeader>\n          <ModalBody>\n            Import successfully done, resource <ResourceLinkComponent uri={serverDone} /> created\n          </ModalBody>\n        </Modal>\n      );\n    } else if (serverError) {\n      return (\n        <Modal\n          show={true}\n          onHide={() => {\n            this.setState({ serverError: undefined });\n          }}\n        >\n          <ModalHeader>\n            <ModalTitle>Error</ModalTitle>\n          </ModalHeader>\n          <ModalBody>Unexpected error during import</ModalBody>\n        </Modal>\n      );\n    } else if (serverDialog) {\n      const { delayedImportRequestId, possibleContainers, unknownObjects } = JSON.parse(serverDialog);\n      const canProceed =\n        (this.props.container || possibleContainers.length > 0) &&\n        (this.state.selectedContainer ||\n          this.props.container ||\n          (!this.props.container && possibleContainers.length === 1));\n      const proceedIntoContainer = canProceed\n        ? this.state.selectedContainer || this.props.container || possibleContainers[0]['@id']\n        : null;\n\n      return (\n        <Modal\n          show={true}\n          onHide={() => {\n            this.setState({ serverDialog: undefined });\n          }}\n        >\n          <ModalHeader>\n            <ModalTitle>Clarification needed</ModalTitle>\n          </ModalHeader>\n          <ModalBody>\n            {this.renderContainerMessage(selectedContainer, possibleContainers)}\n            {this.renderUnknownObjectsMessage(unknownObjects)}\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              disabled={!canProceed}\n              onClick={() => {\n                this.importFromDelayedId(delayedImportRequestId, proceedIntoContainer);\n                this.setState({ serverDialog: undefined, selectedContainer: undefined });\n              }}\n            >\n              Proceed\n            </Button>\n            <Button\n              onClick={() => this.setState({ serverDialog: undefined, selectedContainer: undefined, wait: false })}\n            >\n              Cancel\n            </Button>\n          </ModalFooter>\n        </Modal>\n      );\n    } else if (wait) {\n      return (\n        <Modal show={true} onHide={() => {}}>\n          <ModalBody>\n            <Spinner />\n          </ModalBody>\n        </Modal>\n      );\n    }\n\n    return null;\n  }\n\n  public render() {\n    const child = Children.only(this.props.children) as ReactElement<any>;\n    const popover = (\n      <Popover id=\"import-resource\">\n        <FormControl\n          type=\"file\"\n          className=\"input-sm\"\n          onChange={(e) => {\n            const files = (e.target as HTMLInputElement).files;\n            if (files.length === 1) {\n              const file = files[0];\n              const fileReader = new FileReader();\n              fileReader.onload = (e) => {\n                const text = (e.target as any).result;\n                this.setState({ show: false });\n                this.importFromText(text);\n              };\n              fileReader.readAsText(file);\n            }\n          }}\n        />\n      </Popover>\n    );\n\n    return (\n      <OverlayTrigger\n        ref=\"trigger\"\n        trigger={[]}\n        placement=\"bottom\"\n        rootClose={true}\n        overlay={popover}\n        onExit={() => {\n          this.setState({ show: false });\n        }}\n      >\n        {cloneElement(\n          child,\n          assign({}, child.props, {\n            onClick: () => this.setState({ show: !this.state.show }),\n          }),\n          ...child.props.children,\n          this.renderModal() // OverlayTrigger can have only one child\n        )}\n      </OverlayTrigger>\n    );\n  }\n}\n\nexport default ImportResourceComponent;\n"],"sourceRoot":""}