{"version":3,"sources":["webpack:///./src/main/web/components/semantic/conditional/SemanticIf.tsx"],"names":["props","context","cancellation","Cancellation","state","loading","componentDidMount","askQuery","parseAskQuery","queryText","Error","query","SparqlUtil","parseQuery","type","queryType","this","error","setState","semanticContext","map","SparqlClient","ask","observe","value","askResult","getTemplate","key","propsTemplate","localScope","markupTemplateScope","partial","getPartial","undefined","source","render","Spinner","ErrorNotification","errorMessage","template","TemplateItem","Component","SemanticIf"],"mappings":"6IAkBA,OAGA,QACA,QACA,QACA,SACA,SACA,SAkCA,cAGE,oBAAYA,EAAwBC,GAApC,MACE,YAAMD,EAAOC,IAAQ,K,OAHN,EAAAC,aAAe,IAAI,EAAAC,aAIlC,EAAKC,MAAQ,CAAEC,SAAS,G,EA2C5B,OAhDgC,0BAQ9B,qBAAAC,kBAAA,eACMC,EADN,OAEE,IACEA,EAuCN,SAASC,cAAcC,GACrB,IAAKA,EACH,MAAM,IAAIC,MAAM,8CAElB,IAAMC,EAAQ,EAAAC,WAAWC,WAAWJ,GACpC,GAAmB,UAAfE,EAAMG,MAAwC,QAApBH,EAAMI,UAClC,MAAM,IAAIL,MAAM,qCAElB,OAAOC,EA/CQH,CAAcQ,KAAKhB,MAAMW,OACpC,MAAOM,GAEP,YADAD,KAAKE,SAAS,CAAEb,SAAS,EAAOY,MAAK,IAI/B,IAAAE,EAAA,aAAAA,gBACRH,KAAKd,aAAakB,IAAI,EAAAC,aAAaC,IAAIf,EAAU,CAAEN,QAASkB,KAAoBI,QAAQ,CACtFC,MAAO,SAACC,GAAc,SAAKP,SAAS,CAAEb,SAAS,EAAOoB,UAAS,KAC/DR,MAAO,SAACA,GAAU,SAAKC,SAAS,CAAEb,SAAS,EAAOY,MAAK,QAInD,qBAAAS,YAAR,SAAoBC,GAClB,IAAMC,EAAgBZ,KAAKhB,MAAM2B,GACjC,GAAIC,EACF,OAAOA,EAET,IAAMC,EAAab,KAAKhB,MAAM8B,oBACxBC,EAAUF,EAAaA,EAAWG,WAAWL,QAAOM,EAC1D,OAAIF,EACKA,EAAQG,YADjB,GAMF,qBAAAC,OAAA,WACE,GAAInB,KAAKZ,MAAMC,QACb,OAAO,gBAAC,EAAA+B,QAAO,MACV,GAAIpB,KAAKZ,MAAMa,MACpB,OAAO,gBAAC,EAAAoB,kBAAiB,CAACC,aAActB,KAAKZ,MAAMa,QAE3C,IAAAQ,EAAA,WAAAA,UACFc,EAAWvB,KAAKU,YAAYD,EAAY,OAAS,QACvD,OAAOc,EAAW,gBAAC,EAAAC,aAAY,CAACD,SAAU,CAAEL,OAAQK,KAAiB,MAG3E,WAhDA,CAAgC,EAAAE,WAAnB,EAAAC,aA6Db,UAAeA","file":"semantic-if-a7a9af1ec038869f7b75.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\nimport * as SparqlJs from 'sparqljs';\n\nimport { Component, ComponentProps } from 'platform/api/components';\nimport { Cancellation } from 'platform/api/async';\nimport { SparqlClient, SparqlUtil } from 'platform/api/sparql';\nimport { ErrorNotification } from 'platform/components/ui/notification';\nimport { Spinner } from 'platform/components/ui/spinner';\nimport { TemplateItem } from 'platform/components/ui/template';\n\nexport interface SemanticIfProps extends ComponentProps {\n  /**\n   * Sparql ASK query to determine whether to display `then` or `else`\n   * template.\n   */\n  query: string;\n  then?: string;\n  else?: string;\n}\n\ninterface State {\n  readonly loading?: boolean;\n  readonly error?: any;\n  readonly askResult?: boolean;\n}\n\n/**\n * @example\n * <semantic-if query='ASK query' then='{{> then}}' else='{{> else}}'>\n *   <template id='then'><!-- then markup --></template>\n *   <template id='else'><!-- else markup --></template>\n * </semantic-if>\n *\n * // shorthand for the above\n * <semantic-if query='ASK query'>\n *   <template id='then'><!-- then markup --></template>\n *   <template id='else'></template>\n * </semantic-if>\n *\n * // use inline templates, leave 'else' template empty\n * <semantic-if query='ASK query' then='<!-- then markup -->'></semantic-if>\n */\nexport class SemanticIf extends Component<SemanticIfProps, State> {\n  private readonly cancellation = new Cancellation();\n\n  constructor(props: SemanticIfProps, context: any) {\n    super(props, context);\n    this.state = { loading: true };\n  }\n\n  componentDidMount() {\n    let askQuery: SparqlJs.AskQuery;\n    try {\n      askQuery = parseAskQuery(this.props.query);\n    } catch (error) {\n      this.setState({ loading: false, error });\n      return;\n    }\n\n    const { semanticContext } = this.context;\n    this.cancellation.map(SparqlClient.ask(askQuery, { context: semanticContext })).observe({\n      value: (askResult) => this.setState({ loading: false, askResult }),\n      error: (error) => this.setState({ loading: false, error }),\n    });\n  }\n\n  private getTemplate(key: 'then' | 'else'): string | undefined {\n    const propsTemplate = this.props[key];\n    if (propsTemplate) {\n      return propsTemplate;\n    }\n    const localScope = this.props.markupTemplateScope;\n    const partial = localScope ? localScope.getPartial(key) : undefined;\n    if (partial) {\n      return partial.source;\n    }\n    return undefined;\n  }\n\n  render() {\n    if (this.state.loading) {\n      return <Spinner />;\n    } else if (this.state.error) {\n      return <ErrorNotification errorMessage={this.state.error} />;\n    } else {\n      const { askResult } = this.state;\n      const template = this.getTemplate(askResult ? 'then' : 'else');\n      return template ? <TemplateItem template={{ source: template }} /> : null;\n    }\n  }\n}\n\nfunction parseAskQuery(queryText: string): SparqlJs.AskQuery {\n  if (!queryText) {\n    throw new Error('Missing ASK Sparql query for <semantic-if>');\n  }\n  const query = SparqlUtil.parseQuery(queryText);\n  if (query.type !== 'query' || query.queryType !== 'ASK') {\n    throw new Error('Sparql query must be an ASK query');\n  }\n  return query;\n}\n\nexport default SemanticIf;\n"],"sourceRoot":""}