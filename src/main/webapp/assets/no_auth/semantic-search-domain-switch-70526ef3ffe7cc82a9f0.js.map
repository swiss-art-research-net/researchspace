{"version":3,"sources":["webpack:///./src/main/web/components/semantic/search/web-components/SemanticSearchDomainSwitch.tsx"],"names":["render","SemanticSearchContext","Consumer","context","SemanticSearchDomainSwitchInner","props","React","Component","SemanticSearchDomainSwitch","onChangeDomain","option","searchProfileStore","setDomain","get","categories","Rdf","iri","value","componentDidMount","this","setAvailableDomains","maybe","fromNullable","availableDomains","map","domains","Map","mapKeys","domain","isNothing","profileStore","options","forEach","projection","category","push","label","clearable","onChange"],"mappings":"6IAkBA,OACA,UACA,QACA,QAEA,QACA,UASA,oD,+CAQA,OARgD,0CAC9C,qCAAAA,OAAA,sBACE,OACE,gBAAC,EAAAC,sBAAsBC,SAAQ,MAC5B,SAACC,GAAY,uBAACC,EAA+B,cAAK,EAAKC,MAAK,CAAEF,QAASA,SAIhF,2BARA,CAAgDG,EAAMC,WAAzC,EAAAC,6BAcb,2G,OAYU,EAAAC,eAAiB,SAACC,GAClB,sBAAEC,EAAA,EAAAA,oBAGRC,EAH4B,EAAAA,WACPD,EAAmBE,MACVC,WAAWD,IAAI,EAAAE,IAAIC,IAAIN,EAAOO,U,EAuBhE,OAtC8C,+CAC5C,0CAAAC,kBAAA,WACEC,KAAKC,uBAGC,0CAAAA,oBAAR,WACEC,EACGC,aAAaH,KAAKd,MAAMkB,kBACxBC,KAAI,SAACC,GAAY,SAAAC,IAAID,GAASE,QAAQ,EAAAZ,IAAIC,QAC1CQ,IAAIL,KAAKd,MAAMF,QAAQiB,sBAU5B,0CAAApB,OAAA,WACQ,yBAAEuB,EAAA,EAAAA,iBAAkBK,EAAA,EAAAA,OAAQjB,EAAA,EAAAA,mBAClC,GAAIY,EAAiBM,WAAaD,EAAOC,UACvC,OAAO,KAGT,IAAMZ,EAAQW,EAAOf,MAAMG,IAAIC,MACzBa,EAAenB,EAAmBE,MAElCkB,EAAU,GAQhB,OAPAR,EAAiBV,MAAMmB,SAAQ,SAACC,EAAYjB,GAC1C,IAAMkB,EAAWJ,EAAahB,WAAWD,IAAIG,GACzCkB,GACFH,EAAQI,KAAK,CAAElB,MAAOiB,EAASlB,IAAIC,MAAOmB,MAAOF,EAASE,WAIvD,gBAAC,UAAW,CAACnB,MAAOA,EAAOc,QAASA,EAASM,WAAW,EAAOC,SAAUnB,KAAKV,kBAEzF,gCAtCA,CAA8CH,EAAMC,WAwCpD,UAAeC","file":"semantic-search-domain-switch-70526ef3ffe7cc82a9f0.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\nimport ReactSelect from 'react-select';\nimport * as maybe from 'data.maybe';\nimport { Map } from 'immutable';\n\nimport { Rdf } from 'platform/api/rdf';\nimport { SemanticSearchContext, InitialQueryContext } from './SemanticSearchApi';\n\nexport interface SemanticSearchDomainSwitchProps {\n  /**\n   * Specifies the available search domains, ties them with the projection variables\n   */\n  availableDomains?: { [iri: string]: string };\n}\n\nexport class SemanticSearchDomainSwitch extends React.Component<SemanticSearchDomainSwitchProps> {\n  render() {\n    return (\n      <SemanticSearchContext.Consumer>\n        {(context) => <SemanticSearchDomainSwitchInner {...this.props} context={context} />}\n      </SemanticSearchContext.Consumer>\n    );\n  }\n}\n\ninterface InnerProps extends SemanticSearchDomainSwitchProps {\n  context: InitialQueryContext;\n}\n\nclass SemanticSearchDomainSwitchInner extends React.Component<InnerProps, {}> {\n  componentDidMount() {\n    this.setAvailableDomains();\n  }\n\n  private setAvailableDomains() {\n    maybe\n      .fromNullable(this.props.availableDomains)\n      .map((domains) => Map(domains).mapKeys(Rdf.iri))\n      .map(this.props.context.setAvailableDomains);\n  }\n\n  private onChangeDomain = (option: { value: string; label: string }) => {\n    const { searchProfileStore, setDomain } = this.props.context;\n    const profileStore = searchProfileStore.get();\n    const category = profileStore.categories.get(Rdf.iri(option.value));\n    setDomain(category);\n  };\n\n  render() {\n    const { availableDomains, domain, searchProfileStore } = this.props.context;\n    if (availableDomains.isNothing || domain.isNothing) {\n      return null;\n    }\n\n    const value = domain.get().iri.value;\n    const profileStore = searchProfileStore.get();\n\n    const options = [];\n    availableDomains.get().forEach((projection, iri) => {\n      const category = profileStore.categories.get(iri);\n      if (category) {\n        options.push({ value: category.iri.value, label: category.label });\n      }\n    });\n\n    return <ReactSelect value={value} options={options} clearable={false} onChange={this.onChangeDomain} />;\n  }\n}\n\nexport default SemanticSearchDomainSwitch;\n"],"sourceRoot":""}