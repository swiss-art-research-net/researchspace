{"version":3,"sources":["webpack:///./src/main/web/components/events/EventTargetRefresh.ts"],"names":["props","context","cancelation","Cancellation","onRefresh","setState","refresh","state","componentDidMount","this","map","listen","eventType","BuiltInEvents","ComponentRefresh","target","id","onValue","refreshInterval","timer","setInterval","componentWillUnmount","cancelAll","clearInterval","render","D","div","Children","only","children","Component","EventTargetRefresh"],"mappings":"6IAmBA,OACA,QAEA,SACA,QA8CA,cAIE,4BAAYA,EAAOC,GAAnB,MACE,YAAMD,EAAOC,IAAQ,K,OAJf,EAAAC,YAAc,IAAI,EAAAC,aA+ClB,EAAAC,UAAY,WAAM,SAAKC,SAAS,CAAEC,SAAS,IAAQ,WAAM,SAAKD,SAAS,CAAEC,SAAS,QA1CxF,EAAKC,MAAQ,CACXD,SAAS,G,EA0Cf,OAjDwC,kCAWtC,6BAAAE,kBAAA,sBACEC,KAAKP,YACFQ,IACC,EAAAC,OAAO,CACLC,UAAW,EAAAC,cAAcC,iBACzBC,OAAQN,KAAKT,MAAMgB,MAGtBC,QAAQR,KAAKL,WAEZK,KAAKT,MAAMkB,kBACbT,KAAKU,MAAQC,aAAY,WAAM,SAAKhB,cAA0C,IAA7BK,KAAKT,MAAMkB,mBAIhE,6BAAAG,qBAAA,WACEZ,KAAKP,YAAYoB,YAEbb,KAAKU,QACPI,cAAcd,KAAKU,OACnBV,KAAKU,MAAQ,OAIjB,6BAAAK,OAAA,WACE,OAAIf,KAAKF,MAAMD,QACNmB,EAAEC,MAEF,EAAAC,SAASC,KAAKnB,KAAKT,MAAM6B,WAUtC,mBAjDA,CAAwC,EAAAC,WAA3B,EAAAC,qBAmDb,UAAeA","file":"mp-event-target-refresh-5152b41b09d01caae39b.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { Component, Children } from 'react';\nimport * as D from 'react-dom-factories';\n\nimport { BuiltInEvents, listen } from 'platform/api/events';\nimport { Cancellation } from 'platform/api/async';\n\ninterface EventTargetRefreshConfig {\n  /**\n   * Unique id of the component that can be used by event emitters as a target.\n   */\n  id: string;\n\n  /**\n   * An (optional) time interval in seconds to refresh the specific target event without\n   * explicit triggering through Component.Refresh event.\n   */\n  refreshInterval?: number;\n}\ntype EventTargetRefreshProps = EventTargetRefreshConfig;\n\ninterface EventTargetState {\n  refresh: boolean;\n}\n\n/**\n * Refresh child when receiving Component.Refresh event.\n *\n * There are many ways in which one can trigger refresh on this component.\n * For example one can manually trigger the event wit <mp-event-trigger-component>:\n *\n *   <mp-event-target-refresh id='some-element'><div></div></mp-event-target-refresh>\n *\n *   <mp-event-trigger id='dom-refresh' type='Component.Refresh' targets='[\"some-element\"]'>\n *     <button>Refresh</button>\n *   </mp-event-trigger>\n *\n * In this example as soon as Refresh button is clicked content of corresponding\n * <mp-event-target-refresh> component will be re-mounted.\n *\n * Alternatively the target-refresh can also be triggered by specifying a time interval:\n *\n *   <mp-event-target-refresh id='some-element' refresh-interval=5>\n *    <div></div>\n *   </mp-event-target-refresh>\n *\n *   <mp-event-trigger id='dom-refresh' type='Component.Refresh' targets='[\"some-element\"]'>\n *     <button>Refresh</button>\n *   </mp-event-trigger>\n *\n */\nexport class EventTargetRefresh extends Component<EventTargetRefreshProps, EventTargetState> {\n  private cancelation = new Cancellation();\n  private timer;\n\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      refresh: false,\n    };\n  }\n\n  componentDidMount() {\n    this.cancelation\n      .map(\n        listen({\n          eventType: BuiltInEvents.ComponentRefresh,\n          target: this.props.id,\n        })\n      )\n      .onValue(this.onRefresh);\n\n    if (this.props.refreshInterval) {\n      this.timer = setInterval(() => this.onRefresh(), this.props.refreshInterval * 1000);\n    }\n  }\n\n  componentWillUnmount() {\n    this.cancelation.cancelAll();\n    // cleanup the timer\n    if (this.timer) {\n      clearInterval(this.timer);\n      this.timer = null;\n    }\n  }\n\n  render() {\n    if (this.state.refresh) {\n      return D.div();\n    } else {\n      return Children.only(this.props.children);\n    }\n  }\n\n  /**\n   * As soon as refresh has been propagated to the render, we want to set it back to false,\n   * to re-mount child component.\n   * see https://facebook.github.io/react/docs/react-component.html#setstate for more details\n   */\n  private onRefresh = () => this.setState({ refresh: true }, () => this.setState({ refresh: false }));\n}\n\nexport default EventTargetRefresh;\n"],"sourceRoot":""}