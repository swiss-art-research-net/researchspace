{"version":3,"sources":["webpack:///./src/main/web/components/ui/splitpane/SplitPaneComponent.ts","webpack:///./src/main/web/components/ui/splitpane/SplitPaneConfig.ts"],"names":["LocalStorageState","BrowserPersistence","adapter","props","isOpen","size","cancellation","Cancellation","getLSIdentifier","id","isPersistResize","persistResize","undefined","handleOpen","state","hasEnoughSize","consideredToBeOpened","defaultSize","newIsOpen","setState","update","triggerWindowResize","handleDrag","minSize","mapChildren","children","alwaysRender","universalChildren","Children","map","child","element","isSidebarClosed","type","SplitPaneSidebarClosedComponent","isSidebarOpen","SplitPaneSidebarOpenComponent","isToggleOn","SplitPaneToggleOnComponent","isToggleOff","SplitPaneToggleOffComponent","cloneElement","onClick","style","_","cloneDeep","display","SplitPaneComponent","debounce","window","dispatchEvent","Event","localState","get","Boolean","defaultOpen","componentDidMount","this","listen","eventType","OpenPaneEvent","target","observe","value","snapThreshold","render","className","resizerClassName","sidebarStyle","resizerStyle","split","contentStyle","primary","onChange","onDragFinished","pane1Style","pane2Style","sidebarChild","contentChild","sidebarChildStyle","assign","configHasDock","position","top","navHeight","height","firstChild","secondChild","createElement","SplitPane","defaultProps","Component","config","has","dock"],"mappings":"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","file":"mp-splitpane-c05c0d05fcdb7008176d.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport {\n  Component,\n  createElement,\n  Children,\n  ReactNode,\n  cloneElement,\n  ReactElement,\n  Props as ReactProps,\n} from 'react';\nimport * as SplitPane from 'react-split-pane';\nimport * as assign from 'object-assign';\nimport * as _ from 'lodash';\n\nimport { listen } from 'platform/api/events';\nimport { Cancellation } from 'platform/api/async';\n\nimport { BrowserPersistence, universalChildren } from 'platform/components/utils';\nimport { SplitPaneSidebarClosedComponent } from './SplitPaneSidebarClosedComponent';\nimport { SplitPaneSidebarOpenComponent } from './SplitPaneSidebarOpenComponent';\nimport { SplitPaneToggleOnComponent } from './SplitPaneToggleOnComponent';\nimport { SplitPaneToggleOffComponent } from './SplitPaneToggleOffComponent';\n\nimport {SplitPaneConfig, configHasDock, OpenPaneEvent } from './SplitPaneConfig';\n\nimport './split-pane.scss';\n\nexport type Props = SplitPaneConfig & ReactProps<SplitPaneComponent>;\n\nexport interface State {\n  isOpen?: boolean;\n  size?: number;\n}\n\nconst LocalStorageState = BrowserPersistence.adapter<{\n  readonly isOpen?: boolean;\n  readonly size?: number;\n}>();\n\n/**\n * @example\n * <mp-splitpane min-size=5 default-size=100>\n *     <div>\n *         <mp-splitpane-toggle-on>\n *             <button></button>\n *         </mp-splitpane-toggle-on>\n *         <mp-splitpane-toggle-off>\n *             <button></button>\n *         </mp-splitpane-toggle-off>\n *         <mp-splitpane-sidebar-open><!-- sidebar content --></mp-splitpane-sidebar-open>\n *     </div>\n *     <div><!-- main component --></div>\n * </mp-splitpane>\n *\n * @example\n * Using the split-pane as left-side sidebar menu by utilizing\n * the pre-defined \"split-pane__leftsidebar-*\" css classes\n *\n * <mp-splitpane min-size=30 nav-height=103 footer-height=180 dock=true default-size=300 id=\"my-panel\" persist-resize=true style=\"margin-top:-60px;\" snap-threshold=50>\n *   <div class=\"split-pane__leftsidebar\">\n *     <mp-splitpane-toggle-on>\n *       <div class=\"split-pane__leftsidebar-caption\">SIDEBAR TITLE</div>\n *     </mp-splitpane-toggle-on>\n *     <mp-splitpane-sidebar-open>\n *       <h1> Sidebar </h1>\n * \t\t\t<!--side bar content here -->\n *     </mp-splitpane-sidebar-open>\n *     <div class=\"split-pane__leftsidebar-footer\">\n *       <mp-splitpane-toggle-on>\n *         <div class=\"split-pane__leftsidebar-toggle\">&raquo;</div>\n *       </mp-splitpane-toggle-on>\n *       <mp-splitpane-toggle-off>\n *         <div class=\"split-pane__leftsidebar-toggle\" >&laquo;</div>\n *       </mp-splitpane-toggle-off>\n *     </div>\n *   </div>\n *   <div >\n *     <!-- main content here -->\n *   </div>\n * </mp-splitpane>\n */\nexport class SplitPaneComponent extends Component<Props, State> {\n  static readonly defaultProps: Partial<Props> = {\n    defaultSize: 300,\n    defaultOpen: true,\n    navHeight: 92, // our default nav + breadcrumbs size\n  };\n\n  private readonly cancellation = new Cancellation();\n\n  constructor(props: Props) {\n    super(props);\n\n    let isOpen: boolean;\n    let size: number;\n    if (this.isPersistResize()) {\n      const localState = LocalStorageState.get(this.getLSIdentifier());\n      isOpen = localState.isOpen;\n      size = localState.size;\n    }\n\n    this.state = {\n      isOpen: isOpen === undefined ? Boolean(this.props.defaultOpen) : isOpen,\n      size: size === undefined ? this.props.defaultSize : size,\n    };\n  }\n\n  componentDidMount() {\n    this.cancellation.map(\n      listen({eventType: OpenPaneEvent, target: this.props.id})\n    ).observe({\n      value: () => {\n        this.handleOpen(true);\n      }\n    });\n  }\n\n  private getLSIdentifier = () => {\n    const id = this.props.id;\n    return `mp-splitpane${id ? `-${id}` : ``}`;\n  };\n\n  private isPersistResize = (): boolean => {\n    return this.props.persistResize || this.props.persistResize === undefined;\n  };\n\n  private handleOpen = (isOpen?: boolean) => {\n    let size = this.state.size;\n\n    const hasEnoughSize = size && this.consideredToBeOpened(size);\n    if (!this.state.isOpen && !hasEnoughSize) {\n      size = this.props.defaultSize;\n    }\n\n    const newIsOpen = isOpen === undefined ? !this.state.isOpen : isOpen;\n    this.setState({isOpen: newIsOpen, size}, () => {\n      if (this.isPersistResize()) {\n        LocalStorageState.update(this.getLSIdentifier(), {\n          isOpen: this.state.isOpen,\n          size: this.state.size,\n        });\n      }\n\n      this.triggerWindowResize();\n    });\n  };\n\n  private handleDrag = (size: number) => {\n    const {minSize} = this.props;\n    const isOpen = this.consideredToBeOpened(size);\n\n    this.setState({isOpen: isOpen, size: isOpen ? size : minSize}, () => {\n      if (this.isPersistResize()) {\n        LocalStorageState.update(this.getLSIdentifier(),\n          isOpen ? {size, isOpen} : {isOpen});\n      }\n      this.triggerWindowResize();\n    });\n  };\n\n  private consideredToBeOpened(size: number) {\n    const {minSize, snapThreshold} = this.props;\n    return size > minSize + (snapThreshold || 0);\n  }\n\n  private mapChildren = (children: ReactNode) => {\n    const isOpen = this.state.isOpen;\n    const alwaysRender = this.props.alwaysRender;\n\n    return universalChildren(\n      Children.map(children, child => {\n        if (!child) { return null; }\n\n        if (typeof child === 'string') { return child; }\n        const element = child as ReactElement<any>;\n        const isSidebarClosed = element.type === SplitPaneSidebarClosedComponent;\n        const isSidebarOpen = element.type === SplitPaneSidebarOpenComponent;\n        const isToggleOn = element.type === SplitPaneToggleOnComponent;\n        const isToggleOff = element.type === SplitPaneToggleOffComponent;\n\n        if (isSidebarClosed || isToggleOn) {\n          return !isOpen ? cloneElement(element, {onClick: () => this.handleOpen()}) : null;\n        } else if (isToggleOff) {\n          return isOpen ? cloneElement(element, {onClick: () => this.handleOpen()}) : null;\n        } else if (isSidebarOpen) {\n          // if panel is closed but alwaysRender is true we need to just hide\n          // the element visually\n          let style = _.cloneDeep(element.props.style);\n          if (alwaysRender && !isOpen) {\n            style.display = 'none';\n          }\n          return alwaysRender || isOpen ?\n            cloneElement(element, {onClick: () => this.handleOpen(), style}) : null;\n        }\n\n        if (element.type === SplitPaneComponent) {\n          return element;\n        }\n\n        return cloneElement(element, {}, this.mapChildren(element.props.children));\n      })\n    );\n  }\n\n  render() {\n    const {minSize, className, resizerClassName, style, sidebarStyle, resizerStyle, split,\n           contentStyle, children, primary} = this.props;\n    const isOpen = this.state.isOpen;\n\n    const props = {\n      minSize: minSize,\n      size: isOpen ? this.state.size : minSize,\n      onChange: this.handleDrag,\n      onDragFinished: this.handleDrag,\n      className: className,\n      resizerClassName: resizerClassName,\n      style: style,\n      resizerStyle: resizerStyle,\n      pane1Style: sidebarStyle,\n      pane2Style: contentStyle,\n      split,\n      primary,\n    };\n\n    let [sidebarChild, contentChild] = [children[0], children[1]];\n    if (primary === 'second') {\n      [sidebarChild, contentChild] = [contentChild, sidebarChild];\n    }\n\n    const sidebarChildStyle = assign(\n      {},\n      sidebarChild.props.style,\n      configHasDock(this.props) ? {\n        position: 'sticky',\n        top: this.props.navHeight + 'px',\n        height: `calc(100vh - ${this.props.navHeight}px)`,\n      } : null,\n    );\n\n    let [firstChild, secondChild] = [\n      cloneElement(sidebarChild, {style: sidebarChildStyle},\n        this.mapChildren(sidebarChild.props.children)\n      ),\n      this.mapChildren(contentChild)\n    ];\n    if (primary === 'second') {\n      [firstChild, secondChild] = [secondChild, firstChild];\n    }\n\n    return createElement(SplitPane, props, firstChild, secondChild);\n  }\n\n  /**\n   * We need to trigger resize when size of the panel is changed\n   * to force components inside the panel to adjust dimensions.\n   *\n   * e.g charts, or mp-text-truncate, etc.\n   */\n  private triggerWindowResize = _.debounce(\n    () => window.dispatchEvent(new Event('resize')), 200\n  );\n}\n\nexport default SplitPaneComponent;\n","/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { has } from 'lodash';\nimport { CSSProperties } from 'react';\n\nexport interface BaseSplitPaneConfig {\n  /**\n   * Width of closed sidebar\n   */\n  minSize: number;\n  /**\n   * Width of open sidebar\n   * @default 300\n   */\n  defaultSize?: number;\n  /**\n   * SplitPane custom class name\n   */\n  className?: string;\n  /**\n   * Resizer custom class name\n   */\n  resizerClassName?: string;\n  /**\n   * SplitPane custom style\n   */\n  style?: CSSProperties;\n  /**\n   * Resizer custom style\n   */\n  resizerStyle?: CSSProperties;\n  /**\n   * Pane1 custom style\n   */\n  sidebarStyle?: CSSProperties;\n  /**\n   * Pane2 custom style\n   */\n  contentStyle?: CSSProperties;\n  /**\n   * Persisting the current size to local storage\n   * @default true\n   */\n  persistResize?: boolean;\n  /**\n   * Whether should be open by default.\n   * @default true\n   */\n  defaultOpen?: boolean;\n  /**\n   * Prefix for the local storage identifier\n   */\n  id?: string;\n  /**\n   * Dock mode\n   */\n  dock?: boolean;\n  /**\n   * Threshold which used for switch the state of the sidebar\n   */\n  snapThreshold?: number;\n\n  /**\n   * Splitting mode\n   */\n  split?: 'vertical' | 'horizontal';\n  /**\n   * Defined which pane will be used as a sidebar.\n   */\n  primary?: 'first' | 'second';\n\n  /**\n   * Render opened pane even when it is in closed state\n   * @default false\n   */\n  alwaysRender?: boolean;\n}\n\nexport interface SplitPaneConfigWithDock extends BaseSplitPaneConfig {\n  /**\n   * Dock mode\n   */\n  dock: boolean;\n  /**\n   * Height of page elements above sidebar. Used to set height of sidebar\n   */\n  navHeight?: number;\n}\n\nexport type SplitPaneConfig = BaseSplitPaneConfig | SplitPaneConfigWithDock;\n\nexport function configHasDock(config: SplitPaneConfig): config is SplitPaneConfigWithDock {\n  return has(config, 'dock') && config.dock === true;\n}\n\nexport const OpenPaneEvent = 'SplitPane.Open';\n"],"sourceRoot":""}