{"version":3,"sources":["webpack:///./src/main/web/components/semantic/search/web-components/SemanticSearchApi.ts"],"names":["SemanticSearchContext","React","createContext","undefined"],"mappings":"gIAmBA,WAmBa,EAAAA,sBAAwBC,EAAMC,mBAAqCC","file":"default~diagram-search-result~semantic-search~semantic-search-action-save-search-result~semantic-sea~2235db74-37a4b48c5fd2c33ae5fb.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as React from 'react';\nimport * as Kefir from 'kefir';\nimport * as SparqlJs from 'sparqljs';\n\nimport { Rdf } from 'platform/api/rdf';\nimport { SearchProfileStore } from '../data/profiles/SearchProfileStore';\nimport * as Model from '../data/search/Model';\nimport * as FacetModel from '../data/facet/Model';\nimport { Dataset, Alignment } from '../data/datasets/Model';\nimport { SemanticSearchConfig } from '../config/SearchConfig';\n\nexport type ExtendedSearchValue = Model.Resource | { label: string; query: SparqlJs.SelectQuery };\n\nexport type SemanticSearchContext = InitialQueryContext &\n  ResultContext &\n  FacetContext &\n  ConfigurationContext &\n  GraphScopeContext;\n\nexport const SemanticSearchContext = React.createContext<SemanticSearchContext>(undefined);\n\nexport interface BaseSearchContext {\n  readonly domain: Data.Maybe<Model.Category>;\n  readonly availableDomains: Data.Maybe<Model.AvailableDomains>;\n  readonly baseConfig: SemanticSearchConfig;\n  readonly searchProfileStore: Data.Maybe<SearchProfileStore>;\n  readonly availableDatasets: Array<Dataset>;\n  readonly selectedDatasets: Array<Dataset>;\n  readonly selectedAlignment: Data.Maybe<Alignment>;\n  readonly isConfigurationEditable: boolean;\n  readonly visualizationContext: Data.Maybe<Model.Relation>;\n}\n\nexport interface ConfigurationContext extends BaseSearchContext {\n  setSelectedDatasets(datasets: Array<Dataset>): void;\n  setSelectedAlignment(alignment: Data.Maybe<Alignment>): void;\n}\n\nexport interface InitialQueryContext extends BaseSearchContext {\n  readonly extendedSearch: Data.Maybe<{ value: ExtendedSearchValue; range: Model.Category }>;\n  readonly baseQueryStructure: Data.Maybe<Model.Search>;\n  setDomain(domain: Model.Category): void;\n  setAvailableDomains(availableDomains: Model.AvailableDomains): void;\n  setBaseQuery(query: Data.Maybe<SparqlJs.SelectQuery>): void;\n  setBaseQueryStructure(queryStructure: Data.Maybe<Model.Search>): void;\n  setSearchProfileStore(profileStore: SearchProfileStore): void;\n}\n\nexport interface FacetContext extends BaseSearchContext {\n  readonly baseQuery: Data.Maybe<SparqlJs.SelectQuery>;\n  readonly baseQueryStructure: Data.Maybe<Model.Search>;\n  readonly resultsStatus: { loaded: boolean; count: number | undefined };\n  readonly facetStructure: Data.Maybe<FacetModel.Ast>;\n  readonly facetActions: Data.Maybe<FacetModel.Actions>;\n  setFacetStructure(structure: FacetModel.Ast): void;\n  setFacetedQuery(query: SparqlJs.SparqlQuery): void;\n  setFacetActions(actions: FacetModel.Actions): void;\n}\n\nexport type ResultOperation =\n  | { type: 'count'; task: Kefir.Property<number> }\n  | { type: 'other'; task: Kefir.Property<void> };\n\nexport interface ResultContext extends BaseSearchContext {\n  readonly resultQuery: Data.Maybe<SparqlJs.SelectQuery>;\n  readonly baseQueryStructure: Data.Maybe<Model.Search>;\n  readonly facetStructure: Data.Maybe<FacetModel.Ast>;\n  useInExtendedFcFrSearch(item: { value: ExtendedSearchValue; range: Model.Category }): void;\n  readonly bindings: { [variable: string]: Rdf.Node };\n  notifyResultLoading(operation: ResultOperation): void;\n  readonly resultState: { [componentId: string]: object };\n  updateResultState(componentId: string, stateChange: object): void;\n  setVisualizationContext(relation: Data.Maybe<Model.Relation>): void;\n}\n\nexport interface GraphScopeContext extends BaseSearchContext {\n  readonly graphScopeStructure: Data.Maybe<Model.GraphScopeSearch>;\n  readonly graphScopeResults: Data.Maybe<Model.GraphScopeResults>;\n  setGraphScopeStructure(graphScopeStructure: Data.Maybe<Model.GraphScopeSearch>): void;\n  setGraphScopeResults(graphScopeResults: Data.Maybe<Model.GraphScopeResults>): void;\n}\n"],"sourceRoot":""}