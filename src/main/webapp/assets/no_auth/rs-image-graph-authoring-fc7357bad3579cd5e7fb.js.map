{"version":3,"sources":["webpack:///./src/main/web/components/iiif/image-graph-authoring/ImageGraphAuthoring.tsx","webpack:///./src/main/web/components/iiif/image-graph-authoring/OntodiaAnnotationEndpoint.ts"],"names":["props","context","cancellation","Cancellation","onMiradorInitialized","miradorInstance","unsubscribeFromMiradorEvents","subscribeOnMiradorEvents","windowUpdateHandler","event","data","canvasID","trigger","eventType","OntodiaEvents","FocusOnElement","source","id","targets","ontodiaId","iri","state","key","isLoading","annotationEndpoint","OntodiaAnnotationEndpoint","miradorId","fields","componentDidMount","this","map","listen","BuiltInEvents","ComponentLoaded","observe","value","setState","DiagramChanged","model","authoringState","miradorRegions","newMiradorRegions","findRegionsOnDiagram","shouldUpdate","setMiradorRegions","Object","keys","length","viewer","workspace","windows","forEach","window","eventEmitter","publish","componentWillUnmount","cancelAll","newRegions","elements","element","types","indexOf","rso","EX_Digital_Image","EX_Digital_Image_Region","get","deleted","links","link","typeId","isPrimaryAreaOf","sourceId","region","isNew","Boolean","targetId","push","imageIri","hasOwnProperty","regions","some","sameElement","newRegion","unsubscribe","subscribe","render","Spinner","TemplateItem","template","noImagesTemplate","images","ImageRegionEditorComponentMirador","imageOrRegion","defaultProps","Component","ImageGraphAuthoringComponent","config","_miradorRegions","search","canvasIri","Kefir","constant","queryingRegions","query","regionIri","Rdf","bindings","annotation","img","prepareRegionsQuery","SparqlClient","setBindings","SparqlUtil","parseQuery","REGION_QUERY","label","properties","viewport","boundingBox","LdpRegionService","getRegionFromSparql","zip","toProperty","create","elementData","convertAnnotationToElementModel","CreateElement","on","targetIri","full","linkTypeId","annotationId","update","EditElement","remove","DeleteElement","undefined","textResource","getAnnotationTextResource","values","chars","language","type","selector","default","item","property","parameter","prepareParsedQuery","literal"],"mappings":"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","file":"rs-image-graph-authoring-fc7357bad3579cd5e7fb.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2015-2020, Â© Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as React from 'react';\nimport { DiagramModel, AuthoringState, sameElement, ElementTypeIri } from 'ontodia';\n\nimport { Component } from 'platform/api/components';\nimport { TemplateItem } from 'platform/components/ui/template';\nimport { Cancellation } from 'platform/api/async/Cancellation';\nimport { listen, trigger, BuiltInEvents } from 'platform/api/events';\n\nimport * as OntodiaEvents from 'platform/components/3-rd-party/ontodia/OntodiaEvents';\n\nimport { rso } from 'platform/data/vocabularies';\n\nimport { ImageRegionEditorComponentMirador } from '../ImageRegionEditor';\n\nimport {\n  OntodiaAnnotationEndpoint,\n  OntodiaAnnotationEndpointFields,\n  MiradorRegions,\n} from './OntodiaAnnotationEndpoint';\nimport { Spinner } from 'platform/components/ui/spinner';\n\nexport interface ImageGraphAuthoringConfig {\n  /**\n   * Unique ID of the component.\n   */\n  id?: string;\n  /**\n   * Pattern to generate the image ID from the image IRI\n   *\n   * @example\n   * BIND(REPLACE(str(?imageIRI), \"^.+/[A-Z0]*([1-9][0-9]*)_.*$\", \"$1\") AS ?imageID)\n   */\n  imageIdPattern: string;\n  /**\n   * URL of IIIF Server\n   */\n  iiifServerUrl: string;\n  /**\n   * Repositories to be used to query images.\n   */\n  repositories?: Array<string>;\n  /**\n   * ID of Ontodia component to be used as an endpoint.\n   */\n  ontodiaId: string;\n  /**\n   * Field definitions to be used to create regions.\n   */\n  fields: OntodiaAnnotationEndpointFields;\n\n  /**\n   * Template that is used when there are no images in the corresponding Knowledge Map\n   */\n  noImagesTemplate?: string;\n\n  /**\n   * Use details sidebar instead of built-in mirador details view\n   */\n  useDetailsSidebar?: boolean;\n}\n\nexport interface State {\n  key?: number;\n  isLoading?: boolean;\n}\n\n/**\n * Mirador component that uses Ontodia in authoring mode as an endpoint to read and write images\n * and regions.\n *\n * @example\n *\n * <div style='height: calc(100vh - 159.5px)'>\n *    <div style='height: 50%'>\n *      <ontodia id='ontodia-component' authoring-mode=true post-saving=none>\n *       <semantic-form new-subject-template='http://www.example.com/entity/digitalimageregion/{{UUID}}'\n *          fields='[ {\n *             \"iri\" : \"http://www.example.com/fieldDefinition/is%20primary%20area%20of\",\n *             \"selectPattern\" : \"SELECT ?value ?label WHERE {\\n  $subject <http://www.ics.forth.gr/isl/CRMdig/L49_is_primary_area_of> ?value.\\n}\",\n *             \"minOccurs\" : \"1\",\n *             \"domain\" : [ \"http://www.researchspace.org/ontology/EX_Digital_Image_Region\" ],\n *             \"range\" : [ \"http://www.researchspace.org/ontology/EX_Digital_Image\" ],\n *             \"defaultValues\" : [ ],\n *             \"maxOccurs\" : \"1\",\n *             \"id\" : \"isPrimaryAreaOf\",\n *             \"label\" : \"is primary area of\",\n *             \"insertPattern\" : \"INSERT { $subject <http://www.ics.forth.gr/isl/CRMdig/L49_is_primary_area_of> $value } WHERE {}\",\n *             \"order\" : 0\n *           }, {\n *             \"iri\" : \"http://www.example.com/fieldDefinition/region%20type\",\n *             \"selectPattern\" : \"SELECT ?value WHERE {\\n  $subject a ?value.\\n}\",\n *             \"minOccurs\" : \"1\",\n *             \"xsdDatatype\" : \"http://www.w3.org/2001/XMLSchema#anyURI\",\n *             \"domain\" : [ \"http://www.researchspace.org/ontology/EX_Digital_Image_Region\" ],\n *             \"range\" : [ \"http://www.w3.org/2000/01/rdf-schema#Class\" ],\n *             \"defaultValues\" : [ ],\n *             \"id\" : \"type\",\n *             \"label\" : \"region type\",\n *             \"insertPattern\" : \"INSERT {\\n  $subject a $value .\\n  $subject a crmdig:D35_Area .\\n} WHERE {}\",\n *             \"order\" : 0\n *           }, {\n *             \"iri\" : \"http://www.example.com/fieldDefinition/region%20label\",\n *             \"selectPattern\" : \"SELECT ?value WHERE {\\n  $subject <http://www.researchspace.org/ontology/displayLabel> ?value.\\n}\",\n *             \"minOccurs\" : \"1\",\n *             \"xsdDatatype\" : \"http://www.w3.org/2001/XMLSchema#string\",\n *             \"domain\" : [ \"http://www.researchspace.org/ontology/EX_Digital_Image_Region\" ],\n *             \"range\" : [ ],\n *             \"defaultValues\" : [ ],\n *             \"maxOccurs\" : \"1\",\n *             \"id\" : \"label\",\n *             \"label\" : \"region label\",\n *             \"insertPattern\" : \"INSERT { $subject <http://www.researchspace.org/ontology/displayLabel> $value} WHERE {}\",\n *             \"order\" : 0\n *           }, {\n *             \"iri\" : \"http://www.example.com/fieldDefinition/region%20value\",\n *             \"selectPattern\" : \"SELECT ?value WHERE {\\n  $subject <http://www.w3.org/1999/02/22-rdf-syntax-ns#value>?value.\\n}\",\n *             \"minOccurs\" : \"1\",\n *             \"xsdDatatype\" : \"http://www.w3.org/2001/XMLSchema#string\",\n *             \"domain\" : [ \"http://www.researchspace.org/ontology/EX_Digital_Image_Region\" ],\n *             \"range\" : [ ],\n *             \"defaultValues\" : [ ],\n *             \"maxOccurs\" : \"1\",\n *             \"id\" : \"value\",\n *             \"label\" : \"region value\",\n *             \"insertPattern\" : \"INSERT { $subject <http://www.w3.org/1999/02/22-rdf-syntax-ns#value> $value} WHERE {}\",\n *             \"order\" : 0\n *           }, {\n *             \"iri\" : \"http://www.example.com/fieldDefinition/region%20viewport\",\n *             \"selectPattern\" : \"SELECT ?value WHERE {\\n  $subject <http://www.researchspace.org/ontology/viewport> ?value.\\n}\",\n *             \"xsdDatatype\" : \"http://www.w3.org/2001/XMLSchema#string\",\n *             \"domain\" : [ \"http://www.researchspace.org/ontology/EX_Digital_Image_Region\" ],\n *             \"range\" : [ ],\n *             \"defaultValues\" : [ ],\n *             \"maxOccurs\" : \"1\",\n *             \"id\" : \"viewport\",\n *             \"label\" : \"region viewport\",\n *             \"insertPattern\" : \"INSERT { $subject <http://www.researchspace.org/ontology/viewport> $value} WHERE {}\",\n *             \"order\" : 0\n *           }, {\n *             \"iri\" : \"http://www.example.com/fieldDefinition/region%20bounding%20box\",\n *             \"selectPattern\" : \"SELECT ?value WHERE {\\n  $subject <http://www.researchspace.org/ontology/boundingBox> ?value.\\n}\",\n *             \"minOccurs\" : \"1\",\n *             \"xsdDatatype\" : \"http://www.w3.org/2001/XMLSchema#string\",\n *             \"domain\" : [ \"http://www.researchspace.org/ontology/EX_Digital_Image_Region\" ],\n *             \"range\" : [ ],\n *             \"defaultValues\" : [ ],\n *             \"maxOccurs\" : \"1\",\n *             \"id\" : \"boundingBox\",\n *             \"label\" : \"region bounding box\",\n *             \"insertPattern\" : \"INSERT { $subject <http://www.researchspace.org/ontology/boundingBox> $value} WHERE {}\",\n *             \"order\" : 0\n *           } ]'>\n *        <ontodia-entity-metadata entity-type-iri='http://www.researchspace.org/ontology/EX_Digital_Image_Region'\n *          type-iri='http://www.example.com/fieldDefinition/region%20type'\n *          label-iri='http://www.example.com/fieldDefinition/region%20label'>\n *        </ontodia-entity-metadata>\n *\n *          <semantic-form-text-input for=\"label\"></semantic-form-text-input>\n *          <semantic-form-hidden-input for=\"value\"></semantic-form-hidden-input>\n *          <semantic-form-hidden-input for=\"viewport\"></semantic-form-hidden-input>\n *          <semantic-form-hidden-input for=\"boundingBox\"></semantic-form-hidden-input>\n *\n *          <button name=\"submit\" class=\"btn btn-sm btn-success\">Save</button>\n *          <button name=\"reset\" class=\"btn btn-sm btn-default\">Reset</button>\n *          <button name=\"cancel\" class=\"btn btn-sm btn-danger pull-right\">Cancel</button>\n *        </semantic-form>\n *      </ontodia>\n *    </div>\n *\n *    <div style='height: 50%'>\n *      <rs-image-graph-authoring iiif-server-url=\"http://example.com/IIIF\"\n *         image-id-pattern='BIND(REPLACE(str(?imageIRI), \"^.+/[A-Z0]*([1-9][0-9]*)_.*$\", \"$1\") AS ?imageID)'\n *         ontodia-id='ontodia-component'\n *         fields='{\n *           \"boundingBox\": \"http://www.example.com/fieldDefinition/region%20bounding%20box\",\n *           \"value\": \"http://www.example.com/fieldDefinition/region%20value\",\n *           \"viewport\": \"http://www.example.com/fieldDefinition/region%20viewport\",\n *           \"isPrimaryAreaOf\": \"http://www.example.com/fieldDefinition/is%20primary%20area%20of\"\n *         }'>\n *      </rs-image-graph-authoring>\n *    </div>\n * </div>\n */\nexport class ImageGraphAuthoringComponent extends Component<ImageGraphAuthoringConfig, State> {\n\n  static defaultProps = {\n    noImagesTemplate: '<p>No images found in the corresponding Knowledge Map.</p>',\n  };\n\n  private readonly cancellation = new Cancellation();\n\n  private readonly annotationEndpoint: OntodiaAnnotationEndpoint;\n\n  private miradorInstance: Mirador.Instance;\n\n  constructor(props: ImageGraphAuthoringConfig, context: any) {\n    super(props, context);\n    this.state = {\n      key: 0,\n      isLoading: true,\n    };\n    this.annotationEndpoint = new OntodiaAnnotationEndpoint(\n      {\n        miradorId: props.id,\n        ontodiaId: props.ontodiaId,\n        fields: props.fields,\n      },\n      {}\n    );\n  }\n\n  componentDidMount() {\n    const { ontodiaId } = this.props;\n    this.cancellation\n      .map(\n        listen({\n          eventType: BuiltInEvents.ComponentLoaded,\n          source: ontodiaId,\n        })\n      )\n      .observe({\n        value: () => this.setState({ isLoading: false }),\n      });\n    this.cancellation\n      .map(\n        listen({\n          eventType: OntodiaEvents.DiagramChanged,\n          source: ontodiaId,\n        })\n      )\n      .observe({\n        value: ({ data: { model, authoringState } }) => {\n          const { miradorRegions } = this.annotationEndpoint;\n          const newMiradorRegions = this.findRegionsOnDiagram(model as DiagramModel, authoringState as AuthoringState);\n          const shouldUpdate = this.shouldUpdate(miradorRegions, newMiradorRegions);\n          if (shouldUpdate) {\n            this.annotationEndpoint.setMiradorRegions(newMiradorRegions);\n            if (Object.keys(miradorRegions).length !== Object.keys(newMiradorRegions).length) {\n              this.setState(({ key }: State): State => ({ key: key + 1 }));\n            } else if (this.miradorInstance) {\n              this.miradorInstance.viewer.workspace.windows.forEach((window) => {\n                window.eventEmitter.publish(`removeTooltips.${window.id}`);\n                window.eventEmitter.publish(`updateAnnotationList.${window.id}`);\n              });\n            }\n          }\n        },\n      });\n  }\n\n  componentWillUnmount() {\n    this.cancellation.cancelAll();\n    this.unsubscribeFromMiradorEvents();\n  }\n\n  private findRegionsOnDiagram(model: DiagramModel, authoringState: AuthoringState): MiradorRegions {\n    const newRegions = {};\n    model.elements.forEach((element) => {\n      if (element.data.types.indexOf(rso.EX_Digital_Image.value as ElementTypeIri) >= 0) {\n        if (!newRegions[element.iri]) {\n          newRegions[element.iri] = [];\n        }\n      }\n      if (element.data.types.indexOf(rso.EX_Digital_Image_Region.value as ElementTypeIri) >= 0) {\n        const event = authoringState.elements.get(element.iri);\n        if (event && event.deleted) {\n          return;\n        }\n        element.links.forEach((link) => {\n          if (link.typeId === this.props.fields.isPrimaryAreaOf && link.sourceId === element.id) {\n            const region = {\n              region: element.data,\n              isNew: Boolean(event),\n            };\n            if (newRegions[link.data.targetId]) {\n              newRegions[link.data.targetId].push(region);\n            } else {\n              newRegions[link.data.targetId] = [region];\n            }\n          }\n        });\n      }\n    });\n    return newRegions;\n  }\n\n  private shouldUpdate(miradorRegions: MiradorRegions, newMiradorRegions: MiradorRegions): boolean {\n    if (Object.keys(miradorRegions).length !== Object.keys(newMiradorRegions).length) {\n      return true;\n    }\n    for (const imageIri in miradorRegions) {\n      if (!miradorRegions.hasOwnProperty(imageIri)) {\n        continue;\n      }\n      const regions = miradorRegions[imageIri];\n      const newRegions = newMiradorRegions[imageIri];\n      if (!newRegions || regions.length !== newRegions.length) {\n        return true;\n      }\n      for (const { region } of regions) {\n        const isChanged = !newRegions.some(({ region: newRegion }) => {\n          return sameElement(region, newRegion);\n        });\n        if (isChanged) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  private onMiradorInitialized = (miradorInstance: Mirador.Instance) => {\n    this.unsubscribeFromMiradorEvents();\n\n    this.miradorInstance = miradorInstance;\n    this.subscribeOnMiradorEvents();\n  };\n\n  private unsubscribeFromMiradorEvents() {\n    if (this.miradorInstance) {\n      this.miradorInstance.eventEmitter.unsubscribe('windowUpdated');\n    }\n  }\n\n  private subscribeOnMiradorEvents() {\n    this.miradorInstance.eventEmitter.subscribe('windowUpdated', this.windowUpdateHandler);\n  }\n\n  private windowUpdateHandler = (event, data) => {\n    if (data.canvasID) {\n      trigger({\n        eventType: OntodiaEvents.FocusOnElement,\n        source: this.props.id,\n        targets: [this.props.ontodiaId],\n        data: { iri: data.canvasID },\n      });\n    }\n  };\n\n  render() {\n    const { key, isLoading } = this.state;\n    const { miradorRegions } = this.annotationEndpoint;\n\n    if (isLoading) {\n      return <Spinner />;\n    }\n\n    if (!Object.keys(miradorRegions).length) {\n      return <TemplateItem template={{source: this.props.noImagesTemplate}} />;\n    }\n\n    const images = {\n      ['http://www.researchspace.org/ontology/Image_Graph_Authoring']: Object.keys(miradorRegions),\n    };\n    return (\n      <ImageRegionEditorComponentMirador\n        key={key}\n        {...this.props}\n        imageOrRegion={images}\n        annotationEndpoint={this.annotationEndpoint}\n        onMiradorInitialized={this.onMiradorInitialized}\n      />\n    );\n  }\n}\n\nexport default ImageGraphAuthoringComponent;\n","/**\n * ResearchSpace\n * Copyright (C) 2015-2020, Â© Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as Kefir from 'kefir';\nimport * as SparqlJs from 'sparqljs';\nimport { ElementModel, ElementIri, ElementTypeIri, LinkTypeIri, LiteralProperty, LocalizedString } from 'ontodia';\n\nimport { trigger } from 'platform/api/events';\nimport { Rdf } from 'platform/api/rdf';\nimport { SparqlClient, SparqlUtil } from 'platform/api/sparql';\n\nimport * as OntodiaEvents from 'platform/components/3-rd-party/ontodia/OntodiaEvents';\n\nimport { rso, crmdig } from 'platform/data/vocabularies';\n\nimport {\n  LdpRegionService,\n  OARegionAnnotation,\n  getAnnotationTextResource,\n} from 'platform/data/iiif/LDPImageRegionService';\nimport { AnnotationEndpoint } from 'platform/data/iiif/AnnotationEndpoint';\n\nexport interface OntodiaAnnotationEndpointFields {\n  boundingBox: string;\n  value: string;\n  viewport: string;\n  isPrimaryAreaOf: string;\n}\n\nexport interface MiradorRegion {\n  region: ElementModel;\n  isNew: boolean;\n}\nexport type MiradorRegions = { [canvasId: string]: Array<MiradorRegion> };\n\nexport class OntodiaAnnotationEndpoint implements AnnotationEndpoint {\n  private readonly miradorId: string;\n  private readonly ontodiaId: string;\n  private readonly fields: OntodiaAnnotationEndpointFields;\n\n  constructor(\n    config: {\n      miradorId: string;\n      ontodiaId: string;\n      fields: OntodiaAnnotationEndpointFields;\n    },\n    private _miradorRegions: MiradorRegions\n  ) {\n    this.miradorId = config.miradorId;\n    this.ontodiaId = config.ontodiaId;\n    this.fields = config.fields;\n  }\n\n  get miradorRegions() {\n    return this._miradorRegions;\n  }\n\n  setMiradorRegions(regions: MiradorRegions) {\n    this._miradorRegions = regions;\n  }\n\n  search(canvasIri: Rdf.Iri) {\n    const regions = this._miradorRegions[canvasIri.value] || [];\n    if (!regions.length) {\n      return Kefir.constant([]);\n    }\n    const queryingRegions = regions.map(({ region, isNew }) => {\n      const regionIri = Rdf.iri(region.id);\n      let query: SparqlJs.ConstructQuery;\n      if (isNew) {\n        const bindings = {\n          annotation: regionIri,\n          img: canvasIri,\n        };\n        query = SparqlClient.setBindings(SparqlUtil.parseQuery<SparqlJs.ConstructQuery>(REGION_QUERY), bindings);\n        query = prepareRegionsQuery(query, region.label, 'label');\n        query = prepareRegionsQuery(query, region.properties[this.fields.value] as LiteralProperty, 'svgValue');\n        query = prepareRegionsQuery(query, region.properties[this.fields.viewport] as LiteralProperty, 'viewport');\n        query = prepareRegionsQuery(\n          query,\n          region.properties[this.fields.boundingBox] as LiteralProperty,\n          'boundingBox'\n        );\n      }\n      return LdpRegionService.getRegionFromSparql(regionIri, query);\n    });\n    return Kefir.zip(queryingRegions).toProperty();\n  }\n\n  create(annotation: OARegionAnnotation) {\n    const elementData = convertAnnotationToElementModel(annotation, this.fields);\n    trigger({\n      eventType: OntodiaEvents.CreateElement,\n      source: this.miradorId,\n      targets: [this.ontodiaId],\n      data: {\n        elementData,\n        targets: annotation.on.map((on) => ({\n          targetIri: on.full as ElementIri,\n          linkTypeId: this.fields.isPrimaryAreaOf as LinkTypeIri,\n        })),\n      },\n    });\n    const annotationId = Rdf.iri('');\n    return Kefir.constant(annotationId);\n  }\n\n  update(annotation: OARegionAnnotation) {\n    const elementData = convertAnnotationToElementModel(annotation, this.fields);\n    trigger({\n      eventType: OntodiaEvents.EditElement,\n      source: this.miradorId,\n      targets: [this.ontodiaId],\n      data: { targetIri: elementData.id, elementData },\n    });\n    return Kefir.constant(Rdf.iri(elementData.id));\n  }\n\n  remove(annotation: OARegionAnnotation) {\n    trigger({\n      eventType: OntodiaEvents.DeleteElement,\n      source: this.miradorId,\n      targets: [this.ontodiaId],\n      data: { iri: annotation['@id'] as ElementIri },\n    });\n    return Kefir.constant(undefined);\n  }\n}\n\nconst REGION_QUERY = `prefix oa: <http://www.w3.org/ns/oa#>\nprefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nprefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nprefix rso: <http://www.researchspace.org/ontology/>\nprefix dcmit: <http://purl.org/dc/dcmitype/>\nprefix cnt: <http://www.w3.org/2011/content#>\nprefix dc: <http://purl.org/dc/elements/1.1/>\nprefix crmdig: <http://www.ics.forth.gr/isl/CRMdig/>\n\nCONSTRUCT {\n?annotation a oa:Annotation ;\n    oa:motivatedBy oa:commenting ;\n    oa:hasTarget _:specificResource ;\n    oa:hasBody _:body.\n    _:body  a dcmit:Text;\n            dc:format \"text/html\";\n            cnt:chars ?label.\n\n    _:specificResource a oa:SpecificResource ;\n            oa:hasSource ?img ;\n            oa:hasSelector _:selector ;\n            rso:viewport ?viewport ;\n            rso:boundingBox ?boundingBox .\n\n    _:selector a oa:Choice ;\n               oa:default _:fragmentSelector ;\n               oa:item _:svgSelector .\n\n    _:svgSelector a oa:SvgSelector ;\n                  rdf:value ?svgValue .\n\n    _:fragmentSelector a oa:FragmentSelector ;\n                       rdf:value ?boundingBox .\n} WHERE {}`;\n\nfunction convertAnnotationToElementModel(\n  annotation: OARegionAnnotation,\n  fields: OntodiaAnnotationEndpointFields\n): ElementModel {\n  const textResource = getAnnotationTextResource(annotation);\n  return {\n    id: annotation['@id'] as ElementIri,\n    types: [rso.EX_Digital_Image_Region.value as ElementTypeIri],\n    label: { values: [{ value: textResource.chars, language: '' }] },\n    properties: {\n      [fields.boundingBox]: {\n        type: 'string',\n        values: annotation.on.map((on) => ({ value: on.selector.default.value, language: '' })),\n      },\n      [fields.value]: {\n        type: 'string',\n        values: annotation.on.map((on) => ({ value: on.selector.item.value, language: '' })),\n      },\n      [fields.viewport]: {\n        type: 'string',\n        values: [\n          {\n            value: annotation['http://www.researchspace.org/ontology/viewport'],\n            language: '',\n          },\n        ],\n      },\n      [fields.isPrimaryAreaOf]: {\n        type: 'uri',\n        values: annotation.on.map(\n          on =>\n            ({value: on.full, type: 'uri'})\n        ),\n      },\n    }\n  };\n}\n\nfunction prepareRegionsQuery(\n  query: SparqlJs.ConstructQuery,\n  property: {\n    values: ReadonlyArray<LocalizedString>;\n  },\n  parameter: string\n): SparqlJs.ConstructQuery {\n  return SparqlClient.prepareParsedQuery(property.values.map(({ value }) => ({ [parameter]: Rdf.literal(value) })))(\n    query\n  );\n}\n"],"sourceRoot":""}