{"version":3,"sources":["webpack:///./node_modules/browserify-sign/algos.js","webpack:///./node_modules/browserify-sign/browser/index.js","webpack:///./node_modules/browserify-sign/browser/sign.js","webpack:///./node_modules/browserify-sign/browser/verify.js"],"names":["module","exports","stream","inherits","sign","verify","algorithms","Sign","algorithm","Writable","call","this","data","Error","_hashType","hash","_hash","createHash","_tag","id","_signType","Verify","createSign","createVerify","Object","keys","forEach","key","Buffer","toLowerCase","prototype","_write","_","done","update","enc","signMethod","end","digest","sig","toString","verifyMethod","createHmac","crt","EC","ec","BN","parseKeys","curves","getKey","x","q","algo","toArray","length","byteLength","zeros","fill","concat","hlen","hbits","bits2octets","bits","bits2int","mod","out","v","k","obits","shift","bitLength","ishrn","makeKey","kv","t","cmp","makeR","g","p","toRed","mont","redPow","fromRed","hashType","signType","tag","priv","curve","ecSign","curveId","join","keyFromPrivate","privateKey","toDER","type","dsaSign","params","priv_key","r","H","s","invm","imul","add","mul","cmpn","res","len","modulus","pad","push","i","checkValue","b","pub","ecVerify","pubkey","subjectPrivateKey","dsaVerify","y","pub_key","unpacked","signature","decode","montp","w","padNum","red","publicExponent","Math","min"],"mappings":"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","file":"npm.browserify-sign-8a4b5f8b2f0ab2958890.js","sourcesContent":["module.exports = require('./browser/algorithms.json')\n","var createHash = require('create-hash')\nvar stream = require('stream')\nvar inherits = require('inherits')\nvar sign = require('./sign')\nvar verify = require('./verify')\n\nvar algorithms = require('./algorithms.json')\nObject.keys(algorithms).forEach(function (key) {\n  algorithms[key].id = new Buffer(algorithms[key].id, 'hex')\n  algorithms[key.toLowerCase()] = algorithms[key]\n})\n\nfunction Sign (algorithm) {\n  stream.Writable.call(this)\n\n  var data = algorithms[algorithm]\n  if (!data) throw new Error('Unknown message digest')\n\n  this._hashType = data.hash\n  this._hash = createHash(data.hash)\n  this._tag = data.id\n  this._signType = data.sign\n}\ninherits(Sign, stream.Writable)\n\nSign.prototype._write = function _write (data, _, done) {\n  this._hash.update(data)\n  done()\n}\n\nSign.prototype.update = function update (data, enc) {\n  if (typeof data === 'string') data = new Buffer(data, enc)\n\n  this._hash.update(data)\n  return this\n}\n\nSign.prototype.sign = function signMethod (key, enc) {\n  this.end()\n  var hash = this._hash.digest()\n  var sig = sign(hash, key, this._hashType, this._signType, this._tag)\n\n  return enc ? sig.toString(enc) : sig\n}\n\nfunction Verify (algorithm) {\n  stream.Writable.call(this)\n\n  var data = algorithms[algorithm]\n  if (!data) throw new Error('Unknown message digest')\n\n  this._hash = createHash(data.hash)\n  this._tag = data.id\n  this._signType = data.sign\n}\ninherits(Verify, stream.Writable)\n\nVerify.prototype._write = function _write (data, _, done) {\n  this._hash.update(data)\n  done()\n}\n\nVerify.prototype.update = function update (data, enc) {\n  if (typeof data === 'string') data = new Buffer(data, enc)\n\n  this._hash.update(data)\n  return this\n}\n\nVerify.prototype.verify = function verifyMethod (key, sig, enc) {\n  if (typeof sig === 'string') sig = new Buffer(sig, enc)\n\n  this.end()\n  var hash = this._hash.digest()\n  return verify(sig, hash, key, this._signType, this._tag)\n}\n\nfunction createSign (algorithm) {\n  return new Sign(algorithm)\n}\n\nfunction createVerify (algorithm) {\n  return new Verify(algorithm)\n}\n\nmodule.exports = {\n  Sign: createSign,\n  Verify: createVerify,\n  createSign: createSign,\n  createVerify: createVerify\n}\n","// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js\nvar createHmac = require('create-hmac')\nvar crt = require('browserify-rsa')\nvar EC = require('elliptic').ec\nvar BN = require('bn.js')\nvar parseKeys = require('parse-asn1')\nvar curves = require('./curves.json')\n\nfunction sign (hash, key, hashType, signType, tag) {\n  var priv = parseKeys(key)\n  if (priv.curve) {\n    // rsa keys can be interpreted as ecdsa ones in openssl\n    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')\n    return ecSign(hash, priv)\n  } else if (priv.type === 'dsa') {\n    if (signType !== 'dsa') throw new Error('wrong private key type')\n    return dsaSign(hash, priv, hashType)\n  } else {\n    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')\n  }\n  hash = Buffer.concat([tag, hash])\n  var len = priv.modulus.byteLength()\n  var pad = [ 0, 1 ]\n  while (hash.length + pad.length + 1 < len) pad.push(0xff)\n  pad.push(0x00)\n  var i = -1\n  while (++i < hash.length) pad.push(hash[i])\n\n  var out = crt(pad, priv)\n  return out\n}\n\nfunction ecSign (hash, priv) {\n  var curveId = curves[priv.curve.join('.')]\n  if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))\n\n  var curve = new EC(curveId)\n  var key = curve.keyFromPrivate(priv.privateKey)\n  var out = key.sign(hash)\n\n  return new Buffer(out.toDER())\n}\n\nfunction dsaSign (hash, priv, algo) {\n  var x = priv.params.priv_key\n  var p = priv.params.p\n  var q = priv.params.q\n  var g = priv.params.g\n  var r = new BN(0)\n  var k\n  var H = bits2int(hash, q).mod(q)\n  var s = false\n  var kv = getKey(x, q, hash, algo)\n  while (s === false) {\n    k = makeKey(q, kv, algo)\n    r = makeR(g, k, p, q)\n    s = k.invm(q).imul(H.add(x.mul(r))).mod(q)\n    if (s.cmpn(0) === 0) {\n      s = false\n      r = new BN(0)\n    }\n  }\n  return toDER(r, s)\n}\n\nfunction toDER (r, s) {\n  r = r.toArray()\n  s = s.toArray()\n\n  // Pad values\n  if (r[0] & 0x80) r = [ 0 ].concat(r)\n  if (s[0] & 0x80) s = [ 0 ].concat(s)\n\n  var total = r.length + s.length + 4\n  var res = [ 0x30, total, 0x02, r.length ]\n  res = res.concat(r, [ 0x02, s.length ], s)\n  return new Buffer(res)\n}\n\nfunction getKey (x, q, hash, algo) {\n  x = new Buffer(x.toArray())\n  if (x.length < q.byteLength()) {\n    var zeros = new Buffer(q.byteLength() - x.length)\n    zeros.fill(0)\n    x = Buffer.concat([ zeros, x ])\n  }\n  var hlen = hash.length\n  var hbits = bits2octets(hash, q)\n  var v = new Buffer(hlen)\n  v.fill(1)\n  var k = new Buffer(hlen)\n  k.fill(0)\n  k = createHmac(algo, k).update(v).update(new Buffer([ 0 ])).update(x).update(hbits).digest()\n  v = createHmac(algo, k).update(v).digest()\n  k = createHmac(algo, k).update(v).update(new Buffer([ 1 ])).update(x).update(hbits).digest()\n  v = createHmac(algo, k).update(v).digest()\n  return { k: k, v: v }\n}\n\nfunction bits2int (obits, q) {\n  var bits = new BN(obits)\n  var shift = (obits.length << 3) - q.bitLength()\n  if (shift > 0) bits.ishrn(shift)\n  return bits\n}\n\nfunction bits2octets (bits, q) {\n  bits = bits2int(bits, q)\n  bits = bits.mod(q)\n  var out = new Buffer(bits.toArray())\n  if (out.length < q.byteLength()) {\n    var zeros = new Buffer(q.byteLength() - out.length)\n    zeros.fill(0)\n    out = Buffer.concat([ zeros, out ])\n  }\n  return out\n}\n\nfunction makeKey (q, kv, algo) {\n  var t\n  var k\n\n  do {\n    t = new Buffer(0)\n\n    while (t.length * 8 < q.bitLength()) {\n      kv.v = createHmac(algo, kv.k).update(kv.v).digest()\n      t = Buffer.concat([ t, kv.v ])\n    }\n\n    k = bits2int(t, q)\n    kv.k = createHmac(algo, kv.k).update(kv.v).update(new Buffer([ 0 ])).digest()\n    kv.v = createHmac(algo, kv.k).update(kv.v).digest()\n  } while (k.cmp(q) !== -1)\n\n  return k\n}\n\nfunction makeR (g, k, p, q) {\n  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)\n}\n\nmodule.exports = sign\nmodule.exports.getKey = getKey\nmodule.exports.makeKey = makeKey\n","// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js\nvar BN = require('bn.js')\nvar EC = require('elliptic').ec\nvar parseKeys = require('parse-asn1')\nvar curves = require('./curves.json')\n\nfunction verify (sig, hash, key, signType, tag) {\n  var pub = parseKeys(key)\n  if (pub.type === 'ec') {\n    // rsa keys can be interpreted as ecdsa ones in openssl\n    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')\n    return ecVerify(sig, hash, pub)\n  } else if (pub.type === 'dsa') {\n    if (signType !== 'dsa') throw new Error('wrong public key type')\n    return dsaVerify(sig, hash, pub)\n  } else {\n    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')\n  }\n  hash = Buffer.concat([tag, hash])\n  var len = pub.modulus.byteLength()\n  var pad = [ 1 ]\n  var padNum = 0\n  while (hash.length + pad.length + 2 < len) {\n    pad.push(0xff)\n    padNum++\n  }\n  pad.push(0x00)\n  var i = -1\n  while (++i < hash.length) {\n    pad.push(hash[i])\n  }\n  pad = new Buffer(pad)\n  var red = BN.mont(pub.modulus)\n  sig = new BN(sig).toRed(red)\n\n  sig = sig.redPow(new BN(pub.publicExponent))\n  sig = new Buffer(sig.fromRed().toArray())\n  var out = padNum < 8 ? 1 : 0\n  len = Math.min(sig.length, pad.length)\n  if (sig.length !== pad.length) out = 1\n\n  i = -1\n  while (++i < len) out |= sig[i] ^ pad[i]\n  return out === 0\n}\n\nfunction ecVerify (sig, hash, pub) {\n  var curveId = curves[pub.data.algorithm.curve.join('.')]\n  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))\n\n  var curve = new EC(curveId)\n  var pubkey = pub.data.subjectPrivateKey.data\n\n  return curve.verify(hash, sig, pubkey)\n}\n\nfunction dsaVerify (sig, hash, pub) {\n  var p = pub.data.p\n  var q = pub.data.q\n  var g = pub.data.g\n  var y = pub.data.pub_key\n  var unpacked = parseKeys.signature.decode(sig, 'der')\n  var s = unpacked.s\n  var r = unpacked.r\n  checkValue(s, q)\n  checkValue(r, q)\n  var montp = BN.mont(p)\n  var w = s.invm(q)\n  var v = g.toRed(montp)\n    .redPow(new BN(hash).mul(w).mod(q))\n    .fromRed()\n    .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())\n    .mod(p)\n    .mod(q)\n  return v.cmp(r) === 0\n}\n\nfunction checkValue (b, q) {\n  if (b.cmpn(0) <= 0) throw new Error('invalid sig')\n  if (b.cmp(q) >= q) throw new Error('invalid sig')\n}\n\nmodule.exports = verify\n"],"sourceRoot":""}