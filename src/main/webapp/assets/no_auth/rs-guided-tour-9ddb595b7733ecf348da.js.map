{"version":3,"sources":["webpack:///./src/main/web/components/guided-tour/GuidedTour.tsx","webpack:///./src/main/web/components/guided-tour/GuidedTourEvents.ts"],"names":["LocalStorageState","BrowserPersistence","adapter","props","cancellation","Cancellation","onInitJoyride","tourJoyride","registerEventListener","state","run","autoStart","componentWillUnmount","this","cancelAll","id","map","listen","eventType","GuidedTourRunIfNotSeen","target","onValue","get","wasDisplayed","set","setState","GuidedTourStart","reset","listenToStepsEvents","_","uniqWith","steps","step","otherStep","progressEvent","source","forEach","event","setTimeout","goToNextStep","data","progress","getProgress","index","length","selector","document","querySelector","next","setInterval","clearInterval","render","Overlay","show","ref","callback","type","defaultProps","showOverlay","locale","back","skip","close","last","showSkipButton","tooltipOffset","keyboardNavigation","scrollToSteps","React","Component","GuidedTour","EventMaker"],"mappings":"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","file":"rs-guided-tour-9ddb595b7733ecf348da.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2015-2020, © Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * @author Mike Kelly <MKelly@britishmuseum.org>\n * @author Olga Belyaeva\n */\n\nimport * as React from 'react';\nimport * as _ from 'lodash';\nimport ReactJoyride from 'react-joyride';\nimport { Props as JoyrideProps } from 'react-joyride';\nimport { Overlay } from 'react-bootstrap';\n\nimport { listen, Event } from 'platform/api/events';\nimport { Cancellation } from 'platform/api/async';\nimport { BrowserPersistence } from 'platform/components/utils';\n\nimport { GuidedTourRunIfNotSeen, GuidedTourStart } from './GuidedTourEvents';\n\nimport 'react-joyride/src/styles/react-joyride.scss';\n\nconst GUIDED_TOUR = 'mp-guided-tour';\nconst LocalStorageState = BrowserPersistence.adapter<{\n  readonly wasDisplayed?: boolean;\n}>();\n\nexport interface Props extends JoyrideProps {\n  id: string;\n}\n\nexport interface State {\n  run?: boolean;\n  autoStart?: boolean;\n}\n\n/**\n * Guided tour component allows to showcase or explain functionality of complex features.\n *\n * @example\n * <mp-guided-tour id='guided-tour' steps='[{\n *   \"text\": \"Step 1\",\n *   \"selector\": \"#step1\",\n *   \"position\": \"bottom\"\n * }, {\n *   \"text\": \"Step 2\",\n *   \"selector\": \"#step2\",\n *   \"position\": \"top\",\n *   \"style\": {\"button\": {\"display\": \"none\"}},\n *   <!--\n *     define `progressEvent` property to switch guided tour to the next step by the user action\n *   -->\n *   \"progressEvent\": {\"eventType\": \"Component.Loaded\", \"source\": \"source-id\"}\n * }, {\n *   \"text\": \"Step 3\",\n *   \"selector\": \"#step3\",\n *   \"position\": \"left\"\n * }]'></mp-guided-tour>\n *\n * <!-- use `mp-event-trigger` component to start guided tour -->\n * <mp-event-trigger id='guided-tour-start' type='GuidedTour.Start' targets='[\"guided-tour\"]'>\n *   <a>Tour trigger</a>\n * </mp-event-trigger>\n *\n * <!-- use `mp-event-proxy` component to run guided tour if it wasn't seen -->\n * <mp-event-proxy id='guided-tour-run' on-event-type='Component.Loaded' on-event-source='source-id'\n *   proxy-event-type='GuidedTour.RunIfNotSeen' proxy-targets='[\"guided-tour\"]'>\n * </mp-event-proxy>\n */\nexport class GuidedTour extends React.Component<Props, State> {\n  static readonly defaultProps: Partial<Props> = {\n    autoStart: false,\n    showOverlay: false,\n    type: 'continuous',\n    locale: { back: '', skip: 'Skip Tour', close: 'Close', last: 'OK, got it', next: 'Next' },\n    showSkipButton: true,\n    tooltipOffset: 10,\n    keyboardNavigation: false,\n    scrollToSteps: false,\n  };\n  private readonly cancellation = new Cancellation();\n  private tourJoyride: ReactJoyride;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      run: props.run,\n      autoStart: props.autoStart,\n    };\n  }\n\n  componentWillUnmount() {\n    this.cancellation.cancelAll();\n  }\n\n  private onInitJoyride = (tourJoyride: ReactJoyride) => {\n    if (tourJoyride) {\n      this.tourJoyride = tourJoyride;\n      this.registerEventListener();\n    }\n  };\n\n  private registerEventListener() {\n    const { id: target } = this.props;\n    this.cancellation.map(listen({ eventType: GuidedTourRunIfNotSeen, target })).onValue(() => {\n      if (!LocalStorageState.get(GUIDED_TOUR).wasDisplayed) {\n        LocalStorageState.set(GUIDED_TOUR, { wasDisplayed: true });\n        this.setState({ run: true });\n      }\n    });\n    this.cancellation.map(listen({ eventType: GuidedTourStart, target })).onValue(() => {\n      this.setState({ autoStart: true, run: true });\n      this.tourJoyride.reset(true);\n    });\n    this.listenToStepsEvents();\n  }\n\n  private listenToStepsEvents() {\n    const uniqueEvents = _.uniqWith(\n      this.props.steps,\n      (step, otherStep) =>\n        step.progressEvent &&\n        otherStep.progressEvent &&\n        step.progressEvent.eventType === otherStep.progressEvent.eventType &&\n        step.progressEvent.source === otherStep.progressEvent.source\n    );\n    uniqueEvents.forEach(({ progressEvent }) => {\n      if (!progressEvent) {\n        return;\n      }\n      this.cancellation\n        .map(listen({ eventType: progressEvent.eventType, source: progressEvent.source }))\n        .onValue((event) => {\n          if (!this.state.run) {\n            return;\n          }\n          // HACK: Give joyride time to process previous step\n          setTimeout(() => this.goToNextStep(event), 200);\n        });\n    });\n  }\n\n  private goToNextStep(event: Event<any>) {\n    const { eventType, source, data } = event;\n    const progress = this.tourJoyride.getProgress();\n    const { progressEvent } = progress.step;\n    if (progressEvent && progressEvent.eventType === eventType && progressEvent.source === source) {\n      if (progressEvent.data === data && progress.index < this.props.steps.length - 1) {\n        const selector = this.props.steps[progress.index + 1].selector;\n        // if next step has selector then we should wait until corresponding element is rendered\n        const advance = !selector || document.querySelector(selector);\n        if (advance) {\n          this.tourJoyride.next();\n        } else {\n          const componentExists = setInterval(() => {\n            if (document.querySelector(selector)) {\n              clearInterval(componentExists);\n              this.tourJoyride.next();\n            }\n          }, 200);\n        }\n      } else {\n        this.setState({ run: false });\n      }\n    }\n  }\n\n  render() {\n    const { run, autoStart } = this.state;\n    return (\n      <Overlay show={true}>\n        <ReactJoyride\n          ref={this.onInitJoyride}\n          {...this.props}\n          run={run}\n          autoStart={autoStart}\n          callback={(event) => {\n            if (event.type === 'finished') {\n              this.setState({ run: false, autoStart: false });\n            }\n          }}\n        />\n      </Overlay>\n    );\n  }\n}\n\nexport default GuidedTour;\n","/**\n * ResearchSpace\n * Copyright (C) 2015-2020, © Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { EventMaker } from 'platform/api/events';\n\nexport interface GuidedTourEventData {\n  /**\n   * Event which should be triggered when tour is run.\n   */\n  'GuidedTour.RunIfNotSeen': void;\n  /**\n   * Event which should be triggered when tour is started.\n   */\n  'GuidedTour.Start': void;\n}\nconst event: EventMaker<GuidedTourEventData> = EventMaker;\n\nexport const GuidedTourRunIfNotSeen = event('GuidedTour.RunIfNotSeen');\nexport const GuidedTourStart = event('GuidedTour.Start');\n"],"sourceRoot":""}