{"version":3,"sources":["webpack:///./src/main/web/components/arguments/AssertionsComponent.tsx"],"names":["props","context","noBeliefs","noBeliefForNewValues","_","some","state","newValues","map","value","Maybe","fromNullable","beliefs","get","belief","getOrElse","x","isEmpty","every","b","assertionHeader","subject","field","className","styles","header","ResourceLabel","iri","getPreferredLabel","label","onBeliefChange","isCanonical","onBeliefsChange","remove","targetValue","set","removeBelief","setState","filter","equals","getBeliefValue","forValue","node","AssertionsComponent","deserializeBeliefValue","has","getDefaultBelief","target","toggleAddNewValue","event","preventDefault","addingNewValue","postAction","quickAssertion","keySeq","toJS","formTemplate","Nothing","getChildContext","superContext","templateDataContext","this","capturedDataContext","changeBelief","componentDidMount","capturer","CapturedContext","inheritAndCapture","appliedTemplateScope","compile","then","template","ModuleRegistry","parseHtmlToReact","parentContext","Just","getResult","render","valueTemplate","title","visualizationTemplate","valuesRow","fieldClone","cloneDeep","values","minOccurs","maxOccurs","Panel","Alert","bsStyle","SemanticContextProvider","repository","FieldBasedVisualization","fields","TemplateItem","source","options","normalizeFieldDefinition","isNotCanonical","isJust","ResourceEditorForm","newSubjectTemplate","persistence","browserPersistence","valueHolder","actions","onClick","name","Button","currentModel","persist","initialModel","persistCompositeValue","SimpleBeliefValue","Agree","Map","concat","entries","computeModelDiff","FieldValue","empty","length","find","entry","nestedValues","LdpPersistence","persistModelUpdates","inserted","Kefir","constant","flatten","defaultProps","childContextTypes","Component","ArgumentsContextTypes","TemplateContextTypes","vocabularies","xsd","anyURI","xsdDatatype","Rdf","literal","beliefType","AssertedBeliefTypeKind","originRepository","type","NoOpinion"],"mappings":"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","file":"default~rs-assertion~rs-quick-assertion~rs-simple-assertion-24b16e54c6b6f2647f28.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2015-2020, Â© Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as _ from 'lodash';\nimport * as React from 'react';\nimport { Panel, Button, Alert } from 'react-bootstrap';\nimport * as Kefir from 'kefir';\nimport { Map } from 'immutable';\nimport * as Maybe from 'data.maybe';\n\nimport { Rdf, vocabularies } from 'platform/api/rdf';\nimport { ModuleRegistry } from 'platform/api/module-loader';\nimport { CapturedContext } from 'platform/api/services/template';\n\nimport {\n  Component,\n  ComponentContext,\n  ComponentChildContext,\n  TemplateContext,\n  TemplateContextTypes,\n  SemanticContextProvider,\n} from 'platform/api/components';\nimport { TemplateItem } from 'platform/components/ui/template';\nimport { ResourceLabel } from 'platform/components/ui/resource-label';\n\nimport {\n  ResourceEditorForm,\n  FieldValue,\n  CompositeValue,\n  LdpPersistence,\n  normalizeFieldDefinition,\n  computeModelDiff,\n  getPreferredLabel,\n} from 'platform/components/forms';\nimport { FieldBasedVisualization, FieldDefinitionWithData } from 'platform/components/forms/FieldBasedVisualization';\n\nimport {\n  ArgumentsContext,\n  ArgumentsContextTypes,\n  AssertedBelief,\n  AssertedBeliefTypeKind,\n  ArgumentsFieldDefinition,\n  SimpleBeliefValue,\n} from './ArgumentsApi';\nimport * as styles from './AssertionsComponent.scss';\n\nexport interface AssertionsProps {\n  title: string;\n  field: ArgumentsFieldDefinition;\n  target: Rdf.Iri;\n\n  valueTemplate: string;\n  formTemplate: string;\n\n  /**\n   * Need this to have the ability to start in the adding value mode for the quick assertion workflow,\n   * e.g new image assertion\n   *\n   * @default false\n   */\n  quickAssertion?: boolean;\n\n  beliefs: Map<Rdf.Node, AssertedBelief>;\n  onBeliefsChange: (beliefs: Map<Rdf.Node, AssertedBelief>) => void;\n}\n\ninterface State {\n  addingNewValue: boolean;\n  newValues: Array<Rdf.Node>;\n  formTemplate: Data.Maybe<React.ReactNode>;\n  capturedDataContext?: CapturedContext;\n}\n\nexport class AssertionsComponent extends Component<AssertionsProps, State> {\n  context: ComponentContext & TemplateContext & ArgumentsContext;\n\n  constructor(props: AssertionsProps, context) {\n    super(props, context);\n    this.state = {\n      addingNewValue: props.quickAssertion || false,\n      newValues: props.beliefs\n        .filter((b) => !b.isCanonical)\n        .keySeq()\n        .toJS(),\n      formTemplate: Maybe.Nothing<React.ReactNode>(),\n    };\n  }\n\n  static defaultProps = {\n    quickAssertion: false,\n  };\n\n  static childContextTypes = {\n    ...Component.childContextTypes,\n    ...ArgumentsContextTypes,\n    ...TemplateContextTypes,\n  };\n\n  getChildContext(): ComponentChildContext & ArgumentsContext {\n    const superContext = super.getChildContext();\n    return {\n      ...superContext,\n      templateDataContext: this.state.capturedDataContext,\n      changeBelief: this.onBeliefChange,\n      removeBelief: this.removeBelief,\n      getBeliefValue: this.getBeliefValue,\n    };\n  }\n\n  componentDidMount() {\n    const { templateDataContext } = this.context;\n    const capturer = CapturedContext.inheritAndCapture(templateDataContext);\n    this.appliedTemplateScope\n      .compile(this.props.formTemplate)\n      .then((template) =>\n        ModuleRegistry.parseHtmlToReact(\n          template({ field: this.props.field }, { capturer, parentContext: templateDataContext })\n        )\n      )\n      .then((formTemplate) => {\n        this.setState({\n          formTemplate: Maybe.Just(formTemplate),\n          capturedDataContext: capturer.getResult(),\n        });\n      });\n  }\n\n  render() {\n    const { target, valueTemplate, field, title } = this.props;\n\n    const visualizationTemplate = `\n      <div>\n        {{#each fields as |field|}}\n            {{#each field.values as |value|}}\n              <div data-flex-layout='row center-center' class=${styles.valuesRow}>\n                <div data-flex-self='right'>\n                  ${valueTemplate}\n                </div>\n                <div data-flex-self='right'>\n                  <rs-argument-simple-belief-selector for-value='{{value.value.value}}' is-canonical='{{#if ../../isNotCanonical}}false{{else}}true{{/if}}'>\n                  </rs-argument-simple-belief-selector>\n                </div>\n              </div>\n            {{/each}}\n        {{/each}}\n      </div>\n`;\n\n    const fieldClone = _.cloneDeep(field) as any;\n    fieldClone.values = this.state.newValues.map((value) => ({ value }));\n    fieldClone.minOccurs = 1;\n    fieldClone.maxOccurs = 1;\n\n    return (\n      <Panel header={title}>\n        {this.assertionHeader(target, fieldClone)}\n        <hr />\n        {this.noBeliefs() ? (\n          <Alert bsStyle=\"warning\">\n            <p>\n              <i className=\"fa fa-exclamation-triangle\"></i>\n              <strong>Please add an opinion to at least one value!</strong> Opinions are required for newly asserted\n              values.\n            </p>\n          </Alert>\n        ) : null}\n        <SemanticContextProvider repository=\"default\">\n          <FieldBasedVisualization subject={target.value} template={visualizationTemplate} fields={[fieldClone]} />\n        </SemanticContextProvider>\n        <hr />\n        <TemplateItem\n          template={{\n            source: visualizationTemplate,\n            options: { fields: [normalizeFieldDefinition(_.cloneDeep(fieldClone))], isNotCanonical: true },\n          }}\n        />\n        {_.isEmpty(fieldClone.values) ? null : <hr />}\n        {this.state.addingNewValue && this.state.formTemplate.isJust ? (\n          <SemanticContextProvider repository=\"default\">\n            <ResourceEditorForm\n              newSubjectTemplate={target.value}\n              fields={[fieldClone]}\n              persistence={this}\n              browserPersistence={false}\n              postAction={this.postAction}\n            >\n              <div data-flex-layout=\"column justify-stretch\" className={styles.valueHolder}>\n                <div>{this.state.formTemplate.getOrElse(null)}</div>\n                <div className={styles.actions} data-flex-layout=\"row top-right\">\n                  <button className=\"btn btn-danger\" onClick={this.toggleAddNewValue}>\n                    Cancel\n                  </button>\n                  <button name=\"submit\" className=\"btn btn-success\">\n                    Submit\n                  </button>\n                </div>\n              </div>\n            </ResourceEditorForm>\n          </SemanticContextProvider>\n        ) : (\n          <div data-flex-layout=\"row center-right\">\n            <Button bsStyle=\"link\" onClick={this.toggleAddNewValue}>\n              Add an alternative value ...\n            </Button>\n          </div>\n        )}\n      </Panel>\n    );\n  }\n\n  private noBeliefs = () => {\n    const noBeliefForNewValues = _.some(\n      this.state.newValues.map((value) =>\n        Maybe.fromNullable(this.props.beliefs.get(value))\n          .map((belief) => belief.belief.value === 'No Opinion')\n          .getOrElse(true)\n      ),\n      (x) => x === true\n    );\n    return (\n      this.props.beliefs.isEmpty() ||\n      noBeliefForNewValues ||\n      this.props.beliefs.every((b) => b.belief.value === 'No Opinion')\n    );\n  };\n\n  private assertionHeader = (subject: Rdf.Iri, field: FieldDefinitionWithData) => (\n    <div className={styles.header}>\n      <div className={styles.subject}>\n        <ResourceLabel iri={subject.value} />\n      </div>\n      <div className={styles.field}>{getPreferredLabel(field.label)}</div>\n    </div>\n  );\n\n  private onBeliefChange = (belief: AssertedBelief) => {\n    if (belief.isCanonical && belief.belief.value === 'No Opinion') {\n      this.props.onBeliefsChange(this.props.beliefs.remove(belief.targetValue));\n    } else {\n      this.props.onBeliefsChange(this.props.beliefs.set(belief.targetValue, belief));\n    }\n  };\n\n  private removeBelief = (belief: AssertedBelief) => {\n    this.setState({\n      newValues: _.filter(this.state.newValues, (value) => !value.equals(belief.targetValue)),\n    });\n    this.props.onBeliefsChange(this.props.beliefs.remove(belief.targetValue));\n  };\n\n  private getBeliefValue = (forValue: string, isCanonical: boolean): AssertedBelief => {\n    const node = AssertionsComponent.deserializeBeliefValue(this.props.field, forValue);\n    return this.props.beliefs.has(node)\n      ? this.props.beliefs.get(node)\n      : AssertionsComponent.getDefaultBelief(this.props.target, this.props.field, node, isCanonical, 'default');\n  };\n\n  // TODO use the logic from forms\n  public static deserializeBeliefValue = (field: ArgumentsFieldDefinition, value: string): Rdf.Node => {\n    if (vocabularies.xsd.anyURI.value === field.xsdDatatype) {\n      return Rdf.iri(value);\n    } else {\n      return Rdf.literal(value, Rdf.iri(field.xsdDatatype as string));\n    }\n  };\n\n  public static getDefaultBelief = (\n    target: Rdf.Iri,\n    field: ArgumentsFieldDefinition,\n    value: Rdf.Node,\n    isCanonical: boolean,\n    repository: string\n  ): AssertedBelief => ({\n    iri: Maybe.Nothing<Rdf.Iri>(),\n    beliefType: AssertedBeliefTypeKind,\n    target: target,\n    field: field,\n    targetValue: value,\n    isCanonical: isCanonical,\n    originRepository: repository,\n    belief: {\n      type: 'simple',\n      value: SimpleBeliefValue.NoOpinion,\n    },\n  });\n\n  private toggleAddNewValue = (event?: React.MouseEvent<any>) => {\n    if (event) {\n      event.preventDefault();\n    }\n    this.setState((state) => ({ addingNewValue: !state.addingNewValue }));\n  };\n\n  private postAction = (subject: Rdf.Iri): void => {\n    this.toggleAddNewValue();\n  };\n\n\n  remove(currentModel) {\n    // TODO implement remove assertion\n    return undefined;\n  }\n\n  persist(initialModel: CompositeValue, currentModel: CompositeValue): Kefir.Property<void> {\n    return this.persistCompositeValue(initialModel, currentModel).map((values) => {\n      // for quick assertions workflow we automatically agree with all new values\n      if (this.props.quickAssertion) {\n        const beliefs = values.map((value) => {\n          const belief = AssertionsComponent.getDefaultBelief(\n            this.props.target,\n            this.props.field,\n            value,\n            false,\n            'default'\n          );\n          belief.belief.value = SimpleBeliefValue.Agree;\n          return [value, belief];\n        }) as Array<[Rdf.Node, AssertedBelief]>;\n        this.props.onBeliefsChange(Map(beliefs));\n      }\n\n      this.props.onBeliefsChange(\n        this.props.beliefs.set(\n          values[0],\n          AssertionsComponent.getDefaultBelief(this.props.target, this.props.field, values[0], false, 'default')\n        )\n      );\n      this.setState((state: State) => ({\n        newValues: state.newValues.concat(values),\n      }));\n    });\n  }\n\n  private persistCompositeValue(\n    initialModel: CompositeValue,\n    currentModel: CompositeValue\n  ): Kefir.Property<ReadonlyArray<Rdf.Node>> {\n    const entries = computeModelDiff(FieldValue.empty, currentModel);\n    if (entries.length > 1) {\n      const topLevelFieldValue = _.find(entries, (entry) => entry.subject.equals(this.props.target));\n      const nestedValues = _.filter(entries, (entry) => !entry.subject.equals(this.props.target));\n      return new LdpPersistence()\n        .persistModelUpdates(nestedValues[0].subject, nestedValues)\n        .map(() => topLevelFieldValue.inserted);\n    } else {\n      return Kefir.constant(_.flatten(entries.map((entry) => entry.inserted as Array<Rdf.Node>)));\n    }\n  }\n}\n\nexport default AssertionsComponent;\n"],"sourceRoot":""}