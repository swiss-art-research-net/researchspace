{"version":3,"sources":["webpack:///./src/main/web/components/events/EventTrigger.ts"],"names":["onEvent","e","preventDefault","stopPropagation","trigger","eventType","props","type","source","id","targets","data","render","child","Children","only","this","children","on","reduce","res","action","cloneElement","defaultProps","Component","EventTrigger"],"mappings":"6IAmBA,OAEA,SA8CA,oF,OAqBU,EAAAA,QAAU,SAACC,GACjBA,EAAEC,iBACFD,EAAEE,kBACF,EAAAC,QAAQ,CACNC,UAAW,EAAKC,MAAMC,KACtBC,OAAQ,EAAKF,MAAMG,GACnBC,QAAS,EAAKJ,MAAMI,QACpBC,KAAM,EAAKL,MAAMK,Q,EAGvB,OA/BkC,4BAMhC,uBAAAC,OAAA,sBACQC,EAAQ,EAAAC,SAASC,KAAKC,KAAKV,MAAMW,UACjCX,EAAQU,KAAKV,MAAMY,GAAGC,QAC1B,SAACC,EAAKC,GAMJ,MALc,SAAVA,EACFD,EAAa,QAAI,EAAKpB,QACF,UAAXqB,IACTD,EAAkB,aAAI,EAAKpB,SAEtBoB,IACN,IAEL,OAAO,EAAAE,aAAaT,EAAOP,IAhBtB,aAAAiB,aAAe,CACpBL,GAAI,CAAC,UA4BT,aA/BA,CAAkC,EAAAM,WAArB,EAAAC,eAgCb,UAAeA","file":"mp-event-trigger-c6274c1b573c7039b571.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { Component, Children, ReactElement, cloneElement, MouseEvent } from 'react';\n\nimport { trigger } from 'platform/api/events';\n\ninterface EventTriggerConfig {\n  /**\n   * Identifier which will be used as event source id.\n   */\n  id: string;\n\n  /**\n   * Type of the event to trigger.\n   */\n  type: string;\n\n  /**\n   * Ids of the components that this event should be send to.\n   * When empty event is broadcasted to all listeners.\n   */\n  targets?: string[];\n  /**\n   * Data that will be sent to all targets\n   */\n  data?: any;\n\n  /**\n   * Array of actions to trigger event.\n   *\n   * Can be \"hover\" or \"click\" or both.\n   *\n   * @default [\"click\"]\n   */\n  on?: string[];\n}\ntype EventTriggerProps = EventTriggerConfig;\n\n/**\n * Triggers event.\n *\n * @example\n *   <mp-event-target-refresh id='some-element'><div></div></mp-event-target-refresh>\n *\n *   <mp-event-trigger id='dom-refresh' type='Component.Refresh' targets='[\"some-element\"]'>\n *     <button>Refresh</button>\n *   </mp-event-trigger>\n *\n * In the example above Component.Refresh event is sent to the element with id 'some-element'.\n */\nexport class EventTrigger extends Component<EventTriggerProps, void> {\n\n  static defaultProps = {\n    on: [\"click\"],\n  };\n\n  render() {\n    const child = Children.only(this.props.children) as ReactElement<any>;\n    const props = this.props.on.reduce(\n      (res, action) => {\n        if (action == 'click') {\n          res['onClick'] = this.onEvent;\n        } else if (action === 'hover') {\n          res['onMouseEnter'] = this.onEvent;\n        }\n        return res;\n      }, {}\n    )\n    return cloneElement(child, props);\n  }\n\n  private onEvent = (e: MouseEvent<HTMLElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    trigger({\n      eventType: this.props.type,\n      source: this.props.id,\n      targets: this.props.targets,\n      data: this.props.data,\n    });\n  };\n}\nexport default EventTrigger;\n"],"sourceRoot":""}