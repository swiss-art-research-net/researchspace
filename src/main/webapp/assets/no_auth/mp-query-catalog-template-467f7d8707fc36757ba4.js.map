{"version":3,"sources":["webpack:///./src/main/web/components/sparql-editor/QueryCatalogTemplate.tsx"],"names":["props","context","cancellation","Cancellation","applyingTemplate","derive","fetchAndSetQuery","state","fetchingQuery","queryEditorContext","cancelAll","map","fetchTemplateWithQuery","observe","value","template","query","Boolean","args","find","arg","undefined","defaultValue","showParametrizationDialog","parametrize","setQuery","setState","error","addNotification","level","message","semanticContext","queryTemplateService","QueryTemplateService","queryService","QueryService","render","onClick","this","children","Spinner","spinnerDelay","componentWillUnmount","onSelect","dialogRef","onHide","getOverlaySystem","hide","show","Modal","style","textAlign","Header","Title","Body","Button","bsStyle","marginLeft","params","resultQuery","SparqlUtil","serializeQuery","applyDefaultArguments","parsedQuery","parseQuery","argsWithDefaults","filter","length","bindings","mapValues","keyBy","variable","SparqlClient","setBindings","e","getQueryTemplate","Rdf","iri","flatMap","queryIri","getQuery","toProperty","contextTypes","ContextTypes","Component","QueryCatalogTemplate"],"mappings":"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","file":"mp-query-catalog-template-467f7d8707fc36757ba4.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\nimport * as Kefir from 'kefir';\nimport { keyBy, mapValues } from 'lodash';\nimport * as SparqlJs from 'sparqljs';\nimport { Modal, Button } from 'react-bootstrap';\n\nimport { Component, ComponentContext, ContextTypes } from 'platform/api/components';\nimport { Rdf } from 'platform/api/rdf';\nimport { SparqlUtil, SparqlClient } from 'platform/api/sparql';\nimport { addNotification } from 'platform/components/ui/notification';\nimport { getOverlaySystem } from 'platform/components/ui/overlay';\n\nimport { Cancellation } from 'platform/api/async';\nimport { QueryTemplateService, QueryTemplateServiceClass } from 'platform/api/services/ldp-query-template';\nimport { QueryService, QueryServiceClass, Query } from 'platform/api/services/ldp-query';\nimport { Spinner } from 'platform/components/ui/spinner';\n\nimport { Template } from 'platform/components/query-editor';\nimport {\n  ComponentContext as QueryEditorContext,\n  ContextTypes as QueryEditorContextTypes,\n} from './SparqlQueryEditorContext';\n\nexport interface QueryCatalogTemplateProps {\n  /** Query template IRI. */\n  iri: string;\n}\n\ntype Props = QueryCatalogTemplateProps & React.Props<QueryCatalogTemplate>;\n\ninterface State {\n  readonly fetchingQuery?: boolean;\n}\n\n/**\n * @example\n * <query-catalog-template iri=\"IRI\">\n *   <mp-label iri=\"IRI\"></mp-label>\n * </query-catalog-template>\n */\nexport class QueryCatalogTemplate extends Component<Props, State> {\n  static readonly contextTypes = { ...ContextTypes, ...QueryEditorContextTypes };\n  context: ComponentContext & QueryEditorContext;\n\n  private cancellation = new Cancellation();\n  private applyingTemplate = this.cancellation.derive();\n\n  private queryTemplateService: QueryTemplateServiceClass;\n  private queryService: QueryServiceClass;\n\n  constructor(props: Props, context: any) {\n    super(props, context);\n    this.state = {};\n\n    const { semanticContext } = this.context;\n    this.queryTemplateService = QueryTemplateService(semanticContext);\n    this.queryService = QueryService(semanticContext);\n  }\n\n  render() {\n    return (\n      <div onClick={this.fetchAndSetQuery}>\n        {this.props.children}\n        {this.state.fetchingQuery ? <Spinner spinnerDelay={0} /> : null}\n      </div>\n    );\n  }\n\n  componentWillUnmount() {\n    this.cancellation.cancelAll();\n  }\n\n  private fetchAndSetQuery = () => {\n    if (this.state.fetchingQuery) {\n      return;\n    }\n\n    const { queryEditorContext } = this.context;\n    if (!queryEditorContext) {\n      return;\n    }\n\n    this.applyingTemplate.cancelAll();\n    this.applyingTemplate = this.cancellation.derive();\n    this.applyingTemplate.map(this.fetchTemplateWithQuery()).observe({\n      value: ([template, query]) => {\n        const hasDefaultArguments = Boolean(template.args.find((arg) => arg.defaultValue !== undefined));\n        if (hasDefaultArguments) {\n          this.showParametrizationDialog((parametrize) => {\n            this.setQuery({ query, template, parametrize });\n          });\n        } else {\n          this.setQuery({ query, template, parametrize: false });\n        }\n        this.setState({ fetchingQuery: false });\n      },\n      error: (error) => {\n        addNotification(\n          {\n            level: 'error',\n            message: 'Failed to fetch query template',\n          },\n          error\n        );\n        this.setState({ fetchingQuery: false });\n      },\n    });\n\n    this.setState({ fetchingQuery: true });\n  };\n\n  private showParametrizationDialog(onSelect: (parametrize: boolean) => void) {\n    const dialogRef = 'query-parametrization-dialog';\n    const onHide = () => getOverlaySystem().hide(dialogRef);\n    getOverlaySystem().show(\n      dialogRef,\n      <Modal onHide={onHide} show={true} style={{ textAlign: 'center' }}>\n        <Modal.Header>\n          <Modal.Title>Do you want to apply the default arguments?</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Button\n            bsStyle=\"primary\"\n            onClick={() => {\n              onHide();\n              onSelect(true);\n            }}\n          >\n            Apply\n          </Button>\n          <Button\n            bsStyle=\"default\"\n            style={{ marginLeft: 5 }}\n            onClick={() => {\n              onHide();\n              onSelect(false);\n            }}\n          >\n            Don't Apply\n          </Button>\n        </Modal.Body>\n      </Modal>\n    );\n  }\n\n  private setQuery(params: { query: Query; template: Template; parametrize: boolean }) {\n    const { query, template, parametrize } = params;\n    let resultQuery = query.value;\n    if (parametrize) {\n      try {\n        resultQuery = SparqlUtil.serializeQuery(applyDefaultArguments(query, template));\n      } catch (e) {\n        addNotification(\n          {\n            level: 'warning',\n            message: 'Failed to substitute default values for query template arguments',\n          },\n          e\n        );\n      }\n    }\n    this.context.queryEditorContext.setQuery(resultQuery);\n  }\n\n  private fetchTemplateWithQuery(): Kefir.Property<[Template, Query]> {\n    return this.queryTemplateService\n      .getQueryTemplate(Rdf.iri(this.props.iri))\n      .flatMap(({ template, queryIri }) =>\n        this.queryService.getQuery(Rdf.iri(queryIri)).map((query): [Template, Query] => [template, query])\n      )\n      .toProperty();\n  }\n}\n\nfunction applyDefaultArguments(query: Query, template: Template): SparqlJs.SparqlQuery {\n  const parsedQuery = SparqlUtil.parseQuery(query.value);\n  const argsWithDefaults = template.args.filter((arg) => Boolean(arg.defaultValue));\n  if (argsWithDefaults.length === 0) {\n    return parsedQuery;\n  }\n  const bindings = mapValues(\n    keyBy(argsWithDefaults, (arg) => arg.variable),\n    (arg) => arg.defaultValue\n  );\n  return SparqlClient.setBindings(parsedQuery, bindings);\n}\n\nexport default QueryCatalogTemplate;\n"],"sourceRoot":""}