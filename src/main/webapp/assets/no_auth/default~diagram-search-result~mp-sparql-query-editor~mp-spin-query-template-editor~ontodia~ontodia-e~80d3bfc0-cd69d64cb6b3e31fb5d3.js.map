{"version":3,"sources":["webpack:///./src/main/web/components/forms/inputs/Decorations.tsx"],"names":["render","className","this","props","errors","map","err","index","key","classnames","VALIDATION_CLASS","errorClassName","FieldError","kindToString","kind","message","Component","ValidationMessages","DECORATOR_CLASS","renderHeader","children","definition","dataState","label","isRequired","minOccurs","isReady","DataState","Ready","length","getPreferredLabel","title","description","OverlayTrigger","trigger","overlay","Popover","id","Spinner","spinnerDelay","messageDelay","defaultProps","InputDecorator"],"mappings":"4IAkBA,OACA,QACA,OAEA,QAEA,SAEA,UACA,UASA,4C,+CAgBA,OAhBwC,kCACtC,6BAAAA,OAAA,WAEE,OACE,sBAAIC,UANe,qCAOhBC,KAAKC,MAAMC,OAAOC,KAAI,SAACC,EAAKC,GAAU,OACrC,sBACEC,IAAKD,EACLN,UAAWQ,EANOC,2CAMuBC,6CAAmB,EAAAC,WAAWC,aAAaP,EAAIQ,QAEvFR,EAAIS,cAMjB,mBAhBA,CAAwC,EAAAC,WAA3B,EAAAC,qBAkBb,IAAMC,EAAkB,gCAExB,wC,+CA6CA,OA7CoC,8BAKlC,yBAAAlB,OAAA,W,MACQ,aAAEmB,EAAA,EAAAA,aAAcf,EAAA,EAAAA,OAChBH,EAAYQ,EAAWS,IAAe,MACtCA,EAAe,iBAAkBC,E,IAEvC,OACE,uBAAKlB,UAAWA,GACbkB,EAAejB,KAAKiB,eAAiB,KACrCjB,KAAKC,MAAMiB,SACZ,gBAACH,EAAkB,CAACb,OAAQA,MAK1B,yBAAAe,aAAR,WACQ,iBAAEE,EAAA,EAAAA,WAAYC,EAAA,EAAAA,UAAWC,EAAA,EAAAA,MACzBC,EAAsC,IAAzBH,EAAWI,UACxBC,EAAUJ,IAAc,EAAAK,UAAUC,MACxC,OACE,uBAAK3B,UAAciB,EAAe,YAC9BG,EAAWE,OAASF,EAAWE,MAAMM,QAAWN,EAChD,wBAAMtB,UAAciB,EAAe,WAChCK,GAAgB,EAAAO,kBAAkBT,EAAWE,OAC7CC,EAAa,wBAAMvB,UAAciB,EAAe,mBAAoBa,MAAM,mBAAsB,MAEjG,KACHV,EAAWW,YACV,gBAAC,EAAAC,eAAc,CACbC,QAAS,CAAC,QAAS,SACnBC,QAAS,gBAAC,EAAAC,QAAO,CAACC,GAAG,WAAWhB,EAAWW,cAE3C,uBAAK/B,UAAciB,EAAe,wBAElC,KACHQ,EAAU,KACT,gBAAC,EAAAY,QAAO,CAACrC,UAAciB,EAAe,YAAaqB,aAAc,IAAMC,aAAc,QAvCtF,eAAAC,aAA6C,CAClDtB,cAAc,GA2ClB,eA7CA,CAAoC,EAAAH,WAAvB,EAAA0B","file":"default~diagram-search-result~mp-sparql-query-editor~mp-spin-query-template-editor~ontodia~ontodia-e~80d3bfc0-cd69d64cb6b3e31fb5d3.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\nimport { Popover, OverlayTrigger } from 'react-bootstrap';\nimport * as classnames from 'classnames';\n\nimport { Component } from 'platform/api/components';\n\nimport { Spinner } from 'platform/components/ui/spinner';\n\nimport { getPreferredLabel } from '../FieldDefinition';\nimport { DataState, FieldError } from '../FieldValues';\nimport { MultipleValuesProps } from './MultipleValuesInput';\n\nexport interface ValidationMessagesProps {\n  errors: Immutable.List<FieldError>;\n}\n\nconst VALIDATION_CLASS = 'semantic-form-validation-messages';\n\nexport class ValidationMessages extends Component<ValidationMessagesProps, {}> {\n  render() {\n    const errorClassName = `${VALIDATION_CLASS}__error`;\n    return (\n      <ul className={VALIDATION_CLASS}>\n        {this.props.errors.map((err, index) => (\n          <li\n            key={index}\n            className={classnames(errorClassName, `${errorClassName}--${FieldError.kindToString(err.kind)}`)}\n          >\n            {err.message}\n          </li>\n        ))}\n      </ul>\n    );\n  }\n}\n\nconst DECORATOR_CLASS = 'semantic-form-input-decorator';\n\nexport class InputDecorator extends Component<MultipleValuesProps, {}> {\n  static defaultProps: Partial<MultipleValuesProps> = {\n    renderHeader: true,\n  };\n\n  render() {\n    const { renderHeader, errors } = this.props;\n    const className = classnames(DECORATOR_CLASS, {\n      [`${DECORATOR_CLASS}--with-header`]: renderHeader,\n    });\n    return (\n      <div className={className}>\n        {renderHeader ? this.renderHeader() : null}\n        {this.props.children}\n        <ValidationMessages errors={errors} />\n      </div>\n    );\n  }\n\n  private renderHeader() {\n    const { definition, dataState, label } = this.props;\n    const isRequired = definition.minOccurs !== 0;\n    const isReady = dataState === DataState.Ready;\n    return (\n      <div className={`${DECORATOR_CLASS}__header`}>\n        {(definition.label && definition.label.length) || label ? (\n          <span className={`${DECORATOR_CLASS}__label`}>\n            {label ? label : getPreferredLabel(definition.label)}\n            {isRequired ? <span className={`${DECORATOR_CLASS}__label-required`} title=\"Required field\" /> : null}\n          </span>\n        ) : null}\n        {definition.description ? (\n          <OverlayTrigger\n            trigger={['hover', 'focus']}\n            overlay={<Popover id=\"tooltip\">{definition.description}</Popover>}\n          >\n            <sup className={`${DECORATOR_CLASS}__description-icon`} />\n          </OverlayTrigger>\n        ) : null}\n        {isReady ? null : (\n          <Spinner className={`${DECORATOR_CLASS}__spinner`} spinnerDelay={1000} messageDelay={30000} />\n        )}\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""}