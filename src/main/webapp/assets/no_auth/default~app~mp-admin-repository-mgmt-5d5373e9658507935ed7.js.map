{"version":3,"sources":["webpack:///./src/main/web/components/admin/repositories/TurtleEditor.ts","webpack:///./src/main/web/components/admin/repositories/RepositoryConfigEditor.tsx"],"names":["props","context","onChangeTurtle","editor","editorChange","source","onChange","setState","getTurtle","state","turtleString","componentWillReceiveProps","nextProps","this","render","React","createElement","className","value","onBeforeChange","options","foldGutter","textAreaClassName","matchTags","bothTags","matchBrackets","mode","indentWithTabs","indentUnit","tabSize","viewportMargin","Infinity","lineNumbers","lineWrapping","gutters","Component","TurtleEditorComponent","cancellation","Cancellation","fetchConfig","id","responseError","undefined","loadingError","submittedSuccessfully","validateConfiguration","map","getRepositoryConfig","observe","config","error","handleNewRepositoryID","e","preventDefault","stopPropagation","newRepositoryID","target","getNewRepositoryIDValidation","isEditMode","reg","RegExp","length","test","onSubmitConfig","turtle","refs","updateOrAddRepositoryConfig","onValue","v","refresh","onError","console","log","renderTemplateSelector","repositoryTemplates","Spinner","items","MenuItem","eventKey","key","DropdownButton","bsStyle","title","onSelect","onTemplateSelected","selectTemplate","templateId","getRepositoryConfigTemplate","executeDeleteRepository","deleteRepositoryConfig","onDeleteRepository","dialogRef","hideDialog","getOverlaySystem","hide","message","onHide","onConfirm","confirm","show","ConfirmationDialog","componentDidMount","preselectedTemplate","componentWillUnmount","cancelAll","showRestartPrompt","reloadPageOnSuccess","initializerMode","Alert","styles","holder","Form","horizontal","FormGroup","formGroup","validationState","FormControl","type","placeholder","HelpBlock","ref","checked","disabled","Button","ActionButton","onClick","window","location","reload","defaultProps","RepositoryConfigEditor"],"mappings":"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","file":"default~app~mp-admin-repository-mgmt-5d5373e9658507935ed7.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as React from 'react';\n\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/mode/turtle/turtle';\n\nimport 'codemirror/addon/fold/foldcode';\nimport 'codemirror/addon/fold/brace-fold';\nimport 'codemirror/addon/fold/indent-fold';\nimport 'codemirror/addon/edit/matchtags';\nimport 'codemirror/addon/edit/matchbrackets';\n\nimport { Controlled as ReactCodeMirror } from 'react-codemirror2';\n\ninterface Props {\n  turtleString: string;\n  onChange?: (turtle: string) => void;\n}\n\nexport class TurtleEditorComponent extends React.Component<Props, { source: string }> {\n  constructor(props: Props, context: any) {\n    super(props, context);\n    this.state = {\n      source: props.turtleString ? props.turtleString : '',\n    };\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    if (this.props.turtleString !== nextProps.turtleString) {\n      this.setState({ source: nextProps.turtleString });\n    }\n  }\n\n  public render() {\n    const codeMirrorAddonOptions = {\n      foldGutter: false,\n      textAreaClassName: ['form-control'],\n      matchTags: { bothTags: true },\n      matchBrackets: true,\n    };\n    return React.createElement(ReactCodeMirror, {\n      className: 'turtle-editor',\n      value: this.state.source,\n      onBeforeChange: this.onChangeTurtle,\n      options: {\n        ...codeMirrorAddonOptions,\n        mode: 'text/turtle',\n        indentWithTabs: false,\n        indentUnit: 2,\n        tabSize: 2,\n        viewportMargin: Infinity,\n        lineNumbers: true,\n        lineWrapping: true,\n        gutters: ['CodeMirror-linenumbers'],\n      },\n    });\n  }\n\n  onChangeTurtle = (editor: {}, editorChange: {}, source: string) => {\n    if (this.props.onChange) {\n      this.props.onChange(source);\n    } else {\n      this.setState({\n        source: source,\n      });\n    }\n  };\n\n  public getTurtle = () => {\n    return this.state.source;\n  };\n}\n\nexport default TurtleEditorComponent;\n","/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\nimport { Button, Alert, DropdownButton, MenuItem, FormControl, Form, FormGroup, HelpBlock } from 'react-bootstrap';\nimport { createElement } from 'react';\nimport { Cancellation } from 'platform/api/async';\nimport { Component } from 'platform/api/components';\nimport { refresh } from 'platform/api/navigation';\n\nimport { Spinner } from 'platform/components/ui/spinner';\nimport {\n  getRepositoryConfig,\n  getRepositoryConfigTemplate,\n  updateOrAddRepositoryConfig,\n  deleteRepositoryConfig,\n} from 'platform/api/services/repository';\nimport { ConfirmationDialog } from 'platform/components/ui/confirmation-dialog';\nimport * as styles from './RepositoryConfigEditor.scss';\nimport { TurtleEditorComponent } from './TurtleEditor';\nimport { getOverlaySystem } from 'platform/components/ui/overlay';\n\ninterface Props {\n  id?: string;\n  repositoryTemplates?: string[];\n  showRestartPrompt?: boolean;\n  preselectedTemplate?: string;\n  reloadPageOnSuccess?: boolean;\n  initializerMode?: boolean; // true if editor is used from RepositoryConfigInitializer\n}\n\ninterface State {\n  readonly source?: string;\n  readonly loadingError?: any;\n  readonly responseError?: any;\n  readonly submittedSuccessfully?: boolean;\n  readonly newRepositoryID?: string;\n  readonly validateConfiguration?: boolean;\n}\n\ntype ValidationState = 'warning' | 'error' | 'success';\n\nconst SUCCESS_MESSAGE = 'The repository configuration was updated.';\n\nexport class RepositoryConfigEditor extends Component<Props, State> {\n  private readonly cancellation = new Cancellation();\n  static defaultProps = {\n    id: undefined,\n    repositoryTemplates: [],\n    showRestartPrompt: false,\n    preselectedTemplate: undefined,\n    reloadPageOnSuccess: false,\n    initializerMode: false,\n  };\n  constructor(props: Props, context: any) {\n    super(props, context);\n    this.state = {\n      validateConfiguration: true,\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.preselectedTemplate) {\n      this.selectTemplate(this.props.preselectedTemplate);\n    } else {\n      this.fetchConfig(this.props.id);\n    }\n  }\n\n  fetchConfig = (id: string) => {\n    this.setState({\n      responseError: undefined,\n      loadingError: undefined,\n      submittedSuccessfully: false,\n      validateConfiguration: true,\n    });\n    if (!id) {\n      this.setState({\n        source: undefined,\n      });\n      return;\n    }\n    this.cancellation.map(getRepositoryConfig(id)).observe({\n      value: (config) =>\n        this.setState({\n          source: config,\n        }),\n      error: (loadingError) => this.setState({ loadingError }),\n    });\n  };\n\n  componentWillReceiveProps(nextProps: Props) {\n    if (this.props.id !== nextProps.id) {\n      this.fetchConfig(nextProps.id);\n    }\n  }\n\n  componentWillUnmount() {\n    this.cancellation.cancelAll();\n  }\n\n  render() {\n    const { source, loadingError, responseError, submittedSuccessfully } = this.state;\n    const { showRestartPrompt, reloadPageOnSuccess, initializerMode } = this.props;\n\n    if (loadingError) {\n      return <Alert bsStyle=\"info\"> {loadingError} </Alert>;\n    }\n\n    if (this.isEditMode() && !source) {\n      return <Spinner />;\n    }\n\n    return (\n      <div data-flex-layout=\"column top-left\" className={styles.holder}>\n        <div>\n          <h4>{this.isEditMode() ? `Edit Repository Config \"${this.props.id}\"` : `Create new Repository Config`}</h4>\n        </div>\n        {!this.isEditMode() && (\n          <div>\n            <Form horizontal>\n              <FormGroup className={styles.formGroup} validationState={this.getNewRepositoryIDValidation()}>\n                <strong> Repository ID:</strong>\n                <br />\n                <FormControl\n                  className={styles.formGroup}\n                  type=\"text\"\n                  value={this.state.newRepositoryID}\n                  onChange={this.handleNewRepositoryID}\n                  placeholder=\"Please specify a new and unique repository id.\"\n                />\n                {this.getNewRepositoryIDValidation() && (\n                  <HelpBlock>Repository ID must be a unique, alphanumeric string of length >= 5 characters.</HelpBlock>\n                )}\n              </FormGroup>\n            </Form>\n          </div>\n        )}\n        <div>{this.renderTemplateSelector()}</div>\n        <div>\n          <TurtleEditorComponent\n            ref=\"editor\"\n            turtleString={source ? source : `#Please select a template to create a new repository configuration`}\n          />\n          <div>\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={this.state.validateConfiguration}\n                onChange={() =>\n                  this.setState(\n                    ({ validateConfiguration }): State => ({ validateConfiguration: !validateConfiguration })\n                  )\n                }\n                disabled={this.props.id === 'default'}\n              />{' '}\n              Validate configuration\n            </label>\n          </div>\n          <Button\n            bsStyle=\"primary\"\n            className={styles.ActionButton}\n            disabled={!this.isEditMode() && this.getNewRepositoryIDValidation() !== 'success'}\n            onClick={this.onSubmitConfig}\n          >\n            {this.isEditMode() ? 'Update Config' : 'Create Config'}\n          </Button>\n          {this.isEditMode() && !initializerMode && (\n            <Button\n              bsStyle=\"danger\"\n              className={styles.ActionButton}\n              onClick={() => this.onDeleteRepository(this.props.id)}\n            >\n              Delete\n            </Button>\n          )}\n          {responseError && <Alert bsStyle=\"danger\"> {responseError} </Alert>}\n          {reloadPageOnSuccess && submittedSuccessfully && window.location.reload()}\n          {showRestartPrompt && submittedSuccessfully && <Alert bsStyle=\"success\"> {SUCCESS_MESSAGE} </Alert>}\n        </div>\n      </div>\n    );\n  }\n\n  handleNewRepositoryID = (e: React.SyntheticEvent<any>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    this.setState({ newRepositoryID: (e.target as any).value });\n  };\n\n  getNewRepositoryIDValidation = (): ValidationState => {\n    if (this.isEditMode()) {\n      return undefined;\n    }\n    const id = this.state.newRepositoryID;\n    const reg = new RegExp('');\n    if (!id || id.length < 5 || !reg.test(id)) {\n      return 'warning';\n    }\n    return 'success';\n  };\n\n  onSubmitConfig = () => {\n    const id = this.props.id ? this.props.id : this.state.newRepositoryID;\n    const turtle = (this.refs['editor'] as TurtleEditorComponent).getTurtle();\n    updateOrAddRepositoryConfig(id, turtle, this.state.validateConfiguration)\n      .onValue((v) => {\n        this.setState({\n          responseError: undefined,\n          submittedSuccessfully: true,\n        });\n        refresh();\n      })\n      .onError((error) => {\n        console.log(error);\n        this.setState({\n          responseError: error,\n          submittedSuccessfully: false,\n        });\n      });\n  };\n\n  isEditMode = () => {\n    return this.props.id ? true : false;\n  };\n\n  renderTemplateSelector = () => {\n    const { repositoryTemplates } = this.props;\n    if (!repositoryTemplates) {\n      return <Spinner />;\n    }\n    const items = repositoryTemplates.map((id) => {\n      return (\n        <MenuItem eventKey={id} key={id}>\n          {id}\n        </MenuItem>\n      );\n    });\n    return (\n      <DropdownButton\n        bsStyle=\"default\"\n        title=\"From template ....\"\n        onSelect={this.onTemplateSelected}\n        id=\"template-dropdown\"\n      >\n        {items}\n      </DropdownButton>\n    );\n  };\n\n  selectTemplate = (templateId) => {\n    this.cancellation.map(getRepositoryConfigTemplate(templateId)).observe({\n      value: (value) => {\n        this.setState({ source: value, submittedSuccessfully: false });\n      },\n      error: (error) => this.setState({ loadingError: error, submittedSuccessfully: false }),\n    });\n  };\n\n  onTemplateSelected = (eventKey: any, e?: React.SyntheticEvent<{}>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    this.selectTemplate(eventKey);\n  };\n\n  executeDeleteRepository = (id) => {\n    deleteRepositoryConfig(id).observe({\n      value: () => {\n        this.setState({\n          responseError: undefined,\n          submittedSuccessfully: true,\n        });\n        refresh();\n      },\n      error: (error) => {\n        this.setState({\n          responseError: error,\n          submittedSuccessfully: false,\n        });\n      },\n    });\n  };\n\n  onDeleteRepository = (id: string) => {\n    const dialogRef = 'delete-repository-confirmation';\n    const hideDialog = () => getOverlaySystem().hide(dialogRef);\n    const props = {\n      message: `Do you want to delete the \"${id}\" repository?`,\n      onHide: () => {\n        hideDialog();\n      },\n      onConfirm: (confirm) => {\n        hideDialog();\n        if (confirm) {\n          this.executeDeleteRepository(id);\n        }\n      },\n    };\n    getOverlaySystem().show(dialogRef, createElement(ConfirmationDialog, props));\n  };\n}\n\nexport default RepositoryConfigEditor;\n"],"sourceRoot":""}