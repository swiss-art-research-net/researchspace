{"version":3,"sources":["webpack:///./src/main/web/components/forms/inputs/drop/DragAndDropInput.tsx","webpack:///./src/main/web/components/forms/inputs/drop/DragAndDropInputEvents.ts"],"names":["props","context","cancelation","Cancellation","dropMessage","TemplateItem","template","source","dropAreaTemplate","renderPlaceholderCard","canCreateNew","componentProps","onClick","onCreateNew","placeholderItemTemplate","options","setState","state","nestedFormOpen","onNestedFormSubmit","value","addAndValidate","onDrop","iri","values","findIndex","v","FieldValue","isAtomic","isIri","equals","fromLabeled","isEmpty","Immutable","List","push","updateValues","handler","errors","validate","onRemoveItem","iriString","Rdf","itemIndex","remove","onItemDragStart","draggingItem","onItemDragEnd","id","uuid","v4","componentDidMount","this","map","listen","eventType","RemoveItemEvent","target","onValue","event","data","render","nestedForm","tryExtractNestedForm","children","Boolean","className","styles","holder","readonly","renderItems","React","Fragment","DropArea","shouldReactToDrag","definition","maxOccurs","filter","size","query","createDropAskQueryForField","NestedModalForm","onSubmit","onCancel","every","renderHeader","itemArea","shouldRenderPlacheldorCard","Draggable","key","onDragStart","onDragEnd","itemTemplate","inputId","Error","defaultProps","MultipleValuesInput","DragAndDropInput","EventMaker"],"mappings":"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","file":"semantic-form-drag-and-drop-input-b51ec820a1693f9c0699.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as React from 'react';\nimport * as Immutable from 'immutable';\nimport * as uuid from 'uuid';\n\nimport { Rdf } from 'platform/api/rdf';\nimport { listen } from 'platform/api/events';\nimport { Cancellation } from 'platform/api/async';\n\nimport { DropArea } from 'platform/components/dnd/DropArea';\nimport { Draggable } from 'platform/components/dnd';\n\nimport { TemplateItem } from 'platform/components/ui/template';\nimport { FieldValue, AtomicValue } from '../../FieldValues';\nimport {\n  MultipleValuesInput,\n  MultipleValuesProps,\n} from '../MultipleValuesInput';\n\nimport { createDropAskQueryForField } from '../../ValidationHelpers';\nimport { NestedModalForm, tryExtractNestedForm } from '../NestedModalForm';\n\nimport { RemoveItemEvent } from './DragAndDropInputEvents';\nimport * as styles from './DragAndDropInput.scss';\n\n\nexport interface DragAndDropInputProps extends MultipleValuesProps {\n  /**\n   * Element id that is used in event system.\n   * If not specified random UUID is generated instead.\n   */\n  id?: string\n\n  /**\n   * Template that is rendered when dragged item can be accepted by the input.\n   *\n   * Available variables:\n   *  * canCreateNew - if there is nested semantic-form that can be used to create/edit entity\n   */\n  dropAreaTemplate?: string;\n\n  /**\n   * Template for placeholder card.\n   *\n   * @default\n   * <div class='DragAndDropInput--placeholderContainer'>\n   *    Drop item here\n   *    {{#if canCreateNew}}\n   *      or click to create a new item\n   *    {{/if}}\n   * </div>\n   *\n   */\n  placeholderItemTemplate?: string;\n\n  /**\n   * Template for value item card.\n   *\n   * Available variables:\n   *  * iri - iri string of the current value\n   *  * inputId - current input id, can be used to trigger events on the input\n   */\n  itemTemplate?: string\n}\n\ninterface State {\n  /**\n   * We track if item that is already inside droppable area is dragged to disable the area.\n   */\n  draggingItem: boolean;\n\n  /**\n   * true if nested form is currently in open state.\n   */\n  nestedFormOpen: boolean;\n\n  /**\n   * Component id, automatically generated if not propagated from props.\n   */\n  id: string;\n}\n\n/**\n *\n */\nexport class DragAndDropInput extends MultipleValuesInput<DragAndDropInputProps, State> {\n  private cancelation = new Cancellation();\n\n  static defaultProps: Partial<DragAndDropInputProps> = {\n    dropAreaTemplate: '<span>Drop item here to add it</span>',\n    placeholderItemTemplate: `\n      <div class='DragAndDropInput--placeholderContainer'>\n        Drop item here\n        {{#if canCreateNew}}\n          or click to create a new item\n        {{/if}}\n      </div>\n    `,\n    itemTemplate: `\n        {{#> rsp:itemCardTemplate width=105 height=125 cardMargin=4 footer-paddingY=7 footer-paddingX=8}}\n          {{#*inline \"additionalActions\"}}\n            <div class=\"rs-default-card__hover-icon\">\n              <mp-event-trigger type='Form.DragAndDropInput.RemoveItem' targets='[\"{{inputId}}\"]' data='{\"iri\": \"{{iri}}\"}'>\n                <button type=\"button\" class=\"rs-button\" title=\"Remove Value\">\n                  <i class=\"rs-icon rs-icon-delete_round\"></i>\n                </button>\n              </mp-event-trigger>\n            </div>\n          {{/inline}}\n        {{/rsp:itemCardTemplate}}\n    `\n  }\n\n  constructor(props: DragAndDropInputProps, context: any) {\n    super(props, context);\n    this.state = {\n      draggingItem: false,\n      nestedFormOpen: false,\n      id: this.props.id || uuid.v4(),\n    };\n  }\n\n  componentDidMount() {\n    this.cancelation\n      .map(\n        listen({\n          eventType: RemoveItemEvent,\n          target: this.state.id,\n        })\n      )\n      .onValue((event) => this.onRemoveItem(event.data.iri));\n  }\n\n  render() {\n    const nestedForm = tryExtractNestedForm(this.props.children);\n    const canCreateNew = Boolean(nestedForm);\n    return (\n      <div className={styles.holder}>\n        {\n          this.props.readonly ? this.renderItems(false) :\n          (\n            <React.Fragment>\n              <DropArea\n                shouldReactToDrag={() => !this.state.draggingItem && this.props.definition.maxOccurs != this.props.values.filter(v => !FieldValue.isEmpty(v)).size}\n                query={createDropAskQueryForField(this.props.definition)}\n                onDrop={this.onDrop}\n                dropMessage={this.dropMessage()}\n              >\n                {this.renderItems(canCreateNew)}\n              </DropArea>\n              {\n                this.state.nestedFormOpen ? (\n                  <NestedModalForm\n                    definition={this.props.definition}\n                    onSubmit={this.onNestedFormSubmit}\n                    onCancel={() => this.setState({ nestedFormOpen: false })}\n                  >\n                    {nestedForm}\n                  </NestedModalForm>\n                ): null\n              }\n            </React.Fragment>\n          )\n        }\n      </div>\n    );\n  }\n\n  private isEmpty() {\n    return this.props.values.isEmpty() || this.props.values.every(FieldValue.isEmpty);\n  }\n\n  private dropMessage = () => <TemplateItem template={{ source: this.props.dropAreaTemplate }} />;\n\n  private renderPlaceholderCard = (canCreateNew: boolean) => {\n    const componentProps =\n      canCreateNew ? { onClick: this.onCreateNew } : {};\n    return (\n      <TemplateItem\n        template={{\n          source: this.props.placeholderItemTemplate,\n          options: {\n            canCreateNew\n          }\n        }}\n        componentProps={componentProps}\n      />\n    );\n  }\n\n  private renderItems(canCreateNew: boolean) {\n    const className =\n      this.props.renderHeader === false ?\n      `${styles.itemArea} ${styles['itemArea--no-header']}` : styles.itemArea ;\n\n    const shouldRenderPlacheldorCard =\n      !this.props.readonly &&\n      (this.props.values.filter(v => !FieldValue.isEmpty(v)).size < this.props.definition.maxOccurs);\n\n    return (\n      <div className={className}>\n        {\n          this.props.values.map(v => {\n            if (FieldValue.isAtomic(v) && v.value.isIri) {\n              return (\n                <Draggable iri={v.value.value}\n                  key={v.value.value}\n                  onDragStart={this.onItemDragStart}\n                  onDragEnd={this.onItemDragEnd}\n                >\n                  <div>\n                    <TemplateItem\n                      template={{\n                        source: this.props.itemTemplate,\n                        options: { iri: v.value.value, inputId: this.state.id }\n                      }}\n                    />\n                  </div>\n                </Draggable>\n              );\n            } else if (FieldValue.isEmpty(v)) {\n              return null;\n            } else {\n              throw new Error('Only atomic IRI values are supported by DragAndDropInput');\n            }\n          })\n        }\n        {shouldRenderPlacheldorCard ? this.renderPlaceholderCard(canCreateNew) : null}\n      </div>\n    );\n  }\n\n  private onCreateNew = () => {\n    this.setState((state) => ({ nestedFormOpen: !state.nestedFormOpen }));\n  }\n\n  private onNestedFormSubmit = (value: AtomicValue) => {\n    this.setState({ nestedFormOpen: false });\n    this.addAndValidate(value);\n  };\n\n\n  private onDrop = (iri: Rdf.Iri) => {\n    const exists =\n      this.props.values.findIndex(\n        v => FieldValue.isAtomic(v) && v.value.isIri() && v.value.equals(iri)\n      ) >= 0;\n    if (!exists) {\n      const value = FieldValue.fromLabeled({ value: iri });\n      this.addAndValidate(value);\n    }\n  }\n\n  private addAndValidate = (value: AtomicValue) => {\n    const values = this.isEmpty() ? Immutable.List<FieldValue>([value]) : this.props.values.push(value);\n    const { updateValues, handler } = this.props;\n    updateValues(({ errors }) => handler.validate({ values, errors }));\n  }\n\n  private onRemoveItem = (iriString: string) => {\n    const iri = Rdf.iri(iriString);\n    const itemIndex =\n      this.props.values.findIndex(\n        v => FieldValue.isAtomic(v) && v.value.isIri() && v.value.equals(iri)\n      );\n    const values = this.props.values.remove(itemIndex)\n    const { updateValues, handler } = this.props;\n    updateValues(({ errors }) => handler.validate({ values, errors }));\n\n  }\n\n  private onItemDragStart = () => this.setState({ draggingItem: true });\n  private onItemDragEnd = () => this.setState({ draggingItem: false });\n}\n\nexport default DragAndDropInput;\n","/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { EventMaker } from 'platform/api/events';\n\n\nexport interface DragAndDropInputEventData {\n  'Form.DragAndDropInput.RemoveItem': {iri: string}\n}\n\nconst event: EventMaker<DragAndDropInputEventData> = EventMaker;\n\nexport const RemoveItemEvent = event('Form.DragAndDropInput.RemoveItem');\n"],"sourceRoot":""}