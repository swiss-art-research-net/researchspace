{"version":3,"sources":["webpack:///./src/main/web/components/common/ShareComponent.tsx"],"names":["visibility","public","vocabularies","VocabPlatform","publicVisibility","value","private","privateVisibility","shared","sharedVisibility","group","groupVisibility","DEFAULT_GROUPS_QUERY","props","context","renderGroupSelector","AutoCompletionInput","className","placeholder","state","groups","query","defaultQuery","actions","onSelected","onGroupsSelected","multi","isSelected","s","onClick","evt","target","stream","LdpService","setVisibility","getCurrentResource","Rdf","iri","onValue","r","setState","notifyVisibilityChange","onError","error","errorMessage","maybe","Just","selectGroups","iriString","SparqlClient","select","visibleToGroups","res","results","bindings","_","map","binding","addNotification","message","level","autoDismiss","Nothing","componentDidMount","this","vis","render","id","keys","v","key","type","name","checked","upperFirst","Component","ShareComponent"],"mappings":"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","file":"rs-visibility-5f87de4d38a2d48dff0c.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2015-2020, Â© Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as React from 'react';\nimport { Component, MouseEvent } from 'react';\nimport * as _ from 'lodash';\nimport * as maybe from 'data.maybe';\n\nimport { Rdf, vocabularies } from 'platform/api/rdf';\nimport { SparqlClient } from 'platform/api/sparql';\nimport { LdpService } from 'platform/api/services/ldp';\nimport { getCurrentResource } from 'platform/api/navigation';\nimport { getOverlaySystem } from 'platform/components/ui/overlay';\nimport { addNotification } from 'platform/components/ui/notification';\nimport { AutoCompletionInput } from 'platform/components/ui/inputs';\n\nimport './share-component.scss';\n\nconst visibility = {\n  public: vocabularies.VocabPlatform.publicVisibility.value,\n  private: vocabularies.VocabPlatform.privateVisibility.value,\n  shared: vocabularies.VocabPlatform.sharedVisibility.value,\n  group: vocabularies.VocabPlatform.groupVisibility.value,\n};\n\ninterface Props {\n  iri?: string; // optional, if visibility should be set for a different resource (default:this)\n}\n\ninterface State {\n  visibility?: string;\n  groups?: SparqlClient.Bindings;\n  errorMessage?: Data.Maybe<string>;\n}\n\nconst DEFAULT_GROUPS_QUERY = `\n  SELECT ?value ?label {\n    ?value a Platform:Group .\n    ?value rdfs:label ?label .\n  }\n`;\n\nexport class ShareComponent extends Component<Props, State> {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      visibility: visibility.private,\n      errorMessage: maybe.Nothing<string>(),\n      groups: [],\n    };\n  }\n\n  componentDidMount() {\n    const iriString = this.props.iri || getCurrentResource().value;\n    const query = SparqlClient.select(\n      `SELECT ?visibility WHERE {\n         OPTIONAL { <${iriString}> <${vocabularies.VocabPlatform.visibility.value}> ?vis }\n         BIND(COALESCE(?vis, <${vocabularies.VocabPlatform.privateVisibility.value}>) as ?visibility).\n      }`\n    );\n\n    query\n      .onValue((res) => {\n        const vis = res.results.bindings[0].visibility.value;\n        this.setState({ visibility: vis });\n\n        if (vis === visibility.group) {\n          this.selectGroups(iriString);\n        }\n      })\n      .onError((error) => this.setState({ visibility: visibility.private, errorMessage: maybe.Just(error) }));\n  }\n\n  render() {\n    return (\n      <div className=\"share-component\">\n        <fieldset id=\"visibility-input\">\n          {_.keys(visibility).map((v) => (\n            <div className=\"radio\">\n              <label className=\"control-label\" key={'visibility' + v}>\n                <input\n                  type=\"radio\"\n                  name=\"visibility\"\n                  value={visibility[v]}\n                  onClick={this.onClick}\n                  checked={this.isSelected(visibility[v])}\n                />\n                {_.upperFirst(v)}\n              </label>\n              {visibility[v] === visibility.group && this.isSelected(visibility.group)\n                ? this.renderGroupSelector()\n                : null}\n            </div>\n          ))}\n        </fieldset>\n      </div>\n    );\n  }\n\n  renderGroupSelector = () => (\n    <AutoCompletionInput\n      className=\"visibility-group-selector\"\n      placeholder=\"select groups\"\n      value={this.state.groups}\n      query={DEFAULT_GROUPS_QUERY}\n      defaultQuery={DEFAULT_GROUPS_QUERY}\n      actions={{ onSelected: this.onGroupsSelected }}\n      multi={true}\n    />\n  );\n\n  isSelected = (s: string) => this.state.visibility === s;\n\n  private onClick = (evt: MouseEvent<HTMLInputElement>) => {\n    const value = evt.target['value'];\n    const stream = LdpService.setVisibility(getCurrentResource(), Rdf.iri(value), []);\n    stream.onValue((r) => {\n      this.setState({ visibility: value, groups: [] });\n      this.notifyVisibilityChange();\n    });\n    stream.onError((error: any) => {\n      this.setState({ errorMessage: maybe.Just('error'), visibility: visibility.private });\n    });\n  };\n\n  private selectGroups = (iriString: string) =>\n    SparqlClient.select(\n      `\n      SELECT ?value ?label WHERE {\n         <${iriString}> <${vocabularies.VocabPlatform.visibleToGroups.value}> ?value .\n         ?value rdfs:label ?label .\n      }\n    `\n    ).onValue((res) => this.setState({ groups: res.results.bindings }));\n\n  private onGroupsSelected = (bindings: SparqlClient.Bindings) => {\n    const groups = _.map(bindings, (binding) => binding.value as Rdf.Iri);\n    const stream = LdpService.setVisibility(getCurrentResource(), Rdf.iri(this.state.visibility), groups);\n    stream.onValue((r) => {\n      this.setState({ groups: bindings });\n      this.notifyVisibilityChange();\n    });\n  };\n\n  private notifyVisibilityChange = () =>\n    addNotification({\n      message: 'Visibility of item has been changed',\n      level: 'success',\n      autoDismiss: 2,\n    });\n}\nexport default ShareComponent;\n"],"sourceRoot":""}