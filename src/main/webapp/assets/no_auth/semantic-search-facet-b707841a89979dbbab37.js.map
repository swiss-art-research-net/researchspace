{"version":3,"sources":["webpack:///./src/main/web/components/search/web-components/SemanticSearchFacet.tsx","webpack:///./src/main/web/components/semantic/search/data/facet/Model.ts","webpack:///./src/main/web/components/search/facet/Facet.ts","webpack:///./src/main/web/components/search/query-builder/CategorySelector.ts","webpack:///./src/main/web/components/search/facet/RelationFacet.ts","webpack:///./src/main/web/components/search/facet/FacetValue.ts","webpack:///./src/main/web/components/search/facet/FacetStore.ts"],"names":["render","semanticContext","SemanticSearchContext","Consumer","context","SemanticSearchFacetInner","props","Component","isOldVisualizationContext","old","current","isNothing","chain","c","map","r","equals","getOrElse","toggleFilter","setState","state","showFacets","trigger","eventType","SearchFilterToggled","source","id","facetData","openByDefault","bigResultSet","componentWillReceiveProps","nextProps","canUpdateFacets","nextContext","baseQuery","isJust","domain","resultsStatus","loaded","isNewDomain","currentDomain","newDomain","iri","this","facetStore","createFacetStore","get","facetActions","setBaseQuery","listenToContextSwitch","visualizationContext","relation","selectCategory","hasRange","selectRelation","FacetStore","availableDomains","undefined","baseConfig","initialAst","facetStructure","searchProfileStore","config","actions","setFacetActions","getFacetData","observe","value","setFacetStructure","ast","getFacetedQuery","onValue","query","setFacetedQuery","facetIsShown","D","div","className","data","button","classNames","onClick","defaultProps","valueCategories","valueRelations","categories","tupleTemplate","DefaultFacetCategoriesTupleTemplate","relations","DefaultFacetRelationTupleTemplate","defaultValueQueries","defaultValueTemplate","DefaultFacetValueTemplate","facetValuesThreshold","React","SemanticSearchFacet","DateRange","Literal","NumericRange","partialValueEquals","x","y","_","has","literal","renderLoadingIndicator","some","rel","isUndefined","available","em","createElement","Spinner","onCategoryChange","clas","viewState","category","deselectCategory","SearchFacetCategorySelected","size","mode","selectorMode","categoryTemplate","entities","onValueChange","selectedElement","renderRelations","filter","relationEntity","key","toArray","FacetComponent","Facet","createFactory","updateDisabledItems","disabled","reduce","refs","acc","ref","hasDisabledChild","findDOMNode","isEqual","isDisabled","componentDidMount","delay","componentDidUpdate","renderCategoryDropdown","renderCategoryButtons","fcButtons","entity","isSelectedElement","selected","li","TemplateItem","componentProps","classnames","btn","title","label","event","currentTarget","blur","template","options","tuple","ol","selectedCategory","selectedIri","find","placeholder","optionRenderer","onChange","elem","children","CategorySelectorComponent","CategorySelector","Infinite","InfiniteComponent","renderRelation","onRelationClick","bind","i","isSelectedRelation","facet__relation__header__icon","relationTemplate","values","loading","span","renderRelationFacetBody","res","relationType","renderFacetValues","renderSlider","facetValues","kind","rangeLabel","filterString","showNoFacetValuesWarning","length","showTooManyFacetValuesWarning","error","ClearableInput","type","nlp","noun","pluralize","onClear","target","elementHeight","containerHeight","facetValue","text","toLowerCase","indexOf","valuesTemplate","isTermSelected","highlight","selectFacetValue","deselectFacetValue","maybe","fromNullable","conjuncts","conjunct","isEmpty","disjuncts","Nothing","Just","head","FacetSlider","toggleFacetValue","deselectRelation","SearchFacetPropertySelected","facetValueEntity","selectedValues","F","PureComponent","RelationFacetComponent","RelationFacet","isLoading","newProps","renderCheckboxLabel","onValueClick","input","checked","stopPropagation","FacetValueComponent","FacetValue","Action","facetedQuery","facetView","selectValueAction","deselectValueAction","removeConjunctAction","relationsCache","valuesCache","initialValues","OrderedMap","withMutations","mutable","forEach","set","List","d","buldAst","selections","disjunctKind","getDisjunctType","selection","j","createValueDisjunct","SearchModel","ConjunctKinds","Relation","conjunctIndex","range","getFacetValuesQueryForRelation","EntityDisjunctKinds","Resource","TemporalDisjunctKinds","LiteralDisjunctKind","NumericRangeDisjunctKind","disjunctType","disjunctIndex","toggleCategoryAction","toggleRelationAction","executeRelationCheckQuery","parametrized","SparqlClient","ask","isFacetEnabled","flatMapErrors","Kefir","constant","removeConjunct","clone","currentBaseQuery","$property","skipDuplicates","rangesFor","buildFacetCategoryBinding","selectFirstCategory","first","combine","debounce","selectedRelations","delete","push","filterNot","selectedValue","remove","generateQuery","fetchRelations","pattern","resource","fetchFacetValues","BuiltInEvents","ComponentLoaded","onError","console","getFacetAst","conjuntcs","maybeCategory","relationsFor","buildFacetRelationBinding","facetEnabledQuery","SparqlUtil","parseQuery","where","unshift","concat","generateQueryClause","generateQueryForMultipleDatasets","selectedDatasets","datasetsConfig","enabledFacets","valueSeq","sortBy","fetchRelation","merge","toProperty","scan","rels","RelationKey","hasDomain","enabledBaseQuery","valuesQuery","parsedPattern","facetQuery","cloneQuery","PatternBinder","sparqlQuery","setBindings","FACET_VARIABLES","RELATION_VAR","serializedQuery","serializeQuery","$relation","$domain","$range","$category","relationConfig","fetchFacetResourceValues","fetchFacetDateRangeValues","fetchFacetLiteralValues","fetchFacetNumericRangeValues","augmentWithLabelsFromServiceIfNeeded","LabelsService","getLabels","labels","VALUE_RESOURCE_LABEL_VAR","Rdf","description","executeValuesQuery","results","bindings","binding","VALUE_RESOURCE_VAR","flatMap","v","begin","moment","VALUE_DATE_RANGE_BEGIN_VAR","ISO_8601","end","VALUE_DATE_RANGE_END_VAR","isValid","VALUE_LITERAL","parseFloat","VALUE_NUMERIC_RANGE_BEGIN_VAR","VALUE_NUMERIC_RANGE_END_VAR","facetValuesQuery","isResourceQuery","facetsQuery","rewriteProjectionVariable","parseQuerySync","getProjectionVariable","excludeClauseForRelation","limit","assign","RANGE_VAR","SEMANTIC_SEARCH_VARIABLES","SELECTED_ALIGNMENT","selectedAlignment","a","federatedQuery","select","reject","patterns","rangeIri","toString","relationIri","generateFacetValuePatternFromRelation","relationPatterns","tryGetRelationPatterns","p","patternConfig","warn","queryPattern","SearchDefaults","DefaultFacetValuesQueries","ResourceRelationPattern","LiteralRelationPattern","assertHandledEveryPatternKind","getDefaultValuesQuery","defaultQueries","forResource","forLiteral","forDateRange","forNumericRange","facetRelationPattern","transformRelationPatternForFacetValues","binder","VariableRenameBinder","RESOURCE_VAR","LITERAL_VAR","DATE_BEGING_VAR","DATE_END_VAR","rangeTo","transformRangePattern","NUMERIC_RANGE_BEGIN_VAR","NUMERIC_RANGE_END_VAR","clonedPattern","cloneDeep","parsePatterns","prefixes","RELATION_PATTERN_VAR","variables","projectionVariable","filteredConjuncts","conjunctsToQueryPatterns","flatten","Error"],"mappings":"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","file":"semantic-search-facet-b707841a89979dbbab37.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2015-2020, © Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as React from 'react';\nimport * as D from 'react-dom-factories';\nimport * as _ from 'lodash';\nimport * as classNames from 'classnames';\nimport * as SparqlJs from 'sparqljs';\n\nimport { trigger } from 'platform/api/events';\nimport { Component, SemanticContext } from 'platform/api/components';\nimport { SemanticFacetConfig } from 'platform/components/semantic/search/config/SearchConfig';\nimport {\n  DefaultFacetValueTemplate,\n  DefaultFacetRelationTupleTemplate,\n  DefaultFacetCategoriesTupleTemplate,\n} from 'platform/components/semantic/search/config/Defaults';\nimport {\n  SemanticSearchContext,\n  FacetContext,\n} from 'platform/components/semantic/search/web-components/SemanticSearchApi';\nimport * as Model from 'platform/components/semantic/search/data/search/Model';\n\nimport Facet from '../facet/Facet';\nimport { FacetStore, FacetData } from '../facet/FacetStore';\nimport { SearchFilterToggled } from 'platform/components/search/query-builder/SearchEvents';\n\ninterface SemanticSearchFacetProps extends SemanticFacetConfig {}\n\n/**\n * @author Artem Kozlov <ak@metaphacts.com>\n * @author Alexey Morozov\n */\nclass SemanticSearchFacet extends Component<SemanticSearchFacetProps, {}> {\n  render() {\n    const { semanticContext } = this.context;\n    return (\n      <SemanticSearchContext.Consumer>\n        {(context) => <SemanticSearchFacetInner {...this.props} context={{ ...context, semanticContext }} />}\n      </SemanticSearchContext.Consumer>\n    );\n  }\n}\n\ninterface InnerProps extends SemanticSearchFacetProps {\n  context: FacetContext & SemanticContext;\n}\n\ninterface State {\n  facetData?: FacetData;\n  showFacets?: boolean;\n  bigResultSet?: boolean;\n}\n\nclass SemanticSearchFacetInner extends React.Component<InnerProps, State> {\n  private facetStore: FacetStore;\n\n  constructor(props: InnerProps) {\n    super(props);\n    this.state = {\n      facetData: null,\n      showFacets: props.openByDefault,\n      bigResultSet: false,\n    };\n  }\n\n  static defaultProps: Partial<SemanticFacetConfig> = {\n    valueCategories: {},\n    valueRelations: {},\n    categories: {\n      tupleTemplate: DefaultFacetCategoriesTupleTemplate,\n    },\n    relations: {\n      tupleTemplate: DefaultFacetRelationTupleTemplate,\n    },\n    defaultValueQueries: {},\n    defaultValueTemplate: DefaultFacetValueTemplate,\n    facetValuesThreshold: 10000,\n  };\n\n  componentWillReceiveProps(nextProps: InnerProps) {\n    const { context } = this.props;\n    const { context: nextContext } = nextProps;\n    const canUpdateFacets =\n      nextContext.baseQuery.isJust && nextContext.domain.isJust && nextContext.resultsStatus.loaded;\n    const isNewDomain = context.domain\n      .chain((currentDomain) => nextContext.domain.map((newDomain) => ({ currentDomain, newDomain })))\n      .map(({ currentDomain, newDomain }) => !currentDomain.iri.equals(newDomain.iri))\n      .getOrElse(false);\n    if ((!this.facetStore && canUpdateFacets) || isNewDomain) {\n      this.createFacetStore(nextContext.baseQuery.get(), nextContext);\n    } else if (canUpdateFacets) {\n      this.facetStore.facetActions().setBaseQuery(nextContext.baseQuery.get());\n\n      if (\n        nextProps.listenToContextSwitch &&\n        nextContext.visualizationContext.isJust &&\n        !this.isOldVisualizationContext(context.visualizationContext, nextContext.visualizationContext)\n      ) {\n        const relation = nextContext.visualizationContext.get();\n        this.facetStore.facetActions().selectCategory(relation.hasRange);\n        this.facetStore.facetActions().selectRelation(relation);\n      }\n    } else if (nextContext.baseQuery.isNothing) {\n      this.facetStore = null;\n      this.setState({ facetData: null });\n    }\n  }\n\n  private isOldVisualizationContext = (old: Data.Maybe<Model.Relation>, current: Data.Maybe<Model.Relation>) => {\n    if (old.isNothing && current.isNothing) {\n      return true;\n    } else {\n      return old\n        .chain((c) => current.map((r) => ({ c, r })))\n        .map(({ c, r }) => c.equals(r))\n        .getOrElse(false);\n    }\n  };\n\n  private createFacetStore(baseQuery: SparqlJs.SelectQuery, context: FacetContext & SemanticContext) {\n    this.facetStore = new FacetStore(\n      {\n        domain: context.domain.get(),\n        availableDomains: context.availableDomains.getOrElse(undefined),\n        baseConfig: context.baseConfig,\n        baseQuery: baseQuery,\n        initialAst: context.facetStructure.getOrElse(undefined),\n        searchProfileStore: context.searchProfileStore.get(),\n        config: this.props,\n      },\n      context\n    );\n\n    const actions = this.facetStore.facetActions();\n    this.props.context.setFacetActions(actions);\n\n    this.facetStore.getFacetData().observe({\n      value: (facetData) => {\n        this.setState({ facetData });\n        this.props.context.setFacetStructure(facetData.ast);\n      },\n    });\n\n    this.facetStore.getFacetedQuery().onValue((query) => this.props.context.setFacetedQuery(query));\n  }\n\n  render() {\n    if (this.props.context.baseQuery.isJust) {\n      const facetIsShown = this.state.facetData && this.state.showFacets;\n      return D.div(\n        { className: 'semantic-facet-holder' },\n        this.state.facetData && this.state.showFacets\n          ? Facet({\n              data: this.state.facetData,\n              actions: this.facetStore.facetActions(),\n              config: this.props,\n            })\n          : null,\n        D.button(\n          {\n            className: classNames({\n              'btn-xs': true,\n              'show-facet-button': true,\n              'show-facet-button__hide': facetIsShown,\n              'show-facet-button__show': !facetIsShown,\n            }),\n            onClick: this.toggleFilter,\n          },\n          this.state.showFacets ? 'Hide Filter' : 'Show Filter'\n        )\n      );\n    } else {\n      return null;\n    }\n  }\n\n  private toggleFilter = () => {\n    this.setState((state) => ({ showFacets: !state.showFacets }));\n    trigger({ eventType: SearchFilterToggled, source: this.props.id });\n  };\n}\n\nexport default SemanticSearchFacet;\n","/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as _ from 'lodash';\nimport * as SparqlJs from 'sparqljs';\n\nimport * as SearchModel from '../search/Model';\n\n/**\n * Representation of Facet's state.\n */\nexport interface Ast {\n  conjuncts: Conjuncts;\n}\n\nexport interface Actions {\n  /**\n   * Update base query for the facets.\n   */\n  setBaseQuery: (query: SparqlJs.SelectQuery) => void;\n\n  /**\n   * Action which is triggered when user select category in the category filter.\n   */\n  selectCategory: (category: SearchModel.Category) => void;\n\n  /**\n   * Action which is triggered when user de-select category in the category filter.\n   */\n  deselectCategory: () => void;\n\n  /**\n   * Action which is triggered when user expands facet relation.\n   */\n  selectRelation: (relation: SearchModel.Relation) => void;\n\n  /**\n   * Action which is triggered when user collapse facet relation.\n   */\n  deselectRelation: () => void;\n\n  selectFacetValue: (relation: SearchModel.Relation) => (value: FacetValue) => void;\n  deselectFacetValue: (relation: SearchModel.Relation) => (value: FacetValue) => void;\n\n  /**\n   * Action which is triggered when user removes all selected facets for relation.\n   */\n  removeConjunct: (conjunct: SearchModel.RelationConjunct) => void;\n}\n\nexport type Conjuncts = Array<FacetRelationConjunct>;\nexport type FacetRelationConjunct = SearchModel.RelationConjunct<FacetRelationDisjunct>;\nexport type FacetRelationDisjunct =\n  | SearchModel.ResourceDisjunct\n  | SearchModel.DateRangeDisjunct\n  | SearchModel.LiteralDisjunct\n  | SearchModel.NumericRangeDisjunct;\n\nexport { DateRange, Literal, NumericRange } from '../search/Model';\nexport type FacetValue = SearchModel.Resource | SearchModel.DateRange | SearchModel.Literal | SearchModel.NumericRange;\n\n/**\n * Only for Resource and Literal facet values\n */\nexport function partialValueEquals(x: FacetValue, y: FacetValue): boolean {\n  if (_.has(x, 'literal') && _.has(y, 'literal')) {\n    return (x as SearchModel.Literal).literal.equals((y as SearchModel.Literal).literal);\n  } else if (_.has(x, 'iri') && _.has(y, 'iri')) {\n    return (x as SearchModel.Resource).iri.equals((y as SearchModel.Resource).iri);\n  } else {\n    return false;\n  }\n}\n","/**\n * ResearchSpace\n * Copyright (C) 2015-2020, © Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * @author Artem Kozlov <ak@metaphacts.com>\n * @author Alexey Morozov\n * @author Andrey Nikolov <an@metaphacts.com>\n */\n\nimport { Component, createFactory, createElement } from 'react';\nimport * as D from 'react-dom-factories';\nimport * as _ from 'lodash';\n\nimport { trigger } from 'platform/api/events';\nimport { Spinner } from 'platform/components/ui/spinner';\n\nimport CategorySelector from '../query-builder/CategorySelector';\nimport RelationFacet from './RelationFacet';\nimport { FacetData } from './FacetStore';\nimport { Category } from 'platform/components/semantic/search/data/profiles/Model';\nimport { SemanticFacetConfig } from 'platform/components/semantic/search/config/SearchConfig';\nimport { Actions } from 'platform/components/semantic/search/data/facet/Model';\nimport { SearchFacetCategorySelected } from '../query-builder/SearchEvents';\n\nimport './Facet.scss';\n\nexport interface FacetProps {\n  data: FacetData;\n  actions: Actions;\n  config: SemanticFacetConfig;\n}\n\nexport class FacetComponent extends Component<FacetProps, {}> {\n  render() {\n    return D.div(\n      { className: 'facet' },\n      // we need to show category selector only if we have more than one range\n      this.props.data.categories.size > 1\n        ? D.div(\n            { className: 'facet__category-selector-holder' },\n            CategorySelector({\n              mode: this.props.data.viewState.selectorMode,\n              tupleTemplate: this.props.data.viewState.categoryTemplate,\n              entities: this.props.data.categories,\n              actions: {\n                onValueChange: this.onCategoryChange,\n              },\n              selectedElement: this.props.data.viewState.category,\n            })\n          )\n        : null,\n      this.renderRelations()\n    );\n  }\n\n  private renderRelations() {\n    return D.div(\n      { className: 'facet-relations' },\n      ...this.renderLoadingIndicator(),\n      this.props.data.relations\n        .filter((rel) => rel.available !== false)\n        .map((relationEntity) =>\n          RelationFacet({\n            key: relationEntity.iri.value,\n            relation: relationEntity,\n            data: this.props.data,\n            actions: this.props.actions,\n            config: this.props.config,\n          })\n        )\n        .toArray()\n    );\n  }\n\n  private renderLoadingIndicator = () => {\n    const loading = this.props.data.relations.some((rel) => _.isUndefined(rel.available));\n    return loading ? [D.div({}, D.em({}, 'Searching for relations ...')), D.div({}, createElement(Spinner))] : [];\n  };\n\n  private onCategoryChange = (clas: Category) => {\n    const isToggleOff = this.props.data.viewState.category\n      .map((category) => category.iri.equals(clas.iri))\n      .getOrElse(false);\n    if (isToggleOff) {\n      this.props.actions.deselectCategory();\n    } else {\n      this.props.actions.selectCategory(clas);\n      trigger({\n        eventType: SearchFacetCategorySelected,\n        source: this.props.config.id,\n        data: clas.iri.value,\n      });\n    }\n  };\n}\n\nexport const Facet = createFactory(FacetComponent);\nexport default Facet;\n","/**\n * ResearchSpace\n * Copyright (C) 2015-2020, © Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * @author Artem Kozlov <ak@metaphacts.com>\n */\n\nimport { Component, createFactory, createElement } from 'react';\nimport * as D from 'react-dom-factories';\nimport { findDOMNode } from 'react-dom';\nimport * as classnames from 'classnames';\nimport * as _ from 'lodash';\nimport ReactSelect from 'react-select';\n\nimport { TemplateItem } from 'platform/components/ui/template';\nimport { Category, Categories } from 'platform/components/semantic/search/data/profiles/Model';\n\nexport interface CategorySelectorProps {\n  mode: 'stack' | 'dropdown';\n  tupleTemplate: string;\n  entities: Categories;\n  selectedElement: Data.Maybe<Category>;\n  actions: {\n    onValueChange: (clas: Category) => void;\n  };\n}\n\ninterface CategorySelectorState {\n  isDisabled: {\n    [entityIri: string]: boolean;\n  };\n}\n\nexport class CategorySelectorComponent extends Component<CategorySelectorProps, CategorySelectorState> {\n  constructor(props: CategorySelectorProps, context: any) {\n    super(props, context);\n    this.state = {\n      isDisabled: {},\n    };\n  }\n\n  componentDidMount() {\n    // hack to workaround delayed template rendering\n    _.delay(this.updateDisabledItems, 1000, 'later');\n  }\n\n  componentDidUpdate() {\n    _.delay(this.updateDisabledItems, 1000, 'later');\n  }\n\n  render() {\n    return this.props.mode === 'dropdown' ? this.renderCategoryDropdown() : this.renderCategoryButtons();\n  }\n\n  private renderCategoryButtons() {\n    const fcButtons = this.props.entities.map((entity) => {\n      const isSelectedElement = this.props.selectedElement\n        .map((selected) => entity.iri.value === selected.iri.value)\n        .getOrElse(false);\n      return D.li(\n        { key: entity.iri.value },\n        createElement(TemplateItem, {\n          ref: entity.iri.value,\n          componentProps: {\n            disabled: this.state.isDisabled[entity.iri.value] == true,\n            className: classnames({\n              btn: true,\n              'btn-default': true,\n              'category-item-holder': true,\n              'category-item-holder--active': isSelectedElement,\n            }),\n            title: entity.label,\n            'data-rdfa-about': entity.iri.value,\n            onClick: (event) => {\n              if (this.hasDisabledChild(event.currentTarget) == false) {\n                event.currentTarget.blur();\n                this.props.actions.onValueChange(entity);\n              }\n            },\n          },\n          template: {\n            source: this.props.tupleTemplate,\n            options: entity.tuple,\n          },\n        })\n      );\n    });\n    return D.ol(\n      {\n        className: 'category-selector',\n      },\n      fcButtons.toArray()\n    );\n  }\n\n  private renderCategoryDropdown() {\n    const selectedCategory = this.props.selectedElement\n      .map((category) => {\n        const selectedIri = category.iri.value;\n        return this.props.entities.find((c) => c.iri.value === selectedIri);\n      })\n      .getOrElse(null);\n\n    return createElement(ReactSelect, {\n      className: 'category-selector',\n      placeholder: 'Select category',\n      value: selectedCategory,\n      options: this.props.entities.toArray(),\n      optionRenderer: (entity: Category) => {\n        const isSelectedElement = selectedCategory && entity.iri.value === selectedCategory.iri.value;\n        return createElement(TemplateItem, {\n          key: entity.iri.value,\n          ref: entity.iri.value,\n          template: {\n            source: this.props.tupleTemplate,\n            options: entity.tuple,\n          },\n          componentProps: {\n            disabled: this.state.isDisabled[entity.iri.value] == true,\n            className: classnames({\n              btn: true,\n              'btn-default': true,\n              'category-item-holder': true,\n              'category-item-holder--active': isSelectedElement,\n            }),\n            title: entity.label,\n            'data-rdfa-about': entity.iri.value,\n          },\n        });\n      },\n      onChange: (selected: Category) => {\n        if (selected && selected !== selectedCategory) {\n          this.props.actions.onValueChange(selected);\n        } else if (!selected && selectedCategory) {\n          // select same value to toggle off category\n          this.props.actions.onValueChange(selectedCategory);\n        }\n      },\n    });\n  }\n\n  private updateDisabledItems = () => {\n    const disabled = _.reduce(\n      this.refs,\n      (acc, ref, key) => {\n        acc[key] = this.hasDisabledChild(findDOMNode(ref) as HTMLElement);\n        return acc;\n      },\n      {}\n    );\n\n    if (_.isEqual(disabled, this.state.isDisabled) == false) {\n      this.setState({\n        isDisabled: <any>disabled,\n      });\n    }\n  };\n\n  private hasDisabledChild(elem: HTMLElement): boolean {\n    return _.some(elem.children, (c) => c['dataset']['disabled'] == 'true');\n  }\n}\n\nexport const CategorySelector = createFactory(CategorySelectorComponent);\nexport default CategorySelector;\n","/**\n * ResearchSpace\n * Copyright (C) 2015-2020, © Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * @author Artem Kozlov <ak@metaphacts.com>\n * @author Denis Ostapenko\n */\n\nimport { PureComponent, createFactory, Props, createElement } from 'react';\nimport * as D from 'react-dom-factories';\nimport * as maybe from 'data.maybe';\nimport * as InfiniteComponent from 'react-infinite';\nimport * as classnames from 'classnames';\nimport * as nlp from 'nlp_compromise';\nimport * as _ from 'lodash';\n\nimport { trigger } from 'platform/api/events';\nimport { TemplateItem } from 'platform/components/ui/template';\nimport { Spinner } from 'platform/components/ui/spinner';\nimport { ClearableInput } from 'platform/components/ui/inputs';\n\nimport { Resource } from 'platform/components/semantic/search/data/Common';\nimport { FacetData, FacetViewState } from './FacetStore';\nimport { Relation } from 'platform/components/semantic/search/data/profiles/Model';\nimport * as F from 'platform/components/semantic/search/data/facet/Model';\nimport * as Model from 'platform/components/semantic/search/data/search/Model';\n\nimport FacetValue from './FacetValue';\nimport { FacetSlider, SliderRange } from './slider/FacetSlider';\nimport { Literal, NumericRange, DateRange } from 'platform/components/semantic/search/data/search/Model';\nimport { SemanticFacetConfig } from 'platform/components/semantic/search/config/SearchConfig';\nimport { SearchFacetPropertySelected } from 'platform/components/search/query-builder/SearchEvents';\n\ninterface RelationFacetProps extends Props<RelationFacetComponent> {\n  relation: Relation;\n  data: FacetData;\n  actions: F.Actions;\n  config: SemanticFacetConfig;\n}\n\n/**\n * react-infinite component which is used to show facet values,\n * in future it can be used to implement lazy-loading of facet values\n */\nconst Infinite = createFactory(InfiniteComponent);\n\ninterface RelationFacetState {\n  filterString?: string;\n}\n\n/**\n * Component which displays all facet values specific to the given relation.\n */\nexport class RelationFacetComponent extends PureComponent<RelationFacetProps, RelationFacetState> {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {};\n  }\n\n  render() {\n    return this.props.relation.available === true ? this.renderRelation() : null;\n  }\n\n  private renderRelation = () =>\n    D.div(\n      { className: 'facet__relation' },\n      D.div(\n        {\n          className: 'facet__relation__header',\n          onClick: this.onRelationClick().bind(this),\n        },\n        D.i({\n          className: classnames({\n            'facet__relation__header__icon--selected': this.isSelectedRelation(),\n            facet__relation__header__icon: !this.isSelectedRelation(),\n          }),\n        }),\n        createElement(TemplateItem, {\n          template: {\n            source: this.props.data.viewState.relationTemplate,\n            options: this.props.relation.tuple,\n          },\n        }),\n        this.isSelectedRelation() && this.props.data.viewState.values.loading ? createElement(Spinner) : D.span({})\n      ),\n      this.isSelectedRelation() && !this.props.data.viewState.values.loading\n        ? D.div({ className: 'facet__relation__body' }, this.renderRelationFacetBody(this.props.data.viewState))\n        : D.div({})\n    );\n\n  private isSelectedRelation = () =>\n    this.props.data.viewState.relation.map((res) => res.iri.equals(this.props.relation.iri)).getOrElse(false);\n\n  private renderRelationFacetBody(viewState: FacetViewState) {\n    const { relationType, values } = viewState;\n    if (relationType === 'resource' || relationType === 'literal') {\n      return this.renderFacetValues(values.values as Array<Resource | Literal>, relationType);\n    } else if (relationType === 'numeric-range' || relationType === 'date-range') {\n      return this.renderSlider(values.values as Array<NumericRange | DateRange>, relationType);\n    }\n    return null;\n  }\n\n  private renderFacetValues(facetValues: Array<Resource | Literal>, kind: 'resource' | 'literal') {\n    const rangeLabel = this.props.relation.hasRange.label;\n    const filterString = this.state.filterString ? this.state.filterString : '';\n\n    const showNoFacetValuesWarning = facetValues.length === 0 && !this.props.data.viewState.values.loading;\n\n    const showTooManyFacetValuesWarning =\n      this.props.config.facetValuesThreshold > 0 && facetValues.length > this.props.config.facetValuesThreshold;\n\n    if (this.props.data.viewState.values.error) {\n      return D.div(\n        { className: 'facet__relation__values' },\n        D.em(\n          {},\n          'An error has occurred! Probably, there are too many facet values for the selected relation. Please, try to refine your search.'\n        )\n      );\n    } else if (showNoFacetValuesWarning) {\n      return D.div({ className: 'facet__relation__values' }, D.em({}, 'Values not found...'));\n    } else {\n      return D.div(\n        { className: 'facet__relation__values' },\n        showTooManyFacetValuesWarning\n          ? D.em(\n              { className: 'facet__relation__warning' },\n              `Only first ${this.props.config.facetValuesThreshold} facet values are shown! Please refine your search `\n            )\n          : null,\n        createElement(ClearableInput, {\n          type: 'text',\n          className: 'facet__relation__values__filter',\n          placeholder: `Search ${nlp.noun(rangeLabel).pluralize()}...`,\n          value: filterString,\n          onClear: () => this.setState({ filterString: undefined }),\n          onChange: (event) => {\n            const value = (event.target as any).value;\n            this.setState({ filterString: value });\n          },\n        }),\n        Infinite(\n          {\n            elementHeight: 20,\n            containerHeight: 250,\n          },\n          facetValues\n            .filter((facetValue) => {\n              const text = kind === 'resource' ? (facetValue as Resource).label : (facetValue as Literal).literal.value;\n              return !filterString || text.toLowerCase().indexOf(filterString.toLowerCase()) >= 0;\n            })\n            .map((facetValue) =>\n              FacetValue({\n                key: kind === 'resource' ? (facetValue as Resource).iri.value : (facetValue as Literal).literal.value,\n                kind: kind,\n                facetValue: {\n                  entity: facetValue,\n                  tupleTemplate: this.props.data.viewState.valuesTemplate,\n                  selected: this.isTermSelected(facetValue),\n                },\n                highlight: filterString,\n                actions: {\n                  selectFacetValue: this.props.actions.selectFacetValue(this.props.relation),\n                  deselectFacetValue: this.props.actions.deselectFacetValue(this.props.relation),\n                },\n              })\n            )\n        )\n      );\n    }\n  }\n\n  private renderSlider(facetValues: Array<NumericRange | DateRange>, kind: 'numeric-range' | 'date-range') {\n    const value = maybe\n      .fromNullable(_.find(this.props.data.ast.conjuncts, (c) => c.relation.iri.equals(this.props.relation.iri)))\n      .chain((conjunct) => {\n        if (_.isEmpty(conjunct.disjuncts)) {\n          return maybe.Nothing<NumericRange | DateRange>();\n        } else {\n          return maybe.Just(_.head(conjunct.disjuncts).value);\n        }\n      });\n    return FacetSlider({\n      kind: kind,\n      data: facetValues,\n      value: value,\n      actions: {\n        toggleFacetValue: this.props.actions.selectFacetValue(this.props.relation),\n      },\n    });\n  }\n\n  private onRelationClick() {\n    return () => {\n      if (this.isSelectedRelation()) {\n        this.props.actions.deselectRelation();\n      } else {\n        trigger({\n          eventType: SearchFacetPropertySelected,\n          source: this.props.config.id,\n          data: this.props.relation.iri.value,\n        });\n        this.props.actions.selectRelation(this.props.relation);\n      }\n    };\n  }\n\n  private isTermSelected(facetValueEntity: Resource | Literal) {\n    return maybe\n      .fromNullable(this.props.data.viewState.selectedValues.get(this.props.relation))\n      .chain((values) => maybe.fromNullable(values.find((value) => F.partialValueEquals(value, facetValueEntity))))\n      .map((_) => true)\n      .getOrElse(false);\n  }\n}\n\nexport const RelationFacet = createFactory(RelationFacetComponent);\nexport default RelationFacet;\n","/**\n * ResearchSpace\n * Copyright (C) 2015-2020, © Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * @author Artem Kozlov <ak@metaphacts.com>\n * @author Denis Ostapenko\n */\n\nimport { Component, Props, createFactory, createElement, MouseEvent } from 'react';\nimport * as D from 'react-dom-factories';\n\nimport { TemplateItem } from 'platform/components/ui/template';\nimport { Spinner } from 'platform/components/ui/spinner';\n\nimport { Resource } from 'platform/components/semantic/search/data/Common';\nimport { Literal } from 'platform/components/semantic/search/data/search/Model';\n\nexport interface FacetValueProps extends Props<FacetValueComponent> {\n  kind: 'resource' | 'literal';\n  facetValue: {\n    entity: Resource | Literal;\n    selected: boolean;\n    tupleTemplate: { resource: string; literal: string };\n  };\n  highlight?: string;\n  actions: {\n    selectFacetValue: (term: Resource | Literal) => void;\n    deselectFacetValue: (term: Resource | Literal) => void;\n  };\n}\n\ninterface FacetValueState {\n  selected: boolean;\n  isLoading: boolean;\n}\n\n/**\n * Displays facet value of Resource type.\n * It would be required to implement other facet value component\n * for other facet value kinds, e.g. date slider etc.\n */\nexport class FacetValueComponent extends Component<FacetValueProps, FacetValueState> {\n  constructor(props: FacetValueProps, context: any) {\n    super(props, context);\n    this.state = {\n      selected: props.facetValue.selected,\n      isLoading: false,\n    };\n  }\n\n  componentWillReceiveProps(newProps: FacetValueProps) {\n    this.setState({\n      selected: newProps.facetValue.selected,\n      isLoading: false,\n    });\n  }\n\n  renderCheckboxLabel() {\n    const { kind } = this.props;\n    const template = this.props.facetValue.tupleTemplate[kind];\n    return createElement(TemplateItem, {\n      template: {\n        source: template,\n        options: { highlight: this.props.highlight, ...(this.props.facetValue.entity as any).tuple },\n      },\n    });\n  }\n\n  render() {\n    return D.div(\n      {\n        className: 'facet__relation__values__value checkbox',\n        onClick: this.onValueClick.bind(this),\n      },\n      D.label(\n        {},\n        D.input({\n          type: 'checkbox',\n          className: 'checkbox',\n          checked: this.state.selected,\n        }),\n        this.renderCheckboxLabel(),\n        this.state.isLoading ? createElement(Spinner) : D.span({})\n      )\n    );\n  }\n\n  private onValueClick(event: MouseEvent<HTMLElement>) {\n    event.stopPropagation();\n\n    // Event is fired twice, because we have input element inside label element.\n    // so we need to trigger action only once.\n    // The idea is to trigger it only for checkbox element.\n    if (event.target['tagName'] === 'INPUT') {\n      this.setState({\n        selected: (event.target as HTMLInputElement).checked,\n        isLoading: true,\n      });\n      if (this.props.facetValue.selected) {\n        this.props.actions.deselectFacetValue(this.props.facetValue.entity);\n      } else {\n        this.props.actions.selectFacetValue(this.props.facetValue.entity);\n      }\n    }\n  }\n}\n\nexport const FacetValue = createFactory(FacetValueComponent);\nexport default FacetValue;\n","/**\n * ResearchSpace\n * Copyright (C) 2015-2020, © Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * @author Artem Kozlov <ak@metaphacts.com>\n * @author Alexey Morozov\n * @author Denis Ostapenko\n */\n\nimport * as maybe from 'data.maybe';\nimport * as _ from 'lodash';\nimport * as Kefir from 'kefir';\nimport { OrderedMap, List } from 'immutable';\nimport * as moment from 'moment';\nimport * as SparqlJs from 'sparqljs';\n\nimport { Rdf } from 'platform/api/rdf';\nimport {\n  SparqlUtil,\n  SparqlClient,\n  PatternBinder,\n  VariableRenameBinder,\n  QueryVisitor,\n  cloneQuery,\n} from 'platform/api/sparql';\nimport { Action } from 'platform/components/utils';\nimport { SemanticContext } from 'platform/api/components';\n\nimport {\n  SemanticFacetConfig,\n  SemanticSearchConfig,\n  SEMANTIC_SEARCH_VARIABLES,\n  FACET_VARIABLES,\n  FacetValuePattern,\n  DateRangeFacetValue,\n  LiteralFacetValue,\n  NumericRangeFacetValue,\n  ResourceFacetValue,\n} from 'platform/components/semantic/search/config/SearchConfig';\nimport * as SearchConfig from 'platform/components/semantic/search/config/SearchConfig';\nimport * as SearchDefaults from 'platform/components/semantic/search/config/Defaults';\nimport { Resource, transformRangePattern } from 'platform/components/semantic/search/data/Common';\nimport {\n  Category,\n  Relation,\n  Categories,\n  Relations,\n  RelationKey,\n  AvailableDomains,\n} from 'platform/components/semantic/search/data//profiles/Model';\nimport * as F from 'platform/components/semantic/search/data/facet/Model';\nimport * as SearchModel from 'platform/components/semantic/search/data/search/Model';\nimport SearchProfileStore from 'platform/components/semantic/search/data/profiles/SearchProfileStore';\nimport {\n  conjunctsToQueryPatterns,\n  tryGetRelationPatterns,\n  rewriteProjectionVariable,\n  generateQueryForMultipleDatasets,\n} from 'platform/components/semantic/search/data/search/SparqlQueryGenerator';\nimport { FacetContext } from 'platform/components/semantic/search/web-components/SemanticSearchApi';\nimport * as LabelsService from 'platform/api/services/resource-label';\nimport { BuiltInEvents, trigger } from 'platform/api/events';\n\nexport interface FacetStoreConfig {\n  domain: Category;\n  availableDomains: AvailableDomains;\n  baseQuery: SparqlJs.SelectQuery;\n  initialAst: F.Ast;\n  config: SemanticFacetConfig;\n  baseConfig: SemanticSearchConfig;\n  searchProfileStore: SearchProfileStore;\n}\n\nexport interface FacetData {\n  categories: Categories;\n  relations: Relations;\n  viewState: FacetViewState;\n  ast: F.Ast;\n}\n\nexport type SelectedValues = OrderedMap<Relation, List<F.FacetValue>>;\nexport interface FacetViewState {\n  category: Data.Maybe<Category>;\n  categoryTemplate: string;\n  relation: Data.Maybe<Relation>;\n  relationTemplate: string;\n  values: { values: Array<F.FacetValue>; loading: boolean; error?: boolean };\n  selectedValues: SelectedValues;\n  valuesTemplate: { resource: string; literal: string };\n  relationType: 'resource' | 'date-range' | 'literal' | 'numeric-range';\n  selectorMode: 'stack' | 'dropdown';\n}\n\n/**\n * This class contains all logic for facet components.\n * The idea is to keep React components logic free and in spirit of React Flux.\n *\n * @see https://facebook.github.io/flux/docs/overview.html\n */\nexport class FacetStore {\n  private context: SemanticContext & FacetContext;\n  private config: FacetStoreConfig;\n\n  /**\n   * Property which contains current state of the facet at any given point in time.\n   */\n  private ast = Action<F.Ast>();\n  private baseQuery = Action<SparqlJs.SelectQuery>();\n  private relations = Action<Relations>();\n  private values = Action<{ values: Array<F.FacetValue>; loading: boolean; error: boolean }>({\n    values: [],\n    loading: false,\n    error: false,\n  });\n\n  /**\n   * Property which contains all data required for facet rendering.\n   * This property is updated on:\n   *   - facet selections change\n   *   - base query update\n   */\n  private facetData = Action<FacetData>();\n  private facetedQuery = Action<SparqlJs.SelectQuery>();\n  private facetView = Action<FacetViewState>();\n\n  private toggleCategoryAction: Action<Data.Maybe<Category>>;\n  private toggleRelationAction: Action<Data.Maybe<Relation>>;\n  private selectValueAction = Action<{ relation: Relation; value: F.FacetValue }>();\n  private deselectValueAction = Action<{ relation: Relation; value: F.FacetValue }>();\n  private selectedValues: Action<SelectedValues>;\n  private removeConjunctAction = Action<SearchModel.RelationConjunct>();\n\n  private actions: F.Actions;\n  private relationsCache: { [key: string]: boolean } = {};\n  private valuesCache: { [relation: string]: Array<F.FacetValue> } = {};\n\n  constructor(config: FacetStoreConfig, context: SemanticContext & FacetContext) {\n    this.context = context;\n    this.config = config;\n    const initialAst = config.initialAst || { conjuncts: [] };\n    this.ast(initialAst);\n    this.selectedValues = Action<SelectedValues>(this.initialValues(initialAst));\n\n    this.baseQuery(_.clone(this.config.baseQuery));\n    const currentBaseQuery = this.baseQuery.$property.skipDuplicates(_.isEqual);\n\n    this.actions = {\n      selectCategory: this.selectCategory,\n      deselectCategory: this.deselectCategory,\n      selectRelation: this.selectRelation,\n      deselectRelation: this.deselectRelation,\n      selectFacetValue: this.selectFacetValue,\n      deselectFacetValue: this.deselectFacetValue,\n      setBaseQuery: this.setBaseQuery,\n      removeConjunct: this.removeConjunct,\n    };\n\n    const categories = this.config.searchProfileStore\n      .rangesFor(this.config.domain)\n      .map(this.buildFacetCategoryBinding) as Categories;\n\n    const selectedCategory = config.config.selectFirstCategory\n      ? maybe.Just(categories.first())\n      : maybe.Nothing<Category>();\n    this.toggleCategoryAction = Action(selectedCategory);\n    this.toggleRelationAction = Action<Data.Maybe<Relation>>(maybe.Nothing<Relation>());\n\n    // debounce(200) to not update facetData too frequently to prevent UI flickering\n    Kefir.combine({\n      relations: this.relations.$property,\n      viewState: this.facetView.$property,\n      ast: this.ast.$property,\n      categories: Kefir.constant(categories),\n    })\n      .debounce(200)\n      .onValue(this.facetData);\n\n    // update list of selected facet values on the selection of new facet value\n    Kefir.combine({ value: this.selectValueAction.$property }, { selected: this.selectedValues.$property }).onValue(\n      ({ value, selected }) => {\n        const relationType = this.getDisjunctType(value.relation);\n        let selectedRelations = selected;\n        // we need to remove old selected value if it is date-range or numeric-range\n        // because there can be only one range selected for a given relation\n        if (\n          relationType === SearchModel.TemporalDisjunctKinds.DateRange ||\n          relationType === SearchModel.NumericRangeDisjunctKind\n        ) {\n          selectedRelations = selected.delete(value.relation);\n        }\n        let selectedValues = selectedRelations.get(value.relation) || List<F.FacetValue>();\n        selectedValues = selectedValues.push(value.value);\n        this.selectedValues(selectedRelations.set(value.relation, selectedValues));\n      }\n    );\n\n    // update list of selected facet values on the de-selection of some facet value\n    Kefir.combine({ value: this.deselectValueAction.$property }, { selected: this.selectedValues.$property }).onValue(\n      ({ value, selected }) => {\n        const selectedValues = selected\n          .get(value.relation)\n          .filterNot((selectedValue) => F.partialValueEquals(value.value, selectedValue)) as List<F.FacetValue>;\n\n        if (selectedValues.isEmpty()) {\n          // clean up disjunct if we deselected all values for the given relation\n          this.selectedValues(selected.remove(value.relation))\n        } else {\n          this.selectedValues(selected.set(value.relation, selectedValues));\n        }\n      }\n    );\n\n    // update facet AST when list of selected values changes\n    this.selectedValues.$property.map(this.buldAst).onValue(this.ast);\n\n    // update faceted query when AST changes\n    Kefir.combine({\n      ast: this.ast.$property,\n      baseQuery: currentBaseQuery,\n    }).onValue(({ ast, baseQuery }) => {\n      this.facetedQuery(this.generateQuery(baseQuery, ast.conjuncts));\n      this.valuesCache = {};\n    });\n\n    // update list of visible relations for faceting when AST changes or category filter changes\n    Kefir.combine({\n      ast: this.ast.$property,\n      category: this.toggleCategoryAction.$property,\n      baseQuery: currentBaseQuery,\n    }).onValue(({ ast, category, baseQuery }) =>\n      this.fetchRelations(baseQuery, ast.conjuncts, category).onValue(this.relations)\n    );\n\n    // facet view updates\n    this.facetView({\n      category: selectedCategory,\n      relation: maybe.Nothing<Relation>(),\n      values: { values: [], loading: false },\n      selectedValues: OrderedMap<Relation, List<F.FacetValue>>(),\n      relationType: null,\n      categoryTemplate: config.config.categories.tupleTemplate,\n      relationTemplate: config.config.relations.tupleTemplate,\n      valuesTemplate: config.config.defaultValueTemplate,\n      selectorMode: config.baseConfig.selectorMode,\n    });\n\n    Kefir.combine(\n      {\n        relation: this.toggleRelationAction.$property,\n        category: this.toggleCategoryAction.$property,\n        values: this.values.$property,\n        selectedValues: this.selectedValues.$property,\n      },\n      { facetView: this.facetView.$property }\n    ).onValue(({ relation, category, values, facetView, selectedValues }) => {\n      facetView.relation = relation;\n      facetView.category = category;\n      facetView.values = values;\n      facetView.selectedValues = selectedValues;\n\n      if (relation.isJust) {\n        const pattern = this.getFacetValuesQueryForRelation(this.config, relation.get());\n        facetView.relationType = pattern.kind;\n\n        let literal;\n        let resource;\n        if (pattern.kind === 'literal') {\n          literal = pattern.tupleTemplate || config.config.defaultValueTemplate.literal;\n        } else if (pattern.kind === 'resource') {\n          resource = pattern.tupleTemplate || config.config.defaultValueTemplate.resource;\n        }\n        facetView.valuesTemplate = { literal, resource };\n      }\n      this.facetView(facetView);\n    });\n\n    // update facet values when user select/deselect relation\n    Kefir.combine(\n      {\n        relation: this.toggleRelationAction.$property,\n        baseQuery: currentBaseQuery,\n      },\n      {\n        ast: this.ast.$property,\n      }\n    ).onValue(({ ast, relation, baseQuery }) => {\n      if (relation.isNothing) {\n        this.values({ values: [], loading: false, error: false });\n      } else {\n        const relationIri = relation.get().iri.value;\n        this.values({ values: [], loading: true, error: false });\n        let facetValues;\n        if (this.valuesCache[relationIri]) {\n          facetValues = Kefir.constant(this.valuesCache[relationIri]);\n        } else {\n          facetValues = this.fetchFacetValues(baseQuery, ast.conjuncts, relation.get());\n        }\n        facetValues\n          .onValue((facetValues) => {\n            this.values({ values: facetValues, loading: false, error: false });\n            this.valuesCache = { [relationIri]: facetValues };\n            trigger({ eventType: BuiltInEvents.ComponentLoaded, source: config.config.id });\n          })\n          .onError((error) => {\n            console.error(error);\n            this.values({ values: [], loading: false, error: true });\n          });\n      }\n    });\n\n    // reset facet values of the selected relation\n    Kefir.combine(\n      { conjunct: this.removeConjunctAction.$property },\n      { selected: this.selectedValues.$property }\n    ).onValue(({ selected, conjunct }) => {\n      const { relation } = conjunct;\n      this.selectedValues(selected.remove(relation));\n    });\n  }\n\n  private initialValues = (ast: F.Ast): SelectedValues => {\n    const selectedValues = OrderedMap<Relation, List<F.FacetValue>>();\n    return selectedValues.withMutations((mutable) => {\n      ast.conjuncts.forEach((conjunct) => mutable.set(conjunct.relation, List(conjunct.disjuncts.map((d) => d.value))));\n    });\n  };\n\n  private buldAst = (values: SelectedValues): F.Ast => {\n    let i = 0;\n    const conjuncts = values\n      .map((selections, relation) => {\n        const disjunctKind = this.getDisjunctType(relation);\n        const disjuncts = selections\n          .map((selection, j) => this.createValueDisjunct(selection, disjunctKind, i, j))\n          .toArray();\n        i = i + 1;\n\n        return {\n          kind: SearchModel.ConjunctKinds.Relation,\n          conjunctIndex: [i],\n          relation: relation,\n          range: relation.hasRange,\n          disjuncts: disjuncts,\n        };\n      })\n      .toArray();\n    return { conjuncts };\n  };\n\n  private getDisjunctType = (relation: Relation) => {\n    const relationType = this.getFacetValuesQueryForRelation(this.config, relation).kind;\n    switch (relationType) {\n      case 'resource':\n        return SearchModel.EntityDisjunctKinds.Resource;\n      case 'date-range':\n        return SearchModel.TemporalDisjunctKinds.DateRange;\n      case 'literal':\n        return SearchModel.LiteralDisjunctKind;\n      case 'numeric-range':\n        return SearchModel.NumericRangeDisjunctKind;\n    }\n  };\n\n  private createValueDisjunct = (\n    value: Resource | F.DateRange | F.Literal | F.NumericRange,\n    disjunctType:\n      | typeof SearchModel.EntityDisjunctKinds.Resource\n      | typeof SearchModel.LiteralDisjunctKind\n      | typeof SearchModel.NumericRangeDisjunctKind\n      | typeof SearchModel.TemporalDisjunctKinds.DateRange,\n    i: number,\n    j: number\n  ): F.FacetRelationDisjunct =>\n    ({\n      kind: disjunctType,\n      disjunctIndex: [i, j],\n      value: value,\n    } as F.FacetRelationDisjunct);\n\n  getFacetedQuery(): Kefir.Property<SparqlJs.SelectQuery> {\n    return this.facetedQuery.$property;\n  }\n\n  getFacetAst(): Kefir.Property<F.Ast> {\n    return this.ast.$property;\n  }\n\n  getFacetData() {\n    return this.facetData.$property;\n  }\n\n  facetActions() {\n    return this.actions;\n  }\n\n  private setBaseQuery = (query: SparqlJs.SelectQuery) => this.baseQuery(query);\n\n  private selectCategory = (category: Category) => {\n    this.toggleCategoryAction(maybe.Just(category));\n  };\n\n  private deselectCategory = () => {\n    this.toggleCategoryAction(maybe.Nothing<Category>());\n  };\n\n  private selectRelation = (relation: Relation) => {\n    this.toggleRelationAction(maybe.Just(relation));\n  };\n\n  private deselectRelation = () => {\n    this.toggleRelationAction(maybe.Nothing<Relation>());\n  };\n\n  private selectFacetValue = (relation: Relation) => (value: F.FacetValue) =>\n    this.selectValueAction({ relation: relation, value: value });\n\n  private deselectFacetValue = (relation: Relation) => (value: F.FacetValue) =>\n    this.deselectValueAction({ relation: relation, value: value });\n\n  private fetchRelations(\n    baseQuery: SparqlJs.SelectQuery,\n    conjuntcs: F.Conjuncts,\n    maybeCategory: Data.Maybe<Category>\n  ): Kefir.Property<Relations> {\n    const relations = this.config.searchProfileStore\n      .relationsFor({\n        domain: maybe.Just(this.config.domain),\n        range: maybeCategory,\n      })\n      .map(this.buildFacetRelationBinding) as Relations;\n\n    const facetEnabledQuery = SparqlUtil.parseQuery<SparqlJs.AskQuery>('ASK { FILTER(?__relationPattern__) }');\n    facetEnabledQuery.where.unshift(...baseQuery.where);\n    facetEnabledQuery.where = facetEnabledQuery.where.concat(this.generateQueryClause(baseQuery, conjuntcs));\n\n    const query = generateQueryForMultipleDatasets(\n      facetEnabledQuery,\n      this.context.selectedDatasets,\n      this.context.baseConfig.datasetsConfig\n    ) as SparqlJs.AskQuery;\n    const enabledFacets = relations\n      .valueSeq()\n      .sortBy((relation) => relation.label)\n      .map((relation) => this.fetchRelation(query, relation))\n      .toArray();\n\n    return Kefir.merge(enabledFacets)\n      .toProperty()\n      .scan(\n        (rels, rel) =>\n          rels.set(\n            RelationKey.key({\n              iri: rel.iri,\n              domain: rel.hasDomain.iri,\n              range: rel.hasRange.iri,\n            }),\n            rel\n          ),\n        relations\n      );\n  }\n\n  private fetchRelation(enabledBaseQuery: SparqlJs.AskQuery, relation: Relation) {\n    const valuesQuery = this.getFacetValuesQueryForRelation(this.config, relation).valuesQuery;\n    const parsedPattern = SparqlUtil.parseQuery<SparqlJs.SelectQuery>(valuesQuery).where;\n    const facetQuery = cloneQuery(enabledBaseQuery);\n    new PatternBinder('__relationPattern__', parsedPattern).sparqlQuery(facetQuery);\n\n    const parametrized = SparqlClient.setBindings(facetQuery, { [FACET_VARIABLES.RELATION_VAR]: relation.iri });\n\n    const serializedQuery = SparqlUtil.serializeQuery(parametrized);\n    if (_.has(this.relationsCache, serializedQuery)) {\n      relation.available = this.relationsCache[serializedQuery];\n      return Kefir.constant(relation);\n    } else {\n      return this.executeRelationCheckQuery(serializedQuery, relation);\n    }\n  }\n\n  private executeRelationCheckQuery = (parametrized: string, relation: Relation) => {\n    return SparqlClient.ask(parametrized, { context: this.context.semanticContext })\n      .map((isFacetEnabled) => {\n        relation.available = isFacetEnabled;\n        this.relationsCache[parametrized] = isFacetEnabled;\n        return relation;\n      })\n      .flatMapErrors((_) => {\n        relation.available = false;\n        return Kefir.constant(relation);\n      });\n  };\n\n  /**\n   * Makes bindings from search profile, available in the tuple for Facet relation item.\n   *\n   * $relation - for relation tuple\n   * $domain - for relation domain category\n   * $range - for relation range category\n   */\n  private buildFacetRelationBinding(relation: Relation): Relation {\n    const tuple: any = {\n      $relation: relation.tuple,\n      $domain: relation.hasDomain.tuple,\n      $range: relation.hasRange.tuple,\n      available: undefined,\n    };\n    return { ...relation, tuple };\n  }\n\n  /**\n   * Makes bindings for category from search profile, available at '$category' varibale, in the\n   * tuple for Facet category item.\n   */\n  private buildFacetCategoryBinding(category: Category): Category {\n    const tuple: any = {\n      $category: category.tuple,\n    };\n    return { ...category, tuple };\n  }\n\n  private fetchFacetValues(\n    baseQuery: SparqlJs.SelectQuery,\n    conjuncts: F.Conjuncts,\n    relation: Relation\n  ): Kefir.Property<Array<F.FacetValue>> {\n    const relationConfig = this.getFacetValuesQueryForRelation(this.config, relation);\n    switch (relationConfig.kind) {\n      case 'resource':\n        return this.fetchFacetResourceValues(baseQuery, conjuncts, relation, relationConfig);\n      case 'date-range':\n        return this.fetchFacetDateRangeValues(baseQuery, conjuncts, relation, relationConfig);\n      case 'literal':\n        return this.fetchFacetLiteralValues(baseQuery, conjuncts, relation, relationConfig);\n      case 'numeric-range':\n        return this.fetchFacetNumericRangeValues(baseQuery, conjuncts, relation, relationConfig);\n    }\n  }\n\n  /**\n   * Augments the facet values with the labels extracted using the LabelsService,\n   * if they were not retrieved by the original query\n   */\n  private augmentWithLabelsFromServiceIfNeeded(values: Array<Resource>): Kefir.Property<Array<Resource>> {\n    // If the labels were not retrieved in the original query,\n    // we retrieve them from the LabelsService, otherwise,\n    // pass the arrays \"as is\"\n    if (values.length > 0 && typeof values[0].label !== 'string') {\n      return LabelsService.getLabels(\n        values.map((value) => value.iri),\n        { context: this.context.semanticContext }\n      ).map((labels) =>\n        values.map((value) => {\n          const label = labels.get(value.iri) as string;\n          value.tuple[FACET_VARIABLES.VALUE_RESOURCE_LABEL_VAR] = Rdf.literal(label);\n          return {\n            iri: value.iri,\n            label,\n            description: label,\n            tuple: value.tuple,\n          };\n        })\n      );\n    } else {\n      return Kefir.constant(values);\n    }\n  }\n\n  private fetchFacetResourceValues(\n    baseQuery: SparqlJs.SelectQuery,\n    conjuncts: F.Conjuncts,\n    relation: Relation,\n    relationConfig: ResourceFacetValue\n  ): Kefir.Property<Array<Resource>> {\n    return this.executeValuesQuery(baseQuery, conjuncts, relation, relationConfig.valuesQuery, true)\n      .map((res) =>\n        res.results.bindings.map((binding) => ({\n          iri: binding[FACET_VARIABLES.VALUE_RESOURCE_VAR] as Rdf.Iri,\n          label:\n            FACET_VARIABLES.VALUE_RESOURCE_LABEL_VAR in binding\n              ? binding[FACET_VARIABLES.VALUE_RESOURCE_LABEL_VAR].value\n              : undefined,\n          description:\n            FACET_VARIABLES.VALUE_RESOURCE_LABEL_VAR in binding\n              ? binding[FACET_VARIABLES.VALUE_RESOURCE_LABEL_VAR].value\n              : undefined,\n          tuple: binding,\n        }))\n      )\n      .flatMap((values) => this.augmentWithLabelsFromServiceIfNeeded(values))\n      .map((values) => _.sortBy(values, (v) => v.label))\n      .toProperty();\n  }\n\n  private fetchFacetDateRangeValues(\n    baseQuery: SparqlJs.SelectQuery,\n    conjuncts: F.Conjuncts,\n    relation: Relation,\n    relationConfig: DateRangeFacetValue\n  ): Kefir.Property<Array<F.DateRange>> {\n    return this.executeValuesQuery(baseQuery, conjuncts, relation, relationConfig.valuesQuery).map((res) =>\n      res.results.bindings\n        .map((binding) => ({\n          begin: moment(binding[FACET_VARIABLES.VALUE_DATE_RANGE_BEGIN_VAR].value, moment.ISO_8601),\n          end: moment(binding[FACET_VARIABLES.VALUE_DATE_RANGE_END_VAR].value, moment.ISO_8601),\n        }))\n        .filter(({ begin, end }) => begin.isValid() && end.isValid())\n    );\n  }\n\n  private fetchFacetLiteralValues(\n    baseQuery: SparqlJs.SelectQuery,\n    conjuncts: F.Conjuncts,\n    relation: Relation,\n    relationConfig: LiteralFacetValue\n  ): Kefir.Property<Array<F.Literal>> {\n    return this.executeValuesQuery(baseQuery, conjuncts, relation, relationConfig.valuesQuery).map((res) =>\n      res.results.bindings.map((binding) => ({\n        literal: binding[FACET_VARIABLES.VALUE_LITERAL] as Rdf.Literal,\n        tuple: binding,\n      }))\n    );\n  }\n\n  private fetchFacetNumericRangeValues(\n    baseQuery: SparqlJs.SelectQuery,\n    conjuncts: F.Conjuncts,\n    relation: Relation,\n    relationConfig: NumericRangeFacetValue\n  ): Kefir.Property<Array<F.NumericRange>> {\n    return this.executeValuesQuery(baseQuery, conjuncts, relation, relationConfig.valuesQuery).map((res) =>\n      res.results.bindings.map((binding) => ({\n        begin: parseFloat(binding[FACET_VARIABLES.VALUE_NUMERIC_RANGE_BEGIN_VAR].value),\n        end: parseFloat(binding[FACET_VARIABLES.VALUE_NUMERIC_RANGE_END_VAR].value),\n        tuple: binding,\n      }))\n    );\n  }\n\n  private executeValuesQuery(\n    baseQuery: SparqlJs.SelectQuery,\n    conjuncts: F.Conjuncts,\n    relation: Relation,\n    facetValuesQuery: string,\n    isResourceQuery = false\n  ) {\n    const facetsQuery = rewriteProjectionVariable(\n      SparqlUtil.parseQuerySync<SparqlJs.SelectQuery>(facetValuesQuery),\n      this.getProjectionVariable(baseQuery)\n    );\n    facetsQuery.where.unshift(...baseQuery.where);\n    facetsQuery.where = facetsQuery.where.concat(\n      this.generateQueryClause(baseQuery, this.excludeClauseForRelation(conjuncts, relation.iri))\n    );\n\n    // If we have a threshold for the number of displayed facet values,\n    // we introduce a limit into the query to retrieve only (threshold + 1) results\n    if (isResourceQuery && this.config.config.facetValuesThreshold > 0) {\n      facetsQuery.limit = this.config.config.facetValuesThreshold + 1;\n    }\n\n    const query = SparqlClient.setBindings(\n      facetsQuery,\n      _.assign(\n        {\n          [FACET_VARIABLES.RELATION_VAR]: relation.iri,\n          [FACET_VARIABLES.RANGE_VAR]: relation.hasRange.iri,\n        },\n        {\n          [SEMANTIC_SEARCH_VARIABLES.SELECTED_ALIGNMENT]: this.context.selectedAlignment\n            .map((a) => a.iri)\n            .getOrElse(undefined),\n        }\n      )\n    );\n\n    const federatedQuery = generateQueryForMultipleDatasets(\n      query,\n      this.context.selectedDatasets,\n      this.context.baseConfig.datasetsConfig\n    );\n    return SparqlClient.select(federatedQuery, { context: this.context.semanticContext });\n  }\n\n  private excludeClauseForRelation(conjuncts: F.Conjuncts, relation: Rdf.Iri) {\n    return _.reject(conjuncts, (conjunct) => conjunct.relation.iri.equals(relation));\n  }\n\n  private generateQuery(baseQuery: SparqlJs.SelectQuery, conjuncts: F.Conjuncts): SparqlJs.SelectQuery {\n    const patterns = this.generateQueryClause(baseQuery, conjuncts);\n    const query = _.clone(baseQuery);\n    query.where = query.where.concat(patterns);\n    return query;\n  }\n\n  private getFacetValuesQueryForRelation(config: FacetStoreConfig, relation: Relation): FacetValuePattern {\n    const { valueCategories, valueRelations } = config.config;\n    const rangeIri = relation.hasRange.iri.toString();\n    const relationIri = relation.iri.toString();\n    if (_.has(valueRelations, relationIri)) {\n      return valueRelations[relationIri];\n    } else if (_.has(valueCategories, rangeIri)) {\n      return valueCategories[rangeIri];\n    } else {\n      return generateFacetValuePatternFromRelation(config, relation);\n    }\n  }\n\n  private getProjectionVariable(baseQuery: SparqlJs.SelectQuery): string {\n    if (this.config.availableDomains) {\n      return this.config.availableDomains.get(this.config.domain.iri);\n    }\n    const variables = baseQuery.variables;\n    return variables[0] as string;\n  }\n\n  private generateQueryClause(baseQuery: SparqlJs.SelectQuery, conjuncts: F.Conjuncts): Array<SparqlJs.Pattern> {\n    if (this.config.availableDomains) {\n      return this.config.availableDomains\n        .map((projectionVariable, iri) => {\n          const filteredConjuncts = conjuncts.filter((conjunct) => conjunct.relation.hasDomain.iri.equals(iri));\n          return conjunctsToQueryPatterns(\n            this.config.baseConfig,\n            projectionVariable,\n            this.config.domain,\n            filteredConjuncts\n          );\n        })\n        .flatten()\n        .toArray();\n    }\n    return conjunctsToQueryPatterns(\n      this.config.baseConfig,\n      this.getProjectionVariable(baseQuery),\n      this.config.domain,\n      conjuncts\n    );\n  }\n\n  private removeConjunct = (conjunct: SearchModel.RelationConjunct) => {\n    this.removeConjunctAction(conjunct);\n  };\n}\n\n/**\n * Supported subset of relation kinds for facet value pattern autogeneration.\n */\ntype PatterConfig = SearchConfig.Resource | SearchConfig.Literal;\ntype PatternKind = PatterConfig['kind'];\n\n/**\n * Generates a default query for facet values using {@link SemanticFacetConfig.defaultValueQuery}\n * as base template and parametrizes it with relation pattern.\n */\nfunction generateFacetValuePatternFromRelation(config: FacetStoreConfig, relation: Relation): FacetValuePattern {\n  const relationPatterns = tryGetRelationPatterns(config.baseConfig, relation).filter((p) =>\n    _.some(['resource', 'literal', 'date-range', 'numeric-range'], (kind) => kind === p.kind)\n  ) as PatterConfig[];\n\n  const patternConfig = relationPatterns.length === 1 ? relationPatterns[0] : undefined;\n  if (relationPatterns.length > 1) {\n    console.warn(`Found multiple matching patterns for facet relation ${relation.iri}`);\n  }\n\n  let { kind = 'resource' as PatterConfig['kind'], queryPattern } = patternConfig || ({} as Partial<PatterConfig>);\n  if (queryPattern === undefined) {\n    queryPattern =\n      kind === 'resource'\n        ? SearchDefaults.DefaultFacetValuesQueries.ResourceRelationPattern\n        : kind === 'literal'\n        ? SearchDefaults.DefaultFacetValuesQueries.LiteralRelationPattern\n        : assertHandledEveryPatternKind(kind);\n  }\n\n  const query = SparqlUtil.parseQuery(getDefaultValuesQuery(config.config, kind));\n  const parsed = SparqlUtil.parsePatterns(queryPattern, query.prefixes);\n\n  const facetRelationPattern = transformRelationPatternForFacetValues(parsed, kind);\n  new PatternBinder(FACET_VARIABLES.RELATION_PATTERN_VAR, facetRelationPattern).sparqlQuery(query);\n\n  const valuesQuery = SparqlUtil.serializeQuery(query);\n  return kind === 'resource'\n    ? { kind: 'resource', valuesQuery }\n    : kind === 'literal'\n    ? { kind: 'literal', valuesQuery }\n    : kind === 'date-range'\n    ? { kind: 'date-range', valuesQuery }\n    : kind === 'numeric-range'\n    ? { kind: 'numeric-range', valuesQuery }\n    : assertHandledEveryPatternKind(kind);\n}\n\nfunction getDefaultValuesQuery(config: SemanticFacetConfig, kind: PatternKind) {\n  const defaultQueries = SearchDefaults.DefaultFacetValuesQueries;\n  return kind === 'resource'\n    ? config.defaultValueQueries.resource || defaultQueries.forResource()\n    : kind === 'literal'\n    ? config.defaultValueQueries.literal || defaultQueries.forLiteral()\n    : kind === 'date-range'\n    ? defaultQueries.forDateRange()\n    : kind === 'numeric-range'\n    ? defaultQueries.forNumericRange()\n    : assertHandledEveryPatternKind(kind);\n}\n\n/**\n * Renames resource variable in the relation pattern\n * to use it as part of facet values query.\n */\nfunction transformRelationPatternForFacetValues(pattern: SparqlJs.Pattern[], kind: PatternKind) {\n  let binder: QueryVisitor;\n  if (kind === 'resource') {\n    binder = new VariableRenameBinder(SEMANTIC_SEARCH_VARIABLES.RESOURCE_VAR, FACET_VARIABLES.VALUE_RESOURCE_VAR);\n  } else if (kind === 'literal') {\n    binder = new VariableRenameBinder(SEMANTIC_SEARCH_VARIABLES.LITERAL_VAR, FACET_VARIABLES.VALUE_LITERAL);\n  } else if (kind === 'date-range') {\n    const range = {\n      begin: SEMANTIC_SEARCH_VARIABLES.DATE_BEGING_VAR,\n      end: SEMANTIC_SEARCH_VARIABLES.DATE_END_VAR,\n    };\n    const rangeTo = {\n      begin: FACET_VARIABLES.VALUE_DATE_RANGE_BEGIN_VAR,\n      end: FACET_VARIABLES.VALUE_DATE_RANGE_END_VAR,\n    };\n    return transformRangePattern(pattern, range, rangeTo);\n  } else if (kind === 'numeric-range') {\n    const range = {\n      begin: SEMANTIC_SEARCH_VARIABLES.NUMERIC_RANGE_BEGIN_VAR,\n      end: SEMANTIC_SEARCH_VARIABLES.NUMERIC_RANGE_END_VAR,\n    };\n    const rangeTo = {\n      begin: FACET_VARIABLES.VALUE_NUMERIC_RANGE_BEGIN_VAR,\n      end: FACET_VARIABLES.VALUE_NUMERIC_RANGE_END_VAR,\n    };\n    return transformRangePattern(pattern, range, rangeTo);\n  } else {\n    assertHandledEveryPatternKind(kind);\n  }\n\n  const clonedPattern = _.cloneDeep(pattern);\n  clonedPattern.forEach((p) => binder.pattern(p));\n  return clonedPattern;\n}\n\nfunction assertHandledEveryPatternKind(kind: never): never {\n  throw new Error(`Unexpected pattern kind: ${kind}`);\n}\n"],"sourceRoot":""}