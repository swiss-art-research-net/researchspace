{"version":3,"sources":["webpack:///./src/main/web/components/admin/config-manager/ConfigManager.tsx","webpack:///./src/main/web/components/admin/config-manager/InlineValuesEditor.tsx"],"names":["props","state","isLoading","loadingError","undefined","alertError","alertType","AlertType","NONE","editedProperty","savingProperty","render","this","ErrorNotification","errorMessage","Spinner","className","styles","component","getTable","editable","capitalizeFirstLetter","s","charAt","toUpperCase","slice","group","componentDidMount","loadConfigData","setState","Error","apps","setEditedProperty","propertyName","hideError","submitProperty","values","targetApp","onSetConfig","writableApps","Set","app","writable","add","appId","columnConfig","displayName","variableName","cellComponent","record","rowData","name","InlineValuesEditor","valuesEditor","source","onSave","onCancel","hasRelatedError","length","noValue","propertyValuesCell","propertyValues","map","value","index","key","propertyValue","Button","disabled","onClick","Alert","alert","message","ErrorPresenter","error","originalError","Component","propertyApps","definedByApps","RemovableBadge","propertyApp","disableClick","disableRemove","has","onRemove","onDeleteConfig","shadowed","layout","tupleTemplate","maybe","Nothing","options","resultsPerPage","Table","numberOfDisplayedRows","Just","columnConfiguration","data","Either","Left","Kefir","combine","ConfigService","getStorageStatus","getConfigsInGroup","observe","_","v","type","parameterType","configValueToArray","err","setConfig","DANGER","deleteConfig","ConfigManager","context","order","targetValues","apply","Ordering","empty","chooseDefaultTargetApp","last","allowedToSave","isConfigValuesEqual","left","right","i","classnames","renderInput","StorageSelector","storageSelector","allApps","sourceApps","onChange","footer","submitControls","save","bsStyle","isSet","checked","e","currentTarget","ReorderableList","dragByHandle","itemClass","reorderedItem","ordering","onOrderChanged","removableItem","renderMultilineEditor","removeItemButton","splice","preventDefault","multilineEditor","text"],"mappings":"6IAkBA,QACA,OACA,OACA,QACA,QACA,QACA,UAGA,SACA,UACA,SACA,SACA,UACA,SAEA,UAEA,UAkBA,cACE,uBAAYA,EAA2BC,GAAvC,MACE,YAAMD,EAAOC,IAAM,K,OACnB,EAAKA,MAAQ,CACXC,WAAW,EACXC,kBAAcC,EACdC,gBAAYD,EACZE,UAAW,EAAAC,UAAUC,KACrBC,oBAAgBL,EAChBM,gBAAgB,G,EAoPtB,OA7PmC,6BAa1B,wBAAAC,OAAP,WACE,OAAIC,KAAKX,MAAME,aACN,gBAAC,EAAAU,kBAAiB,CAACC,aAAcF,KAAKX,MAAME,eAC1CS,KAAKX,MAAMC,UACb,gBAAC,EAAAa,QAAO,MAGf,uBAAKC,UAAWC,EAAOC,WACpBN,KAAKO,WACLP,KAAKZ,MAAMoB,SAAW,KACrB,yBAwOV,SAASC,sBAAsBC,GAC7B,OAAOA,EAAEC,OAAO,GAAGC,cAAgBF,EAAEG,MAAM,GAxOhCJ,CAAsBT,KAAKZ,MAAM0B,O,0DAQrC,wBAAAC,kBAAP,WACMf,KAAKZ,MAAM0B,MACbd,KAAKgB,iBAELhB,KAAKiB,SAAS,CACZ3B,WAAW,EACXC,aAAc,IAAI2B,MAAM,+CAKtB,wBAAAX,SAAR,WAoBE,IApBF,WACUC,EAAA,WAAAA,SACF,aAAEW,EAAA,EAAAA,KAAMtB,EAAA,EAAAA,eAAgBC,EAAA,EAAAA,eAAgBL,EAAA,EAAAA,WAAYC,EAAA,EAAAA,UAEpD0B,kBAAoB,SAACC,GACzB,IAAMC,EAAY7B,GAAc4B,IAAiB5B,EAAW4B,aAC5D,EAAKJ,SAAS,CACZpB,eAAgBwB,EAChB5B,WAAY6B,OAAY9B,EAAYC,EACpCC,UAAW4B,EAAY,EAAA3B,UAAUC,KAAOF,KAGtC6B,eAAiB,SAACC,EAA+BC,GACrD,EAAKC,YAAY7B,EAAgB2B,EAAQC,IAMrCE,EAAe,IAAIC,IACP,MAAAT,EAAA,eAAM,CAAnB,IAAMU,EAAG,KACRA,EAAIC,UACNH,EAAaI,IAAIF,EAAIG,OAIzB,IA+EMC,EAA2C,CAC/C,CAAEC,YAAa,OAAQC,aAAc,QACrC,CAAED,YAAa,QAASE,cAjFP,YAAG,mB,+CAmDtB,OAnDoC,uBAClC,kBAAArC,OAAA,WACE,IAAMsC,EAASrC,KAAKZ,MAAMkD,QAC1B,GAAID,EAAOE,OAAS1C,EAClB,OAAIC,EACK,gBAAC,EAAAK,QAAO,MAGf,gBAAC,EAAAqC,mBAAkB,CACjBpC,UAAWC,EAAOoC,aAClBC,OAAQL,EACRlB,KAAMA,EACNwB,OAAQpB,eACRqB,SAAU,WAAM,OAAAxB,uBAAkB5B,MAItC,IAAMqD,EAAkBpD,GAAc4C,EAAOE,OAAS9C,EAAW4B,aACjE,OACE,2BAC4B,IAAzBgB,EAAOb,OAAOsB,OACb,uBAAK1C,UAAWC,EAAO0C,SAAO,cAE9B,uBAAK3C,UAAWC,EAAO2C,oBACrB,uBAAK5C,UAAWC,EAAO4C,gBACpBZ,EAAOb,OAAO0B,KAAI,SAACC,EAAOC,GAAU,OACnC,uBAAKC,IAAKD,EAAOhD,UAAWC,EAAOiD,eAChCH,OAIP,gBAAC,EAAAI,OAAM,CACLnD,UAAU,WACVoD,UAAWhD,GAAYV,EACvB2D,QAAS,WAAM,OAAArC,kBAAkBiB,EAAOE,QAExC,wBAAMnC,UAAU,iB,UAIrByC,EACC,gBAAC,EAAAa,MAAK,CAACC,MAAOjE,EAAWkE,QAAS,IAChC,gBAAC,EAAAC,eAAc,CAACC,MAAOrE,EAAWsE,iBAElC,KAOd,QAnDsB,CAAc,EAAAC,YAkFlC,CAAE9B,YAAa,kBAAmBE,cA9BT,YAAG,mB,+CAmB9B,OAnB4C,uBAC1C,kBAAArC,OAAA,WACE,IAAMsC,EAASrC,KAAKZ,MAAMkD,QAC1B,OACE,uBAAKlC,UAAWC,EAAO4D,cACpB5B,EAAO6B,cAAchB,KAAI,SAAClB,GAAU,OACnC,gBAAC,EAAAmC,eAAc,CACbd,IAAKrB,EACL5B,UAAWC,EAAO+D,YAClBC,cAAc,EACdC,eAAgB9D,IAAamB,EAAa4C,IAAIvC,IAAUlC,EACxD0E,SAAU,WAAM,OA1EJnD,EA0EmBgB,EAAOE,KA1EJd,EA0EUO,OAzEtD,EAAKyC,eAAepD,EAAcI,GADb,IAACJ,EAAsBI,IA4EjCO,QAMb,QAnB8B,CAAc,EAAAgC,YA+B1C,CAAE9B,YAAa,WAAYE,cAXP,YAAG,mB,+CAKzB,OALuC,uBACrC,kBAAArC,OAAA,WAEE,OADeC,KAAKZ,MAAMkD,QACZoC,SAAW,mCAAmB,MAEhD,QALyB,CAAc,EAAAV,aAcjCW,EAAsB,CAC1BC,cAAeC,EAAMC,UACrBC,QAAS,CACPC,eAAgB,KAIpB,OACE,gBAAC,EAAAC,MAAK,CACJC,sBAAuBL,EAAMM,KAAK,IAClCC,oBAAqBnD,EACrBoD,KAAMC,EAAOC,KAA0DvF,KAAKX,MAAMgG,MAClFV,OAAQE,EAAMM,KAAKR,MAKjB,wBAAA3D,eAAR,sBACEhB,KAAKiB,SAAS,CACZ3B,WAAW,EACXC,kBAAcC,EACdC,gBAAYD,EACZE,UAAW,EAAAC,UAAUC,OAGvB4F,EAAMC,QAAQ,CACZtE,KAAMuE,EAAcC,mBACpBN,KAAMK,EAAcE,kBAAkB5F,KAAKZ,MAAM0B,SAChD+E,QAAQ,CACT1C,MAAO,SAAC,G,IAAEhC,EAAA,EAAAA,KAAMkE,EAAA,EAAAA,KACd,EAAKpE,SAAS,CACZ3B,WAAW,EACX6B,KAAI,EACJkE,KAAMS,EAAE5C,IAAImC,GAAM,SAACU,EAAGxD,GAAS,OAC7BA,KAAI,EACJyD,KAAMD,EAAEE,cACRzE,OAAQkE,EAAcQ,mBAAmBH,EAAE5C,OAC3Ce,cAAe6B,EAAE7B,cACjBQ,SAAUqB,EAAErB,gBAIlBZ,MAAO,SAACqC,GACN,EAAKlF,SAAS,CACZ3B,WAAW,EACXC,aAAc4G,QAMd,wBAAAzE,YAAR,SAAoBL,EAAsBG,EAA+BC,GAAzE,WACEzB,KAAKiB,SAAS,CACZpB,eAAgBwB,EAChBvB,gBAAgB,EAChBL,gBAAYD,EACZE,UAAW,EAAAC,UAAUC,OAGvB8F,EAAcU,UAAUpG,KAAKZ,MAAM0B,MAAOO,EAAcG,EAAQC,GAAWoE,QAAQ,CACjF1C,MAAO,WACL,EAAKlC,SAAS,CAAEpB,oBAAgBL,EAAWM,gBAAgB,IAC3D,EAAKkB,kBAEP8C,MAAO,SAACqC,GACN,EAAKlF,SAAS,CACZpB,oBAAgBL,EAChBM,gBAAgB,EAChBL,WAAY,CAAE4B,aAAY,EAAE0C,cAAeoC,GAC3CzG,UAAW,EAAAC,UAAU0G,aAMrB,wBAAA5B,eAAR,SAAuBpD,EAAsBI,GAA7C,WACEzB,KAAKiB,SAAS,CACZpB,eAAgBwB,EAChBvB,gBAAgB,EAChBL,gBAAYD,EACZE,UAAW,EAAAC,UAAUC,OAGvB8F,EAAcY,aAAatG,KAAKZ,MAAM0B,MAAOO,EAAcI,GAAWoE,QAAQ,CAC5E1C,MAAO,WACL,EAAKlC,SAAS,CAAEpB,oBAAgBL,EAAWM,gBAAgB,IAC3D,EAAKkB,kBAEP8C,MAAO,SAACqC,GACN,EAAKlF,SAAS,CACZpB,oBAAgBL,EAChBM,gBAAgB,EAChBL,WAAY,CAAE4B,aAAY,EAAE0C,cAAeoC,GAC3CzG,UAAW,EAAAC,UAAU0G,aAK/B,cA7PA,CAAmC,EAAArC,WAAtB,EAAAuC,gBAmQb,UAAeA,G,kFCvSf,OACA,QACA,OACA,QAEA,UAEA,QAGA,UAEA,UAEA,UAwBA,cACE,4BAAYnH,EAAgCoH,GAA5C,MACE,YAAMpH,EAAOoH,IAAQ,K,OAgHf,EAAA7D,OAAS,WACP,IAAAA,EAAA,QAAAA,OACF,UAAE8D,EAAA,EAAAA,MAAOC,EAAA,EAAAA,aAAcjF,EAAA,EAAAA,UAE7BkB,EADsB8D,EAAME,MAAMD,GACZjF,IAnHtB,EAAKpC,MAAQ,CACXoH,MAAO,EAAAG,SAASC,MAChBH,aAAc,EAAKtH,MAAMsD,OAAOlB,OAChCC,UAAW,EAAAqF,uBAAuB,EAAK1H,MAAM+B,KAAM2E,EAAEiB,KAAK,EAAK3H,MAAMsD,OAAOwB,iB,EAkHlF,OAxHwC,kCAUtC,6BAAAnE,OAAA,sBACQ,aAAEK,EAAA,EAAAA,UAAWsC,EAAA,EAAAA,OAAQvB,EAAA,EAAAA,KAAMyB,EAAA,EAAAA,SAC3B,aAAE8D,EAAA,EAAAA,aAAcjF,EAAA,EAAAA,UAAWgF,EAAA,EAAAA,MAE3BO,EACJvF,KACEA,IAAcqE,EAAEiB,KAAKrE,EAAOwB,gBA0GpC,SAAS+C,oBAAoBC,EAA6BC,GACxD,GAAID,EAAKpE,SAAWqE,EAAMrE,OACxB,OAAO,EAET,IAAK,IAAIsE,EAAI,EAAGA,EAAIF,EAAKpE,OAAQsE,IAC/B,GAAIF,EAAKE,KAAOD,EAAMC,GACpB,OAAO,EAGX,OAAO,EAnH6CH,CAAoBvE,EAAOlB,OAAQiF,EAAME,MAAMD,KAEjG,OACE,uBAAKtG,UAAWiH,EAAWhH,EAAOC,UAAWF,IAC1CJ,KAAKsH,YAAY5E,EAAOsD,KAAMU,GAC/B,gBAAC,EAAAa,gBAAe,CACdnH,UAAWC,EAAOmH,gBAClBC,QAAStG,EACTuG,WAAYhF,EAAOwB,cACnBzC,UAAWA,EACXkG,SAAU,SAAC9F,GAAQ,SAAKZ,SAAS,CAAEQ,UAAWI,OAEhD,uBAAKzB,UAAWC,EAAOuH,QACrB,uBAAKxH,UAAWC,EAAOwH,gBACrB,gBAAC,EAAAtE,OAAM,CAACnD,UAAWC,EAAOyH,KAAMC,QAAQ,UAAUvE,UAAWwD,EAAevD,QAASzD,KAAK2C,QAAM,QAGhG,gBAAC,EAAAY,OAAM,CAACE,QAASb,GAAQ,cAO3B,6BAAA0E,YAAR,SAAoBtB,EAA4BxE,GAAhD,WACE,GAAa,YAATwE,EAAoB,CACtB,IAAMgC,EAA0B,IAAlBxG,EAAOsB,QAAqC,UAAdtB,EAAO,GACnD,OACE,yBACEwE,KAAK,WACLiC,QAASD,EACTL,SAAU,SAACO,GACT,IAAMD,EAAUC,EAAEC,cAAcF,QAChC,EAAKhH,SAAS,CAAEyF,aAAc,CAACuB,EAAU,OAAS,cAInD,GAAa,eAATjC,EACT,OACE,2BACE,gBAAC,EAAAoC,gBAAe,CACdC,cAAc,EACdC,UAAWjI,EAAOkI,cAClBC,SAAUxI,KAAKX,MAAMoH,MACrBgC,eAAgB,SAAChC,GAAU,SAAKxF,SAAS,CAAEwF,MAAK,MAE/CjF,EAAO0B,KAAI,SAACC,EAAOC,GAAU,OAC5B,uBAAKC,IAAKD,EAAOhD,UAAWC,EAAOqI,eAChC,EAAKC,sBAAsBxF,EAAOC,GACnC,gBAAC,EAAAG,OAAM,CACLnD,UAAWC,EAAOuI,iBAClBnF,QAAS,WACP,IAAMiD,EAAe,EAAH,eAAOlF,GACzBkF,EAAamC,OAAOzF,EAAO,GAC3B,EAAKnC,SAAS,CAAEyF,aAAY,MAG9B,wBAAMtG,UAAU,sBAKxB,qBACEA,eAAWZ,EACXiE,QAAS,SAACyE,GACRA,EAAEY,iBACF,EAAK7H,SAAS,CAAEyF,aAAc,EAAF,eAAMlF,EAAQ,UAC3C,8BAOP,IAAM2B,EAA0B,IAAlB3B,EAAOsB,OAAe,GAAKtB,EAAO,GAChD,OAAOxB,KAAK2I,sBAAsBxF,EAAO,IAIrC,6BAAAwF,sBAAR,SAA8BxF,EAAeC,GAA7C,WACE,OACE,gBAAC,UAAgB,CACfhD,UAAWC,EAAO0I,gBAClB5F,MAAOA,EACPwE,SAAU,SAACO,GACT,IAAMc,EAAOd,EAAEC,cAAchF,MAC7B,EAAKlC,UACH,SAAC5B,GACC,IAAMqH,EAAe,EAAH,eAAOrH,EAAMqH,cAE/B,OADAA,EAAamC,OAAOzF,EAAO,EAAG4F,GACvB,CAAEtC,aAAY,UAcnC,mBAxHA,CAAwC,EAAA1C,WAA3B,EAAAxB","file":"mp-admin-config-manager-f66413df74c30349de80.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as Kefir from 'kefir';\nimport * as React from 'react';\nimport { Component } from 'react';\nimport * as maybe from 'data.maybe';\nimport * as _ from 'lodash';\nimport { Button } from 'react-bootstrap';\nimport * as Either from 'data.either';\n\nimport { SparqlClient } from 'platform/api/sparql';\nimport * as ConfigService from 'platform/api/services/config';\nimport { Table, TableLayout, TableColumnConfiguration, CellRendererProps } from 'platform/components/semantic/table';\nimport { ErrorNotification, ErrorPresenter } from 'platform/components/ui/notification';\nimport { Alert, AlertType } from 'platform/components/ui/alert';\nimport { RemovableBadge } from 'platform/components/ui/inputs';\nimport { Spinner } from 'platform/components/ui/spinner';\n\nimport { InlineValuesEditor, ConfigRecord } from './InlineValuesEditor';\n\nimport * as styles from './ConfigManager.scss';\n\nexport interface ConfigManagerProps {\n  group?: string;\n  editable?: boolean;\n}\n\ninterface State {\n  isLoading: boolean;\n  apps?: ReadonlyArray<ConfigService.ConfigStorageStatus>;\n  data?: ReadonlyArray<ConfigRecord>;\n  loadingError?: any;\n  alertError?: { originalError: any; propertyName: string };\n  alertType?: AlertType;\n  editedProperty?: string;\n  savingProperty?: boolean;\n}\n\nexport class ConfigManager extends Component<ConfigManagerProps, State> {\n  constructor(props: ConfigManagerProps, state: State) {\n    super(props, state);\n    this.state = {\n      isLoading: true,\n      loadingError: undefined,\n      alertError: undefined,\n      alertType: AlertType.NONE,\n      editedProperty: undefined,\n      savingProperty: false,\n    };\n  }\n\n  public render() {\n    if (this.state.loadingError) {\n      return <ErrorNotification errorMessage={this.state.loadingError} />;\n    } else if (this.state.isLoading) {\n      return <Spinner />;\n    }\n    return (\n      <div className={styles.component}>\n        {this.getTable()}\n        {this.props.editable ? null : (\n          <i>\n            {capitalizeFirstLetter(this.props.group)}\n            &nbsp;configuration group is not editable during runtime.\n          </i>\n        )}\n      </div>\n    );\n  }\n\n  public componentDidMount() {\n    if (this.props.group) {\n      this.loadConfigData();\n    } else {\n      this.setState({\n        isLoading: false,\n        loadingError: new Error('Config property group must not be empty.'),\n      });\n    }\n  }\n\n  private getTable() {\n    const { editable } = this.props;\n    const { apps, editedProperty, savingProperty, alertError, alertType } = this.state;\n\n    const setEditedProperty = (propertyName: string | undefined) => {\n      const hideError = alertError && propertyName === alertError.propertyName;\n      this.setState({\n        editedProperty: propertyName,\n        alertError: hideError ? undefined : alertError,\n        alertType: hideError ? AlertType.NONE : alertType,\n      });\n    };\n    const submitProperty = (values: ReadonlyArray<string>, targetApp: string) => {\n      this.onSetConfig(editedProperty, values, targetApp);\n    };\n    const deleteProperty = (propertyName: string, targetApp: string) => {\n      this.onDeleteConfig(propertyName, targetApp);\n    };\n\n    const writableApps = new Set<string>();\n    for (const app of apps) {\n      if (app.writable) {\n        writableApps.add(app.appId);\n      }\n    }\n\n    const valueRenderer = class extends Component<CellRendererProps, {}> {\n      render() {\n        const record = this.props.rowData as ConfigRecord;\n        if (record.name === editedProperty) {\n          if (savingProperty) {\n            return <Spinner />;\n          }\n          return (\n            <InlineValuesEditor\n              className={styles.valuesEditor}\n              source={record}\n              apps={apps}\n              onSave={submitProperty}\n              onCancel={() => setEditedProperty(undefined)}\n            />\n          );\n        } else {\n          const hasRelatedError = alertError && record.name === alertError.propertyName;\n          return (\n            <div>\n              {record.values.length === 0 ? (\n                <div className={styles.noValue}>(no value)</div>\n              ) : (\n                <div className={styles.propertyValuesCell}>\n                  <div className={styles.propertyValues}>\n                    {record.values.map((value, index) => (\n                      <div key={index} className={styles.propertyValue}>\n                        {value}\n                      </div>\n                    ))}\n                  </div>\n                  <Button\n                    className=\"btn-grey\"\n                    disabled={!editable || savingProperty}\n                    onClick={() => setEditedProperty(record.name)}\n                  >\n                    <span className=\"fa fa-pencil\" /> Edit\n                  </Button>\n                </div>\n              )}\n              {hasRelatedError ? (\n                <Alert alert={alertType} message={''}>\n                  <ErrorPresenter error={alertError.originalError} />\n                </Alert>\n              ) : (\n                ''\n              )}\n            </div>\n          );\n        }\n      }\n    };\n    const definedByAppsRenderer = class extends Component<CellRendererProps, {}> {\n      render() {\n        const record = this.props.rowData as ConfigRecord;\n        return (\n          <div className={styles.propertyApps}>\n            {record.definedByApps.map((appId) => (\n              <RemovableBadge\n                key={appId}\n                className={styles.propertyApp}\n                disableClick={true}\n                disableRemove={!editable || !writableApps.has(appId) || savingProperty}\n                onRemove={() => deleteProperty(record.name, appId)}\n              >\n                {appId}\n              </RemovableBadge>\n            ))}\n          </div>\n        );\n      }\n    };\n    const shadowedRenderer = class extends Component<CellRendererProps, {}> {\n      render() {\n        const record = this.props.rowData as ConfigRecord;\n        return record.shadowed ? <span>yes</span> : null;\n      }\n    };\n\n    const columnConfig: TableColumnConfiguration[] = [\n      { displayName: 'Name', variableName: 'name' },\n      { displayName: 'Value', cellComponent: valueRenderer },\n      { displayName: 'Defined by apps', cellComponent: definedByAppsRenderer },\n      { displayName: 'Shadowed', cellComponent: shadowedRenderer },\n    ];\n\n    const layout: TableLayout = {\n      tupleTemplate: maybe.Nothing<string>(),\n      options: {\n        resultsPerPage: 20,\n      },\n    };\n\n    return (\n      <Table\n        numberOfDisplayedRows={maybe.Just(10)}\n        columnConfiguration={columnConfig}\n        data={Either.Left<ReadonlyArray<any>, SparqlClient.SparqlSelectResult>(this.state.data)}\n        layout={maybe.Just(layout)}\n      />\n    );\n  }\n\n  private loadConfigData() {\n    this.setState({\n      isLoading: true,\n      loadingError: undefined,\n      alertError: undefined,\n      alertType: AlertType.NONE,\n    });\n\n    Kefir.combine({\n      apps: ConfigService.getStorageStatus(),\n      data: ConfigService.getConfigsInGroup(this.props.group),\n    }).observe({\n      value: ({ apps, data }) => {\n        this.setState({\n          isLoading: false,\n          apps,\n          data: _.map(data, (v, name) => ({\n            name,\n            type: v.parameterType,\n            values: ConfigService.configValueToArray(v.value),\n            definedByApps: v.definedByApps,\n            shadowed: v.shadowed,\n          })),\n        });\n      },\n      error: (err) => {\n        this.setState({\n          isLoading: false,\n          loadingError: err,\n        });\n      },\n    });\n  }\n\n  private onSetConfig(propertyName: string, values: ReadonlyArray<string>, targetApp: string) {\n    this.setState({\n      editedProperty: propertyName,\n      savingProperty: true,\n      alertError: undefined,\n      alertType: AlertType.NONE,\n    });\n\n    ConfigService.setConfig(this.props.group, propertyName, values, targetApp).observe({\n      value: () => {\n        this.setState({ editedProperty: undefined, savingProperty: false });\n        this.loadConfigData();\n      },\n      error: (err) => {\n        this.setState({\n          editedProperty: undefined,\n          savingProperty: false,\n          alertError: { propertyName, originalError: err },\n          alertType: AlertType.DANGER,\n        });\n      },\n    });\n  }\n\n  private onDeleteConfig(propertyName: string, targetApp: string) {\n    this.setState({\n      editedProperty: propertyName,\n      savingProperty: true,\n      alertError: undefined,\n      alertType: AlertType.NONE,\n    });\n\n    ConfigService.deleteConfig(this.props.group, propertyName, targetApp).observe({\n      value: () => {\n        this.setState({ editedProperty: undefined, savingProperty: false });\n        this.loadConfigData();\n      },\n      error: (err) => {\n        this.setState({\n          editedProperty: undefined,\n          savingProperty: false,\n          alertError: { propertyName, originalError: err },\n          alertType: AlertType.DANGER,\n        });\n      },\n    });\n  }\n}\n\nfunction capitalizeFirstLetter(s: string) {\n  return s.charAt(0).toUpperCase() + s.slice(1);\n}\n\nexport default ConfigManager;\n","/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as classnames from 'classnames';\nimport * as _ from 'lodash';\nimport * as React from 'react';\nimport { Button, ButtonToolbar, FormControl } from 'react-bootstrap';\nimport ReactSelect from 'react-select';\nimport TextareaAutosize from 'react-textarea-autosize';\n\nimport { Component } from 'platform/api/components';\nimport { ConfigGroup, ConfigStorageStatus } from 'platform/api/services/config';\n\nimport { ReorderableList, Ordering } from 'platform/components/ui/reorderable-list';\n\nimport { StorageSelector, chooseDefaultTargetApp } from './StorageSelector';\n\nimport * as styles from './InlineValuesEditor.scss';\n\nexport interface InlineValuesEditorProps {\n  className?: string;\n  source: ConfigRecord;\n  apps: ReadonlyArray<ConfigStorageStatus>;\n  onSave: (values: ReadonlyArray<string>, targetApp: string) => void;\n  onCancel: () => void;\n}\n\nexport interface ConfigRecord {\n  readonly name: string;\n  readonly type: ConfigGroup['parameterType'];\n  readonly values: ReadonlyArray<string>;\n  readonly definedByApps: ReadonlyArray<string>;\n  readonly shadowed: boolean;\n}\n\ninterface State {\n  order?: Ordering;\n  targetValues?: ReadonlyArray<string>;\n  targetApp?: string;\n}\n\nexport class InlineValuesEditor extends Component<InlineValuesEditorProps, State> {\n  constructor(props: InlineValuesEditorProps, context: any) {\n    super(props, context);\n    this.state = {\n      order: Ordering.empty,\n      targetValues: this.props.source.values,\n      targetApp: chooseDefaultTargetApp(this.props.apps, _.last(this.props.source.definedByApps)),\n    };\n  }\n\n  render() {\n    const { className, source, apps, onCancel } = this.props;\n    const { targetValues, targetApp, order } = this.state;\n\n    const allowedToSave =\n      targetApp &&\n      !(targetApp === _.last(source.definedByApps) && isConfigValuesEqual(source.values, order.apply(targetValues)));\n\n    return (\n      <div className={classnames(styles.component, className)}>\n        {this.renderInput(source.type, targetValues)}\n        <StorageSelector\n          className={styles.storageSelector}\n          allApps={apps}\n          sourceApps={source.definedByApps}\n          targetApp={targetApp}\n          onChange={(app) => this.setState({ targetApp: app })}\n        />\n        <div className={styles.footer}>\n          <div className={styles.submitControls}>\n            <Button className={styles.save} bsStyle=\"primary\" disabled={!allowedToSave} onClick={this.onSave}>\n              Save\n            </Button>\n            <Button onClick={onCancel}>Cancel</Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  private renderInput(type: ConfigRecord['type'], values: ReadonlyArray<string>) {\n    if (type === 'boolean') {\n      const isSet = values.length === 0 ? false : values[0] !== 'false';\n      return (\n        <input\n          type=\"checkbox\"\n          checked={isSet}\n          onChange={(e) => {\n            const checked = e.currentTarget.checked;\n            this.setState({ targetValues: [checked ? 'true' : 'false'] });\n          }}\n        />\n      );\n    } else if (type === 'stringList') {\n      return (\n        <div>\n          <ReorderableList\n            dragByHandle={true}\n            itemClass={styles.reorderedItem}\n            ordering={this.state.order}\n            onOrderChanged={(order) => this.setState({ order })}\n          >\n            {values.map((value, index) => (\n              <div key={index} className={styles.removableItem}>\n                {this.renderMultilineEditor(value, index)}\n                <Button\n                  className={styles.removeItemButton}\n                  onClick={() => {\n                    const targetValues = [...values];\n                    targetValues.splice(index, 1);\n                    this.setState({ targetValues });\n                  }}\n                >\n                  <span className=\"fa fa-times\" />\n                </Button>\n              </div>\n            ))}\n          </ReorderableList>\n          <a\n            className={undefined}\n            onClick={(e) => {\n              e.preventDefault();\n              this.setState({ targetValues: [...values, ''] });\n            }}\n          >\n            + Add configuration value\n          </a>\n        </div>\n      );\n    } else {\n      const value = values.length === 0 ? '' : values[0];\n      return this.renderMultilineEditor(value, 0);\n    }\n  }\n\n  private renderMultilineEditor(value: string, index: number) {\n    return (\n      <TextareaAutosize\n        className={styles.multilineEditor}\n        value={value}\n        onChange={(e) => {\n          const text = e.currentTarget.value;\n          this.setState(\n            (state): State => {\n              const targetValues = [...state.targetValues];\n              targetValues.splice(index, 1, text);\n              return { targetValues };\n            }\n          );\n        }}\n      />\n    );\n  }\n\n  private onSave = () => {\n    const { onSave } = this.props;\n    const { order, targetValues, targetApp } = this.state;\n    const orderedValues = order.apply(targetValues);\n    onSave(orderedValues, targetApp);\n  };\n}\n\nfunction isConfigValuesEqual(left: ReadonlyArray<string>, right: ReadonlyArray<string>) {\n  if (left.length !== right.length) {\n    return false;\n  }\n  for (let i = 0; i < left.length; i++) {\n    if (left[i] !== right[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n"],"sourceRoot":""}