{"version":3,"sources":["webpack:///./src/main/web/components/3-rd-party/ontodia/OntodiaContents.tsx"],"names":["props","context","cancellation","Cancellation","listenToEvents","map","listen","eventType","OntodiaEvents","DiagramChanged","source","id","observe","value","data","model","authoringState","temporaryState","updateElements","onCreateSet","hideDialog","getOverlaySystem","hide","show","createElement","SaveSetDialog","onSave","name","items","state","elements","forEach","iri","persisted","push","Rdf","createNewSetFromItems","onHide","maxSetSize","maybe","Nothing","componentDidMount","this","componentWillUnmount","cancelAll","element","temporary","has","setState","mapChildren","children","React","Children","child","isValidChild","type","cloneElement","onClick","universalChildren","render","className","styles","container","TemplateItem","key","template","options","defaultProps","Component","OntodiaContents"],"mappings":"6IAkBA,OACA,OACA,QAGA,QACA,SACA,SACA,QACA,SAEA,SACA,SACA,UAEA,UAEA,UAWA,cAOE,yBAAYA,EAAcC,GAA1B,MACE,YAAMD,EAAOC,IAAQ,K,OAHN,EAAAC,aAAe,IAAI,EAAAC,aAiB5B,EAAAC,eAAiB,WACvB,EAAKF,aACFG,IACC,EAAAC,OAAO,CACLC,UAAWC,EAAcC,eACzBC,OAAQ,EAAKV,MAAMW,MAGtBC,QAAQ,CACPC,MAAO,SAAC,G,IAAE,IAAAC,KAAQC,EAAA,EAAAA,MAAOC,EAAA,EAAAA,eAAgBC,EAAA,EAAAA,eACvC,SAAKC,eAAe,CAClBH,MAAOA,EACPC,eAAgBA,EAChBC,eAAgBA,QA2BlB,EAAAE,YAAc,WACpB,IACMC,WAAa,WAAM,SAAAC,mBAAmBC,KAD1B,sBAElB,EAAAD,mBAAmBE,KAFD,oBAIhB,EAAAC,cAAc,EAAAC,cAAe,CAC3BC,OAAQ,SAACC,GACP,IAAMC,EAAwB,GAM9B,OALA,EAAKC,MAAMC,SAASC,SAAQ,SAAC,G,IAAEC,EAAA,EAAAA,IAAK,EAAAC,WAEhCL,EAAMM,KAAK,EAAAC,IAAIH,IAAIA,OAGhB,EAAAI,sBAAsB,EAAKpC,MAAMW,GAAIgB,EAAMC,GAAOvB,IAAIe,aAE/DiB,OAAQjB,WACRkB,WAAYC,EAAMC,cArEtB,EAAKX,MAAQ,CACXC,SAAU,I,EAuGhB,OAjHqC,+BAcnC,0BAAAW,kBAAA,WACEC,KAAKtC,kBAGP,0BAAAuC,qBAAA,WACED,KAAKxC,aAAa0C,aAqBZ,0BAAA1B,eAAR,SAAuB,G,IACrBH,EAAA,EAAAA,MACAC,EAAA,EAAAA,eACAC,EAAA,EAAAA,eAMMa,EAAuD,GAE7Df,EAAMe,SAASC,SAAQ,SAACc,GADJ,IAACb,EAEda,EAAQC,WACXhB,EAASI,KAAK,CACZF,IAAKa,EAAQb,IACbC,WALeD,EAKQa,EAAQb,KALPhB,EAAec,SAASiB,IAAIf,KAASf,EAAea,SAASiB,IAAIf,SAS/FU,KAAKM,SAAS,CAAElB,SAAUA,KAwBpB,0BAAAmB,YAAR,SAAoBC,GAApB,WACE,OAAOC,EAAMC,SAAS/C,IAAI6C,GAAU,SAACG,GACnC,OAAK,EAAAC,aAAaD,GAGC,WAAfA,EAAME,MAA0C,WAArBF,EAAMrD,MAAM2B,KAClC,EAAA6B,aAAaH,EAAO,CAAEI,QAAS,EAAKtC,cAEzCkC,EAAMrD,MAAMkD,SACP,EAAAM,aAAaH,EAAO,GAAI,EAAAK,kBAAkB,EAAKT,YAAYI,EAAMrD,MAAMkD,YAEzEG,EAREA,MAYb,0BAAAM,OAAA,sBACE,OACE,uBAAKC,UAAWC,EAAOC,WACrB,uBAAKF,UAAWC,EAAOjC,OACpBc,KAAKb,MAAMC,SAASzB,KAAI,SAAC,G,IAAE2B,EAAA,EAAAA,IAAKC,EAAA,EAAAA,UAC/B,SAAAT,cAAc,EAAAuC,aAAc,CAC1BC,IAAKhC,EACLiC,SAAU,CAAEvD,OAAQ,EAAKV,MAAMiE,SAAUC,QAAS,CAAElC,IAAK,EAAAG,IAAIH,IAAIA,GAAMC,UAAS,UAIrFS,KAAKO,YAAYP,KAAK1C,MAAMkD,YA5G5B,gBAAAiB,aAA+B,CACpCF,SAAU,4DA+Gd,gBAjHA,CAAqC,EAAAG,WAAxB,EAAAC,kBAmHb,UAAeA","file":"ontodia-contents-9f16fa59bc898bf9fc73.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\nimport { createElement, cloneElement, ReactNode } from 'react';\nimport * as maybe from 'data.maybe';\nimport { DiagramModel, AuthoringState, TemporaryState } from 'ontodia';\n\nimport { Component } from 'platform/api/components';\nimport { listen } from 'platform/api/events';\nimport { Cancellation } from 'platform/api/async/Cancellation';\nimport { Rdf } from 'platform/api/rdf';\nimport { isValidChild, universalChildren } from 'platform/components/utils';\n\nimport { TemplateItem } from 'platform/components/ui/template';\nimport { getOverlaySystem } from 'platform/components/ui/overlay';\nimport { SaveSetDialog, createNewSetFromItems } from 'platform/components/sets';\n\nimport * as OntodiaEvents from './OntodiaEvents';\n\nimport * as styles from './OntodiaContents.scss';\n\nexport interface Props {\n  id: string;\n  template?: string;\n}\n\nexport interface State {\n  elements?: Array<{ iri: string; persisted: boolean }>;\n}\n\nexport class OntodiaContents extends Component<Props, State> {\n  static defaultProps: Partial<Props> = {\n    template: `<div><semantic-link iri='{{iri}}'></semantic-link></div>`,\n  };\n\n  private readonly cancellation = new Cancellation();\n\n  constructor(props: Props, context: any) {\n    super(props, context);\n    this.state = {\n      elements: [],\n    };\n  }\n\n  componentDidMount() {\n    this.listenToEvents();\n  }\n\n  componentWillUnmount() {\n    this.cancellation.cancelAll();\n  }\n\n  private listenToEvents = () => {\n    this.cancellation\n      .map(\n        listen({\n          eventType: OntodiaEvents.DiagramChanged,\n          source: this.props.id,\n        })\n      )\n      .observe({\n        value: ({ data: { model, authoringState, temporaryState } }) =>\n          this.updateElements({\n            model: model as DiagramModel,\n            authoringState: authoringState as AuthoringState,\n            temporaryState: temporaryState as TemporaryState,\n          }),\n      });\n  };\n\n  private updateElements({\n    model,\n    authoringState,\n    temporaryState,\n  }: {\n    model: DiagramModel;\n    authoringState: AuthoringState;\n    temporaryState: TemporaryState;\n  }) {\n    const elements: Array<{ iri: string; persisted: boolean }> = [];\n    const isPersisted = (iri) => !authoringState.elements.has(iri) && !temporaryState.elements.has(iri);\n    model.elements.forEach((element) => {\n      if (!element.temporary) {\n        elements.push({\n          iri: element.iri,\n          persisted: isPersisted(element.iri),\n        });\n      }\n    });\n    this.setState({ elements: elements });\n  }\n\n  private onCreateSet = () => {\n    const dialogRef = 'create-set-dialog';\n    const hideDialog = () => getOverlaySystem().hide(dialogRef);\n    getOverlaySystem().show(\n      dialogRef,\n      createElement(SaveSetDialog, {\n        onSave: (name) => {\n          const items: Array<Rdf.Iri> = [];\n          this.state.elements.forEach(({ iri, persisted }) => {\n            if (persisted) {\n              items.push(Rdf.iri(iri));\n            }\n          });\n          return createNewSetFromItems(this.props.id, name, items).map(hideDialog);\n        },\n        onHide: hideDialog,\n        maxSetSize: maybe.Nothing<number>(),\n      })\n    );\n  };\n\n  private mapChildren(children: ReactNode): ReactNode {\n    return React.Children.map(children, (child) => {\n      if (!isValidChild(child)) {\n        return child;\n      }\n      if (child.type === 'button' && child.props.name === 'submit') {\n        return cloneElement(child, { onClick: this.onCreateSet });\n      }\n      if (child.props.children) {\n        return cloneElement(child, {}, universalChildren(this.mapChildren(child.props.children)));\n      }\n      return child;\n    });\n  }\n\n  render() {\n    return (\n      <div className={styles.container}>\n        <div className={styles.items}>\n          {this.state.elements.map(({ iri, persisted }) =>\n            createElement(TemplateItem, {\n              key: iri,\n              template: { source: this.props.template, options: { iri: Rdf.iri(iri), persisted } },\n            })\n          )}\n        </div>\n        {this.mapChildren(this.props.children)}\n      </div>\n    );\n  }\n}\n\nexport default OntodiaContents;\n"],"sourceRoot":""}