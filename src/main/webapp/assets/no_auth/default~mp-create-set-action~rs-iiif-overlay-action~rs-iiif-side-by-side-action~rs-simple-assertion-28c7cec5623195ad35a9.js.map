{"version":3,"sources":["webpack:///./src/main/web/components/sets/TypedSelectionActionComponent.tsx"],"names":["ACTION_DIALOG_REF","props","context","checkSelection","selection","_","isEmpty","types","checkQuery","executesCheck","iris","map","iri","_iri","Rdf","type","_type","SparqlClient","prepareQuery","prepareParsedQuery","flatMap","query","Kefir","combine","repositories","repository","executeCheckQuery","flatten","onValue","res","matches","intersectionWith","b1","b2","equals","length","setState","disabled","onError","err","console","error","select","result","results","bindings","onAction","getOverlaySystem","show","renderDialog","OverlayDialog","title","dialogType","bsSize","dialogSize","onHide","closeDialog","renderRawDialog","dialog","cloneElement","state","componentDidMount","this","componentWillReceiveProps","nextProps","isEqual","render","isDisabled","closeMenu","menuTitle","defaultProps","Component","hide","TypedSelectionActionComponent"],"mappings":"6IAsBA,OACA,QACA,OACA,QAGA,QACA,UAEA,SACA,SAEA,QACA,QAEa,EAAAA,kBAAoB,gBAQjC,IAMA,cACE,uCAAYC,EAAOC,GAAnB,MACE,YAAMD,EAAOC,IAAQ,K,OAsBf,EAAAC,eAAiB,SAACF,GAEnBA,EAAMG,YAAaC,EAAEC,QAAQL,EAAMG,YAAeH,EAAMM,OAAUN,EAAMO,YAG7E,EAAKC,cAAcR,IAGb,EAAAQ,cAAgB,SAACR,GACvB,IAAMS,EAAOT,EAAMG,UAAUO,KAAI,SAACC,GAAQ,OAAGC,KAAM,EAAAC,IAAIF,IAAIA,OACrDL,EAAQN,EAAMM,MAAMI,KAAI,SAACI,GAAS,OAAGC,MAAO,EAAAF,IAAIF,IAAIG,OAC1D,EAAAE,aAAaC,aAAajB,EAAMO,WAAYE,GACzCC,IAAI,EAAAM,aAAaE,mBAAmBZ,IACpCa,SAAQ,SAACC,GACR,OAAAC,EAAMC,QAAQtB,EAAMuB,aAAab,KAAI,SAACc,GAAe,SAAKC,kBAAkBL,EAAOI,UAEpFd,IAAIN,EAAEsB,SACNC,SAAQ,SAACC,GACR,IAAMC,EAAUzB,EAAE0B,iBAAiBF,EAAKnB,GAAM,SAACsB,EAAIC,GAAO,OAAAD,EAAS,KAAEE,OAAOD,EAAS,SAAIE,SAAWzB,EAAKyB,OACzG,EAAKC,SAAS,CAAEC,UAAWP,OAE5BQ,SAAQ,SAACC,GACRC,QAAQC,MAAMF,OAIZ,EAAAb,kBAAoB,SAACL,EAAuBI,GAClD,SAAAR,aAAayB,OAAOrB,EAAO,CAAEnB,QAAS,CAAEuB,WAAU,KAAMd,KAAI,SAACgC,GAAW,OAAAA,EAAOC,QAAQC,aAejF,EAAAC,SAAW,SAAC1C,GAClB,EAAA2C,mBAAmBC,KAAK,EAAAhD,kBAAmB,EAAKiD,aAAa7C,GAAY,EAAKF,UAGxE,EAAA+C,aAAe,SAAC7C,GACtB,GAAI,EAAKH,MAAMgD,aACb,OACE,gBAAC,EAAAC,cAAa,CACZF,MAAM,EACNG,MAAO,EAAKlD,MAAMkD,MAClBpC,KAAM,EAAKd,MAAMmD,WACjBC,OAAQ,EAAKpD,MAAMqD,WACnBC,OAAQC,aAEP,EAAKvD,MAAMgD,aAAa7C,IAGxB,GAAI,EAAKH,MAAMwD,gBAAiB,CACrC,IAAMC,EAAS,EAAKzD,MAAMwD,gBAAgBrD,GAC1C,OAAO,EAAAuD,aAAaD,EAAQ,CAAEH,OAAQC,cAEtChB,QAAQC,MAAM,yDApFhB,EAAKmB,MAAQ,CACXvB,UAAU,G,EAsFhB,OA1FmD,6CAcjD,wCAAAwB,kBAAA,WACEC,KAAK3D,eAAe2D,KAAK7D,QAG3B,wCAAA8D,0BAAA,SAA0BC,GACnB3D,EAAE4D,QAAQD,EAAU5D,UAAW0D,KAAK7D,MAAMG,YAC7C0D,KAAK3D,eAAe6D,IAiCxB,wCAAAE,OAAA,WACE,IAAM7B,EAAWyB,KAAKF,MAAMvB,UAAYyB,KAAK7D,MAAMkE,WAAWL,KAAK7D,MAAMG,WACzE,OACE,gBAAC,UAAwB,CACvBiC,SAAUA,EACVjC,UAAW0D,KAAK7D,MAAMG,UACtBgE,UAAWN,KAAK7D,MAAMmE,UACtBtB,SAAUgB,KAAKhB,SACfK,MAAOW,KAAK7D,MAAMoE,aArDjB,8BAAAC,aAAe,CACpB9C,aAAc,CAAC,WACf4B,WAAY,WACZ5C,WAjBU,iEAgGd,8BA1FA,CAAmD,EAAA+D,WA4FnD,SAAgBf,cACd,EAAAT,mBAAmByB,KAAK,EAAAxE,mBA7Fb,EAAAyE,gCA4Fb,0BAIA,UAAeA","file":"default~mp-create-set-action~rs-iiif-overlay-action~rs-iiif-side-by-side-action~rs-simple-assertion-28c7cec5623195ad35a9.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @author Philip Polkovnikov\n */\n\nimport * as React from 'react';\nimport * as _ from 'lodash';\nimport { cloneElement } from 'react';\nimport * as Kefir from 'kefir';\nimport * as SparqlJs from 'sparqljs';\n\nimport { Component } from 'platform/api/components';\nimport SelectionActionComponent from 'platform/components/ui/selection/SelectionActionComponent';\nimport { MenuProps } from 'platform/components/ui/selection/SelectionActionProps';\nimport { getOverlaySystem } from 'platform/components/ui/overlay';\nimport { OverlayDialog } from 'platform/components/ui/overlay/OverlayDialog';\nimport { ActionProps, AllTitleProps, TypeProps } from './TypedSelectionActionProps';\nimport { SparqlClient } from 'platform/api/sparql';\nimport { Rdf } from 'platform/api/rdf';\n\nexport const ACTION_DIALOG_REF = 'dialog-action';\n\ntype Props = MenuProps & ActionProps & AllTitleProps & TypeProps;\n\ninterface State {\n  disabled: boolean;\n}\n\nconst QUERY = `\n  SELECT DISTINCT $_iri WHERE {\n    $_iri a $_type.\n  }\n`;\n\nexport class TypedSelectionActionComponent extends Component<Props, State> {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      disabled: false,\n    };\n  }\n\n  static defaultProps = {\n    repositories: ['default'],\n    dialogType: 'lightbox',\n    checkQuery: QUERY,\n  };\n\n  componentDidMount() {\n    this.checkSelection(this.props);\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    if (!_.isEqual(nextProps.selection, this.props.selection)) {\n      this.checkSelection(nextProps);\n    }\n  }\n\n  private checkSelection = (props: Props) => {\n    // if there's no type requirements or checkQuery is undefined, we don't need to validate them\n    if (!props.selection || _.isEmpty(props.selection) || !props.types || !props.checkQuery) {\n      return;\n    }\n    this.executesCheck(props);\n  };\n\n  private executesCheck = (props: Props) => {\n    const iris = props.selection.map((iri) => ({ _iri: Rdf.iri(iri) }));\n    const types = props.types.map((type) => ({ _type: Rdf.iri(type) }));\n    SparqlClient.prepareQuery(props.checkQuery, iris)\n      .map(SparqlClient.prepareParsedQuery(types))\n      .flatMap((query) =>\n        Kefir.combine(props.repositories.map((repository) => this.executeCheckQuery(query, repository)))\n      )\n      .map(_.flatten)\n      .onValue((res) => {\n        const matches = _.intersectionWith(res, iris, (b1, b2) => b1['_iri'].equals(b2['_iri'])).length === iris.length;\n        this.setState({ disabled: !matches });\n      })\n      .onError((err) => {\n        console.error(err);\n      });\n  };\n\n  private executeCheckQuery = (query: SparqlJs.Query, repository: string) =>\n    SparqlClient.select(query, { context: { repository } }).map((result) => result.results.bindings);\n\n  render() {\n    const disabled = this.state.disabled || this.props.isDisabled(this.props.selection);\n    return (\n      <SelectionActionComponent\n        disabled={disabled}\n        selection={this.props.selection}\n        closeMenu={this.props.closeMenu}\n        onAction={this.onAction}\n        title={this.props.menuTitle}\n      />\n    );\n  }\n\n  private onAction = (selection: string[]) => {\n    getOverlaySystem().show(ACTION_DIALOG_REF, this.renderDialog(selection), this.context);\n  };\n\n  private renderDialog = (selection: string[]) => {\n    if (this.props.renderDialog) {\n      return (\n        <OverlayDialog\n          show={true}\n          title={this.props.title}\n          type={this.props.dialogType}\n          bsSize={this.props.dialogSize}\n          onHide={closeDialog}\n        >\n          {this.props.renderDialog(selection)}\n        </OverlayDialog>\n      );\n    } else if (this.props.renderRawDialog) {\n      const dialog = this.props.renderRawDialog(selection);\n      return cloneElement(dialog, { onHide: closeDialog });\n    } else {\n      console.error(\"SelectionActionComponent wasn't provided with dialog\");\n    }\n  };\n}\n\nexport function closeDialog() {\n  getOverlaySystem().hide(ACTION_DIALOG_REF);\n}\n\nexport default TypedSelectionActionComponent;\n"],"sourceRoot":""}