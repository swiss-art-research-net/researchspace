{"version":3,"sources":["webpack:///./node_modules/text-encoding-utf-8/lib/encoding.lib.js"],"names":["inRange","a","min","max","ToDictionary","o","undefined","Object","TypeError","Stream","tokens","this","slice","call","prototype","endOfStream","length","read","shift","prepend","token","Array","isArray","unshift","pop","push","decoderError","fatal","opt_code_point","TextDecoder","encoding","options","String","toLowerCase","Error","_streaming","_BOMseen","_decoder","_fatal","Boolean","_ignoreBOM","defineProperty","value","TextEncoder","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","handler","stream","bite","code_point","UTF8Encoder","count","offset","bytes","temp","decode","input","ArrayBuffer","Uint8Array","buffer","byteOffset","byteLength","result","input_stream","code_points","apply","indexOf","codePointsToString","s","i","cp","fromCharCode","encode","opt_string","stringToCodePoints","string","n","u","c","charCodeAt","d","b","exports"],"mappings":"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","file":"npm.text-encoding-utf-8-d808a9de27bcbe95dea5.js","sourcesContent":["'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexports.TextEncoder = TextEncoder;\nexports.TextDecoder = TextDecoder;"],"sourceRoot":""}