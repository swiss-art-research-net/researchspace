{"version":3,"sources":["webpack:///./src/main/web/components/panel-system/OntodiaPanel.tsx"],"names":["cancellation","Cancellation","componentDidMount","id","this","map","listen","target","eventType","SetManagementEvents","ItemsFiltered","onValue","data","highlightItems","iris","ItemSelected","centerToElement","componentWillUnmount","cancelAll","highlighter","view","ontodia","workspace","getDiagram","Set","forEach","iri","add","item","Element","has","Link","sourceId","targetId","Error","setHighlighter","selectedElement","getModel","elements","find","element","bbox","getContentFittingBox","zoomToFitRect","getEditor","setSelection","render","Ontodia","ref","props","Component","OntodiaPanel"],"mappings":"6IAkBA,OACA,UAEA,SACA,QACA,QAEA,SAEA,UAMA,oF,OACmB,EAAAA,aAAe,IAAI,EAAAC,a,EAmDtC,OApDkC,4BAIhC,uBAAAC,kBAAA,sBACU,aAAAC,GACRC,KAAKJ,aACFK,IAAI,EAAAC,OAAO,CAAEC,OAAM,EAAEC,UAAW,EAAAC,oBAAoBC,iBACpDC,SAAQ,SAAC,G,IAAEC,EAAA,EAAAA,KAAW,SAAKC,eAAeD,EAAKE,SAClDV,KAAKJ,aACFK,IAAI,EAAAC,OAAO,CAAEC,OAAM,EAAEC,UAAW,EAAAC,oBAAoBM,gBACpDJ,SAAQ,SAAC,G,IAAEC,EAAA,EAAAA,KAAW,SAAKI,gBAAgBJ,OAGhD,uBAAAK,qBAAA,WACEb,KAAKJ,aAAakB,aAGZ,uBAAAL,eAAR,SAAuBC,GACrB,IACIK,EADEC,EAAOhB,KAAKiB,QAAQC,UAAUC,aAEpC,GAAIT,EAAM,CACR,IAAM,EAAsB,IAAIU,IAChCV,EAAKW,SAAQ,SAACC,GAAQ,SAAoBC,IAAID,MAC9CP,EAAc,SAACS,GACb,GAAIA,aAAgB,EAAAC,QAClB,OAAO,EAAoBC,IAAIF,EAAKF,KAEtC,GAAIE,aAAgB,EAAAG,KAAM,CAClB,aAAEC,EAAA,EAAAA,SAAUC,EAAA,EAAAA,SAClB,OAAO,EAAoBH,IAAIE,IAAa,EAAoBF,IAAIG,GAEtE,MAAMC,MAAM,sBAGhBd,EAAKe,eAAehB,IAGd,uBAAAH,gBAAR,SAAwBU,GACtB,IAAMJ,EAAYlB,KAAKiB,QAAQC,UAEzBc,EADQd,EAAUe,WACMC,SAASC,MAAK,SAACC,GAAY,OAAAA,EAAQd,MAAQA,KACzE,GAAIU,EAAiB,CACnB,IAAMK,EAAO,EAAAC,qBAAqB,CAACN,GAAkB,IACrDd,EAAUqB,cAAcF,GACxBnB,EAAUsB,YAAYC,aAAa,CAACT,MAIxC,uBAAAU,OAAA,sBACE,OAAO,gBAAC,EAAAC,QAAO,YAACC,IAAK,SAAC3B,GAAY,OAAC,EAAKA,QAAUA,IAAcjB,KAAK6C,SAEzE,aApDA,CAAkC,EAAAC,WAArB,EAAAC,eAsDb,UAAeA","file":"rs-ontodia-panel-0b401a4e6e16a5e66702.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2015-2020, Â© Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as React from 'react';\nimport { Element, Link, Highlighter, getContentFittingBox } from 'ontodia';\n\nimport { listen } from 'platform/api/events';\nimport { Cancellation } from 'platform/api/async';\nimport { Component } from 'platform/api/components';\n\nimport { SetManagementEvents } from 'platform/api/services/ldp-set/SetManagementEvents';\n\nimport { Ontodia, OntodiaProps } from 'platform/components/3-rd-party/ontodia/Ontodia';\n\n/**\n * @example\n * <rs-ontodia-panel-system settings=nostats></rs-ontodia-panel-system>\n */\nexport class OntodiaPanel extends Component<OntodiaProps, {}> {\n  private readonly cancellation = new Cancellation();\n  private ontodia: Ontodia;\n\n  componentDidMount() {\n    const { id: target } = this.props;\n    this.cancellation\n      .map(listen({ target, eventType: SetManagementEvents.ItemsFiltered }))\n      .onValue(({ data }) => this.highlightItems(data.iris));\n    this.cancellation\n      .map(listen({ target, eventType: SetManagementEvents.ItemSelected }))\n      .onValue(({ data }) => this.centerToElement(data));\n  }\n\n  componentWillUnmount() {\n    this.cancellation.cancelAll();\n  }\n\n  private highlightItems(iris: Array<string> | undefined) {\n    const view = this.ontodia.workspace.getDiagram();\n    let highlighter: Highlighter;\n    if (iris) {\n      const highlightedElements = new Set<string>();\n      iris.forEach((iri) => highlightedElements.add(iri));\n      highlighter = (item) => {\n        if (item instanceof Element) {\n          return highlightedElements.has(item.iri);\n        }\n        if (item instanceof Link) {\n          const { sourceId, targetId } = item.data;\n          return highlightedElements.has(sourceId) || highlightedElements.has(targetId);\n        }\n        throw Error('Unknown item type');\n      };\n    }\n    view.setHighlighter(highlighter);\n  }\n\n  private centerToElement(iri: string) {\n    const workspace = this.ontodia.workspace;\n    const model = workspace.getModel();\n    const selectedElement = model.elements.find((element) => element.iri === iri);\n    if (selectedElement) {\n      const bbox = getContentFittingBox([selectedElement], []);\n      workspace.zoomToFitRect(bbox);\n      workspace.getEditor().setSelection([selectedElement]);\n    }\n  }\n\n  render() {\n    return <Ontodia ref={(ontodia) => (this.ontodia = ontodia)} {...this.props} />;\n  }\n}\n\nexport default OntodiaPanel;\n"],"sourceRoot":""}