{"version":3,"sources":["webpack:///./node_modules/hash-base/index.js"],"names":["Buffer","Transform","HashBase","blockSize","call","this","_block","allocUnsafe","_blockSize","_blockOffset","_length","_finalized","inherits","prototype","_transform","chunk","encoding","callback","error","update","err","_flush","push","digest","data","throwIfNotStringOrBuffer","val","prefix","isBuffer","TypeError","Error","from","block","offset","length","i","_update","j","carry","_digest","undefined","toString","fill","module","exports"],"mappings":"4FACA,IAAIA,EAAS,EAAQ,MAAeA,OAChCC,EAAY,EAAQ,KAAUA,UASlC,SAASC,SAAUC,GACjBF,EAAUG,KAAKC,MAEfA,KAAKC,OAASN,EAAOO,YAAYJ,GACjCE,KAAKG,WAAaL,EAClBE,KAAKI,aAAe,EACpBJ,KAAKK,QAAU,CAAC,EAAG,EAAG,EAAG,GAEzBL,KAAKM,YAAa,EAhBL,EAAQ,GAmBvBC,CAASV,SAAUD,GAEnBC,SAASW,UAAUC,WAAa,SAAUC,EAAOC,EAAUC,GACzD,IAAIC,EAAQ,KACZ,IACEb,KAAKc,OAAOJ,EAAOC,GACnB,MAAOI,GACPF,EAAQE,EAGVH,EAASC,IAGXhB,SAASW,UAAUQ,OAAS,SAAUJ,GACpC,IAAIC,EAAQ,KACZ,IACEb,KAAKiB,KAAKjB,KAAKkB,UACf,MAAOH,GACPF,EAAQE,EAGVH,EAASC,IAGXhB,SAASW,UAAUM,OAAS,SAAUK,EAAMR,GAE1C,GA3CF,SAASS,yBAA0BC,EAAKC,GACtC,IAAK3B,EAAO4B,SAASF,IAAuB,iBAARA,EAClC,MAAM,IAAIG,UAAUF,EAAS,iCAwC/BF,CAAyBD,EAAM,QAC3BnB,KAAKM,WAAY,MAAM,IAAImB,MAAM,yBAChC9B,EAAO4B,SAASJ,KAAOA,EAAOxB,EAAO+B,KAAKP,EAAMR,IAKrD,IAFA,IAAIgB,EAAQ3B,KAAKC,OACb2B,EAAS,EACN5B,KAAKI,aAAee,EAAKU,OAASD,GAAU5B,KAAKG,YAAY,CAClE,IAAK,IAAI2B,EAAI9B,KAAKI,aAAc0B,EAAI9B,KAAKG,YAAawB,EAAMG,KAAOX,EAAKS,KACxE5B,KAAK+B,UACL/B,KAAKI,aAAe,EAEtB,KAAOwB,EAAST,EAAKU,QAAQF,EAAM3B,KAAKI,gBAAkBe,EAAKS,KAG/D,IAAK,IAAII,EAAI,EAAGC,EAAsB,EAAdd,EAAKU,OAAYI,EAAQ,IAAKD,EACpDhC,KAAKK,QAAQ2B,IAAMC,GACnBA,EAASjC,KAAKK,QAAQ2B,GAAK,WAAgB,GAC/B,IAAGhC,KAAKK,QAAQ2B,IAAM,WAAeC,GAGnD,OAAOjC,MAGTH,SAASW,UAAUuB,QAAU,WAC3B,MAAM,IAAIN,MAAM,+BAGlB5B,SAASW,UAAUU,OAAS,SAAUP,GACpC,GAAIX,KAAKM,WAAY,MAAM,IAAImB,MAAM,yBACrCzB,KAAKM,YAAa,EAElB,IAAIY,EAASlB,KAAKkC,eACDC,IAAbxB,IAAwBO,EAASA,EAAOkB,SAASzB,IAGrDX,KAAKC,OAAOoC,KAAK,GACjBrC,KAAKI,aAAe,EACpB,IAAK,IAAI0B,EAAI,EAAGA,EAAI,IAAKA,EAAG9B,KAAKK,QAAQyB,GAAK,EAE9C,OAAOZ,GAGTrB,SAASW,UAAU0B,QAAU,WAC3B,MAAM,IAAIT,MAAM,+BAGlBa,EAAOC,QAAU1C","file":"npm.hash-base-9d3f8217ab87f41a9bf6.js","sourcesContent":["'use strict'\nvar Buffer = require('safe-buffer').Buffer\nvar Transform = require('stream').Transform\nvar inherits = require('inherits')\n\nfunction throwIfNotStringOrBuffer (val, prefix) {\n  if (!Buffer.isBuffer(val) && typeof val !== 'string') {\n    throw new TypeError(prefix + ' must be a string or a buffer')\n  }\n}\n\nfunction HashBase (blockSize) {\n  Transform.call(this)\n\n  this._block = Buffer.allocUnsafe(blockSize)\n  this._blockSize = blockSize\n  this._blockOffset = 0\n  this._length = [0, 0, 0, 0]\n\n  this._finalized = false\n}\n\ninherits(HashBase, Transform)\n\nHashBase.prototype._transform = function (chunk, encoding, callback) {\n  var error = null\n  try {\n    this.update(chunk, encoding)\n  } catch (err) {\n    error = err\n  }\n\n  callback(error)\n}\n\nHashBase.prototype._flush = function (callback) {\n  var error = null\n  try {\n    this.push(this.digest())\n  } catch (err) {\n    error = err\n  }\n\n  callback(error)\n}\n\nHashBase.prototype.update = function (data, encoding) {\n  throwIfNotStringOrBuffer(data, 'Data')\n  if (this._finalized) throw new Error('Digest already called')\n  if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)\n\n  // consume data\n  var block = this._block\n  var offset = 0\n  while (this._blockOffset + data.length - offset >= this._blockSize) {\n    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]\n    this._update()\n    this._blockOffset = 0\n  }\n  while (offset < data.length) block[this._blockOffset++] = data[offset++]\n\n  // update length\n  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {\n    this._length[j] += carry\n    carry = (this._length[j] / 0x0100000000) | 0\n    if (carry > 0) this._length[j] -= 0x0100000000 * carry\n  }\n\n  return this\n}\n\nHashBase.prototype._update = function () {\n  throw new Error('_update is not implemented')\n}\n\nHashBase.prototype.digest = function (encoding) {\n  if (this._finalized) throw new Error('Digest already called')\n  this._finalized = true\n\n  var digest = this._digest()\n  if (encoding !== undefined) digest = digest.toString(encoding)\n\n  // reset state\n  this._block.fill(0)\n  this._blockOffset = 0\n  for (var i = 0; i < 4; ++i) this._length[i] = 0\n\n  return digest\n}\n\nHashBase.prototype._digest = function () {\n  throw new Error('_digest is not implemented')\n}\n\nmodule.exports = HashBase\n"],"sourceRoot":""}