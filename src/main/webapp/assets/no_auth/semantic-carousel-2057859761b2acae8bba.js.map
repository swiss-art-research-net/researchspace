{"version":3,"sources":["webpack:///./src/main/web/components/semantic/carousel/SemanticCarousel.ts"],"names":["SliderComponent","createFactory","props","context","prepareConfigAndExecuteQuery","stream","SparqlClient","select","query","semanticContext","onValue","res","setState","data","isLoading","onEnd","id","trigger","eventType","BuiltInEvents","ComponentLoaded","source","ComponentLoading","state","noResults","render","D","div","className","this","createElement","Spinner","SparqlUtil","isSelectResultEmpty","TemplateItem","template","noResultTemplate","getSliderComponent","settings","assign","dots","infinite","speed","slidesToShow","lazyLoad","slidesToScroll","getCarouselOptions","_data","prepareResultData","items","_","map","tuple","i","key","getTupleTemplate","options","componentProps","componentWillReceiveProps","nextProps","nextContext","componentWillMount","shouldComponentUpdate","nextState","has","console","warn","tupleTemplate","Component","SemanticCarousel"],"mappings":"6IAmBA,OACA,QACA,UACA,QACA,SAEA,SACA,QACA,QACA,SACA,SACA,SAEMA,EAAkB,EAAAC,cAAc,WAEtC,QAqMA,kBACE,0BAAYC,EAA8BC,GAA1C,MACE,YAAMD,EAAOC,IAAQ,K,OA8Df,EAAAC,6BAA+B,SAACF,EAA8BC,GACpE,IAAME,EAAS,EAAAC,aAAaC,OAAOL,EAAMM,MAAO,CAAEL,QAASA,EAAQM,kBACnEJ,EACGK,SAAQ,SAACC,GAAQ,SAAKC,SAAS,CAAEC,KAAMF,EAAKG,WAAW,OACvDC,OAAM,WACD,EAAKb,MAAMc,IACb,EAAAC,QAAQ,CAAEC,UAAW,EAAAC,cAAcC,gBAAiBC,OAAQ,EAAKnB,MAAMc,QAIzE,EAAKd,MAAMc,IACb,EAAAC,QAAQ,CACNC,UAAW,EAAAC,cAAcG,iBACzBD,OAAQ,EAAKnB,MAAMc,GACnBH,KAAMR,KA3EV,EAAKkB,MAAQ,CACXT,WAAW,EACXU,WAAW,G,EA6FjB,OAlGsC,gCAS7B,2BAAAC,OAAP,WACE,OAAOC,EAAEC,IACP,CAAEC,UAAW,qBACbC,KAAKN,MAAMT,UACP,EAAAgB,cAAc,EAAAC,SACb,EAAAC,WAAWC,oBAAoBJ,KAAKN,MAAMV,MAE3C,EAAAiB,cAAc,EAAAI,aAAc,CAAEC,SAAU,CAAEd,OAAQQ,KAAK3B,MAAMkC,oBAD7DP,KAAKQ,mBAAmBR,KAAKN,MAAMV,QAKpC,2BAAAwB,mBAAP,SAA0BxB,GAA1B,WASQyB,EAAWC,EAAO,GARA,CACtBC,MAAM,EACNC,UAAU,EACVC,MAAO,IACPC,aAAc,EACdC,UAAU,EACVC,eAAgB,GAE2BhB,KAAKiB,sBAC5CC,EAAQ,EAAAC,kBAAkBnC,GAC1BoC,EAAQC,EAAEC,IAAIJ,GAAO,SAACK,EAAOC,GAGjC,OAAO3B,EAAEC,IACP,CAAE2B,IAAKD,GACP,EAAAvB,cAAc,EAAAI,aAAc,CAC1BC,SAAU,CACRd,OAAQ,EAAKkC,mBACbC,QAASJ,GAEXK,eAAgB,CACd7B,UAAW,gCAKnB,OAAO5B,EAAgBsC,EAAUW,IAG5B,2BAAAS,0BAAP,SAAiCC,EAAkCC,GAC7DD,EAAUnD,QAAUqB,KAAK3B,MAAMM,OACjCqB,KAAKzB,6BAA6BuD,EAAWC,IAI1C,2BAAAC,mBAAP,WACEhC,KAAKzB,6BAA6ByB,KAAK3B,MAAO2B,KAAK1B,UAG9C,2BAAA2D,sBAAP,SAA6BH,EAAkCI,GAC7D,OAAOJ,EAAUnD,QAAUqB,KAAK3B,MAAMM,OAASuD,IAAclC,KAAKN,OAsB5D,2BAAAgC,iBAAR,WACE,OAAIL,EAAEc,IAAInC,KAAK3B,MAAO,WACpB+D,QAAQC,KAAK,0FACNrC,KAAK3B,MAAc,OAAiB,eAEtC2B,KAAK3B,MAAMiE,eAGZ,2BAAArB,mBAAR,WACE,OAAII,EAAEc,IAAInC,KAAK3B,MAAO,WACpB+D,QAAQC,KAAK,0FACNrC,KAAK3B,MAAc,OAAW,SAEhC2B,KAAK3B,MAAMsD,SAEtB,iBAlGA,CAAsC,EAAAY,WAAzB,EAAAC,mBAmGb,UAAeA","file":"semantic-carousel-2057859761b2acae8bba.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { createFactory, createElement, Props } from 'react';\nimport * as D from 'react-dom-factories';\nimport Slider from 'react-slick';\nimport * as _ from 'lodash';\nimport * as assign from 'object-assign';\n\nimport { BuiltInEvents, trigger } from 'platform/api/events';\nimport { SparqlClient, SparqlUtil } from 'platform/api/sparql';\nimport { Component, ComponentContext } from 'platform/api/components';\nimport { prepareResultData } from 'platform/components/utils';\nimport { TemplateItem } from 'platform/components/ui/template';\nimport { Spinner } from 'platform/components/ui/spinner';\n\nconst SliderComponent = createFactory(Slider);\n\nimport './SemanticCarousel.scss';\n\nexport interface SemanticCarouselConfig {\n  /**\n   * SPARQL SELECT query string\n   */\n  query: string;\n\n  /**\n   * [handlebars.js](http://handlebarsjs.com/) HTML slide template.\n   * SPARQL query projection variables are available in the template\n   */\n  tupleTemplate: string;\n\n  /**\n   * Template which is applied when query returns no results\n   */\n  noResultTemplate?: string;\n\n  /**\n   * Additional carousel config options propagated to underlying library [react-slick](https://github.com/akiran/react-slick)\n   */\n  options?: ReactSlickOptions;\n\n  /**\n   * ID for issuing component events.\n   */\n  id?: string;\n}\n\ninterface ReactSlickOptions {\n  /**\n   * Enables tabbing and arrow key navigation\n   *\n   * @default true\n   */\n  accessibility?: boolean;\n\n  /**\n   * Enables adaptive height for single slide horizontal carousels\n   *\n   * @default false\n   */\n  adaptiveHeight?: boolean;\n\n  /**\n   * Show left and right nav arrows\n   *\n   * @default true\n   */\n  arrows?: boolean;\n\n  /**\n   * Enables Autoplay\n   *\n   * @default false\n   */\n  autoplay?: boolean;\n\n  /**\n   * Autoplay Speed in milliseconds\n   *\n   * @default 3000\n   */\n  autoplaySpeed?: number;\n\n  /**\n   * Enables centered view with partial prev/next slides\n   *\n   * @default false\n   */\n  centerMode?: boolean;\n\n  /**\n   * Additional class name for the inner slider div\n   */\n  className?: string;\n\n  /**\n   * Show dot indicators\n   *\n   * @default false\n   */\n  dots?: boolean;\n\n  /**\n   * Class for slide indicator dots container\n   *\n   * @default 'slick-dots'\n   */\n  dotsClass?: string;\n\n  /**\n   * Enable mouse dragging\n   *\n   * @default true\n   */\n  draggable?: boolean;\n\n  /**\n   * Enable fade\n   *\n   * @default false\n   */\n  fade?: boolean;\n\n  /**\n   * Go to slide on click\n   *\n   * @default false\n   */\n  focusOnSelect?: boolean;\n\n  /**\n   * Infinite loop sliding\n   *\n   * @default true\n   */\n  infinite?: boolean;\n\n  /**\n   * Slide to start on\n   *\n   * @default 0\n   */\n  initialSlide?: number;\n\n  /**\n   * Loads images or renders components on demands\n   *\n   * @default false\n   */\n  lazyLoad?: boolean;\n\n  /**\n   * Pause Autoplay On Hover\n   *\n   * @default true\n   */\n  pauseOnHover?: boolean;\n\n  /**\n   * Object containing breakpoints and settings objects.\n   * Enables settings sets at given screen width.\n   * Breakpoints in the array should be ordered from smalles to greatest.\n   *\n   * @example [ { breakpoint: 768, settings: { slidesToShow: 3 } }, { breakpoint: 1024, settings: { slidesToShow: 5 } }, { breakpoint: 100000, settings: 'unslick' } ]\n   */\n  responsive?: Array<{\n    /**\n     * maxWidth so the settings will be applied when resolution is below this value\n     */\n    breakpoint: number;\n\n    /**\n     * Set settings to \"unslick\" instead of an object to disable slick at a given breakpoint.\n     */\n    settings: 'unslick' | ReactSlickOptions;\n  }>;\n\n  /**\n   * Change the slider's direction to become right-to-left\n   *\n   * @default false\n   */\n  rtl?: boolean;\n\n  /**\n   * Number of slides to be visible at a time\n   *\n   * @default 1\n   */\n  slidesToShow?: number;\n\n  /**\n   * Enable/Disable CSS Transitions\n   *\n   * @default true\n   */\n  useCSS?: boolean;\n\n  /**\n   * Vertical slide mode\n   *\n   * @default false\n   */\n  vertical?: boolean;\n}\n\nexport type SemanticCarouselProps = SemanticCarouselConfig & Props<SemanticCarousel>;\n\ninterface SemanticCarouselState {\n  isLoading: boolean;\n  noResults?: boolean;\n  data?: SparqlClient.SparqlSelectResult;\n}\n\nexport class SemanticCarousel extends Component<SemanticCarouselProps, SemanticCarouselState> {\n  constructor(props: SemanticCarouselProps, context: ComponentContext) {\n    super(props, context);\n    this.state = {\n      isLoading: true,\n      noResults: false,\n    };\n  }\n\n  public render() {\n    return D.div(\n      { className: 'semantic-carousel' },\n      this.state.isLoading\n        ? createElement(Spinner)\n        : !SparqlUtil.isSelectResultEmpty(this.state.data)\n        ? this.getSliderComponent(this.state.data)\n        : createElement(TemplateItem, { template: { source: this.props.noResultTemplate } })\n    );\n  }\n\n  public getSliderComponent(data: SparqlClient.SparqlSelectResult) {\n    const defaultSettings = {\n      dots: true,\n      infinite: true,\n      speed: 500,\n      slidesToShow: 1,\n      lazyLoad: true,\n      slidesToScroll: 1,\n    };\n    const settings = assign({}, defaultSettings, this.getCarouselOptions());\n    const _data = prepareResultData(data);\n    const items = _.map(_data, (tuple, i) => {\n      // slides needs to be wrapped in div\n      // see https://github.com/akiran/react-slick/issues/328\n      return D.div(\n        { key: i },\n        createElement(TemplateItem, {\n          template: {\n            source: this.getTupleTemplate(),\n            options: tuple,\n          },\n          componentProps: {\n            className: 'semantic-carousel-item',\n          },\n        })\n      );\n    });\n    return SliderComponent(settings, items);\n  }\n\n  public componentWillReceiveProps(nextProps: SemanticCarouselProps, nextContext: any) {\n    if (nextProps.query !== this.props.query) {\n      this.prepareConfigAndExecuteQuery(nextProps, nextContext);\n    }\n  }\n\n  public componentWillMount() {\n    this.prepareConfigAndExecuteQuery(this.props, this.context);\n  }\n\n  public shouldComponentUpdate(nextProps: SemanticCarouselProps, nextState: SemanticCarouselState) {\n    return nextProps.query !== this.props.query || nextState !== this.state;\n  }\n\n  private prepareConfigAndExecuteQuery = (props: SemanticCarouselProps, context: ComponentContext) => {\n    const stream = SparqlClient.select(props.query, { context: context.semanticContext });\n    stream\n      .onValue((res) => this.setState({ data: res, isLoading: false }))\n      .onEnd(() => {\n        if (this.props.id) {\n          trigger({ eventType: BuiltInEvents.ComponentLoaded, source: this.props.id });\n        }\n      });\n\n    if (this.props.id) {\n      trigger({\n        eventType: BuiltInEvents.ComponentLoading,\n        source: this.props.id,\n        data: stream,\n      });\n    }\n  };\n\n  private getTupleTemplate(): string {\n    if (_.has(this.props, 'layout')) {\n      console.warn('layout property in semantic-carousel is deprecated, please use flat properties instead');\n      return this.props['layout']['tupleTemplate'];\n    }\n    return this.props.tupleTemplate;\n  }\n\n  private getCarouselOptions(): {} {\n    if (_.has(this.props, 'layout')) {\n      console.warn('layout property in semantic-carousel is deprecated, please use flat properties instead');\n      return this.props['layout']['options'];\n    }\n    return this.props.options;\n  }\n}\nexport default SemanticCarousel;\n"],"sourceRoot":""}