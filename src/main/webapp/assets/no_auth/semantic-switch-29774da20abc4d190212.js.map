{"version":3,"sources":["webpack:///./src/main/web/components/semantic/conditional/SemanticSwitch.tsx"],"names":["props","context","cancellation","Cancellation","state","loading","componentDidMount","switchQuery","parseSwitchSelectQuery","querySource","Error","query","SparqlUtil","parseQuery","type","queryType","SparqlTypeGuards","isStarProjection","variables","length","this","error","setState","semanticContext","map","SparqlClient","select","observe","value","result","setResultCase","getCaseTemplate","key","propsTemplate","cases","localScope","markupTemplateScope","partial","getPartial","undefined","source","results","bindings","caseNode","head","vars","selectedCase","render","Spinner","ErrorNotification","errorMessage","template","withFallback","TemplateItem","defaultProps","Component","SemanticSwitch"],"mappings":"6IAkBA,OAGA,QACA,QACA,QACA,SACA,SACA,SAsCA,cAOE,wBAAYA,EAA4BC,GAAxC,MACE,YAAMD,EAAOC,IAAQ,K,OAHN,EAAAC,aAAe,IAAI,EAAAC,aAIlC,EAAKC,MAAQ,CAAEC,SAAS,G,EAuD5B,OAhEoC,8BAYlC,yBAAAC,kBAAA,eACMC,EADN,OAEE,IACEA,EAmDN,SAASC,uBAAuBC,GAC9B,IAAKA,EACH,MAAM,IAAIC,MAAM,qDAElB,IAAMC,EAAQ,EAAAC,WAAWC,WAAWJ,GACpC,GAAmB,UAAfE,EAAMG,MAAwC,WAApBH,EAAMI,UAClC,MAAM,IAAIL,MAAM,uCAElB,GAAI,EAAAM,iBAAiBC,iBAAiBN,EAAMO,YAAyC,IAA3BP,EAAMO,UAAUC,OACxE,MAAM,IAAIT,MAAM,qFAElB,OAAOC,EA9DWH,CAAuBY,KAAKpB,MAAMW,OAChD,MAAOU,GAEP,YADAD,KAAKE,SAAS,CAAEjB,SAAS,EAAOgB,MAAK,IAI/B,IAAAE,EAAA,aAAAA,gBACRH,KAAKlB,aAAasB,IAAI,EAAAC,aAAaC,OAAOnB,EAAa,CAAEN,QAASsB,KAAoBI,QAAQ,CAC5FC,MAAO,SAACC,GAAW,SAAKC,cAAcD,IACtCR,MAAO,SAACA,GAAU,SAAKC,SAAS,CAAEjB,SAAS,EAAOgB,MAAK,QAInD,yBAAAU,gBAAR,SAAwBC,GACtB,IAAMC,EAAgBb,KAAKpB,MAAMkC,MAAMF,GACvC,GAAIC,EACF,OAAOA,EAET,IAAME,EAAaf,KAAKpB,MAAMoC,oBACxBC,EAAUF,EAAaA,EAAWG,WAAWN,QAAOO,EAC1D,OAAIF,EACKA,EAAQG,YADjB,GAMM,yBAAAV,cAAR,SAAsBD,GACpB,GAAuC,IAAnCA,EAAOY,QAAQC,SAASvB,OAE1BC,KAAKE,SAAS,CAAEjB,SAAS,QACpB,CACL,IACMsC,EADed,EAAOY,QAAQC,SAAS,GACfb,EAAOe,KAAKC,KAAK,IACzCC,EAAeH,EAAWA,EAASf,WAAQW,EACjDnB,KAAKE,SAAS,CAAEjB,SAAS,EAAOyC,aAAY,MAIhD,yBAAAC,OAAA,WACE,GAAI3B,KAAKhB,MAAMC,QACb,OAAO,gBAAC,EAAA2C,QAAO,MACV,GAAI5B,KAAKhB,MAAMiB,MACpB,OAAO,gBAAC,EAAA4B,kBAAiB,CAACC,aAAc9B,KAAKhB,MAAMiB,QAEnD,IAAM8B,EAAW/B,KAAKW,gBAAgBX,KAAKhB,MAAM0C,cAC3CM,OAA4Bb,IAAbY,EAAyB/B,KAAKW,gBAAgB,WAAaoB,EAChF,OAAOC,EAAe,gBAAC,EAAAC,aAAY,CAACF,SAAU,CAAEX,OAAQY,KAAqB,MA5DjE,eAAAE,aAA6C,CAC3DpB,MAAO,IA8DX,eAhEA,CAAoC,EAAAqB,WAAvB,EAAAC,iBAgFb,UAAeA","file":"semantic-switch-29774da20abc4d190212.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\nimport * as SparqlJs from 'sparqljs';\n\nimport { Component, ComponentProps } from 'platform/api/components';\nimport { Cancellation } from 'platform/api/async';\nimport { SparqlClient, SparqlUtil, SparqlTypeGuards } from 'platform/api/sparql';\nimport { ErrorNotification } from 'platform/components/ui/notification';\nimport { Spinner } from 'platform/components/ui/spinner';\nimport { TemplateItem } from 'platform/components/ui/template';\n\nexport interface SemanticSwitchProps extends ComponentProps {\n  query: string;\n  cases?: { [caseKey: string]: string };\n}\n\ninterface State {\n  readonly loading?: boolean;\n  readonly error?: any;\n  readonly selectedCase?: string;\n}\n\n/**\n * @example\n * <semantic-switch query='SELECT (?color) ...' cases='{\n *   \"blue\": \"{{> purple}}\",\n *   \"http://dbpedia.org/resource/Egyptian_blue\": \"{{> blue}}\",\n * }'>\n *   <template id='blue'>...</template>\n *   <template id='purple'>...</template>\n *   <template id='default'>...</template>\n * </semantic-switch>\n *\n * // shorthand version (without 'blue' case)\n * <semantic-switch query='SELECT (?color) ...'>\n *   <template id='purple'>...</template>\n *   <template id='http://dbpedia.org/resource/Egyptian_blue'>...</template>\n *   <template id='default'>...</template>\n * </semantic-switch>\n *\n * // inline templates in cases\n * <semantic-switch query='SELECT (?color) ...' cases='{\n *   \"red\": \"<!-- markup -->\"\n *   \"blue\": \"<!-- markup -->\",\n *   \"http://dbpedia.org/resource/Egyptian_blue\": \"<!-- markup -->\",\n * }'></semantic-switch>\n */\nexport class SemanticSwitch extends Component<SemanticSwitchProps, State> {\n  static readonly defaultProps: Partial<SemanticSwitchProps> = {\n    cases: {},\n  };\n\n  private readonly cancellation = new Cancellation();\n\n  constructor(props: SemanticSwitchProps, context: any) {\n    super(props, context);\n    this.state = { loading: true };\n  }\n\n  componentDidMount() {\n    let switchQuery: SparqlJs.SelectQuery;\n    try {\n      switchQuery = parseSwitchSelectQuery(this.props.query);\n    } catch (error) {\n      this.setState({ loading: false, error });\n      return;\n    }\n\n    const { semanticContext } = this.context;\n    this.cancellation.map(SparqlClient.select(switchQuery, { context: semanticContext })).observe({\n      value: (result) => this.setResultCase(result),\n      error: (error) => this.setState({ loading: false, error }),\n    });\n  }\n\n  private getCaseTemplate(key: string): string | undefined {\n    const propsTemplate = this.props.cases[key];\n    if (propsTemplate) {\n      return propsTemplate;\n    }\n    const localScope = this.props.markupTemplateScope;\n    const partial = localScope ? localScope.getPartial(key) : undefined;\n    if (partial) {\n      return partial.source;\n    }\n    return undefined;\n  }\n\n  private setResultCase(result: SparqlClient.SparqlSelectResult) {\n    if (result.results.bindings.length === 0) {\n      // fallback to default case\n      this.setState({ loading: false });\n    } else {\n      const firstBidning = result.results.bindings[0];\n      const caseNode = firstBidning[result.head.vars[0]];\n      const selectedCase = caseNode ? caseNode.value : undefined;\n      this.setState({ loading: false, selectedCase });\n    }\n  }\n\n  render() {\n    if (this.state.loading) {\n      return <Spinner />;\n    } else if (this.state.error) {\n      return <ErrorNotification errorMessage={this.state.error} />;\n    } else {\n      const template = this.getCaseTemplate(this.state.selectedCase);\n      const withFallback = template === undefined ? this.getCaseTemplate('default') : template;\n      return withFallback ? <TemplateItem template={{ source: withFallback }} /> : null;\n    }\n  }\n}\n\nfunction parseSwitchSelectQuery(querySource: string): SparqlJs.SelectQuery {\n  if (!querySource) {\n    throw new Error('Missing SELECT Sparql query for <semantic-switch>');\n  }\n  const query = SparqlUtil.parseQuery(querySource);\n  if (query.type !== 'query' || query.queryType !== 'SELECT') {\n    throw new Error('Sparql query must be a SELECT query');\n  }\n  if (SparqlTypeGuards.isStarProjection(query.variables) || query.variables.length !== 1) {\n    throw new Error('SELECT query for <semantic-switch> ' + 'must contain only a single projection variable');\n  }\n  return query;\n}\n\nexport default SemanticSwitch;\n"],"sourceRoot":""}