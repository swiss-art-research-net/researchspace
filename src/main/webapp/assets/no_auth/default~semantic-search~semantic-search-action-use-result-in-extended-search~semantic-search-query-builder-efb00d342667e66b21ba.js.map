{"version":3,"sources":["webpack:///./src/main/web/components/semantic/search/data/search/ModelUtils.ts"],"names":["textDisjunctToString","disjunct","value","entityToString","label","setToString","dateValueToString","dateValue","format","yearValueToString","year","epoch","dateToString","dateRangeToString","begin","end","dateDeviationToString","date","deviation","yearToString","yearRangeToString","yearDeviationToString","round","_","spatialDistanceToString","distance","center","lat","long","spatialBoundingBoxToString","southWest","northEast","literalToString","literal","numericRangeToString","searchDisjunctToString","savedSearchToString","disjunctToString","Model","matchDisjunct","Resource","Date","DateRange","DateDeviation","Year","YearRange","YearDeviation","Text","Set","Search","SavedSearch","Distance","BoundingBox","Literal","NumericRange","getCategoryTypes","config","category","categories","categoryIri","iri","toString","has","kinds","cloneDeep","map","c","kind","intersection","length","includes","push"],"mappings":"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","file":"default~semantic-search~semantic-search-action-use-result-in-extended-search~semantic-search-query-builder-efb00d342667e66b21ba.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as _ from 'lodash';\nimport * as Model from './Model';\nimport { SemanticSearchConfig } from '../../config/SearchConfig';\n\nconst DATE_STRING_FORMAT = 'DD/MM/YYYY';\n\nexport const textDisjunctToString = (disjunct: Model.TextDisjunct): string => {\n  return `\"${disjunct.value}\"`;\n};\n\nexport const entityToString = (disjunct: Model.ResourceDisjunct): string => disjunct.value.label;\n\nexport const setToString = (disjunct: Model.SetDisjunct): string => `entities from set: ${disjunct.value.label}`;\n\nexport const dateValueToString = (dateValue: Model.DateValue): string => dateValue.format(DATE_STRING_FORMAT);\n\nexport const yearValueToString = (value: Model.YearValue): string => `Year ${value.year} ${value.epoch}`;\n\nexport const dateToString = (disjunct: Model.DateDisjunct): string => dateValueToString(disjunct.value);\n\nexport const dateRangeToString = (disjunct: Model.DateRangeDisjunct): string =>\n  `${dateValueToString(disjunct.value.begin)} - ${dateValueToString(disjunct.value.end)}`;\n\nexport const dateDeviationToString = (disjunct: Model.DateDeviationDisjunct): string =>\n  `${dateValueToString(disjunct.value.date)} ± ${disjunct.value.deviation} days`;\n\nexport const yearToString = (disjunct: Model.YearDisjunct): string => yearValueToString(disjunct.value);\n\nexport const yearRangeToString = (disjunct: Model.YearRangeDisjunct): string =>\n  `${yearValueToString(disjunct.value.begin)} - ${yearValueToString(disjunct.value.end)}`;\n\nexport const yearDeviationToString = (disjunct: Model.YearDeviationDisjunct): string =>\n  `${yearValueToString(disjunct.value.year)} ± ${disjunct.value.deviation} years`;\n\nconst round = (value: number): number => _.round(value, 2);\n\nexport const spatialDistanceToString = (disjunct: Model.SpatialDistanceDisjunct): string => {\n  const value = disjunct.value;\n  return `Circle of ${round(value.distance)}km at (${round(value.center.lat)},${round(value.center.long)})`;\n};\n\nexport const spatialBoundingBoxToString = (disjunct: Model.SpatialBoundingBoxDisjunct): string => {\n  const value = disjunct.value;\n  return (\n    `Rectangle from (${round(value.southWest.lat)},${round(value.southWest.long)}) ` +\n    `to (${round(value.northEast.lat)},${round(value.northEast.long)})`\n  );\n};\n\nexport const literalToString = (disjunct: Model.LiteralDisjunct): string => {\n  const value = disjunct.value.literal;\n  return `Literal \"${value}\"`;\n};\n\nexport const numericRangeToString = (disjunct: Model.NumericRangeDisjunct): string => {\n  const { begin, end } = disjunct.value;\n  return `Numeric range [${begin}, ${end}]`;\n};\n\nexport const searchDisjunctToString = (disjunct: Model.SearchDisjunct): string => {\n  return '';\n};\n\nexport const savedSearchToString = (disjunct: Model.SavedSearchDisjunct): string => 'Search: ' + disjunct.value.label;\n\nexport function disjunctToString(disjunct: Model.Disjunct): string {\n  return Model.matchDisjunct({\n    Resource: entityToString,\n    Date: dateToString,\n    DateRange: dateRangeToString,\n    DateDeviation: dateDeviationToString,\n    Year: yearToString,\n    YearRange: yearRangeToString,\n    YearDeviation: yearDeviationToString,\n    Text: textDisjunctToString,\n    Set: setToString,\n    Search: searchDisjunctToString,\n    SavedSearch: savedSearchToString,\n    Distance: spatialDistanceToString,\n    BoundingBox: spatialBoundingBoxToString,\n    Literal: literalToString,\n    NumericRange: numericRangeToString,\n  })(disjunct);\n}\n\nexport type ResourceCategoryType = 'resource' | 'hierarchy' | 'place' | 'set';\nexport type TextCategoryType = 'text';\nexport type DateRangeCategoryType = 'date-range';\nexport type NumericalCategoryType = 'numerical';\nexport type LiteralCategoryType = 'literal';\nexport type NumericRangeCategoryType = 'numeric-range';\nexport type CategoryType =\n  | ResourceCategoryType\n  | TextCategoryType\n  | DateRangeCategoryType\n  | NumericalCategoryType\n  | LiteralCategoryType\n  | NumericRangeCategoryType;\n\nexport function getCategoryTypes(config: SemanticSearchConfig, category: Model.Category): Array<CategoryType> {\n  const categories = config.categories;\n  const categoryIri = category.iri.toString();\n  if (_.has(categories, categoryIri)) {\n    const kinds = _.cloneDeep(_.map(categories[categoryIri], (c) => c.kind));\n    if (\n      _.intersection(kinds, ['text', 'numeric-range', 'date-range', 'literal']).length === 0 &&\n      !_.includes(kinds, 'hierarchy')\n    ) {\n      kinds.push('resource', 'set');\n    }\n    return kinds;\n  } else {\n    return ['resource', 'set'];\n  }\n}\n"],"sourceRoot":""}