{"version":3,"sources":["webpack:///./src/main/web/components/iiif/SideBySideComparison.ts"],"names":["props","context","requests","Kefir","pool","miradorElementId","uniqueId","state","loading","flatMapLatest","request","isJust","loadMiradorConfig","get","never","onValue","imagesMetadata","miradorConfig","setState","onError","error","this","gatherImageMetadata","map","createMiradorConfig","repositories","serviceUrl","ImageApi","getIIIFServerUrl","iiifServerUrl","metadataTasks","selection","iri","Rdf","queryIIIFImageOrRegion","imageIdPattern","flatMap","imageInfo","serviceRequestUri","constructServiceRequestUri","imageId","queryImageBounds","bounds","LdpRegionService","search","imageIRI","annotations","createManifest","baseIri","imageIri","imageServiceUri","canvasSize","manifest","zip","metadataByIri","keyBy","meta","value","annotationEndpoint","SideBySideAnnotationEndpoint","id","layout","chooseMiradorLayout","length","saveSession","data","metadata","manifestUri","location","manifestContent","name","module","options","endpoint","windowObjects","loadedManifest","viewType","sidePanel","canvasControls","annotationState","annotationCreation","annotationBodyEditor","jsonStorageEndpoint","componentDidMount","plug","constant","maybe","Just","componentWillUnmount","Nothing","removeMirador","miradorInstance","miradorElement","shouldComponentUpdate","nextProps","nextState","isEqual","render","D","div","style","position","width","height","renderContent","createElement","Spinner","ErrorNotification","errorMessage","ref","element","renderMirador","className","targetElement","onInitialized","mirador","scrollToRegions","index","viewport","defaultProps","Component","slotCount","type","rows","Math","max","floor","sqrt","columns","ceil","columnsInLastRow","children","i","row","push","columnCount","j","SideBySideComparison","canvasIri","isRegion","filter","annotation","LdpAnnotationEndpoint","c","f","createFactory"],"mappings":"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","file":"rs-iiif-side-by-side-de444f783ae6825efeb6.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2015-2020, Â© Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { createFactory, createElement } from 'react';\nimport * as D from 'react-dom-factories';\nimport { uniqueId, keyBy, isEqual } from 'lodash';\nimport * as Kefir from 'kefir';\nimport * as maybe from 'data.maybe';\n\nimport { Component } from 'platform/api/components';\nimport { Rdf } from 'platform/api/rdf';\nimport { ErrorNotification } from 'platform/components/ui/notification';\nimport { Spinner } from 'platform/components/ui/spinner';\n\nimport { queryIIIFImageOrRegion, ImageOrRegionInfo } from '../../data/iiif/ImageAnnotationService';\nimport * as ImageApi from '../../data/iiif/ImageAPI';\nimport { createManifest, Manifest } from '../../data/iiif/ManifestBuilder';\nimport { LdpRegionService, OARegionAnnotation } from '../../data/iiif/LDPImageRegionService';\nimport { LdpAnnotationEndpoint } from '../../data/iiif/AnnotationEndpoint';\n\nimport { renderMirador, removeMirador, scrollToRegions } from './mirador/Mirador';\n\ninterface Props {\n  selection: Array<Rdf.Iri | string>;\n  repositories?: Array<string>;\n  imageIdPattern: string;\n  iiifServerUrl: string;\n}\n\ninterface State {\n  loading: boolean;\n  imagesMetadata?: Metadata[];\n  miradorConfig?: Mirador.Options;\n  error?: any;\n}\n\ninterface Metadata {\n  manifest: Manifest;\n  imageInfo: ImageOrRegionInfo;\n  annotations: OARegionAnnotation[];\n}\n\ntype Request = Data.Maybe<Props>;\n\n/**\n * Side-by-Side image comparison component.\n * Due to usage of Mirador, you must place it in a html element with defined height.\n *\n * @example\n * <rs-iiif-mirador-side-by-side-comparison\n *   compared-images='[<image1>, <image2>, <region3>]'\n *   image-id-pattern='BIND(REPLACE(?imageIRI, \"^http://example.com/(.*)$\", \"$1\") as ?imageID)'\n *   iiif-server-url='<iiif-server>'>\n * </rs-iiif-mirador-side-by-side-comparison>\n */\nexport class SideBySideComparison extends Component<Props, State> {\n  private requests: Kefir.Pool<Request>;\n  private miradorElementId: string;\n\n  private miradorElement: HTMLElement;\n  private miradorInstance: Mirador.Instance;\n\n  static defaultProps = {\n    repositories: ['default'],\n  };\n\n  constructor(props, context) {\n    super(props, context);\n    this.requests = Kefir.pool<Request>();\n    this.miradorElementId = uniqueId('mirador_');\n\n    this.state = { loading: true };\n\n    // 1. create Mirador configuration, including all manifests and layout\n    this.requests\n      .flatMapLatest((request) => (request.isJust ? this.loadMiradorConfig(request.get()) : Kefir.never<any>()))\n      .onValue(({ imagesMetadata, miradorConfig }) => this.setState({ loading: false, imagesMetadata, miradorConfig }))\n      .onError((error) => this.setState({ loading: false, error }));\n  }\n\n  private loadMiradorConfig(request: Props) {\n    // 1.1. to create Mirador Config, gather\n    // all images info (manifest, image info, regions/annotations)\n    // 1.1.1 we need image dimensions from iiif image server to create manifest\n    return this.gatherImageMetadata(request).map((imagesMetadata) => {\n      const miradorConfig = this.createMiradorConfig(imagesMetadata);\n      return { imagesMetadata, miradorConfig };\n    });\n  }\n\n  /**\n   * This gathers Image Metadata from iiif image server to get\n   * image sizes, image regions from LDP and creates manifest.\n   *\n   * It's executed in a sequence, but we could parallel some tasks.\n   * We should fetch image sizes, then create manifest,\n   * while fetching regions could be done in parallel.\n   *\n   * @param request\n   * @returns {Stream<Metadata[]>}\n   */\n  private gatherImageMetadata(request: Props): Kefir.Stream<Metadata[]> {\n    const repositories = request.repositories;\n    // 1.1.1.1 get full iiif service url if it's relative one\n    const serviceUrl = ImageApi.getIIIFServerUrl(request.iiifServerUrl);\n\n    const metadataTasks = request.selection\n      .map((iri) => (typeof iri === 'string' ? Rdf.iri(iri) : iri))\n      .map((iri) =>\n        queryIIIFImageOrRegion(iri, request.imageIdPattern, repositories).flatMap((imageInfo) => {\n          // creating image API request url for given image\n          const serviceRequestUri = ImageApi.constructServiceRequestUri(serviceUrl, imageInfo.imageId);\n          // getting info.json from image API\n          return ImageApi.queryImageBounds(serviceUrl, imageInfo.imageId).flatMap((bounds) =>\n            // we've got image size, we can create manifest\n            // but instead we are starting to fetch for regions\n            LdpRegionService.search(imageInfo.imageIRI).flatMap((annotations) =>\n              // and lastly we're creating manifest and putting it all together\n              createManifest([\n                {\n                  baseIri: imageInfo.iri,\n                  imageIri: imageInfo.imageIRI,\n                  imageServiceUri: serviceRequestUri,\n                  canvasSize: bounds,\n                },\n              ]).map((manifest) => ({ manifest, imageInfo, annotations }))\n            )\n          );\n        })\n      );\n\n    return Kefir.zip(metadataTasks);\n  }\n\n  private createMiradorConfig(imagesMetadata: Metadata[]): Mirador.Options {\n    const metadataByIri = keyBy(imagesMetadata, (meta) => meta.imageInfo.iri.value);\n    let annotationEndpoint = new SideBySideAnnotationEndpoint(metadataByIri);\n    return {\n      id: this.miradorElementId,\n      layout: chooseMiradorLayout(imagesMetadata.length),\n      saveSession: false,\n      data: imagesMetadata.map((metadata) => ({\n        manifestUri: metadata.manifest['@id'],\n        location: '',\n        manifestContent: metadata.manifest,\n      })),\n      annotationEndpoint: {\n        name: 'ResearchSpace annotation endpoint',\n        module: 'AdapterAnnotationEndpoint',\n        options: {\n          endpoint: annotationEndpoint,\n        },\n      },\n      windowObjects: imagesMetadata.map(\n        (metadata): Mirador.WindowObject => ({\n          loadedManifest: metadata.manifest['@id'],\n          viewType: 'ImageView' as 'ImageView',\n          sidePanel: false,\n          canvasControls: {\n            annotations: {\n              annotationState: 'on',\n              annotationCreation: true,\n            },\n          },\n        })\n      ),\n      annotationBodyEditor: {\n        module: 'researchspaceAnnotationBodyEditor',\n        options: {},\n      },\n      jsonStorageEndpoint: {\n        name: 'Dummy JSON Storage',\n        module: 'DummyJSONStorage',\n        options: {},\n      },\n    };\n  }\n\n  componentDidMount() {\n    this.requests.plug(Kefir.constant(maybe.Just(this.props)));\n  }\n\n  componentWillUnmount() {\n    this.requests.plug(Kefir.constant(maybe.Nothing()));\n    removeMirador(this.miradorInstance, this.miradorElement);\n  }\n\n  public shouldComponentUpdate(nextProps: Props, nextState: State) {\n    return nextState.loading !== this.state.loading || !isEqual(nextProps, this.props);\n  }\n\n  render() {\n    return D.div({ style: { position: 'relative', width: '100%', height: '100%' } }, this.renderContent());\n  }\n\n  private renderContent() {\n    if (this.state.loading) {\n      return createElement(Spinner);\n    } else if (this.state.error) {\n      return createElement(ErrorNotification, { errorMessage: this.state.error });\n    } else {\n      return D.div({\n        ref: (element) => {\n          this.miradorElement = element;\n          this.renderMirador(element);\n        },\n        id: this.miradorElementId,\n        className: 'mirador',\n        style: { width: '100%', height: '100%', position: 'relative' },\n      });\n    }\n  }\n\n  private renderMirador(element: HTMLElement) {\n    if (!this.state || !this.state.miradorConfig || !element) {\n      return;\n    }\n\n    removeMirador(this.miradorInstance, element);\n\n    this.miradorInstance = renderMirador({\n      targetElement: element,\n      miradorConfig: this.state.miradorConfig,\n      onInitialized: (mirador) => {\n        scrollToRegions(mirador, ({ index }) => {\n          const metadata = this.state.imagesMetadata[index];\n          return metadata.imageInfo.viewport;\n        });\n      },\n    });\n  }\n}\n\n/**\n * Computes the arrangement of Mirador windows\n */\nexport function chooseMiradorLayout(slotCount: number) {\n  const layout: Mirador.LayoutDescription = { type: 'column' };\n  if (slotCount <= 1) {\n    return layout;\n  }\n\n  const rows = Math.max(1, Math.floor(Math.sqrt(slotCount)));\n  const columns = Math.ceil(slotCount / rows);\n  const columnsInLastRow = slotCount - columns * (rows - 1);\n  layout.children = [];\n\n  for (let i = 0; i < rows; i++) {\n    const row: Mirador.LayoutDescription = { type: 'row', children: [] };\n    layout.children.push(row);\n    const columnCount = i === rows - 1 ? columnsInLastRow : columns;\n\n    for (let j = 0; j < columnCount; j++) {\n      row.children.push({ type: 'column' });\n    }\n  }\n\n  return layout;\n}\n\nclass SideBySideAnnotationEndpoint extends LdpAnnotationEndpoint {\n  metadataByIri: any;\n\n  constructor(metadataByIri: any) {\n    super({});\n    this.metadataByIri = metadataByIri;\n  }\n\n  search(canvasIri: Rdf.Iri) {\n    const meta = this.metadataByIri[canvasIri.value];\n    if (meta && meta.imageInfo.isRegion) {\n      return Kefir.constant(meta.annotations.filter((annotation) => annotation['@id'] === canvasIri.value));\n    } else {\n      return Kefir.constant(meta.annotations);\n    }\n  }\n}\n\nexport type c = SideBySideComparison;\nexport const c = SideBySideComparison;\nexport const f = createFactory(c);\nexport default c;\n"],"sourceRoot":""}