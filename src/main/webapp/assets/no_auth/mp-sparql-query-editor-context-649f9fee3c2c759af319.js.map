{"version":3,"sources":["webpack:///./src/main/web/components/sparql-editor/SparqlQueryEditorContext.ts"],"names":["ContextTypes","queryEditorContext","PropTypes","object","props","query","Nothing","queryPool","Kefir","pool","plug","constant","repository","getChildContext","getQuery","setQuery","options","Just","silent","fromNullable","queryChanges","this","flatMapLatest","toProperty","changes","render","Children","only","children","childContextTypes","Component","SparqlQueryEditorContext"],"mappings":"6IAmBA,OACA,OACA,QACA,QAqBa,EAAAA,aAAoD,CAC/DC,mBAAoBC,EAAUC,QAGhC,kBAME,kCAAYC,GAAZ,MACE,YAAMA,IAAM,K,OAJN,EAAAC,MAAQ,EAAAC,UACC,EAAAC,UAAYC,EAAMC,OAIjC,EAAKF,UAAUG,KAAKF,EAAMG,SAAS,CAAEN,MAAO,EAAAC,UAAmBM,WAAY,EAAAN,a,EA4B/E,OApC8C,wCAW5C,mCAAAO,gBAAA,sBAmBE,MAAO,CAAEZ,mBAlBsC,CAC7Ca,SAAU,WAAM,SAAKT,OACrBU,SAAU,SAACV,EAAOW,QAAA,IAAAA,MAAA,IAChB,EAAKX,MAAQ,EAAAY,KAAKZ,GACbW,EAAQE,QACX,EAAKX,UAAUG,KACbF,EAAMG,SAAS,CACbN,MAAO,EAAKA,MACZO,WAAY,EAAAO,aAAaH,EAAQJ,gBAKzCQ,aAAcC,KAAKd,UAChBe,eAAc,SAACjB,GAAU,OAAAG,EAAMG,SAASN,MACxCkB,aACAC,aAKP,mCAAAC,OAAA,WACE,OAAO,EAAAC,SAASC,KAAKN,KAAKjB,MAAMwB,WAjC3B,yBAAAC,kBAAoB,EAAA7B,aAmC7B,yBApCA,CAA8C,EAAA8B,WAAjC,EAAAC,2BAsCb,UAAeA","file":"mp-sparql-query-editor-context-649f9fee3c2c759af319.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { Component, Children, ReactNode } from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as Kefir from 'kefir';\nimport { Just, Nothing, fromNullable } from 'data.maybe';\n\nexport interface SparqlQueryEditorContextProps {\n  children: ReactNode;\n}\n\nexport interface ContextQuery {\n  query: Data.Maybe<string>;\n  repository: Data.Maybe<string>;\n}\n\nexport interface QueryEditorContext {\n  getQuery(): Data.Maybe<string>;\n  setQuery(query: string, options?: { silent?: boolean; repository?: string }): void;\n  readonly queryChanges: Kefir.Stream<ContextQuery>;\n}\n\nexport interface ComponentContext {\n  queryEditorContext: QueryEditorContext;\n}\n\nexport const ContextTypes: Record<keyof ComponentContext, any> = {\n  queryEditorContext: PropTypes.object,\n};\n\nexport class SparqlQueryEditorContext extends Component<SparqlQueryEditorContextProps, void> {\n  static childContextTypes = ContextTypes;\n\n  private query = Nothing<string>();\n  private readonly queryPool = Kefir.pool<ContextQuery>();\n\n  constructor(props: SparqlQueryEditorContextProps) {\n    super(props);\n    this.queryPool.plug(Kefir.constant({ query: Nothing<string>(), repository: Nothing<string>() }));\n  }\n\n  getChildContext(): ComponentContext {\n    const queryEditorContext: QueryEditorContext = {\n      getQuery: () => this.query,\n      setQuery: (query, options = {}) => {\n        this.query = Just(query);\n        if (!options.silent) {\n          this.queryPool.plug(\n            Kefir.constant({\n              query: this.query,\n              repository: fromNullable(options.repository),\n            })\n          );\n        }\n      },\n      queryChanges: this.queryPool\n        .flatMapLatest((query) => Kefir.constant(query))\n        .toProperty()\n        .changes(),\n    };\n    return { queryEditorContext };\n  }\n\n  render() {\n    return Children.only(this.props.children);\n  }\n}\n\nexport default SparqlQueryEditorContext;\n"],"sourceRoot":""}