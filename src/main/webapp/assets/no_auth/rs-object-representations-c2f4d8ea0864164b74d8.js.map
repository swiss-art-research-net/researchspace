{"version":3,"sources":["webpack:///./src/main/web/widgets/ObjectRepresentationsWidget.ts"],"names":["Modal","createFactory","ReactBootstrap","ModalHeader","Header","ModalTitle","Title","ModalBody","Body","props","context","handleImageChanges","e","aspectRatio","target","offsetHeight","offsetWidth","LARGEST_PREVIEW_REP_WIDTH","largestPreviewRepHeight","setImageLoaded","setState","imagesAreLoading","allImagesAreLoaded","showModalNav","state","modalNavIsDisplayed","allReps","length","hideModalNav","handleModalKeyEvents","keyCode","prevModalImage","nextModalImage","modalIsDisplayed","isLoading","mainPreviewRep","maybe","Nothing","focusedPreviewRep","focusedModalRep","entityLabel","TRANSITION_TIME","componentDidMount","this","executeQuery","otherPreviewReps","SparqlClient","select","query","onValue","res","SparqlUtil","isSelectResultEmpty","_","forEach","results","bindings","binding","isNothing","value","Just","imgURL","loaded","push","shift","isJust","addToAllReps","get","otherRep","data","render","D","div","className","createElement","Spinner","getContents","createFocusedImageRepresentation","createThumbnails","createModal","template","source","noImageTemplate","focused","style","height","title","onClick","showModal","bind","onLoad","TransitionGroup","key","CSSTransition","classNames","timeout","enter","exit","img","src","appear","options","componentProps","updateFocusedImage","map","i","fullSizeImgURL","modalStyle","width","overflow","margin","paddingLeft","dialogClassName","show","onHide","hideModal","onMouseEnter","onMouseLeave","onKeyUp","closeButton","leave","span","url","newFocusedRep","find","rep","maxHeight","window","innerHeight","includes","currentSrc","naturalWidth","maxModalWidth","naturalHeight","some","every","index","findIndex","nextIndex","prevIndex","defaultProps","Component","ObjectRepresentationsWidget","c","f"],"mappings":"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","file":"rs-object-representations-c2f4d8ea0864164b74d8.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2015-2020, Â© Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * @author Mike Kelly <mkelly@britishmuseum.org>\n */\n\nimport { createElement, createFactory } from 'react';\nimport * as D from 'react-dom-factories';\nimport * as ReactBootstrap from 'react-bootstrap';\nimport * as classNames from 'classnames';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport * as maybe from 'data.maybe';\nimport * as _ from 'lodash';\n\nimport { Component } from 'platform/api/components';\nimport { SparqlClient, SparqlUtil } from 'platform/api/sparql';\n\nimport TemplateItem from 'platform/components/ui/template/TemplateItem';\nimport { Spinner } from 'platform/components/ui/spinner';\n\nconst Modal = createFactory(ReactBootstrap.Modal);\nconst ModalHeader = createFactory(ReactBootstrap.Modal.Header);\nconst ModalTitle = createFactory(ReactBootstrap.Modal.Title);\nconst ModalBody = createFactory(ReactBootstrap.Modal.Body);\n\nimport './object-representations-widget.scss';\n\ninterface ObjectRepsWidgetProps {\n  /**\n   * should return 'label', 'imgURL', 'isMainRep' values\n   * where 'label' is the entity label, not the image label\n   */\n  query: string;\n  /**\n   * can be used to format the thumbnail images which display below the large featured image\n   */\n  template?: string;\n  context: { [key: string]: string };\n  /**\n   * optional property to set maximum width of modal full-size representation\n   */\n  maxModalWidth?: number;\n\n  noImageTemplate?: string;\n}\n\ninterface Rep {\n  imgURL: string;\n  loaded: boolean;\n  width?: number;\n  height?: number;\n}\n\n// make all optional to allow for partial updates\ninterface ObjectRepsWidgetState {\n  data?: SparqlClient.SparqlSelectResult;\n  // main representation image (PX_has_main_representation)\n  mainPreviewRep?: Data.Maybe<Rep>;\n  otherPreviewReps?: Array<Rep>;\n  // featured representation image (displayed as large image above thumbnails)\n  focusedPreviewRep?: Data.Maybe<Rep>;\n  // current image shown in modal window\n  focusedModalRep?: Data.Maybe<Rep>;\n  modalIsDisplayed?: boolean;\n  modalNavIsDisplayed?: boolean;\n  isLoading?: boolean;\n  imagesAreLoading?: boolean;\n}\n\n/**\n * ObjectRepresentationsWidget - component to display object representation images.\n *\n * @example\n *\n * <rs-object-representations query='SELECT ?label (bound(?mainRepresentationImage) AS ?isMainRep) (STR(COALESCE(?mainRepresentationImage,?representationImage)) AS ?imgURL)\n * WHERE {\n *        {\n *          ?? rso:displayLabel ?label .\n *        }\n *        UNION {\n *                ?? crm:P138i_has_representation ?representationImage .\n *              }\n *        UNION {\n *                ?? rso:PX_has_main_representation ?mainRepresentationImage .\n *              }\n * }'\n * template='<img class=\"object-representations__image--rep\" src=\"{{imgURL.value}}\"/>'\n * >\n * </rs-object-representations>\n */\n\nexport class ObjectRepresentationsWidget extends Component<ObjectRepsWidgetProps, ObjectRepsWidgetState> {\n  private allReps: Array<Rep>;\n  private entityLabel: String;\n  private largestPreviewRepHeight: number;\n  private LARGEST_PREVIEW_REP_WIDTH: number;\n  private TRANSITION_TIME: number;\n\n  static defaultProps = {\n    query: '',\n    template: '<img class=\"object-representations__image--rep\" src=\"{{imgURL.value}}\"/>',\n    context: {},\n    maxModalWidth: 1200,\n    noImageTemplate: '<div>no image</div>',\n  };\n\n  constructor(props: ObjectRepsWidgetProps, context) {\n    super(props, context);\n    this.state = {\n      modalIsDisplayed: false,\n      modalNavIsDisplayed: false,\n      isLoading: true,\n      imagesAreLoading: true,\n      mainPreviewRep: maybe.Nothing<Rep>(),\n      focusedPreviewRep: maybe.Nothing<Rep>(),\n      focusedModalRep: maybe.Nothing<Rep>(),\n    };\n    this.allReps = [];\n    this.entityLabel = '';\n    this.largestPreviewRepHeight = 0;\n    this.LARGEST_PREVIEW_REP_WIDTH = 300;\n    this.TRANSITION_TIME = 300;\n  }\n\n  componentDidMount() {\n    this.executeQuery(this.props);\n  }\n\n  private executeQuery(props: ObjectRepsWidgetProps) {\n    const IS_MAIN_REP = 'isMainRep';\n    const IMG_URL = 'imgURL';\n    const LABEL = 'label';\n    let mainPreviewRep = maybe.Nothing<Rep>();\n    let focusedPreviewRep = maybe.Nothing<Rep>();\n    const otherPreviewReps: Array<Rep> = [];\n\n    SparqlClient.select(props.query).onValue((res) => {\n      if (!SparqlUtil.isSelectResultEmpty (res)) {\n      _.forEach(res.results.bindings, (binding) => {\n        if (mainPreviewRep.isNothing && binding[IS_MAIN_REP].value === 'true') {\n          mainPreviewRep = maybe.Just({ imgURL: binding[IMG_URL].value, loaded: false });\n          focusedPreviewRep = maybe.Just({ imgURL: binding[IMG_URL].value, loaded: false });\n        } else {\n          if (binding[IMG_URL]) {\n            otherPreviewReps.push({ imgURL: binding[IMG_URL].value, loaded: false });\n          }\n        }\n        if (binding[LABEL]) {\n          this.entityLabel = binding[LABEL].value;\n        }\n      });\n    }\n\n      if (mainPreviewRep.isNothing && otherPreviewReps.length) {\n        mainPreviewRep = maybe.Just(otherPreviewReps.shift());\n        focusedPreviewRep = mainPreviewRep;\n      }\n      if (mainPreviewRep.isNothing && otherPreviewReps.length === 0) {\n        this.setState({ imagesAreLoading: false });\n      } else {\n        // Monitor load status of images\n        if (mainPreviewRep.isJust) {\n          this.addToAllReps(mainPreviewRep.get().imgURL);\n        }\n        if (otherPreviewReps.length) {\n          _.forEach(otherPreviewReps, (otherRep) => {\n            this.addToAllReps(otherRep.imgURL);\n          });\n        }\n      }\n      this.setState({\n        data: res,\n        modalIsDisplayed: false,\n        isLoading: false,\n        mainPreviewRep: mainPreviewRep,\n        otherPreviewReps: otherPreviewReps,\n        focusedPreviewRep: focusedPreviewRep,\n        focusedModalRep: focusedPreviewRep,\n      });\n    });\n  }\n\n  render() {\n    return D.div(\n      { className: 'object-representations modal-container' },\n      ...(this.state.isLoading ? [createElement(Spinner)] : this.getContents())\n    );\n  }\n\n  private getContents() {\n    if (this.state.mainPreviewRep.isJust) {\n      return [\n        this.createFocusedImageRepresentation(),\n        this.createThumbnails(),\n        this.createModal(),\n        this.state.imagesAreLoading ? createElement(Spinner) : null,\n      ];\n    } else {\n      return [ createElement(TemplateItem, {\n        template: {\n          source: this.props.noImageTemplate,\n        }\n        \n        })\n      ]\n    }\n  }\n\n  private createFocusedImageRepresentation() {\n    // This is the large featured image\n    // Set container div height to largest of all images,\n    // so that thumbnails don't move about on image transitions\n    const focused = this.state.focusedPreviewRep.get().imgURL;\n    const style = {\n      height: this.largestPreviewRepHeight + 'px',\n    };\n\n    return D.div(\n      {\n        title: 'Click to view full-size image',\n        className: 'object-representations__image--focused',\n        style: style,\n        onClick: this.showModal.bind(this),\n        onLoad: this.handleImageChanges,\n      },\n      createElement(\n        TransitionGroup,\n        {\n          key: 'image-focused-transition-group',\n        },\n        createElement(\n          CSSTransition,\n          {\n            key: focused,\n            classNames: 'cross-fade',\n            timeout: {\n              enter: this.TRANSITION_TIME,\n              exit: this.TRANSITION_TIME,\n            },\n          },\n          D.img({\n            className: 'image--focused',\n            src: focused,\n            key: focused,\n          })\n        )\n      )\n    );\n  }\n\n  private createThumbnails() {\n    return createElement(\n      TransitionGroup,\n      {\n        key: 'image-thumbs-transition-group',\n      },\n      createElement(\n        CSSTransition,\n        {\n          key: 'object-representations__images',\n          classNames: 'fade-in',\n          appear: true,\n          timeout: {\n            appear: this.TRANSITION_TIME,\n            enter: this.TRANSITION_TIME,\n            exit: this.TRANSITION_TIME,\n          },\n        },\n        D.div(\n          {\n            key: 'object-representations__images',\n            className: 'object-representations__images',\n          },\n          // Thumbnail for main representation, which is always the first thumbnail\n          // Don't bother showing it if there aren't any other thumbnails\n          this.state.otherPreviewReps.length\n            ? createElement(TemplateItem, {\n                key: 'main-rep-thumb',\n                template: {\n                  source: this.props.template,\n                  options: { imgURL: { value: this.state.mainPreviewRep.get().imgURL } },\n                },\n                componentProps: {\n                  className: classNames({\n                    'object-representations__image--active':\n                      this.state.mainPreviewRep.get().imgURL === this.state.focusedPreviewRep.get().imgURL,\n                    'object-representations__image':\n                      this.state.mainPreviewRep.get().imgURL !== this.state.focusedPreviewRep.get().imgURL,\n                  }),\n                  onClick: () => this.updateFocusedImage(this.state.mainPreviewRep.get().imgURL),\n                  onLoad: this.handleImageChanges,\n                },\n              })\n            : null,\n          // Thumbnails for other representations\n          this.state.otherPreviewReps.map((res, i) => {\n            return createElement(TemplateItem, {\n              key: 'other-rep-thumb-' + i,\n              template: {\n                source: this.props.template,\n                options: { imgURL: { value: res.imgURL } },\n              },\n              componentProps: {\n                className: classNames({\n                  'object-representations__image--active': this.state.focusedPreviewRep.get().imgURL === res.imgURL,\n                  'object-representations__image': this.state.focusedPreviewRep.get().imgURL !== res.imgURL,\n                }),\n                onClick: () => this.updateFocusedImage(res.imgURL),\n                onLoad: this.handleImageChanges,\n              },\n            });\n          })\n        )\n      )\n    );\n  }\n\n  private createModal() {\n    const fullSizeImgURL = this.state.focusedModalRep.isJust ? this.state.focusedModalRep.get().imgURL : '';\n    const modalStyle = {\n      width: this.state.focusedModalRep.isJust ? this.state.focusedModalRep.get().width + 2 + 'px' : '0',\n      overflow: 'hidden',\n      margin: 'auto',\n      paddingLeft: '0',\n    };\n\n    return Modal(\n      {\n        style: modalStyle as any,\n        className: 'object-representations-modal__container',\n        dialogClassName: 'object-representations-modal',\n        show: this.state.modalIsDisplayed,\n        onHide: this.hideModal.bind(this),\n        onMouseEnter: this.showModalNav,\n        onMouseLeave: this.hideModalNav,\n        onKeyUp: this.handleModalKeyEvents,\n      },\n      ModalHeader({ closeButton: true }, ModalTitle({}, this.entityLabel)),\n      ModalBody(\n        {},\n        createElement(\n          TransitionGroup,\n          {\n            key: 'modal-nav-transition-group',\n            className: 'object-representations-modal__body',\n            style: {\n              width: this.state.focusedModalRep.isJust ? `${this.state.focusedModalRep.get().width}px` : '0px',\n              height: this.state.focusedModalRep.isJust ? `${this.state.focusedModalRep.get().height}px` : '0px',\n            },\n          },\n          this.state.modalNavIsDisplayed\n            ? [\n                createElement(\n                  CSSTransition,\n                  {\n                    key: 'left',\n                    classNames: 'fade-in',\n                    appear: true,\n                    leave: 'true',\n                    timeout: {\n                      appear: this.TRANSITION_TIME,\n                      enter: this.TRANSITION_TIME,\n                      exit: this.TRANSITION_TIME,\n                    },\n                  },\n                  D.span({\n                    className: 'object-representations-modal__nav fa fa-chevron-circle-left',\n                    onClick: this.prevModalImage.bind(this),\n                  })\n                ),\n                createElement(\n                  CSSTransition,\n                  {\n                    key: 'right',\n                    classNames: 'fade-in',\n                    appear: true,\n                    leave: 'true',\n                    timeout: {\n                      appear: this.TRANSITION_TIME,\n                      enter: this.TRANSITION_TIME,\n                      exit: this.TRANSITION_TIME,\n                    },\n                  },\n                  D.span({\n                    className: 'object-representations-modal__nav fa fa-chevron-circle-right',\n                    onClick: this.nextModalImage.bind(this),\n                  })\n                ),\n              ]\n            : []\n        ),\n        D.img({\n          src: fullSizeImgURL,\n          style: {\n            width: this.state.focusedModalRep.isJust ? `${this.state.focusedModalRep.get().width}px` : '0px',\n          },\n        })\n      ) // end modal body\n    ); // end modal\n  }\n\n  private updateFocusedImage(url) {\n    const newFocusedRep = _.find(this.allReps, (rep) => rep.imgURL === url);\n    this.setState({\n      focusedPreviewRep: maybe.Just(newFocusedRep),\n      focusedModalRep: maybe.Just(newFocusedRep),\n    });\n  }\n\n  private handleImageChanges = (e) => {\n    const aspectRatio = e.target.offsetHeight / e.target.offsetWidth;\n    if (this.LARGEST_PREVIEW_REP_WIDTH * aspectRatio > this.largestPreviewRepHeight) {\n      this.largestPreviewRepHeight = this.LARGEST_PREVIEW_REP_WIDTH * aspectRatio;\n    }\n    this.setImageLoaded(e);\n    this.setState({ imagesAreLoading: !this.allImagesAreLoaded() });\n  };\n\n  private setImageLoaded(e) {\n    const maxHeight = window.innerHeight - 50;\n    _.forEach(this.allReps, (rep) => {\n      // we use includes because imgURL can be relative URL but currentSrc is always absolute\n      if (_.includes(e.target.currentSrc, rep.imgURL)) {\n        rep.loaded = true;\n        rep.width =\n          e.target.naturalWidth <= this.props.maxModalWidth ? e.target.naturalWidth : this.props.maxModalWidth;\n        rep.height = rep.width / (e.target.naturalWidth / e.target.naturalHeight);\n        if (rep.height > maxHeight) {\n          rep.height = maxHeight;\n          rep.width = rep.height / (e.target.naturalHeight / e.target.naturalWidth);\n        }\n\n        if (rep.imgURL === this.state.focusedPreviewRep.get().imgURL) {\n          const newFocusedRep = this.state.focusedPreviewRep.get();\n          newFocusedRep.width = rep.width;\n          newFocusedRep.height = rep.height;\n          this.setState({ focusedPreviewRep: maybe.Just(newFocusedRep) });\n        }\n        return false;\n      }\n    });\n  }\n\n  private addToAllReps(url) {\n    if (!_.some(this.allReps, ['imgURL', url])) {\n      this.allReps.push({\n        imgURL: url,\n        loaded: false,\n      });\n    }\n  }\n\n  private allImagesAreLoaded() {\n    return _.every(this.allReps, ['loaded', true]);\n  }\n\n  private hideModal() {\n    this.setState({\n      modalIsDisplayed: false,\n      focusedModalRep: this.state.focusedPreviewRep,\n    });\n  }\n\n  private showModal() {\n    this.setState({ modalIsDisplayed: true });\n  }\n\n  private showModalNav = () => {\n    if (this.state.modalNavIsDisplayed === false && this.allReps.length > 1) {\n      this.setState({ modalNavIsDisplayed: true });\n    }\n  };\n\n  private hideModalNav = () => {\n    this.setState({ modalNavIsDisplayed: false });\n  };\n\n  private nextModalImage() {\n    if (this.allReps.length > 1) {\n      const index = _.findIndex(this.allReps, { imgURL: this.state.focusedModalRep.get().imgURL });\n      if (index !== -1) {\n        const nextIndex = index === this.allReps.length - 1 ? 0 : index + 1;\n        this.setState({\n          focusedModalRep: maybe.Just(this.allReps[nextIndex]),\n        });\n      }\n    }\n  }\n\n  private prevModalImage() {\n    if (this.allReps.length > 1) {\n      const index = _.findIndex(this.allReps, { imgURL: this.state.focusedModalRep.get().imgURL });\n      if (index !== -1) {\n        const prevIndex = index === 0 ? this.allReps.length - 1 : index - 1;\n        this.setState({\n          focusedModalRep: maybe.Just(this.allReps[prevIndex]),\n        });\n      }\n    }\n  }\n\n  private handleModalKeyEvents = (e) => {\n    if (e.keyCode === 37) {\n      this.prevModalImage();\n    } else if (e.keyCode === 39) {\n      this.nextModalImage();\n    } else if (e.keyCode === 27) {\n      this.hideModalNav();\n    }\n  };\n}\n\nexport type c = ObjectRepresentationsWidget;\nexport const c = ObjectRepresentationsWidget;\nexport const f = createFactory(c);\nexport default c;\n"],"sourceRoot":""}