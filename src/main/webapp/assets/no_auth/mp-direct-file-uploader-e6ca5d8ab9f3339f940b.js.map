{"version":3,"sources":["webpack:///./src/main/web/components/forms/file-manager/DirectFileUploader.tsx"],"names":["OBJECT_KINDS","props","context","cancellation","Cancellation","objectKind","defaultObjectKind","indexOf","state","alertState","undefined","progress","progressText","storageId","defaultStorageId","path","folder","defaultFolder","name","componentDidMount","this","loadStoragesList","componentWillUnmount","cancelAll","componentWillReceiveProps","newProps","storages","storage","find","appId","setState","getFileManager","repository","FileManager","uploadFile","file","map","uploadFileDirectlyToStorage","getFolder","fileName","onProgress","percent","observe","value","resource","addNotification","message","level","alert","AlertType","SUCCESS","error","WARNING","response","text","onDropAccepted","files","onDropRejected","acceptPattern","type","getStorageStatus","split","filter","token","Boolean","join","render","className","styles","alertComponent","Alert","fileNotSelected","renderedPath","DirectFileUploader","row","style","alignItems","FileUploader","ReactBootstrap","ProgressBar","active","min","max","now","label","Dropzone","accept","bind","noClick","mpDropZonePlaceHolder","children","placeholder","fileIcon","getFileIcon","rightInputBar","storageInput","clearable","options","storageStatus","writable","disabled","onChange","Array","isArray","display","width","newPath","borderLeft","title","event","target","flexDirection","marginTop","marginRight","onClick","Component"],"mappings":"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","file":"mp-direct-file-uploader-e6ca5d8ab9f3339f940b.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\nimport * as _ from 'lodash';\nimport * as ReactBootstrap from 'react-bootstrap';\nimport ReactSelect from 'react-select';\n\nimport { Cancellation } from 'platform/api/async';\nimport { Component } from 'platform/api/components';\nimport { getStorageStatus, ConfigStorageStatus } from 'platform/api/services/config';\nimport { FileManager, FileResource } from 'platform/api/services/file-manager';\n\nimport { Alert, AlertConfig, AlertType } from 'platform/components/ui/alert';\nimport { Dropzone } from 'platform/components/ui/dropzone';\nimport { addNotification } from 'platform/components/ui/notification';\n\nimport { getFileIcon } from './FileVisualizer';\n\nimport * as styles from './FileManager.scss';\n\nconst OBJECT_KINDS = ['assets', 'templates', 'config', 'file'];\n\ninterface FilePath {\n  objectKind: string;\n  folder: string;\n  name: string;\n}\n\nexport interface DirectFileUploaderState {\n  alertState?: AlertConfig;\n  progress?: number;\n  progressText?: string;\n\n  storages?: ConfigStorageStatus[];\n  storageId?: string;\n  path?: FilePath;\n  file?: File;\n}\n\nexport interface DirectFileUploaderProps {\n  /**\n   * Allow specific types of files. See https://github.com/okonet/attr-accept for more information\n   */\n  acceptPattern?: string;\n\n  /**\n   * Placeholder for the dropzone. You can use react children as well.\n   */\n  placeholder?: string;\n\n  /**\n   * Object storage id. Used to detect upload folder based on object sotrages which are\n   * defined in '/runtime-data/config/data-storage.prop.\n   */\n  defaultStorageId?: string;\n\n  /**\n   * Path to a destination folder in the storage. (It should start with an Object.Kind prefix).\n   */\n  defaultFolder?: string;\n\n  /**\n   * Path to a destination folder in the storage. (It should start with an Object.Kind prefix).\n   */\n  defaultObjectKind?: string;\n}\n\n/**\n * Component which is used only for uploading files into storages. Can uses file/system/app storages.\n * @example:\n * <mp-direct-file-uploader\n *     placeholder=\"Test placeholder\"\n *     accept-pattern=\"application/*\"\n *     default-storage-id=\"runtime\"\n *     default-object-kind=\"file\"\n *     default-folder=\"/\">\n * </mp-direct-file-uploader>\n *\n * To have ability to upload files into storage you have to have permissions on this action.\n * Permission should be defined this way:\n * storage:{write}:{storage-id}\n * You can define it in shiro.ini\n *\n * You can redefine inner body by passing custom body as a child component\n */\nexport class DirectFileUploader extends Component<DirectFileUploaderProps, DirectFileUploaderState> {\n  private readonly cancellation = new Cancellation();\n\n  constructor(props: DirectFileUploaderProps, context: any) {\n    super(props, context);\n    const objectKind =\n      props.defaultObjectKind && OBJECT_KINDS.indexOf(props.defaultObjectKind) !== -1\n        ? props.defaultObjectKind\n        : OBJECT_KINDS[0];\n    this.state = {\n      alertState: undefined,\n      progress: undefined,\n      progressText: undefined,\n      storageId: props.defaultStorageId,\n      path: {\n        folder: props.defaultFolder || '/',\n        objectKind,\n        name: undefined,\n      },\n    };\n  }\n\n  componentDidMount() {\n    this.loadStoragesList();\n  }\n\n  componentWillUnmount() {\n    this.cancellation.cancelAll();\n  }\n\n  componentWillReceiveProps(newProps: DirectFileUploaderProps) {\n    if (this.state.storages) {\n      const storage = this.state.storages.find((storage) => storage.appId === newProps.defaultStorageId);\n      if (storage) {\n        this.setState({ storageId: storage.appId });\n      }\n    }\n  }\n\n  private getFileManager() {\n    const { repository } = this.context.semanticContext;\n    return new FileManager({ repository });\n  }\n\n  uploadFile() {\n    const file = this.state.file;\n\n    this.cancellation\n      .map(\n        this.getFileManager().uploadFileDirectlyToStorage({\n          storage: this.state.storageId,\n          folder: this.getFolder(),\n          fileName: this.state.path.name,\n          file: file,\n          onProgress: (percent) => {\n            this.setState({\n              progress: percent,\n              progressText: 'Uploading ...',\n            });\n          },\n        })\n      )\n      .observe({\n        value: (resource) => {\n          addNotification({\n            message: 'File succesfully uploaded.',\n            level: 'success',\n          });\n          this.setState({\n            alertState: {\n              alert: AlertType.SUCCESS,\n              message:\n                `File \"${resource}\" has been successfully ` + `uploaded to the storage \"${this.state.storageId}\".`,\n            },\n            progress: null,\n            path: {\n              ...this.state.path,\n              name: '',\n            },\n            file: undefined,\n          });\n        },\n        error: (error) => {\n          addNotification({\n            message: 'Failed to upload file.',\n            level: 'error',\n          });\n          this.setState({\n            alertState: {\n              alert: AlertType.WARNING,\n              message: `Failed to upload file \"${file.name}\": ${error} - ${error.response.text}`,\n            },\n            progress: null,\n            path: {\n              ...this.state.path,\n              name: '',\n            },\n            file: undefined,\n          });\n        },\n      });\n  }\n\n  onDropAccepted(files: File[]) {\n    const { path } = this.state;\n    const file = files[0];\n    this.setState({\n      alertState: null,\n      progress: null,\n      file: file,\n      path: {\n        ...path,\n        name: file.name,\n      },\n    });\n  }\n\n  onDropRejected(files: File[]) {\n    const file = files[0];\n    this.setState({\n      alertState: {\n        alert: AlertType.WARNING,\n        message: `Incompatible file type: expected ${this.props.acceptPattern}, got ${file.type}`,\n      },\n      progress: null,\n    });\n  }\n\n  loadStoragesList() {\n    this.cancellation.map(getStorageStatus()).observe({\n      value: (storages) => {\n        const storage =\n          this.props.defaultStorageId && storages.find((storage) => storage.appId === this.props.defaultStorageId);\n        this.setState({\n          storages,\n          storageId: storage ? storage.appId : storages[0].appId,\n        });\n      },\n      error: (error) => {\n        this.setState({\n          alertState: {\n            alert: AlertType.WARNING,\n            message: `Failed to fetch storage list: ${error}`,\n          },\n          progress: null,\n        });\n      },\n    });\n  }\n\n  private getFolder() {\n    const { objectKind } = this.state.path;\n    let folder = this.state.path.folder;\n    // filter following situations: some/path/////folder\n    folder = folder\n      .split('/')\n      .filter((token) => Boolean(token))\n      .join('/');\n\n    if (folder) {\n      return `${objectKind}/${folder}`;\n    } else {\n      return objectKind;\n    }\n  }\n\n  render() {\n    const alert = this.state.alertState ? (\n      <div className={styles.alertComponent}>\n        <Alert {...this.state.alertState}></Alert>\n      </div>\n    ) : null;\n    const { storages: storages, path, file, storageId } = this.state;\n    const fileNotSelected = !file;\n    const renderedPath = `${storageId}: ${this.getFolder()}/${path.name || 'undefined'}`;\n\n    return (\n      <div className={styles.DirectFileUploader}>\n        <div className={styles.row} style={{ alignItems: 'center' }}>\n          <div className={styles.FileUploader}>\n            {this.state.progress ? (\n              <ReactBootstrap.ProgressBar\n                active={true}\n                min={0}\n                max={100}\n                now={this.state.progress}\n                label={this.state.progressText}\n              ></ReactBootstrap.ProgressBar>\n            ) : null}\n            <Dropzone\n              accept={this.props.acceptPattern}\n              onDropAccepted={this.onDropAccepted.bind(this)}\n              onDropRejected={this.onDropRejected.bind(this)}\n              noClick={Boolean(this.state.progress || !storages)}\n            >\n              {fileNotSelected ? (\n                <div className={styles.mpDropZonePlaceHolder}>\n                  {this.props.children || (\n                    <div className={styles.mpDropZonePlaceHolder}>\n                      {this.props.placeholder || 'Select file to upload.'}\n                    </div>\n                  )}\n                </div>\n              ) : (\n                <div className={styles.fileIcon}>\n                  <i className={getFileIcon(file.type)} aria-hidden=\"true\"></i>\n                </div>\n              )}\n            </Dropzone>\n          </div>\n          <div className={styles.rightInputBar}>\n            <label>Target Storage</label>\n            <ReactSelect\n              className={styles.storageInput}\n              clearable={false}\n              value={this.state.storageId}\n              options={\n                storages\n                  ? storages.map((storageStatus) => ({\n                      value: storageStatus.appId,\n                      label: storageStatus.writable ? storageStatus.appId : `${storageStatus.appId} (readonly)`,\n                      disabled: !storageStatus.writable,\n                    }))\n                  : []\n              }\n              onChange={(storageId) => {\n                if (Array.isArray(storageId) || typeof storageId.value !== 'string') {\n                  return;\n                }\n                this.setState({ storageId: storageId.value });\n              }}\n            />\n            <label>Target Folder</label>\n            <div className={styles.storageInput} style={{ display: 'flex' }}>\n              <ReactSelect\n                clearable={false}\n                style={{ width: 85 }}\n                value={path.objectKind}\n                options={OBJECT_KINDS.map((objectKind) => ({\n                  value: objectKind,\n                  label: objectKind,\n                }))}\n                onChange={(objectKind) => {\n                  if (Array.isArray(objectKind) || typeof objectKind.value !== 'string') {\n                    return;\n                  }\n                  const newPath: FilePath = { ...this.state.path, objectKind: objectKind.value };\n                  this.setState({ path: newPath });\n                }}\n              />\n              <input\n                value={path.folder}\n                style={{ borderLeft: 'none' }}\n                placeholder=\"Sub folder\"\n                title=\"Sub folder\"\n                onChange={(event) => {\n                  const newPath: FilePath = { ...this.state.path, folder: event.target.value };\n                  this.setState({ path: newPath });\n                }}\n                className={`plain-text-field__text form-control ${styles.storageInput}`}\n              />\n            </div>\n            <label>Target Filename</label>\n            <input\n              disabled={fileNotSelected}\n              value={path.name}\n              placeholder={fileNotSelected ? 'Please select first a file to upload...' : 'Input filename...'}\n              title={fileNotSelected ? 'Please select first a file to upload' : 'Filename'}\n              onChange={(event) => this.setState({ path: { ...path, name: event.target.value } })}\n              className={`plain-text-field__text form-control ${styles.storageInput}`}\n            />\n          </div>\n        </div>\n        <div className={styles.row} style={{ flexDirection: 'column', marginTop: '30px' }}>\n          <label>Target Path Preview</label>\n          <div className={styles.storageInput} style={{ display: 'flex' }}>\n            <input\n              disabled={true}\n              value={fileNotSelected ? '' : renderedPath}\n              style={{ marginRight: 15 }}\n              placeholder=\"Please use the file selector to select a file to upload...\"\n              title={\n                fileNotSelected\n                  ? 'Please use the file selector to select a file to upload'\n                  : 'Target path: ' + renderedPath\n              }\n              className={`plain-text-field__text form-control ${styles.storageInput}`}\n            />\n            <button\n              title={\n                fileNotSelected\n                  ? 'Please use the file selector to select a file to upload'\n                  : `Upload file to storage \"${this.state.storageId}\" and location \"${this.getFolder()}${path.name}\"`\n              }\n              className=\"btn btn-primary\"\n              disabled={fileNotSelected || !path.name}\n              onClick={() => this.uploadFile()}\n            >\n              Upload\n            </button>\n          </div>\n        </div>\n        <div className={styles.row}>{alert}</div>\n      </div>\n    );\n  }\n}\n\nexport default DirectFileUploader;\n"],"sourceRoot":""}