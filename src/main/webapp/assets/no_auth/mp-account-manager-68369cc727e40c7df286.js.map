{"version":3,"sources":["webpack:///./src/main/web/components/admin/realm-manager/AccountManagerComponent.ts","webpack:///./src/main/web/components/admin/realm-manager/AccountFormComponent.ts","webpack:///./src/main/web/components/admin/realm-manager/RoleMultiSelectorComponent.ts"],"names":["props","getRowClass","account","state","selectedAccount","isNothing","principal","get","onRowClick","e","stateAccount","map","currentSelected","maybe","Nothing","Just","getOrElse","setState","isLoading","fetchAccounts","getAllAccounts","onValue","accounts","data","onError","err","render","this","isJust","createElement","TemplateItem","template","source","Spinner","D","div","renderAccountTable","refreshCallback","componentWillMount","griddleOptions","bind","rowMetadata","bodyCssClassName","Table","layout","options","tupleTemplate","numberOfDisplayedRows","Either","Left","columnConfiguration","variableName","displayName","cellTemplate","Component","AccountManager","createFactory","AccountManagerComponent","Input","ReactBootstrap","FormControl","FormGroup","ControlLabel","Btn","Button","Panel","getAccountStream","accountStream","getPool","propertyName","Kefir","pool","password","passwordrepeat","roles","combine","plug","constant","errors","isEmpty","push","isNull","constantError","join","obs","initStore","accountStore","AccountStore","error","updateAccount","alert","Error","val","onChangeAccount","el","target","plugValueToAccountStore","name","value","poolName","plugInitialValuesIntoAccountStore","renderNewAccountForm","existingAccount","create","className","header","form","key","onSubmit","onSubmitCreateAccount","onSubmitUpdateAccount","controlId","type","placeholder","disabled","onChange","label","initialRoles","inputName","onChangeCallback","Alert","config","AlertType","NONE","message","bsSize","bsStyle","submitDisabled","onClick","onClickDeleteAccount","deleteAccount","stopPropagation","preventDefault","createAccount","componentDidMount","componentWillReceiveProps","nextProps","AccountForm","AccountFormComponent","context","onChangeRoleSelection","newRoles","_","roleString","isUndefined","backendRoles","React","renderSelector","Array","role","roleName","selectOptions","r","multi","clearable","autoload","clearAllText","clearValueText","delimiter","ignoreCase","matchPos","matchProp","noResultsText","getRoleDefinitions","RoleMultiSelector","RoleMultiSelectorComponent"],"mappings":"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","file":"mp-account-manager-68369cc727e40c7df286.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { Component, createFactory, createElement } from 'react';\nimport * as D from 'react-dom-factories';\nimport * as maybe from 'data.maybe';\nimport * as Either from 'data.either';\n\nimport { SparqlClient } from 'platform/api/sparql';\nimport { Util as SecurityService, Account } from 'platform/api/services/security';\nimport { Table } from 'platform/components/semantic/table';\nimport { Spinner } from 'platform/components/ui/spinner';\nimport { TemplateItem } from 'platform/components/ui/template';\nimport { default as AccountForm } from './AccountFormComponent';\n\nimport './RealmManager.scss';\n\ninterface State {\n  isLoading: boolean;\n  data?: Data.Maybe<any[]>;\n  selectedAccount?: Data.Maybe<Account>;\n  err?: Data.Maybe<string>;\n}\n\nclass AccountManagerComponent extends Component<{}, State> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true,\n      data: maybe.Nothing<any[]>(),\n      selectedAccount: maybe.Nothing<Account>(),\n      err: maybe.Nothing<string>(),\n    };\n  }\n\n  public render() {\n    if (this.state.err.isJust) {\n      return createElement(TemplateItem, { template: { source: this.state.err.get() } });\n    }\n    if (this.state.isLoading) {\n      return createElement(Spinner);\n    }\n\n    return D.div(\n      {},\n      this.renderAccountTable(),\n      AccountForm({\n        selectedAccount: this.state.selectedAccount,\n        refreshCallback: this.fetchAccounts,\n      })\n    );\n  }\n\n  public componentWillMount() {\n    this.fetchAccounts();\n  }\n\n  private getRowClass = (account: Account): string => {\n    if (this.state.selectedAccount.isNothing) {\n      return '';\n    }\n\n    return account.principal === this.state.selectedAccount.get().principal ? 'bg-success' : '';\n  };\n\n  private renderAccountTable() {\n    const griddleOptions = {\n      onRowClick: this.onRowClick.bind(this),\n      rowMetadata: { bodyCssClassName: this.getRowClass },\n    };\n\n    return D.div(\n      {},\n      createElement(Table, {\n        layout: maybe.Just<{}>({\n          options: griddleOptions,\n          tupleTemplate: maybe.Nothing<string>(),\n        }),\n        numberOfDisplayedRows: maybe.Just<number>(10),\n        data: Either.Left<any[], SparqlClient.SparqlSelectResult>(this.state.data.get()),\n        columnConfiguration: [\n          { variableName: 'principal', displayName: 'User Principal' },\n          { variableName: 'roles', displayName: 'Roles' },\n          {\n            variableName: 'permissions',\n            displayName: 'Permissions',\n            cellTemplate:\n              '<ul class=\"account-manager-component__account-permissions-ul\">{{#each this.permissions as |permission|}}<li class=\"account-manager-component__account-permissions-li\">{{ permission }} </li>{{/each}}</ul>',\n          },\n        ],\n      })\n    );\n  }\n\n  private onRowClick = (e: Component<{}, {}>): void => {\n    const account = <Account>e.props['data'];\n    const stateAccount = this.state.selectedAccount\n      .map((currentSelected) =>\n        currentSelected.principal === account.principal ? maybe.Nothing<Account>() : maybe.Just<Account>(account)\n      )\n      .getOrElse(maybe.Just<Account>(account));\n\n    this.setState({\n      isLoading: false,\n      selectedAccount: stateAccount,\n    });\n  };\n\n  private fetchAccounts = (): void => {\n    this.setState({\n      isLoading: true,\n      selectedAccount: maybe.Nothing<Account>(),\n    });\n\n    SecurityService.getAllAccounts()\n      .onValue((accounts) =>\n        this.setState({\n          isLoading: false,\n          data: maybe.Just(accounts),\n        })\n      )\n      .onError((err) =>\n        this.setState({\n          isLoading: false,\n          err: maybe.Just(err),\n        })\n      );\n  };\n} // end component\n\nconst AccountManager = createFactory(AccountManagerComponent);\nexport default AccountManager;\n","/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { ReactElement, createFactory, createElement, Component, FormEvent } from 'react';\nimport * as D from 'react-dom-factories';\nimport * as Kefir from 'kefir';\nimport { isEmpty, isNull } from 'lodash';\nimport * as maybe from 'data.maybe';\nimport * as ReactBootstrap from 'react-bootstrap';\n\nimport { Util as SecurityService, Account } from 'platform/api/services/security';\nimport { Spinner } from 'platform/components/ui/spinner';\nimport { Error, Alert, AlertType, AlertConfig } from 'platform/components/ui/alert';\nimport RoleMultiSelector from './RoleMultiSelectorComponent';\n\nimport './RealmManager.scss';\n\nconst Input = createFactory(ReactBootstrap.FormControl);\nconst FormGroup = createFactory(ReactBootstrap.FormGroup);\nconst ControlLabel = createFactory(ReactBootstrap.ControlLabel);\nconst Btn = createFactory(ReactBootstrap.Button);\nconst Panel = createFactory(ReactBootstrap.Panel);\n\ninterface State {\n  principal?: string;\n  password?: string;\n  passwordrepeat?: string;\n  roles?: string;\n  isLoading: boolean;\n  updateAccount?: Data.Maybe<Account>;\n  alert?: Data.Maybe<AlertConfig>;\n}\n\nconst INITIAL_NULL_VALUE = null;\n\nclass AccountStore {\n  private principal: Kefir.Pool<string>;\n  private password: Kefir.Pool<string>;\n  private passwordrepeat: Kefir.Pool<string>;\n  private roles: Kefir.Pool<string>;\n  private accountStream: Kefir.Pool<any>;\n\n  constructor() {\n    this.principal = Kefir.pool<string>();\n    this.password = Kefir.pool<string>();\n    this.passwordrepeat = Kefir.pool<string>();\n    this.roles = Kefir.pool<string>();\n    this.accountStream = Kefir.pool<any>();\n    // TODO think of on how to solve this better with e.g. .filter(p=>p !== INITIAL_NULL_VALUE),\n    Kefir.combine(\n      [this.principal, this.password, this.passwordrepeat, this.roles],\n      (principal: string, password: string, passwordrepeat: string, roles: string) => {\n        if (principal === INITIAL_NULL_VALUE || roles === INITIAL_NULL_VALUE) {\n          return this.accountStream.plug(Kefir.constant<Data.Maybe<Account>>(maybe.Nothing<Account>()));\n        }\n        const errors = [];\n        if (isEmpty(principal)) {\n          errors.push('Principal must not be empty.');\n        }\n        if (isEmpty(roles) || isNull(roles)) {\n          errors.push('Roles must not be empty.');\n        }\n        if (password !== INITIAL_NULL_VALUE && (isEmpty(password) || isEmpty(passwordrepeat))) {\n          errors.push('Passwords must not be empty.');\n        } else if (password !== passwordrepeat) {\n          errors.push('Passwords must be equal.');\n        }\n        if (!isEmpty(errors)) {\n          return this.accountStream.plug(Kefir.constantError<string>(errors.join('<br>')));\n        }\n\n        this.accountStream.plug(\n          Kefir.constant<Data.Maybe<Account>>(\n            maybe.Just<Account>({\n              principal: principal,\n              password: password,\n              roles: roles,\n            })\n          )\n        );\n      }\n    ).onValue((obs) => obs);\n\n    // logging for debugging only\n    // this.principal.log(); this.password.log(); this.passwordrepeat.log();\n    // this.roles.log(); this.accountStream.log()\n  }\n  public getAccountStream = (): Kefir.Pool<any> => {\n    return this.accountStream;\n  };\n\n  public getPool = (propertyName: string): Kefir.Pool<string> => {\n    return <Kefir.Pool<string>>this[propertyName];\n  };\n}\n\ninterface Props {\n  selectedAccount: Data.Maybe<Account>;\n  refreshCallback: () => void;\n}\n\nclass AccountFormComponent extends Component<Props, State> {\n  private accountStore: AccountStore;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      isLoading: false,\n      updateAccount: maybe.Nothing<Account>(),\n      alert: maybe.Nothing<AlertConfig>(),\n      principal: '',\n      password: '',\n      passwordrepeat: '',\n    };\n  }\n\n  public render() {\n    return this.state.isLoading ? createElement(Spinner) : this.renderNewAccountForm(this.props.selectedAccount);\n  }\n\n  public componentDidMount() {\n    this.initStore();\n    this.plugInitialValuesIntoAccountStore(this.props.selectedAccount);\n  }\n\n  public componentWillReceiveProps(nextProps: Props) {\n    this.plugInitialValuesIntoAccountStore(nextProps.selectedAccount);\n  }\n\n  private initStore = (): void => {\n    this.accountStore = new AccountStore();\n    this.accountStore\n      .getAccountStream()\n      .onError((error: string) => {\n        this.setState({\n          isLoading: false,\n          updateAccount: maybe.Nothing<Account>(),\n          alert: maybe.Just(Error(error)),\n        });\n      })\n      .onValue((account: Data.Maybe<Account>) => {\n        this.setState({\n          isLoading: false,\n          updateAccount: account,\n          alert: maybe.Nothing<AlertConfig>(),\n        });\n      });\n\n    this.accountStore.getPool('principal').onValue((val) => {\n      this.setState({ isLoading: false, principal: val });\n    });\n    this.accountStore.getPool('password').onValue((val) => {\n      this.setState({ isLoading: false, password: val });\n    });\n    this.accountStore.getPool('passwordrepeat').onValue((val) => {\n      this.setState({ isLoading: false, passwordrepeat: val });\n    });\n    this.accountStore.getPool('roles').onValue((val) => {\n      this.setState({ isLoading: false, roles: val });\n    });\n  };\n\n  private onChangeAccount = (e: FormEvent<ReactBootstrap.FormControl>) => {\n    const el = e.target as any;\n    this.plugValueToAccountStore(el.name, el.value);\n  };\n\n  private plugValueToAccountStore = (poolName: string, value: any): void => {\n    this.accountStore.getPool(poolName).plug(Kefir.constant(value));\n  };\n\n  private plugInitialValuesIntoAccountStore = (account: Data.Maybe<Account>): void => {\n    this.accountStore\n      .getPool('principal')\n      .plug(Kefir.constant<string>(account.isNothing ? INITIAL_NULL_VALUE : account.get().principal));\n    this.accountStore.getPool('password').plug(Kefir.constant<string>(INITIAL_NULL_VALUE));\n    this.accountStore.getPool('passwordrepeat').plug(Kefir.constant<string>(INITIAL_NULL_VALUE));\n    this.accountStore\n      .getPool('roles')\n      .plug(Kefir.constant<string>(account.isNothing ? INITIAL_NULL_VALUE : account.get().roles));\n  };\n\n  private renderNewAccountForm = (existingAccount: Data.Maybe<Account>): ReactElement<any> => {\n    const create = existingAccount.isNothing;\n    return D.div(\n      { className: 'account-manager-component__create-account-panel' },\n      Panel(\n        { header: create ? 'New Account' : 'Update Account' },\n        D.form(\n          {\n            key: 'account-panel',\n            onSubmit: create ? this.onSubmitCreateAccount : this.onSubmitUpdateAccount,\n          },\n          FormGroup(\n            { controlId: 'principal' },\n            ControlLabel({}, 'Principal'),\n            Input({\n              name: 'principal',\n              type: 'text',\n              placeholder: 'Unique username',\n              disabled: !create,\n              value: this.state.principal,\n              onChange: this.onChangeAccount,\n            })\n          ),\n          FormGroup(\n            { controlId: 'password' },\n            ControlLabel({}, 'Password'),\n            Input({\n              name: 'password',\n              type: 'password',\n              placeholder: 'Password',\n              value: this.state.password,\n              onChange: this.onChangeAccount,\n            })\n          ),\n          FormGroup(\n            { controlId: 'passwordrepeat' },\n            ControlLabel({}, 'Repeat Password'),\n            Input({\n              name: 'passwordrepeat',\n              type: 'password',\n              placeholder: 'Repeat Password',\n              value: this.state.passwordrepeat,\n              onChange: this.onChangeAccount,\n            })\n          ),\n          D.div(\n            {\n              key: 'role-selector-container',\n              className: 'account-manager-component__role-multi-selector',\n            },\n            [\n              D.label({ key: 'control-label', className: 'control-label' }, 'Roles'),\n              D.div(\n                { key: 'role-multi-selector' },\n                RoleMultiSelector({\n                  initialRoles: maybe.Just(this.state.roles),\n                  inputName: 'roles',\n                  onChangeCallback: this.plugValueToAccountStore,\n                })\n              ),\n            ]\n          ),\n          D.div(\n            { key: 'alert' },\n            createElement(\n              Alert,\n              this.state.alert.map((config) => config).getOrElse({ alert: AlertType.NONE, message: '' })\n            )\n          ),\n          D.div(\n            {\n              key: 'create-account-btn',\n              className: 'account-manager-component__create-account-btn',\n            },\n            Btn(\n              {\n                type: 'submit',\n                bsSize: 'small',\n                bsStyle: 'primary',\n                disabled: this.submitDisabled(),\n              },\n              create ? 'Create' : 'Update'\n            )\n          )\n        ), // end of form\n        create\n          ? null\n          : Btn(\n              {\n                key: 'delete-account-btn',\n                type: 'submit',\n                bsSize: 'small',\n                bsStyle: 'primary',\n                onClick: this.onClickDeleteAccount,\n              },\n              'Delete'\n            )\n      ) // end of panel\n    );\n  };\n\n  private submitDisabled = (): boolean => {\n    return this.state.updateAccount.isNothing;\n  };\n\n  private onClickDeleteAccount = (): void => {\n    SecurityService.deleteAccount(this.props.selectedAccount.get())\n      .onValue((val: boolean) => this.props.refreshCallback())\n      .onError((err: string) =>\n        this.setState({\n          isLoading: false,\n          alert: maybe.Just(Error(err)),\n        })\n      );\n  };\n\n  private onSubmitUpdateAccount = (e: FormEvent<HTMLFormElement>) => {\n    e.stopPropagation();\n    e.preventDefault();\n    this.state.updateAccount.map((account) =>\n      SecurityService.updateAccount(account)\n        .onValue((val: boolean) => this.props.refreshCallback())\n        .onError((err: string) =>\n          this.setState({\n            isLoading: false,\n            alert: maybe.Just(Error(err)),\n          })\n        )\n    );\n  };\n\n  private onSubmitCreateAccount = (e: FormEvent<HTMLFormElement>) => {\n    e.stopPropagation();\n    e.preventDefault();\n    this.state.updateAccount.map((account) =>\n      SecurityService.createAccount(account)\n        .onValue((val: boolean) => this.props.refreshCallback())\n        .onError((err: string) =>\n          this.setState({\n            isLoading: false,\n            alert: maybe.Just(Error(err)),\n          })\n        )\n    );\n  };\n}\n\nconst AccountForm = createFactory(AccountFormComponent);\n\nexport default AccountForm;\n","/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as React from 'react';\nimport * as D from 'react-dom-factories';\nimport * as _ from 'lodash';\nimport * as maybe from 'data.maybe';\nimport ReactSelect, { ReactSelectProps, ReactAsyncSelectProps } from 'react-select';\n\nimport { Util as SecurityService, RoleDefinition } from 'platform/api/services/security';\nimport { Spinner } from 'platform/components/ui/spinner';\n\ninterface State {\n  isLoading: boolean;\n  roleString?: Data.Maybe<string>;\n  backendRoles?: Data.Maybe<RoleDefinition[]>;\n}\n\ninterface Props {\n  inputName: string;\n  initialRoles: Data.Maybe<string>;\n  onChangeCallback?: (name: string, value: string) => void;\n}\n\ninterface Role {\n  value: string;\n  label: string;\n}\n\nclass RoleMultiSelectorComponent extends React.Component<Props, State> {\n  constructor(props: Props, context: any) {\n    super(props, context);\n    this.state = {\n      isLoading: true,\n      roleString: maybe.Nothing<string>(),\n      backendRoles: maybe.Nothing<RoleDefinition[]>(),\n    };\n  }\n\n  render(): React.ReactElement<any> {\n    if (this.state.isLoading || this.state.backendRoles.isNothing) {\n      return React.createElement(Spinner);\n    }\n    return D.div({}, this.renderSelector());\n  }\n\n  renderSelector() {\n    var data = new Array<Role>();\n    _.map(this.state.backendRoles.get(), (role) => data.push({ value: role.roleName, label: role.roleName }));\n\n    const selectOptions: ReactSelectProps = {\n      value: this.state.roleString.map((r) => r).getOrElse(this.props.initialRoles.map((r) => r).getOrElse('')),\n      className: 'dataset-selector__multi-select',\n      name: this.props.inputName,\n      multi: true,\n      options: data,\n      clearable: true,\n      autoload: true,\n      clearAllText: 'Remove all',\n      clearValueText: 'Remove role',\n      delimiter: ',',\n      disabled: false,\n      ignoreCase: true,\n      matchPos: 'any',\n      matchProp: 'any',\n      noResultsText: 'No roles found',\n      placeholder: 'Select roles',\n      onChange: this.onChangeRoleSelection,\n    };\n\n    return React.createElement(ReactSelect, selectOptions);\n  }\n\n  private onChangeRoleSelection = (roles: Role[]) => {\n    var newRoles = _.map(roles, 'value').join(',');\n    this.setState({ isLoading: false, roleString: maybe.Just(newRoles) });\n    if (!_.isUndefined(this.props.onChangeCallback)) {\n      this.props.onChangeCallback(this.props.inputName, newRoles);\n    }\n  };\n\n  componentWillMount() {\n    SecurityService.getRoleDefinitions().onValue((roles: RoleDefinition[]) =>\n      this.setState({\n        isLoading: false,\n        backendRoles: maybe.Just<RoleDefinition[]>(roles),\n      })\n    );\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    this.setState({\n      isLoading: false,\n      roleString: maybe.Just(nextProps.initialRoles.map((r) => r).getOrElse('')),\n    });\n  }\n}\n\nvar RoleMultiSelector = React.createFactory(RoleMultiSelectorComponent);\n\nexport default RoleMultiSelector;\n"],"sourceRoot":""}