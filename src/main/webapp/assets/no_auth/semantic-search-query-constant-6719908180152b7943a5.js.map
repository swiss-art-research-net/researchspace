{"version":3,"sources":["webpack:///./src/main/web/components/semantic/search/web-components/QueryConstant.tsx"],"names":["render","SemanticSearchContext","Consumer","context","QueryConstantInner","props","React","Component","QueryConstant","componentDidMount","q","SparqlUtil","parseQuerySync","this","query","setBaseQuery","maybe","Just","componentWillReceiveProps","searchProfileStore","isJust","domain","isNothing","setSearchDomain"],"mappings":"6IAkBA,OAEA,QAEA,QAEA,UACA,UAmBA,uC,+CAQA,OARmC,6BACjC,wBAAAA,OAAA,sBACE,OACE,gBAAC,EAAAC,sBAAsBC,SAAQ,MAC5B,SAACC,GAAY,uBAACC,EAAkB,cAAK,EAAKC,MAAK,CAAEF,QAASA,SAInE,cARA,CAAmCG,EAAMC,WAA5B,EAAAC,gBAcb,gD,+CAgBA,OAhBiC,kCAC/B,6BAAAC,kBAAA,WACE,IAAMC,EAAI,EAAAC,WAAWC,eAAqCC,KAAKR,MAAMS,OACrED,KAAKR,MAAMF,QAAQY,aAAaC,EAAMC,KAAKP,KAG7C,6BAAAQ,0BAAA,SAA0Bb,GAChB,IAAAF,EAAA,EAAAA,QACJA,EAAQgB,mBAAmBC,QAAUjB,EAAQkB,OAAOC,WACtD,EAAAC,gBAAgBlB,EAAMgB,OAAQlB,IAIlC,6BAAAH,OAAA,WACE,OAAO,MAEX,mBAhBA,CAAiCM,EAAMC,WAkBvC,UAAeC","file":"semantic-search-query-constant-6719908180152b7943a5.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\nimport * as SparqlJs from 'sparqljs';\nimport * as maybe from 'data.maybe';\n\nimport { SparqlUtil } from 'platform/api/sparql';\n\nimport { setSearchDomain } from '../commons/Utils';\nimport { SemanticSearchContext, InitialQueryContext } from './SemanticSearchApi';\n\nexport interface SemanticSearchQueryConstantConfig {\n  /**\n   * SPARQL SELECT query string that should be used as a base query in the search.\n   * Should have only one projection variable.\n   * In favour of consistency, we recommend to use a variable named `?subject`.\n   */\n  query: string;\n\n  /**\n   * Specify search domain category IRI (full IRI enclosed in <>).\n   * Required, if component is used together with facets.\n   */\n  domain?: string;\n}\n\nexport interface QueryConstantProps extends SemanticSearchQueryConstantConfig {}\n\nexport class QueryConstant extends React.Component<QueryConstantProps, {}> {\n  render() {\n    return (\n      <SemanticSearchContext.Consumer>\n        {(context) => <QueryConstantInner {...this.props} context={context} />}\n      </SemanticSearchContext.Consumer>\n    );\n  }\n}\n\ninterface InnerProps extends QueryConstantProps {\n  context: InitialQueryContext;\n}\n\nclass QueryConstantInner extends React.Component<InnerProps, {}> {\n  componentDidMount() {\n    const q = SparqlUtil.parseQuerySync<SparqlJs.SelectQuery>(this.props.query);\n    this.props.context.setBaseQuery(maybe.Just(q));\n  }\n\n  componentWillReceiveProps(props: InnerProps) {\n    const { context } = props;\n    if (context.searchProfileStore.isJust && context.domain.isNothing) {\n      setSearchDomain(props.domain, context);\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default QueryConstant;\n"],"sourceRoot":""}