{"version":3,"sources":["webpack:///./src/main/web/components/forms/file-manager/FileInput.tsx"],"names":["props","context","cancellation","Cancellation","renderBody","FieldValue","isEmpty","value","fromUrlOrDrop","className","styles","selectorHolder","renderInputSelector","state","selectUrl","renderUrlInput","renderDropZone","alertState","renderError","renderProgress","alert","Alert","React","Fragment","alertComponent","urlInputHolder","FormControl","inputRef","ref","urlInputRef","type","placeholder","Button","bsStyle","onClick","fetchFileFromUrl","FormGroup","Radio","name","inline","checked","setState","_","fetch","then","response","ok","AlertType","WARNING","message","blob","onDropAccepted","File","catch","e","removeFile","iri","asRdfNode","FileManager","isTemporaryResource","getFileManager","deleteFileResource","storage","observe","updateValue","empty","error","progress","undefined","progressText","getHandler","_setFileManager","handler","FileHandler","Error","repository","files","this","file","map","uploadFileTemporary","tempStorage","onProgress","percent","temporaryResourceIri","newValue","AtomicValue","set","text","onDropRejected","acceptPattern","render","resourceIri","temporaryIri","header","ProgressBar","active","min","max","now","label","uploadedImageIri","title","href","fileContainer","namePredicateIri","mediaTypePredicateIri","caRemoveFile","emptyBody","FileUploader","Dropzone","accept","bind","noClick","Boolean","children","mpDropZonePlaceHolder","componentWillUnmount","cancelAll","removeTemporaryResource","makeHandler","AtomicValueInput","FileInput","baseInputProps","fileManager","finalize","owner","EmptyValue","Kefir","constant","getFileResource","flatMap","resource","createResourceFromTemporaryFile","fileName","temporaryStorage","generateIriQuery","resourceQuery","mediaType","createdResourceIri","toProperty","replaceError","kind","ErrorKind","Validation","AtomicValueHandler","SingleValueInput","assertStatic"],"mappings":"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","file":"semantic-form-file-input-1b07afe2961259f5ee78.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as Kefir from 'kefir';\nimport * as React from 'react';\nimport * as _ from 'lodash';\nimport { FormControl, Button, FormGroup, Radio, ProgressBar } from 'react-bootstrap';\n\nimport { Cancellation } from 'platform/api/async';\nimport { Rdf } from 'platform/api/rdf';\nimport { FileManager } from 'platform/api/services/file-manager';\n\nimport { Alert, AlertConfig, AlertType } from 'platform/components/ui/alert';\nimport { Dropzone } from 'platform/components/ui/dropzone';\n\nimport {\n  AtomicValueInputProps,\n  AtomicValueInput,\n  AtomicValueHandler,\n  SingleValueInput,\n  SingleValueHandlerProps,\n} from '../inputs/SingleValueInput';\nimport { EmptyValue, CompositeValue, AtomicValue, FieldValue, ErrorKind } from '../FieldValues';\nimport FileVisualizer from './FileVisualizer';\n\nimport * as styles from './FileManager.scss';\n\ninterface FileInputConfig {\n  /** Target storage ID. */\n  storage: string;\n\n  /** Temporary storage ID. */\n  tempStorage: string;\n\n  /**\n   * Media type pattern to allow only specific types of files.\n   * See https://github.com/okonet/attr-accept for more information.\n   */\n  acceptPattern?: string;\n\n  /**\n   * SPARQL select query which is used to generate unique IRI for the uploaded file.\n   * The query should have only one projection variable `?resourceIri` with the IRI.\n   *\n   * Also the query can use some variables which will be bound with values at runtime:\n   * * `?__mediaType__`: media type: `image/png`, etc\n   * * `?__fileName__`: file name, including extension\n   */\n  generateIriQuery?: string;\n\n  /**\n   * SPARQL construct query which is used to generate extra data that should be associated with\n   * uploaded file.\n   *\n   * Also the query can use some variables which will be bound with values at runtime:\n   * * `?__resourceIri__`: IRI generated with `generate-id-query`\n   * * `?__mediaType__`: media type: `image/png`, etc\n   * * `?__fileName__`: file name, including extension\n   */\n  resourceQuery?: string;\n\n  /**\n   * Required to be specified if file name predicate in the `resource-query`\n   * is different from the default.\n   */\n  namePredicateIri?: string;\n\n  /**\n   * Required to be specified if media type predicate in the `resource-query`\n   * is different from the default.\n   */\n  mediaTypePredicateIri?: string;\n\n  /**\n   * Placeholder for the drop zone. It's also possible to provide\n   * custom placeholder by passing a child component.\n   */\n  placeholder?: string;\n\n\n  /**\n   * Upload file from the url or drop.\n   * @default false\n   */\n  fromUrlOrDrop?: boolean;\n}\n\nexport interface FileInputProps extends AtomicValueInputProps, FileInputConfig {}\n\ninterface State {\n  alertState?: AlertConfig;\n  progress?: number;\n  progressText?: string;\n  selectUrl?: boolean;\n}\n\n/**\n * File uploader which works in a couple with field and is used as\n * an input components on forms page.\n * (See documentation page for semantic forms.)\n */\nexport class FileInput extends AtomicValueInput<FileInputProps, State> {\n  private readonly cancellation = new Cancellation();\n  private urlInputRef: HTMLInputElement;\n\n  constructor(props: FileInputProps, context: any) {\n    super(props, context);\n    this.state = {\n      alertState: undefined,\n      progress: undefined,\n      progressText: undefined,\n    };\n    this.getHandler()._setFileManager(this.getFileManager());\n  }\n\n  private getHandler(): FileHandler {\n    const { handler } = this.props;\n    if (!(handler instanceof FileHandler)) {\n      throw new Error('Invalid value handler for CompositeInput');\n    }\n    return handler;\n  }\n\n  private getFileManager() {\n    const { repository } = this.context.semanticContext;\n    return new FileManager({ repository });\n  }\n\n  onDropAccepted(files: File[]) {\n    this.setState({ alertState: null, progress: null });\n    const file = files[0];\n\n    // upload file to the temporal storage\n    this.cancellation\n      .map(\n        this.getFileManager().uploadFileTemporary({\n          storage: this.props.tempStorage,\n          file: file,\n          onProgress: (percent) =>\n            this.setState({\n              progress: percent,\n              progressText: 'Uploading ...',\n            }),\n        })\n      )\n      .observe({\n        value: (temporaryResourceIri) => {\n          this.setState({\n            alertState: null,\n            progress: null,\n          });\n          const newValue = AtomicValue.set(this.props.value, { value: temporaryResourceIri });\n          this.props.updateValue(() => newValue);\n        },\n        error: (error) => {\n          this.setState({\n            alertState: {\n              alert: AlertType.WARNING,\n              message: `Failed to upload file \"${file.name}\": ${error} - ${error.response.text}`,\n            },\n            progress: null,\n          });\n        },\n      });\n  }\n\n  onDropRejected(files: File[]) {\n    const file = files[0];\n    this.setState({\n      alertState: {\n        alert: AlertType.WARNING,\n        message: `Incompatible file type: expected ${this.props.acceptPattern}, got ${file.type}`,\n      },\n      progress: null,\n    });\n  }\n\n  render() {\n    const resourceIri = FieldValue.asRdfNode(this.props.value) as Rdf.Iri | undefined;\n    const temporaryIri = resourceIri && FileManager.isTemporaryResource(resourceIri);\n\n    return (\n      <div className={styles.FileManager}>\n        <div className={styles.header}>\n          {this.state.progress ? (\n            <ProgressBar\n              active={true}\n              min={0}\n              max={100}\n              now={this.state.progress}\n              label={this.state.progressText}\n            ></ProgressBar>\n          ) : resourceIri && !temporaryIri ? (\n            <a className={styles.uploadedImageIri} title={resourceIri.value} href={resourceIri.value}>\n              {resourceIri.value}\n            </a>\n          ) : resourceIri ? (\n            <div className={styles.uploadedImageIri} title=\"File is loaded\">\n              File is loaded\n            </div>\n          ) : null}\n        </div>\n        {resourceIri ? (\n          <div className={styles.fileContainer}>\n            <FileVisualizer\n              iri={resourceIri.value}\n              storage={temporaryIri ? this.props.tempStorage : this.props.storage}\n              namePredicateIri={this.props.namePredicateIri}\n              mediaTypePredicateIri={this.props.mediaTypePredicateIri}\n            ></FileVisualizer>\n            <span className={`${styles.caRemoveFile} fa fa-times`} onClick={this.removeFile}></span>\n          </div>\n        ) : (\n          this.renderBody()\n        )}\n      </div>\n    );\n  }\n\n  renderBody = () => {\n    if (FieldValue.isEmpty(this.props.value)) {\n      if (this.props.fromUrlOrDrop) {\n        return (\n          <div className={styles.selectorHolder}>\n            {this.renderInputSelector()}\n            {this.state.selectUrl ? this.renderUrlInput() : this.renderDropZone()}\n          </div>\n        );\n      } else {\n        return this.renderDropZone();\n      }\n    } else if (this.state.alertState) {\n      return this.renderError();\n    } else {\n      return this.renderProgress();\n    }\n  };\n\n  renderProgress() {\n    return <div className={styles.emptyBody}>Loading..</div>;\n  }\n\n  renderError() {\n    return <div className={styles.emptyBody}>Error</div>;\n  }\n\n  renderDropZone() {\n    const alert = this.state.alertState ? <Alert {...this.state.alertState}></Alert> : null;\n    const placeholder = this.props.placeholder || 'Please drag&drop your file here.';\n    return (\n      <div className={styles.FileUploader}>\n        <Dropzone\n          accept={this.props.acceptPattern}\n          onDropAccepted={this.onDropAccepted.bind(this)}\n          onDropRejected={this.onDropRejected.bind(this)}\n          noClick={Boolean(this.state.progress)}\n        >\n          {(this.props.children as JSX.Element | JSX.Element[]) || (\n            <div className={styles.mpDropZonePlaceHolder}>{placeholder}</div>\n          )}\n        </Dropzone>\n        {alert ? <div className={styles.alertComponent}>{alert}</div> : null}\n      </div>\n    );\n  }\n\n\n  renderUrlInput = () => {\n    const alert = this.state.alertState ? <Alert {...this.state.alertState}></Alert> : null;\n    return (\n      <React.Fragment>\n        {alert ? <div className={styles.alertComponent}>{alert}</div> : null}\n\n        <div className={styles.urlInputHolder}>\n          <FormControl inputRef={ref => { this.urlInputRef = ref; }}\n            type='text' placeholder='Please type file URL here' />\n          <Button bsStyle='primary' type='submit'\n            onClick={this.fetchFileFromUrl}\n          >Fetch</Button>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  renderInputSelector = () => {\n    return (\n      <FormGroup>\n        <Radio name='inputSelector' inline\n          checked={!this.state.selectUrl}\n          onClick={ () => this.setState({selectUrl: false}) }\n        >\n          File Upload\n        </Radio>{' '}\n        <Radio name='inputSelector' inline\n          checked={this.state.selectUrl}\n          onClick={ () => this.setState({selectUrl: true}) }\n        >\n          URL\n        </Radio>{' '}\n      </FormGroup>\n    );\n  }\n\n  fetchFileFromUrl = () => {\n    if (!_.isEmpty(this.urlInputRef?.value)) {\n      fetch(this.urlInputRef.value)\n        .then((response) => {\n          if (!response.ok) {\n            this.setState({\n              alertState: {\n                alert: AlertType.WARNING,\n                message: 'Faild to fetch file from URL!',\n              }\n            });\n          }\n          return response.blob();\n        })\n        .then(\n          blob => {\n            this.onDropAccepted([new File([blob], this.urlInputRef.value, {type: blob.type})]);\n          }\n        ).catch((e: Error) => {\n          this.setState({\n            alertState: {\n              alert: AlertType.WARNING,\n              message: e.message + ' Please, try to upload the file manually.',\n            }\n          });\n        });\n\n    }\n  }\n\n  removeFile = () => {\n    const iri = FieldValue.asRdfNode(this.props.value) as Rdf.Iri;\n    if (FileManager.isTemporaryResource(iri)) {\n      this.getFileManager()\n        .deleteFileResource(iri, this.props.storage)\n        .observe({\n          value: () => this.props.updateValue(() => FieldValue.empty),\n          error: (error) => {\n            this.setState({\n              alertState: {\n                alert: AlertType.WARNING,\n                message: `Failed to delete file: ${error}`,\n              },\n              progress: null,\n            });\n          },\n        });\n    } else {\n      this.props.updateValue(() => FieldValue.empty);\n    }\n  };\n\n  componentWillUnmount() {\n    this.cancellation.cancelAll();\n    if (this.props && this.props.value.type !== 'empty') {\n      const iri = FieldValue.asRdfNode(this.props.value) as Rdf.Iri;\n      if (FileManager.isTemporaryResource(iri)) {\n        this.getFileManager().removeTemporaryResource(iri, this.props.storage);\n      }\n    }\n  }\n\n  static makeHandler(props: SingleValueHandlerProps<FileInputProps>) {\n    return new FileHandler(props);\n  }\n}\n\nclass FileHandler extends AtomicValueHandler {\n  private readonly baseInputProps: FileInputProps;\n  private fileManager: FileManager | undefined;\n\n  constructor(props: SingleValueHandlerProps<FileInputProps>) {\n    super(props);\n    this.baseInputProps = props.baseInputProps;\n  }\n\n  // HACK: we need to access FileManager but it depends on outer semantic context\n  // which is unfortune. In the future is would be better to provide repository\n  // explicitly in props to avoid this.\n  _setFileManager(fileManager: FileManager) {\n    this.fileManager = fileManager;\n  }\n\n  finalize(value: EmptyValue | AtomicValue, owner: EmptyValue | CompositeValue): Kefir.Property<FieldValue> {\n    if (value.type === EmptyValue.type) {\n      return Kefir.constant(value);\n    }\n    const resourceIri = value.value as Rdf.Iri;\n    if (!FileManager.isTemporaryResource(resourceIri)) {\n      return Kefir.constant(value);\n    } else if (this.fileManager) {\n      return this.fileManager\n        .getFileResource(resourceIri)\n        .flatMap((resource) => {\n          return this.fileManager\n            .createResourceFromTemporaryFile({\n              fileName: resource.fileName,\n              storage: this.baseInputProps.storage,\n              temporaryStorage: this.baseInputProps.tempStorage,\n              generateIriQuery: this.baseInputProps.generateIriQuery,\n              resourceQuery: this.baseInputProps.resourceQuery,\n              mediaType: resource.mediaType,\n            })\n            .map((createdResourceIri) => {\n              return AtomicValue.set(value, { value: createdResourceIri });\n            });\n        })\n        .toProperty();\n    } else {\n      return Kefir.constant(\n        FieldValue.replaceError(value, {\n          kind: ErrorKind.Validation,\n          message: 'Cannot finalize FileInput value without a FileManager instance',\n        })\n      );\n    }\n  }\n}\n\nSingleValueInput.assertStatic(FileInput);\n\nexport default FileInput;\n"],"sourceRoot":""}