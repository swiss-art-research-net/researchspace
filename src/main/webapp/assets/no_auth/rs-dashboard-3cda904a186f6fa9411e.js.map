{"version":3,"sources":["webpack:///./src/main/web/components/dashboard/DashboardComponent.tsx","webpack:///./src/main/web/components/dashboard/DashboardEvents.tsx","webpack:///./src/main/web/components/dashboard/DashboardItem.tsx"],"names":["itemCount","emptyItem","id","uniqueId","index","props","context","cancellation","Cancellation","onAddNewItem","item","viewConfig","views","find","viewId","unique","state","items","i","setState","prevState","newItems","push","onSelectView","itemId","resourceIri","componentDidMount","this","map","listen","eventType","AddFrameEvent","target","observe","value","data","initialView","resource","view","setFrameNavigation","iri","startsWith","trigger","source","targets","componentWillUnmount","cancelAll","onExpandItem","isExpanded","renderLabel","focusedClassName","focus","styles","itemLabelActive","undefined","icon","label","iconClass","className","image","src","itemImage","alt","itemLabel","itemIcon","TemplateItem","key","template","itemLabelTemplate","options","dashboardId","deleteItemButton","onClick","onRemoveItem","renderBody","itemBodyTemplate","removeItem","findIndex","splice","isEmpty","linkedBy","forEach","isDirty","getOverlaySystem","hide","show","ConfirmationDialog","message","onHide","onConfirm","confirm","renderItems","length","itemsList","body","itemLabelContainer","expandItemButton","linkedViews","linkedView","viewIds","onStatusChange","onResourceChange","renderView","allViews","description","checkQuery","linkedFrames","frameId","frameVariable","viewContainer","DashboardItem","gridView","onSelect","onFocus","render","children","React","Children","toArray","frames","type","WorkspaceLayoutType","Component","content","heading","minSize","frameMinSize","unshift","only","defaultSize","layout","Row","Column","defaultCollapsed","itemsContainer","addItemButton","e","preventDefault","stopPropagation","undocked","WorkspaceLayout","_onResize","window","dispatchEvent","Event","defaultProps","DashboardComponent","event","EventMaker","StatusChanged","ResourceChanged","onDrop","renderDefaultDropArea","DropArea","query","childrenClassName","dropAreaChildren","notOpacity","dropMessageWrapperStyle","display","dropStyles","enabledHover","backgroundColor","outline","enabled","disabled","opacity","defaultComponent","onDefaultDropAreaClick","resourceNotRequired","selectedView","renderDefaultDashboard","defaultDashboard","Col","md","xs","lg","sm","defaultColumnItem","renderItemCard","renderGridViewDashboard","authItems","filter","searchViewItems","gridViewDashboard","help","helpText","gridViewTitle1","gridViewItemsView","gridViewTitle2","gridViewItemsAuth","dropResourceContainer","dropResourceIcon","dropResourceText","renderEmptySelectedComponent","v","imageComponent","iconComponent","emptyPageDropArea","style","flex","width","emptyPageTitle","emptyPageLabel","emptyPageDescription","emptyPageDrop","emptyPageDroptext","href","renderComponent","onWheel","DashboardEvents","hasChanges"],"mappings":"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","file":"rs-dashboard-3cda904a186f6fa9411e.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2015-2020, © Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as React from 'react';\nimport { uniqueId, isEmpty } from 'lodash';\nimport { WorkspaceLayout, WorkspaceLayoutNode, WorkspaceLayoutType } from 'ontodia';\n\nimport { setFrameNavigation } from 'platform/api/navigation';\nimport { Component } from 'platform/api/components';\nimport { TemplateItem } from 'platform/components/ui/template';\nimport { getOverlaySystem } from 'platform/components/ui/overlay';\nimport { ConfirmationDialog } from 'platform/components/ui/confirmation-dialog';\n\nimport { DashboardItem, DashboardViewConfig } from './DashboardItem';\n\nimport * as styles from './Dashboard.scss';\nimport { Cancellation } from 'platform/api/async';\nimport { listen, trigger } from 'platform/api/events';\nimport { AddFrameEvent, AddFrameEventData } from './DashboardEvents';\nimport { Rdf } from 'platform/api/rdf';\n\nconst DEFAULT_ITEM_LABEL_TEMPLATE = `<mp-label iri='{{iri}}'></mp-label>`;\n\nexport interface Item {\n  readonly id: string;\n  readonly index: number;\n  readonly viewId?: string;\n  readonly resourceIri?: string;\n  readonly isDirty?: boolean;\n  readonly isExpanded?: boolean;\n  readonly linkedBy?: string;\n  readonly data?: { [key: string]: any };\n}\n\nlet itemCount = 0;\nexport function emptyItem() {\n  itemCount = itemCount + 1;\n  return { id: uniqueId('frame'), index: itemCount };\n}\n\nexport interface DashboardLinkedViewConfig {\n  /**\n   * Unique identifier of the view.\n   */\n  id: string;\n  /**\n   * Label of the view.\n   */\n  label: string;\n  /**\n   * Linked views IDs.\n   */\n  viewIds: ReadonlyArray<string>;\n  /**\n   * Description of the view.\n   */\n  description?: string;\n  /**\n   * Image that will be displayed in the Dashboard Item as the representation for the specific View.\n   */\n  image?: string;\n  /**\n   * Class of the icon that will be used as the representation of the specific View in the Dashboard Item. It will be applied if the <code>image</code> attribute isn't specified.\n   */\n  iconClass?: string;\n  /**\n   * SPARQL Ask query that is used to check whether it is possible to display a specific resource type in the specific view. Resource IRI is injected into the query using the <code>?value</code> binding variable.\n   */\n  checkQuery?: string;\n}\n\nexport interface Props {\n  /**\n   * Used when dashboard is used as a target for events.\n   */\n  id: string;\n\n  /**\n   * Defines possible visualizations of resources\n   */\n  views: ReadonlyArray<DashboardViewConfig>;\n  /**\n   * Defines possible linked views\n   */\n  linkedViews?: ReadonlyArray<DashboardLinkedViewConfig>;\n  /**\n   * Minimum size of a frame\n   *\n   * @default 150\n   */\n  frameMinSize?: number;\n\n  /**\n   * Initial state for dashboard component.\n   */\n  initialView?: {\n    /**\n     *  View key, see views parameter\n     */\n    view: string;\n\n    /**\n     * Resource IRI for which the view should be applied.\n     */\n    resource: string;\n  };\n}\n\nexport interface State {\n  items?: ReadonlyArray<Item>;\n  focus?: string;\n}\n\nexport class DashboardComponent extends Component<Props, State> {\n  static defaultProps: Partial<Props> = {\n    frameMinSize: 150,\n    linkedViews: [],\n  };\n\n  private readonly cancellation = new Cancellation();\n\n  constructor(props: Props, context: any) {\n    super(props, context);\n    this.state = {\n      items: [],\n    };\n  }\n\n  componentDidMount() {\n    this.cancellation\n      .map(\n        listen({\n          eventType: AddFrameEvent,\n          target: this.props.id,\n        })\n      )\n      .observe({\n        value: ({ data }) => {\n          this.onAddNewItem({\n            ...emptyItem(),\n            ...(data as AddFrameEventData),\n          });\n        },\n      });\n\n    if (this.props.initialView) {\n      const item = {\n        ...emptyItem(),\n        resourceIri: this.props.initialView.resource,\n        viewId: this.props.initialView.view,\n      };\n      this.onAddNewItem(item);\n    } else {\n      this.onAddNewItem();\n    }\n\n    // That is ugly hack for in frame navigation until we find a better way to do this\n    setFrameNavigation(true, (iri: Rdf.Iri, props?: {}): boolean => {\n      if (iri.value.startsWith('http://www.researchspace.org/instances/narratives')) {\n        trigger({\n          eventType: 'Dashboard.AddFrame',\n          source: 'link',\n          targets: ['thinking-frames'],\n          data: {\n            resourceIri: iri.value,\n            viewId: 'semantic-narrative'\n          }\n        });\n        return true;\n      } else if (iri.value === 'http://www.researchspace.org/resource/ThinkingFrames' && props && props['view']) {\n        trigger({\n          eventType: 'Dashboard.AddFrame',\n          source: 'link',\n          targets: ['thinking-frames'],\n          data: {\n            resourceIri: props['resource'],\n            viewId: props['view']\n          }\n        });\n        return true;\n      } else if (iri.value === 'http://www.researchspace.org/resource/ThinkingFrames') {\n        trigger({\n          eventType: 'Dashboard.AddFrame',\n          source: 'link',\n          targets: ['thinking-frames'],\n        });\n        return true;\n      } else if (!iri.value.startsWith('http://www.researchspace.org/resource/')) {\n        trigger({\n          eventType: 'Dashboard.AddFrame',\n          source: 'link',\n          targets: ['thinking-frames'],\n          data: {\n            resourceIri: iri.value,\n            viewId: 'resource'\n          }\n        });\n        return true;\n      } else {\n        return false;\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    setFrameNavigation(false);\n    this.cancellation.cancelAll();\n  }\n\n  private onAddNewItem = (item: Item = emptyItem()) => {\n    const viewConfig = this.props.views.find(({id}) => id === item.viewId);\n    if (viewConfig?.unique && this.state.items.find(i => i.viewId === item.viewId)) {\n      return;\n    } else {\n      this.setState(\n        (prevState): State => {\n          const newItems = [...prevState.items];\n          newItems.push(item);\n          return { items: newItems };\n        },\n        () => {\n          this.onSelectView({\n            itemId: item.id,\n            viewId: item.viewId,\n            resourceIri: item.resourceIri,\n          });\n        }\n      );\n    }\n  };\n\n  onExpandItem(itemId: string) {\n    this.setState(\n      (prevState): State => {\n        const newItems = prevState.items.map((item) => {\n          if (item.id === itemId) {\n            return { ...item, isExpanded: !item.isExpanded };\n          }\n          return item;\n        });\n        return { items: newItems };\n      }\n    );\n  }\n\n  private renderLabel(item: Item) {\n    const { focus } = this.state;\n    const isFocused = focus === item.id;\n    const focusedClassName = isFocused ? styles.itemLabelActive : '';\n\n    const view = item.viewId ? this.props.views.find(({ id }) => id === item.viewId) : undefined;\n    if (view && item.resourceIri) {\n      let icon = <span>[{view.label}]&nbsp;</span>;\n      if (view.iconClass) {\n        icon = <i className={view.iconClass} />;\n      } else if (view.image) {\n        icon = <img src={view.image} className={styles.itemImage} alt={view.label} />;\n      }\n      return (\n        <span className={`${styles.itemLabel} ${focusedClassName}`}>\n          <span className={styles.itemIcon}>{icon}</span>\n           <span>\n            <TemplateItem\n              key={item.id}\n              template={{\n                source: view.itemLabelTemplate || DEFAULT_ITEM_LABEL_TEMPLATE,\n                options: { iri: item.resourceIri, dashboardId: item.id },\n              }}\n            />\n          </span>\n          <button\n            className={`btn btn-xs pull-right ${styles.deleteItemButton}`}\n            onClick={() => this.onRemoveItem(item)}\n          >\n            <i className=\"fa fa-times\" />\n          </button>\n        </span>\n      );\n    }\n\n    return (\n      <span className={`${styles.itemLabel} ${focusedClassName}`}>\n        Frame {item.index}\n        <button\n          className={`btn btn-xs pull-right ${styles.deleteItemButton}`}\n          onClick={() => this.onRemoveItem(item)}\n        >\n          <i className=\"fa fa-times\" />\n        </button>\n      </span>\n    );\n  }\n\n  private renderBody(item: Item) {\n    const view = item.viewId ? this.props.views.find(({ id }) => id === item.viewId) : undefined;\n    if (!view || !view.itemBodyTemplate) {\n      return null;\n    }\n    return (\n      <TemplateItem\n        key={item.id}\n        template={{\n          source: view.itemBodyTemplate,\n          options: { iri: item.resourceIri, dashboardId: item.id },\n        }}\n      />\n    );\n  }\n\n  private removeItem(itemId: string) {\n    this.setState(\n      (prevState): State => {\n        let newItems = [...prevState.items];\n        const index = newItems.findIndex((item) => item.id === itemId);\n        newItems.splice(index, 1);\n\n        // make sure that we always have at least one frame\n        if (isEmpty(newItems)) {\n          newItems = [emptyItem()];\n        }\n        return { items: newItems };\n      }\n    );\n  }\n\n  private onRemoveItem(item: Item) {\n    const removeItem = () => {\n      if (item.linkedBy) {\n        this.state.items.forEach(({ id, linkedBy }) => {\n          if (linkedBy === item.linkedBy) {\n            this.removeItem(id);\n          }\n        });\n      } else {\n        this.removeItem(item.id);\n      }\n    };\n    if (item.isDirty) {\n      const dialogRef = 'removing-confirmation';\n      const onHide = () => getOverlaySystem().hide(dialogRef);\n      getOverlaySystem().show(\n        dialogRef,\n        <ConfirmationDialog\n          message={'Frame has unsaved changes. Are you sure you want to delete it?'}\n          onHide={onHide}\n          onConfirm={(confirm) => {\n            onHide();\n            if (confirm) {\n              removeItem();\n            }\n          }}\n        />\n      );\n    } else {\n      removeItem();\n    }\n  }\n\n  private renderItems() {\n    const { items } = this.state;\n    if (!items.length) {\n      return <div className=\"text-center\">No frames</div>;\n    }\n    return (\n      <div className={`list-group ${styles.itemsList}`}>\n        {items.map((item) => {\n          const body = this.renderBody(item);\n          return (\n            <div key={item.id} className=\"list-group-item\" onClick={() => this.setState({ focus: item.id })}>\n              <div className={styles.itemLabelContainer}>\n                {body ? (\n                  <button\n                    className={`btn btn-xs ${styles.expandItemButton}`}\n                    onClick={() => this.onExpandItem(item.id)}\n                  >\n                    <i className={`fa ${item.isExpanded ? 'fa fa-caret-down' : 'fa-caret-right'}`} />\n                  </button>\n                ) : null}\n                {this.renderLabel(item)}\n              </div>\n              {body && item.isExpanded ? body : null}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  private onSelectView({ itemId, viewId, resourceIri }: { itemId: string; viewId: string; resourceIri: string }) {\n    const { linkedViews } = this.props;\n    this.setState(\n      (prevState): State => {\n        const newItems = [...prevState.items];\n        newItems.forEach((item, index) => {\n          if (item.id !== itemId) {\n            return;\n          }\n          const linkedView = linkedViews.find((view) => view.id === viewId);\n          if (linkedView) {\n            const index = newItems.findIndex(({ id }) => id === itemId);\n            const items = linkedView.viewIds.map((id) => ({\n              ...emptyItem(),\n              viewId: id,\n              resourceIri: resourceIri,\n              linkedBy: itemId,\n            }));\n            newItems.splice(index, 1, ...items);\n          } else {\n            newItems[index] = { ...item, viewId, resourceIri };\n          }\n        });\n        return { items: newItems };\n      }\n    );\n  }\n\n  private onStatusChange(itemId: string, isDirty: boolean) {\n    this.setState(\n      (prevState): State => {\n        const newItems = prevState.items.map((item) => {\n          if (item.id === itemId) {\n            return { ...item, isDirty };\n          }\n          return item;\n        });\n        return { items: newItems };\n      }\n    );\n  }\n\n  private onResourceChange(itemId: string, resourceIri: string, data?: { [key: string]: string }) {\n    this.setState(\n      (prevState): State => {\n        const newItems = prevState.items.map((item) => {\n          if (item.id === itemId) {\n            return { ...item, resourceIri, data };\n          }\n          return item;\n        });\n        return { items: newItems };\n      }\n    );\n  }\n\n  private renderView(item: Item) {\n    const { views, linkedViews } = this.props;\n    const allViews: Array<DashboardViewConfig> = [...views];\n    linkedViews.forEach((linkedView) => {\n      allViews.push({\n        id: linkedView.id,\n        label: linkedView.label,\n        template: '',\n        image: linkedView.image,\n        iconClass: linkedView.iconClass,\n        description: linkedView.description,\n        checkQuery: linkedView.checkQuery,\n      });\n    });\n    const linkedFrames: Array<{ frameId: string; frameVariable: string }> = [];\n    if (item.linkedBy) {\n      this.state.items.forEach(({ id: frameId, viewId, linkedBy }) => {\n        if (linkedBy === item.linkedBy) {\n          const view = views.find(({ id }) => id === viewId);\n          if (view) {\n            linkedFrames.push({ frameId, frameVariable: view.frameVariable });\n          }\n        }\n      });\n    }\n    return (\n      <div key={item.id} className={styles.viewContainer}>\n        <DashboardItem\n          id={item.id}\n          views={allViews}\n          viewId={item.viewId}\n          gridView\n          resourceIri={item.resourceIri}\n          data={item.data}\n          linkedFrames={linkedFrames}\n          onSelect={({ viewId, resourceIri }) =>\n            this.onSelectView({ itemId: item.id, viewId: viewId, resourceIri: resourceIri })\n          }\n          onStatusChange={(isDirty) => this.onStatusChange(item.id, isDirty)}\n          onResourceChange={(resourceIri, data) => this.onResourceChange(item.id, resourceIri, data)}\n          onFocus={() => this.setState({ focus: item.id })}\n        />\n      </div>\n    );\n  }\n\n  render() {\n    const { items } = this.state;\n    const children = React.Children.toArray(this.props.children);\n\n    const frames = items.map((item) => ({\n      id: item.id,\n      type: WorkspaceLayoutType.Component,\n      className: 'thinking-frames__frames',\n      content: this.renderView(item) as React.ReactElement<any>,\n      heading: this.renderLabel(item),\n      minSize: this.props.frameMinSize,\n    })) as any;\n    if (children.length > 1) {\n      frames.unshift({\n        id: 'heading',\n        type: WorkspaceLayoutType.Component,\n        className: 'thinking-frames__frames',\n        content: React.Children.only(children[1]) as any,\n        heading: null,\n        minSize: 60,\n        defaultSize: 60,\n      } as any);\n    }\n\n    const layout: WorkspaceLayoutNode = {\n      type: WorkspaceLayoutType.Row,\n      children: [\n        {\n          type: WorkspaceLayoutType.Column,\n          children: [\n            {\n              id: 'thought-board',\n              type: WorkspaceLayoutType.Component,\n              className: 'thinking-frames__clipboard-sidebar',\n              content: React.Children.only(children[0]) as any,\n              heading: 'Clipboard',\n            },\n            {\n              id: 'items',\n              type: WorkspaceLayoutType.Component,\n              defaultCollapsed: true,\n              className: 'thinking-frames__frames-sidebar',\n              content: (<div className={styles.itemsContainer}>{this.renderItems()}</div>) as React.ReactElement<any>,\n              heading: (\n                <div>\n                  Thinking Frames&nbsp;\n                  <button\n                    className={`btn btn-link btn-xs pull-right ${styles.addItemButton}`}\n                    onClick={(e) => {\n                      e.preventDefault();\n                      e.stopPropagation();\n                      this.onAddNewItem();\n                    }}\n                  >\n                    <i className=\"fa fa-plus\" /> Add frame\n                  </button>\n                </div>\n              ),\n            },\n          ],\n          defaultSize: 300,\n        },\n        {\n          type: WorkspaceLayoutType.Column,\n          children: frames,\n          undocked: true,\n        },\n      ],\n    };\n    return <WorkspaceLayout layout={layout} _onResize={() => window.dispatchEvent(new Event('resize'))} />;\n  }\n}\n\nexport default DashboardComponent;\n","/**\n * ResearchSpace\n * Copyright (C) 2015-2020, © Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { EventMaker } from 'platform/api/events';\n\nexport interface DashboardEvents {\n  /**\n   * Event which should be triggered when the nested component has been changed.\n   */\n  'Dashboard.StatusChanged': { hasChanges: boolean };\n\n  /**\n   * Event which should be triggered when the current resource has been changed.\n   */\n  'Dashboard.ResourceChanged': {\n    resourceIri: string;\n    data?: { [key: string]: any }; // additional info that can be passed with the event\n  };\n}\n\n/**\n * Can be triggered to initiate new frame\n */\nexport const AddFrameEvent = 'Dashboard.AddFrame';\nexport type AddFrameEventData = {\n  resourceIri?: string;\n  viewId?: string;\n};\n\nconst event: EventMaker<DashboardEvents> = EventMaker;\n\nexport const StatusChanged = event('Dashboard.StatusChanged');\nexport const ResourceChanged = event('Dashboard.ResourceChanged');\n","/**\n * ResearchSpace\n * Copyright (C) 2015-2020, © Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as React from 'react';\n\nimport { Row, Col } from 'react-bootstrap';\n\nimport { Component } from 'platform/api/components';\nimport { Rdf } from 'platform/api/rdf';\nimport { TemplateItem } from 'platform/components/ui/template';\nimport { DropArea } from 'platform/components/dnd/DropArea';\nimport { Cancellation } from 'platform/api/async';\nimport { listen } from 'platform/api/events';\n\nimport * as styles from './Dashboard.scss';\nimport * as DashboardEvents from './DashboardEvents';\n\nconst DEFAULT_VARIABLE = 'dashboardId';\n\nexport interface DashboardViewConfig {\n  /**\n   * Unique identifier of the view.\n   */\n  id: string;\n  /**\n   * <semantic-link uri='http://help.researchspace.org/resource/FrontendTemplating'>Template</semantic-link> which is used to render the view when users drop a resource on it. Expects <code>{{iri}}</code> and <code>{{dashboardId}}</code> (or a variable specified in <code>frameVariable</code>) as context variables.\n   */\n  template: string;\n  /**\n   * Label of the view.\n   */\n  label: string;\n  /**\n   * Description of the view.\n   */\n  description?: string;\n  /**\n   * Image that will be displayed in the Dashboard Item as the representation for the specific View.\n   */\n  image?: string;\n  /**\n   * Class of the icon that will be used as the representation of the specific View in the Dashboard Item. It will be applied if the <code>image</code> attribute isn't specified.\n   */\n  iconClass?: string;\n  /**\n   * SPARQL Ask query that is used to check whether it is possible to display a specific resource type in the specific view. Resource IRI is injected into the query using the <code>?value</code> binding variable.\n   */\n  checkQuery?: string;\n  /**\n   * Allows initiating a component/template without a resource. For instance, <code><ontodia></ontodia></code> component can be initiated in the Dashboard without a specific resource. When <code>resourceNotRequired</code> is set to <code>true</code> the version of the dialogue is rendered to suggests \"Create new\" option for the user, which means that the user can start this particular View from scratch and populate it with resources later.\n   */\n  resourceNotRequired?: boolean;\n  /**\n   * Defined the variable name that will be passed to the template to propagate the frame ID.\n   * @default 'dashboardId'\n   */\n  frameVariable?: string;\n  /**\n   * <semantic-link uri='http://help.researchspace.org/resource/FrontendTemplating'>Template</semantic-link> for the label of a frame, it is used in the frame controller. By default the <code><mp-label></mp-label></code> component is used. Expects <code>{{iri}}</code> and <code>{{dashboardId}}</code> (or a variable specified in <code>frameVariable</code>) as context variables.\n   */\n  itemLabelTemplate?: string;\n  /**\n   * <semantic-link uri='http://help.researchspace.org/resource/FrontendTemplating'>Template</semantic-link> for the body of a frame item. If it is specified, it will applied to the contents of the frame item displayed as dropdown of the frame controller. Expects <code>{{iri}}</code> and <code>{{dashboardId}}</code> (or a variable specified in <code>frameVariable</code>) as context variables.\n   */\n  itemBodyTemplate?: string;\n\n  /**\n   * True if only one dashboard item of this kind can exist in the thinking frames.\n   *\n   * @default false\n   */\n  unique?: boolean;\n\n  /**\n   * Define the view type that will be use to display it in the specific area of the dashboard layout (search, view, authoring areas)\n   * * @default 'authoring'\n   * */\n  type?: string;\n\n}\n\nexport interface DashboardItemProps {\n  /**\n   * Used as source id for emitted events.\n   */\n  id: string;\n\n  /**\n   * Config specifies data to define views for dashboard.\n   */\n  views: ReadonlyArray<DashboardViewConfig>;\n  /**\n   * Selected resource visualization\n   */\n  viewId?: string;\n  /**\n   * Selected resource\n   */\n  resourceIri?: string;\n  /**\n   * Additional info that will be propagated to the template\n   */\n  data?: { [key: string]: any };\n  /**\n   * Linked Views\n   */\n  linkedFrames?: ReadonlyArray<{ frameId: string; frameVariable: string }>;\n  /**\n   * Callback which using for transfer id of a special view and iri of a resource.\n   */\n  onSelect?(data: { viewId: string; resourceIri?: string }): void;\n\n  /**\n   * Callback which using for indicate users that an active dashboard's component was changed.\n   */\n  onStatusChange?(hasChanges: boolean): void;\n\n  /**\n   * Callback which using for indicate users that a used resource was changed.\n   */\n  onResourceChange?(resourceIri: string, data?: { [key: string]: string }): void;\n\n  /**\n   * Callback which using for indicate users that a current dashboard isFocused.\n   */\n  onFocus?(isFocus: boolean): void;\n\n   /**\n   * Render dashboard layout using css grid, instead of bootstrap row and columns.\n   */\n  gridView?: boolean;\n}\n\nexport interface State {\n  selectedView?: string;\n}\n\n/**\n *\n * @example\n * <rs-dashboard-item id='test-1'\n *   views='[\n *     {\"id\": \"ontodia\", \"label\": \"Ontodia\", \"template\": \"{{> ontodia-template}}\", \"description\": \"Example\", \"image\": \"https://example/img.jpg\"},\n *     {\"id\": \"resource\", \"label\": \"Resource viewer\", \"template\": \"{{> resource-template}}\", \"iconClass\": \"fa fa-automobile\",\n *      \"checkQuery\": \"ASK {?value a example:Person}\" }\n *   ]'>\n *   <template id='ontodia-template'>\n *     {{#if iri}}\n *     <div class=\"component\">\n *       <ontodia id='ontodia' post-saving='none' iri='{{iri}}'></ontodia>\n *       <mp-event-proxy\n *         id='ontodia-update'\n *         on-event-type='Ontodia.DiagramIsDirty'\n *         on-event-source='ontodia'\n *         proxy-event-type='Dashboard.StatusChanged'\n *         proxy-targets='[\"{{dashboardId}}\"]'\n *       ></mp-event-proxy>\n *     </div>\n *     {{/if}}\n *   </template>\n *   <template id='resource-template'>\n *     {{#if iri}}\n *     <semantic-query query='\n *       SELECT ?label ?image WHERE {\n *         BIND( IRI(CONCAT(STR(\"{{iri}}\"))) as ?subject)\n *         ?subject rso:displayLabel ?label .\n *         ?subject crm:P138i_has_representation ?image .\n *       }' template='{{> resource}}'>\n *       <template id='resource'>\n *         <div class=\"component\">\n *           {{#each bindings}}\n *           <div>{{label.value}}</div>\n *           <img src='{{image.value}}' width=\"100\" height=\"100\"/>\n *           {{/each}}\n *         </div>\n *       </template>\n *     </semantic-query>\n *     {{/if}}\n *   </template>\n * </rs-dashboard-item>\n */\nexport class DashboardItem extends Component<DashboardItemProps, State> {\n  private cancellation = new Cancellation();\n\n  constructor(props: DashboardItemProps, context: any) {\n    super(props, context);\n    this.state = {};\n  }\n\n  componentWillUnmount() {\n    this.cancellation.cancelAll();\n  }\n\n  componentDidMount() {\n    const { id, onStatusChange, onResourceChange } = this.props;\n    this.cancellation\n      .map(\n        listen({\n          eventType: DashboardEvents.StatusChanged,\n          target: id,\n        })\n      )\n      .observe({\n        value: ({ data }) => {\n          if (onStatusChange) {\n            onStatusChange(data.hasChanges);\n          }\n        },\n      });\n    this.cancellation\n      .map(\n        listen({\n          eventType: DashboardEvents.ResourceChanged,\n          target: id,\n        })\n      )\n      .observe({\n        value: ({ data }) => {\n          if (onResourceChange) {\n            onResourceChange(data.resourceIri, data.data);\n          }\n        },\n      });\n    this.onFocus();\n\n  }\n\n  private onFocus = () => {\n    const { onFocus } = this.props;\n    if (onFocus) {\n      onFocus(true);\n    }\n  };\n\n  onDrop = (resourceIri: Rdf.Iri, viewId: string) => {\n    const { onSelect } = this.props;\n    if (onSelect) {\n      onSelect({ viewId, resourceIri: resourceIri.value });\n    }\n    this.onFocus();\n  };\n\n  private renderDefaultDropArea = (view: DashboardViewConfig, image: React.ReactNode | undefined) => {\n    return (\n      <DropArea\n        query={view.checkQuery}\n        onDrop={(iri) => this.onDrop(iri, view.id)}\n        childrenClassName={`${styles.dropAreaChildren} ${styles.notOpacity}`}\n        dropMessageWrapperStyle={{ display: 'none' }}\n        dropStyles={{\n          enabledHover: { backgroundColor: '#f6f6f6', outline: '3px dashed #1d0a6e' },\n          enabled: { outline: '1px solid #ddd' },\n          disabled: { opacity: '.2' },\n        }}\n      >\n        <div className={styles.defaultComponent} onClick={() => this.onDefaultDropAreaClick(view)}>\n          <div className={'media'}>\n            <div className={'media-left media-middle'}>{image}</div>\n            <div className={'media-body'}>\n              <strong className={'media-heading'}>{view.label}</strong>\n              <div className={'media-description'}>{view.description}</div>\n            </div>\n          </div>\n        </div>\n      </DropArea>\n    );\n  };\n\n  private onDefaultDropAreaClick = (view: DashboardViewConfig) => {\n    if (view.resourceNotRequired) {\n      this.props.onSelect({viewId: view.id});\n    } else {\n      this.setState({selectedView: view.id});\n    }\n  }\n\n  private renderDefaultDashboard = () => {\n    const { views } = this.props;\n    return (\n      <div className={`${styles.defaultDashboard} container-fluid`} onClick={this.onFocus}>\n        <Row>\n          {views.map((view) => {\n            let image: React.ReactNode | undefined;\n            if (view.image) {\n              image = <img src={view.image} className={`media-object ${styles.image}`} alt={view.label} />;\n            } else if (view.iconClass) {\n              image = <span className={`${view.iconClass} ${styles.icon}`} />;\n            }\n            return (\n              <Col key={view.id} md={4} xs={12} lg={4} sm={6}>\n                <div className={styles.defaultColumnItem}>{this.renderDefaultDropArea(view, image)}</div>\n              </Col>\n            );\n          })}\n        </Row>\n      </div>\n    );\n  };\n\n  private renderItemCard = (view: DashboardViewConfig) => {\n    let image: React.ReactNode | undefined;\n    if (view.image) {\n      image = <img src={view.image} className={`media-object ${styles.image}`} alt={view.label} />;\n    } else if (view.iconClass) {\n      image = <span className={`${view.iconClass} ${styles.icon}`} />;\n    }\n    return (\n      <div key={view.id}>\n        <div>{this.renderDefaultDropArea(view, image)}</div>\n      </div>\n    );\n  }\n\n  private renderGridViewDashboard = () => {\n    const { views } = this.props;\n    const authItems = views.filter((item) => item.type === 'authoring' || !item.type);\n    const searchViewItems = views.filter((item) => item.type === 'search' || item.type === 'view');\n\n    return (\n      <div className={styles.gridViewDashboard} onClick={this.onFocus}>\n        \n        <div className={styles.help}>\n          <i className={'fa fa-question'}></i>\n          <div className={styles.helpText}>What is the Thinking Frames?</div>\n        </div>\n        <div className={styles.gridViewTitle1}>Search and View</div>\n        <div className={styles.gridViewItemsView}>{searchViewItems.map(this.renderItemCard)}</div>\n      \n        <div className={styles.gridViewTitle2}>Authoring</div>\n        <div className={styles.gridViewItemsAuth}>{authItems.map(this.renderItemCard)}</div>\n        \n        <div className={styles.dropResourceContainer}>\n          <div>\n            <div className={styles.dropResourceIcon}>\n              <i className={'rs-icon rs-icon-drop_resource'}></i>\n            </div>\n            <div className={styles.dropResourceText}>drop resource here</div>\n          </div>\n        </div>\n\n      </div>\n    );\n  };\n\n  private renderEmptySelectedComponent = () => {\n    const { views, onSelect } = this.props;\n    const view = views.find((v) => v.id === this.state.selectedView);\n    let image: React.ReactNode | undefined;\n    if (view.image) {\n      image = <img src={view.image} className={styles.imageComponent} alt={view.label} />;\n    } else if (view.iconClass) {\n      image = <span className={`${view.iconClass} ${styles.icon} ${styles.iconComponent}`} />;\n    }\n    return (\n      <div className={styles.emptyPageDropArea} onClick={this.onFocus}>\n        <DropArea\n          onDrop={(iri) => this.onDrop(iri, view.id)}\n          query={view.checkQuery}\n          childrenClassName={`${styles.dropAreaChildren} ${styles.notOpacity}`}\n          style={{ display: 'flex', flex: 1, width: '100%' }}\n          dropMessageWrapperStyle={{ display: 'none' }}\n          dropStyles={{\n            enabledHover: { backgroundColor: '#f6f6f6' },\n            enabled: { outline: '3px dashed #1d0a6e' },\n            disabled: { backgroundColor: '#ff000054' },\n          }}\n        >\n          <div className={styles.emptyPageTitle}>\n            {image}\n            <div>\n              <div className={styles.emptyPageLabel}>{view.label}</div>\n              <div className={styles.emptyPageDescription}>{view.description}</div>\n            </div>\n          </div>\n          <div className={styles.emptyPageDrop}>\n            <div><i className={'rs-icon rs-icon-drop_resource'}></i></div>\n            <div className={styles.emptyPageDroptext}>drop resource here</div>\n            {view.resourceNotRequired ? (\n              <div>\n                or\n                <br />\n                <a\n                  href=\"\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    if (onSelect) {\n                      onSelect({ viewId: view.id });\n                    }\n                  }}\n                >\n                  Create New {view.label}\n                </a>\n              </div>\n            ) : null}\n          </div>\n        </DropArea>\n      </div>\n    );\n  };\n\n  private renderComponent = () => {\n    const { id, views, viewId, resourceIri, data, linkedFrames = [] } = this.props;\n    const view = views.find((v) => v.id === viewId);\n    const { template, frameVariable = DEFAULT_VARIABLE } = view;\n    const options = {\n      iri: resourceIri,\n      [frameVariable]: id,\n      data,\n    };\n    linkedFrames.forEach((linkedView) => (options[linkedView.frameVariable] = linkedView.frameId));\n    return (\n      <div className={styles.template} onClick={this.onFocus} onWheel={this.onFocus} onDrop={this.onFocus}>\n        <TemplateItem template={{ source: template, options }} />\n      </div>\n    );\n  };\n\n  render() {\n    const { views, viewId, gridView } = this.props;\n    const { selectedView } = this.state;\n    if (views.length === 0) {\n      return null;\n    }\n    if (viewId) {\n      return this.renderComponent();\n    }\n    if (selectedView) {\n      return this.renderEmptySelectedComponent();\n    }\n    if (gridView) {\n      return this.renderGridViewDashboard();\n    }\n    return this.renderDefaultDashboard();\n  }\n}\n\nexport default DashboardItem;\n"],"sourceRoot":""}