{"version":3,"sources":["webpack:///./src/main/web/components/semantic/table/SemanticTable.ts","webpack:///./src/main/web/components/semantic/table/Table.ts","webpack:///./src/main/web/components/semantic/table/Pagination.ts","webpack:///./src/main/web/components/semantic/table/RdfValueDisplay.tsx"],"names":["props","context","cancellation","Cancellation","querying","derive","TABLE_REF","prepareConfigAndExecuteQuery","setState","isLoading","error","undefined","deriveAndCancel","loading","map","SparqlClient","select","query","semanticContext","onValue","res","data","onError","onEnd","id","trigger","eventType","BuiltInEvents","ComponentLoaded","source","ComponentLoading","state","getSelected","this","refs","shouldComponentUpdate","nextProps","nextState","_","isEqual","componentWillReceiveProps","componentDidMount","componentWillUnmount","cancelAll","render","createElement","ErrorNotification","errorMessage","D","div","className","Spinner","SparqlUtil","isSelectResultEmpty","renderTable","TemplateItem","template","noResultTemplate","config","layout","tupleTemplate","maybe","fromNullable","has","options","showLabels","prefetchLabels","handleDeprecatedLayout","currentPage","onControlledPropChange","controlledProps","onPageChange","page","Table","otherProps","numberOfDisplayedRows","Either","Right","ref","console","warn","propTypes","Component","PropTypes","func","SemanticTable","buffer","KeyedBufferPool","Immutable","Map","keys","getLabels","toArray","forceUpdate","updateStateFromProps","isJust","get","renderingState","getLabel","resourceIri","result","griddleConfig","buildConfig","newTargets","findReferencedResources","builtConfig","alreadyFetching","Set","withMutations","set","results","item","columnMetadata","column","variableName","columnValue","Rdf","Iri","add","targets","load","paginationProps","externalCurrentPage","baseConfig","resultsPerPage","getOrElse","showFilter","useGriddleStyles","tableClassName","sortAscendingComponent","sortDescendingComponent","useCustomPagerComponent","customPagerComponent","Pagination","customPagerComponentOptions","useCustomFilterer","customFilterer","makeCellFilterer","fold","json","getGriddlePropsForFlatDataArray","getGriddlePropsForSparqlResult","makeSortNonMutating","useCustomLayout","renderTableData","Griddle","columnsMetadata","buildColumnsMetadata","head","vars","prepareSparqlResultData","columns","filter","value","heads","reduce","union","obj","Object","prepareFlatData","customRowComponent","useCustomRowComponent","customRowComponentClassName","additionalColumns","getAdditionalColumns","defineAdditionalColumnProperty","bindings","binding","isEmpty","columnConfiguration","defaultColumnsMetadata","customColumnsMetadata","varName","index","displayName","columnName","visible","order","customComponent","makeCellTemplateComponent","customCompareFn","makeNullableLastComparator","makeCellComparator","ensureUniqueColumnName","makeUniqueColumnNameGenerator","usedNames","baseName","generatedName","columnConfig","i","makeCellComponentClass","cellComponent","cellTemplate","c","emptyValue","defineProperty","enumerable","showLiteralDatatype","linkParams","showCopyToClipboardButton","templateSource","isString","String","isUndefined","rowData","isPrimitiveDatatype","preferchLabels","RdfValueDisplay","label","fetchLabel","fetchContext","isBoolean","isNumber","isNull","items","queryLowercase","toLowerCase","key","hasOwnProperty","call","indexOf","Node","isIri","a","b","compareRdfNodes","isLiteral","NUMERIC_TYPES","datatype","aNumeric","Number","bNumeric","isNaN","aValue","bValue","localeCompare","aKind","getCellDataKind","bKind","base","aNull","bNull","_makeCellFilterer","_makeCellComparator","NON_MUTATING_ARRAY_SORT","comparator","clone","sort","arr","initialValue","onLoad","onCompleted","activeCount","_targets","keySeq","toSet","_result","_error","size","merge","observe","end","aborted","pageChange","event","setPage","parseInt","target","getAttribute","updateCurrentPageIfRequested","componentWillUpdate","newPage","maxPage","previous","li","onClick","span","next","startIndex","Math","max","endIndex","min","selected","push","nav","ul","defaultProps","fetchLabelForIri","equals","node","subscription","unsubscribe","displayValue","renderRdfNode","content","resourceLink","ResourceLink","resource","title","params","CopyToClipboardComponent","text","dataType","compactIriUsingPrefix","isBnode","React"],"mappings":"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","file":"semantic-table-9a8695fcf9801917e364.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { Props, createElement } from 'react';\nimport * as D from 'react-dom-factories';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash';\nimport * as Either from 'data.either';\nimport * as maybe from 'data.maybe';\n\nimport { Cancellation } from 'platform/api/async';\nimport { SparqlClient, SparqlUtil } from 'platform/api/sparql';\nimport { Component, ComponentProps, ComponentContext } from 'platform/api/components';\nimport { BuiltInEvents, trigger } from 'platform/api/events';\n\nimport { Spinner } from 'platform/components/ui/spinner';\nimport { TemplateItem } from 'platform/components/ui/template';\nimport { ControlledPropsHandler } from 'platform/components/utils';\nimport { ErrorNotification } from 'platform/components/ui/notification';\n\nimport { ColumnConfiguration, Table, TableConfig, TableLayout } from './Table';\n\ninterface ControlledProps {\n  /**\n   * In controlled mode sets current page in the table;\n   * in uncontrolled mode only sets initial page.\n   */\n  readonly currentPage?: number;\n}\n\ninterface TableState {\n  data?: SparqlClient.SparqlSelectResult;\n  isLoading?: boolean;\n  error?: any;\n}\n\ninterface Options {\n  /**\n   * Whether or not to display table filter\n   *\n   * @default true\n   */\n  showFilter?: boolean;\n\n  /**\n   * Determines if the table heading should be displayed\n   *\n   * @default true\n   */\n  showTableHeading?: boolean;\n\n  /**\n   * Determines if sorting is enabled\n   *\n   * @default true\n   */\n  enableSort?: boolean;\n}\n\n/**\n * The simplest table configuration can be used to show all SPARQL result set projection variables.\n * The SPARQL projection variable name is used as column header. IRIs will be rendered as resolvable links using the `<semantic-link>` component or as a simple string otherwise.\n */\ninterface BaseConfig extends ControlledProps {\n  /**\n   * SPARQL Select query.\n   */\n  query: string;\n\n  /**\n   * Number of rows to show on the one page\n   *\n   * @default 10\n   */\n  numberOfDisplayedRows?: number;\n\n  /**\n   * <semantic-link uri='http://help.researchspace.org/resource/FrontendTemplating'>Template</semantic-link> which is applied when the query returns no results\n   */\n  noResultTemplate?: string;\n\n  /**\n   * various ui options.\n   */\n  options?: Options;\n\n  /**\n   * ID for issuing component events.\n   */\n  id?: string;\n\n  /**\n   * Determines if the table should automatically fetch and display labels for resource IRIs.\n   *\n   * @default true\n   */\n  showLabels?: boolean;\n\n  /**\n   * Prefetches labels for all resource IRIs in the data to support sorting and filtering\n   * by resource labels.\n   *\n   * @default false\n   */\n  prefetchLabels?: boolean;\n\n  /**\n   * Enable displaying datatypes of literals. This option is applicable only to default cell templates.\n   * @default false\n   */\n  showLiteralDatatype?: boolean;\n\n  /**\n   * Add parameters to URLs. This option is applicable only to default cell templates.\n   */\n  linkParams?: {};\n}\n\n/**\n * More advanced configuration that can be used to restrict the set of columns to be visualized, to modify the column headings or to provide custom cell visualization templates\n */\ninterface ColumnConfig extends BaseConfig {\n  /**\n   * List of columns to display. If specified table shows only columns explicitly specified in the configuration\n   */\n  columnConfiguration: Array<ColumnConfiguration>;\n}\n\n/**\n * The most advanced table configuration that provides the ability to customize the rendering of an entire table row via tuple templates.\n */\ninterface RowConfig extends BaseConfig {\n  /**\n   * <semantic-link uri='http://help.researchspace.org/resource/FrontendTemplating'>Template</semantic-link> for the whole table row. Can be used to have visualizations different from the standard, e.g grid of thumbnails.\n   * The template has access to all projection variables for a single result tuple\n   */\n  tupleTemplate: string;\n}\nfunction isRowConfig(config: SemanticTableConfig): config is RowConfig {\n  return _.has(config, 'tupleTemplate');\n}\n\nexport type SemanticTableConfig = BaseConfig | ColumnConfig | RowConfig;\nexport type SemanticTableProps = SemanticTableConfig &\n  ControlledPropsHandler<ControlledProps> &\n  ComponentProps &\n  Props<SemanticTable>;\n\nexport class SemanticTable extends Component<SemanticTableProps, TableState> {\n  static propTypes: Partial<Record<keyof SemanticTableProps, any>> = {\n    ...Component.propTypes,\n    onControlledPropChange: PropTypes.func,\n  };\n\n  private readonly cancellation = new Cancellation();\n  private querying = this.cancellation.derive();\n\n  constructor(props: SemanticTableProps, context: ComponentContext) {\n    super(props, context);\n    this.state = {\n      isLoading: true,\n    };\n  }\n\n  private TABLE_REF = 'table';\n  refs: { table: Table };\n\n  getSelected() {\n    return this.refs[this.TABLE_REF].getSelected();\n  }\n\n  public shouldComponentUpdate(nextProps: SemanticTableProps, nextState: TableState) {\n    return nextState.isLoading !== this.state.isLoading || !_.isEqual(nextProps, this.props);\n  }\n\n  public componentWillReceiveProps(nextProps: SemanticTableProps, context: ComponentContext) {\n    if (nextProps.query !== this.props.query) {\n      this.prepareConfigAndExecuteQuery(nextProps, context);\n    }\n  }\n\n  public componentDidMount() {\n    this.prepareConfigAndExecuteQuery(this.props, this.context);\n  }\n\n  componentWillUnmount() {\n    this.cancellation.cancelAll();\n  }\n\n  public render() {\n    if (this.state.error) {\n      return createElement(ErrorNotification, { errorMessage: this.state.error });\n    } else {\n      return D.div(\n        { className: 'semantic-table-holder' },\n        this.state.isLoading\n          ? createElement(Spinner)\n          : this.state.data && !SparqlUtil.isSelectResultEmpty(this.state.data)\n          ? this.renderTable()\n          : createElement(TemplateItem, { template: { source: this.props.noResultTemplate } })\n      );\n    }\n  }\n\n  private renderTable() {\n    let layout: TableLayout = {\n      tupleTemplate: maybe.fromNullable(isRowConfig(this.props) ? this.props.tupleTemplate : null),\n      options: this.props.options,\n      showLabels: this.props.showLabels,\n      prefetchLabels: this.props.prefetchLabels,\n    };\n    layout = this.handleDeprecatedLayout(layout);\n    const { currentPage, onControlledPropChange, ...otherProps } = this.props;\n    const controlledProps: Partial<TableConfig> = {\n      currentPage,\n      onPageChange: onControlledPropChange ? (page) => onControlledPropChange({ currentPage: page }) : undefined,\n    };\n    return createElement(Table, {\n      ...otherProps,\n      ...controlledProps,\n      layout: maybe.fromNullable(layout),\n      numberOfDisplayedRows: maybe.fromNullable(this.props.numberOfDisplayedRows),\n      data: Either.Right<any[], SparqlClient.SparqlSelectResult>(this.state.data),\n      ref: this.TABLE_REF,\n    });\n  }\n\n  private prepareConfigAndExecuteQuery = (props: SemanticTableProps, context: ComponentContext) => {\n    this.setState({\n      isLoading: true,\n      error: undefined,\n    });\n    this.querying = this.cancellation.deriveAndCancel(this.querying);\n    const loading = this.querying\n      .map(SparqlClient.select(props.query, { context: context.semanticContext }))\n      .onValue((res) => this.setState({ data: res, isLoading: false }))\n      .onError((error) => this.setState({ isLoading: false, error }))\n      .onEnd(() => {\n        if (this.props.id) {\n          trigger({ eventType: BuiltInEvents.ComponentLoaded, source: this.props.id });\n        }\n      });\n    if (this.props.id) {\n      trigger({\n        eventType: BuiltInEvents.ComponentLoading,\n        source: this.props.id,\n        data: loading,\n      });\n    }\n  };\n\n  private handleDeprecatedLayout(layout: TableLayout): TableLayout {\n    if (_.has(this.props, 'layout')) {\n      console.warn('layout property in semantic-table is deprecated, please use flat properties instead');\n      layout.tupleTemplate = maybe.fromNullable(this.props['layout']['tupleTemplate']);\n      layout.options = this.props['layout']['options'];\n    }\n    return layout;\n  }\n}\n\nexport default SemanticTable;\n","/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { createElement, ReactElement, ComponentClass, ClassAttributes } from 'react';\nimport * as Griddle from 'griddle-react';\nimport { GriddleConfig, ColumnMetadata } from 'griddle-react';\nimport * as _ from 'lodash';\nimport * as Immutable from 'immutable';\nimport * as Kefir from 'kefir';\n\nimport { Cancellation } from 'platform/api/async';\nimport { Component } from 'platform/api/components';\nimport { SparqlClient } from 'platform/api/sparql';\nimport { Rdf } from 'platform/api/rdf';\nimport xsd from 'platform/api/rdf/vocabularies/xsd';\nimport { getLabels } from 'platform/api/services/resource-label';\n\nimport { TemplateItem } from 'platform/components/ui/template';\nimport { Spinner } from 'platform/components/ui/spinner';\nimport { ErrorNotification } from 'platform/components/ui/notification';\n\nimport { Pagination, CustomPaginationProps } from './Pagination';\nimport { RdfValueDisplay } from './RdfValueDisplay';\n\nimport './Table.scss';\n\nexport interface TableLayout {\n  options?: Griddle.GriddleConfig;\n  tupleTemplate?: Data.Maybe<string>;\n\n  /**\n   * Determines if the table should automatically fetch and display labels for resource IRIs.\n   *\n   * @default true\n   */\n  showLabels?: boolean;\n\n  /**\n   * Prefetches labels for all resource IRIs in the data to support sorting and filtering\n   * by resource labels.\n   *\n   * @default true\n   */\n  prefetchLabels?: boolean;\n}\n\n/**\n * Table column configuration which allows to override column header or cell visualization template.\n * Either `variableName` or `cellTemplate` is required to properly display column content.\n */\nexport interface ColumnConfiguration {\n  /**\n   * Cell heading label override.\n   */\n  displayName: string;\n  /**\n   * SPARQL projection variable name that this column is bind to.\n   */\n  variableName?: string;\n  /**\n   * Custom cell visualization <semantic-link\n   *   uri='http://help.researchspace.org/resource/FrontendTemplating'>template</semantic-link>.\n   * Template has access to all projection variables for a single result tuple.\n   */\n  cellTemplate?: string;\n}\n\nexport interface TableColumnConfiguration extends ColumnConfiguration {\n  cellComponent?: ComponentClass<CellRendererProps>;\n}\n\nexport interface CellRendererProps {\n  data: any;\n  rowData: any;\n}\n\nexport interface TableConfig {\n  columnConfiguration?: Array<TableColumnConfiguration>;\n  numberOfDisplayedRows: Data.Maybe<number>;\n  layout?: Data.Maybe<TableLayout>;\n  data: Data.Either<ReadonlyArray<any>, SparqlClient.SparqlSelectResult>;\n  currentPage?: number;\n  onPageChange?: (page: number) => void;\n  showLiteralDatatype?: boolean;\n  linkParams?: {};\n  showCopyToClipboardButton?: boolean;\n}\n\nexport type TableProps = TableConfig & ClassAttributes<Table>;\n\nconst DEFAULT_ROWS_PER_PAGE = 10;\n\ninterface State {\n  readonly buffer: KeyedBufferPool<Rdf.Iri, string>;\n  readonly griddleConfig?: GriddleConfig;\n}\n\ninterface ExtendedGriddleConfig extends GriddleConfig {\n  columnMetadata: ReadonlyArray<ExtendedColumnMetadata>;\n}\n\ninterface ExtendedColumnMetadata extends ColumnMetadata {\n  readonly variableName: string | undefined;\n}\n\ninterface RenderingState {\n  readonly showLabels: boolean;\n  readonly preferchLabels: boolean;\n  getLabel(resource: Rdf.Iri): string | undefined;\n}\n\nexport class Table extends Component<TableProps, State> {\n  private readonly cancellation = new Cancellation();\n\n  constructor(props: TableProps, context: any) {\n    super(props, context);\n    this.state = {\n      buffer: new KeyedBufferPool(\n        Immutable.Map(),\n        this.cancellation,\n        (keys) => getLabels(keys.toArray(), { context: this.context.semanticContext }),\n        () => this.forceUpdate()\n      ),\n    };\n  }\n\n  componentDidMount() {\n    this.setState((state) => this.updateStateFromProps(this.props, state));\n  }\n\n  componentWillReceiveProps(nextProps: TableProps) {\n    this.setState((state) => this.updateStateFromProps(nextProps, state));\n  }\n\n  componentWillUnmount() {\n    this.cancellation.cancelAll();\n  }\n\n  private updateStateFromProps(props: TableProps, state: State): State {\n    // set default values for `showLabels` and `prefetchLabels`\n    let showLabels = true;\n    let prefetchLabels = true;\n\n    if (props.layout.isJust) {\n      const layout = props.layout.get();\n      if (layout.showLabels !== undefined) {\n        showLabels = layout.showLabels;\n      }\n      if (layout.prefetchLabels !== undefined) {\n        prefetchLabels = layout.prefetchLabels;\n      }\n    }\n\n    const renderingState: RenderingState = {\n      get showLabels() {\n        return showLabels;\n      },\n      get preferchLabels() {\n        return prefetchLabels;\n      },\n      getLabel: (resourceIri) => {\n        return showLabels && prefetchLabels ? state.buffer.result.get(resourceIri) : undefined;\n      },\n    };\n\n    const griddleConfig = this.buildConfig(props, renderingState);\n\n    if (prefetchLabels) {\n      const newTargets = findReferencedResources(griddleConfig, state.buffer.targets);\n      state.buffer.load(newTargets);\n    }\n\n    return {\n      buffer: state.buffer,\n      griddleConfig,\n    };\n  }\n\n  private buildConfig(config: TableProps, renderingState: RenderingState): ExtendedGriddleConfig {\n    const paginationProps: CustomPaginationProps = {\n      externalCurrentPage: config.currentPage,\n      onPageChange: config.onPageChange,\n    };\n\n    const baseConfig: Partial<GriddleConfig> = {\n      resultsPerPage: config.numberOfDisplayedRows.getOrElse(DEFAULT_ROWS_PER_PAGE),\n      showFilter: true,\n      useGriddleStyles: false,\n      tableClassName: 'table',\n      sortAscendingComponent: createElement('span', { className: 'fa fa-sort-alpha-asc' }),\n      sortDescendingComponent: createElement('span', { className: 'fa fa-sort-alpha-desc' }),\n      useCustomPagerComponent: true,\n      customPagerComponent: Pagination,\n      customPagerComponentOptions: paginationProps,\n      useCustomFilterer: true,\n      customFilterer: makeCellFilterer(renderingState),\n    };\n\n    let griddleConfig = config.data.fold<ExtendedGriddleConfig>(\n      (json: any[]): any => this.getGriddlePropsForFlatDataArray(baseConfig, json, config, renderingState),\n      (res: SparqlClient.SparqlSelectResult) =>\n        this.getGriddlePropsForSparqlResult(baseConfig, res, config, renderingState)\n    );\n\n    // Fix erronous array mutation in Griddle v0.8.2 whn providing customCompareFn with 2 arguments:\n    // https://github.com/GriddleGriddle/Griddle/blob/v0.8.2/scripts/griddle.jsx#L578\n    makeSortNonMutating(griddleConfig.results as Array<unknown>);\n\n    if (config.layout.isJust) {\n      const { options, tupleTemplate } = config.layout.get();\n      griddleConfig = { ...griddleConfig, ...(options as ExtendedColumnMetadata) };\n      if (tupleTemplate.isJust) {\n        griddleConfig = this.useCustomLayout(griddleConfig, tupleTemplate.get(), renderingState);\n      }\n    }\n\n    return griddleConfig;\n  }\n\n  public render() {\n    return createElement(\n      'div',\n      {\n        className: 'researchspace-table-widget-holder',\n      },\n      this.renderTableData()\n    );\n  }\n\n  private renderTableData() {\n    const { buffer, griddleConfig } = this.state;\n    if (buffer.error) {\n      return createElement(ErrorNotification, { errorMessage: buffer.error });\n    } else if (buffer.loading || !griddleConfig) {\n      return createElement(Spinner, {});\n    } else {\n      return createElement(Griddle, griddleConfig);\n    }\n  }\n\n  private getGriddlePropsForSparqlResult(\n    baseConfig: GriddleConfig,\n    data: SparqlClient.SparqlSelectResult,\n    props: TableProps,\n    renderingState: RenderingState\n  ): ExtendedGriddleConfig {\n    const columnsMetadata = this.buildColumnsMetadata(data.head.vars, props, renderingState);\n    return {\n      ...baseConfig,\n      // push empty literals if binding variable does not exist in binding\n      // entry i.e. missing values due to optional\n      results: this.prepareSparqlResultData(data, columnsMetadata),\n      // workaround for https://github.com/GriddleGriddle/Griddle/issues/114\n      columns: _(columnsMetadata).filter('visible').map('columnName').value(),\n      columnMetadata: columnsMetadata,\n    };\n  }\n\n  private getGriddlePropsForFlatDataArray(\n    baseConfig: GriddleConfig,\n    data: any[],\n    props: TableProps,\n    renderingState: RenderingState\n  ): ExtendedGriddleConfig {\n    const heads = _.reduce(data, (union, obj) => _.union(union, Object.keys(obj)), []);\n    const columnsMetadata = this.buildColumnsMetadata(heads, props, renderingState);\n    return {\n      ...baseConfig,\n      // push empty literals if binding variable does not exist in binding\n      // entry i.e. missing values due to optional\n      results: this.prepareFlatData(data, columnsMetadata),\n      // workaround for https://github.com/GriddleGriddle/Griddle/issues/114\n      columns: _(columnsMetadata).filter('visible').map('columnName').value(),\n      columnMetadata: columnsMetadata,\n    };\n  }\n\n  private useCustomLayout(\n    baseConfig: ExtendedGriddleConfig,\n    tupleTemplate: string | undefined,\n    renderingState: RenderingState\n  ): ExtendedGriddleConfig {\n    interface CustomRowProps {\n      data: SparqlClient.Binding;\n      metadataColumns: any[];\n    }\n    const customRowComponent = class extends Component<CustomRowProps, {}> {\n      render() {\n        return createElement(TemplateItem, {\n          template: {\n            source: tupleTemplate !== undefined ? tupleTemplate : 'No Template defined',\n            options: this.props.data,\n          },\n        });\n      }\n    };\n    return {\n      ...baseConfig,\n      useCustomRowComponent: true,\n      customRowComponentClassName: 'griddle-custom-row',\n      customRowComponent,\n    };\n  }\n\n  private prepareFlatData(data: any[], columns: ReadonlyArray<ExtendedColumnMetadata>): any[] {\n    const additionalColumns = this.getAdditionalColumns(columns);\n    return data.map((item) => {\n      for (const column of additionalColumns) {\n        this.defineAdditionalColumnProperty(column, item, '');\n      }\n      return item;\n    });\n  }\n\n  private prepareSparqlResultData(\n    data: SparqlClient.SparqlSelectResult,\n    columns: ReadonlyArray<ExtendedColumnMetadata>\n  ) {\n    const additionalColumns = this.getAdditionalColumns(columns);\n    return data.results.bindings.map((binding) => {\n      for (const column of additionalColumns) {\n        this.defineAdditionalColumnProperty(column, binding, undefined);\n      }\n      return binding;\n    });\n  }\n\n  private buildColumnsMetadata(\n    vars: string[],\n    config: TableProps,\n    renderingState: RenderingState\n  ): ExtendedColumnMetadata[] {\n    // we show all columns from bindings only when we don't specify any column\n    //  configuration in the config\n    if (_.isEmpty(config.columnConfiguration)) {\n      return this.defaultColumnsMetadata(vars, config, renderingState);\n    } else {\n      return this.customColumnsMetadata(config, renderingState);\n    }\n  }\n\n  private defaultColumnsMetadata(\n    vars: string[],\n    config: TableProps,\n    renderingState: RenderingState\n  ): ExtendedColumnMetadata[] {\n    return vars.map(\n      (varName: string, index: number): ExtendedColumnMetadata => {\n        return {\n          displayName: varName,\n          columnName: varName,\n          variableName: varName,\n          visible: true,\n          order: index,\n          customComponent: this.makeCellTemplateComponent(undefined, renderingState),\n          customCompareFn: makeNullableLastComparator(makeCellComparator(renderingState)),\n        };\n      }\n    );\n  }\n\n  private customColumnsMetadata(config: TableProps, renderingState: RenderingState): ExtendedColumnMetadata[] {\n    const ensureUniqueColumnName = makeUniqueColumnNameGenerator();\n    return _.map(\n      config.columnConfiguration,\n      (columnConfig, i): ExtendedColumnMetadata => {\n        const columnName = columnConfig.variableName === undefined ? 'mp-custom-column' : columnConfig.variableName;\n\n        return {\n          // generate unique column name if a column with same name already exists,\n          // otherwise Griddle won't render this column\n          columnName: ensureUniqueColumnName(columnName),\n          displayName: columnConfig.displayName,\n          variableName: columnConfig.variableName,\n          customComponent: this.makeCellComponentClass(columnConfig, renderingState),\n          visible: true,\n          order: i,\n          customCompareFn: makeNullableLastComparator(makeCellComparator(renderingState)),\n        };\n      }\n    );\n  }\n\n  private makeCellComponentClass(columnConfig: TableColumnConfiguration, renderingState: RenderingState) {\n    if (columnConfig.cellComponent) {\n      return columnConfig.cellComponent;\n    } else {\n      return this.makeCellTemplateComponent(\n        columnConfig.cellTemplate !== undefined ? columnConfig.cellTemplate : undefined,\n        renderingState\n      );\n    }\n  }\n\n  private getAdditionalColumns(columns: ReadonlyArray<ExtendedColumnMetadata>) {\n    return columns.filter((c) => c.columnName !== c.variableName);\n  }\n\n  private defineAdditionalColumnProperty(column: ExtendedColumnMetadata, item: any, emptyValue: any) {\n    if (column.columnName !== column.variableName) {\n      if (column.variableName === undefined) {\n        item[column.columnName] = emptyValue;\n      } else {\n        // define a property to return original value for column even\n        // if columnName differs from variableName\n        Object.defineProperty(item, column.columnName, {\n          enumerable: true,\n          get: () => item[column.variableName],\n        });\n      }\n    }\n  }\n\n  private makeCellTemplateComponent(template: string | undefined, renderingState: RenderingState): ComponentClass<any> {\n    const { showLiteralDatatype, linkParams, showCopyToClipboardButton } = this.props;\n    const templateSource = _.isString(template) ? String(template) : undefined;\n    return class extends Component<CellRendererProps, {}> {\n      render(): ReactElement<any> {\n        if (_.isUndefined(templateSource) === false) {\n          return createElement(TemplateItem, {\n            template: {\n              source: templateSource,\n              options: this.props.rowData,\n            },\n          });\n        } else if (isPrimitiveDatatype(this.props.data)) {\n          return createElement('span', {}, this.props.data);\n        } else {\n          const { showLabels, preferchLabels } = renderingState;\n          return createElement(RdfValueDisplay, {\n            data: this.props.data,\n            label: renderingState.getLabel(this.props.data),\n            fetchLabel: showLabels && !preferchLabels,\n            fetchContext: this.context.semanticContext,\n            showLiteralDatatype,\n            linkParams,\n            showCopyToClipboardButton,\n          });\n        }\n      }\n    };\n  }\n}\n\nfunction isPrimitiveDatatype(data: any): boolean {\n  return _.isString(data) || _.isBoolean(data) || _.isNumber(data) || _.isNull(data) || _.isUndefined(data);\n}\n\nfunction makeUniqueColumnNameGenerator() {\n  const usedNames = new Set<string>();\n  return (baseName: string) => {\n    let generatedName = baseName;\n    let index = 1;\n    while (usedNames.has(generatedName)) {\n      generatedName = `__${baseName}-${index}`;\n      index++;\n    }\n    usedNames.add(generatedName);\n    return generatedName;\n  };\n}\n\n/**\n * Creates table row filterer based on whether any own object property\n * of a row data item includes query as a substring ignoring case.\n */\nfunction makeCellFilterer(state: { getLabel(resource: Rdf.Iri): string }) {\n  return <T = unknown>(items: ReadonlyArray<T>, query: string): T[] => {\n    const queryLowercase = query.toLowerCase();\n    return items.filter((item) => {\n      if (typeof item !== 'object') {\n        return false;\n      }\n      for (const key in item) {\n        if (!Object.hasOwnProperty.call(item, key)) {\n          continue;\n        }\n        const value = item[key];\n        if (isPrimitiveDatatype(value)) {\n          if (String(value).toLowerCase().indexOf(queryLowercase) >= 0) {\n            return true;\n          }\n        } else if (value instanceof Rdf.Node) {\n          const label = value.isIri() ? state.getLabel(value) : undefined;\n          if (label && label.toLowerCase().indexOf(queryLowercase) >= 0) {\n            return true;\n          }\n          if (value.value.toLowerCase().indexOf(queryLowercase) >= 0) {\n            return true;\n          }\n        }\n      }\n      return false;\n    });\n  };\n}\n\n/**\n * **This function is exported for tests only**\n */\nexport const _makeCellFilterer = makeCellFilterer;\n\n/**\n * Creates table cell comparator which allows to sort table data based\n * on target column values. This comparator considers prefetched resource labels (if available)\n * and uses XSD datatype to automatically sort numerical columns.\n */\nfunction makeCellComparator(state: { getLabel(resource: Rdf.Iri): string }) {\n  return (a: unknown, b: unknown): number => {\n    if (isPrimitiveDatatype(a) && isPrimitiveDatatype(b)) {\n      return a < b ? -1 : a > b ? 1 : 0;\n    } else if (a instanceof Rdf.Node && b instanceof Rdf.Node) {\n      return compareRdfNodes(a, b, state);\n    } else {\n      const aKind = getCellDataKind(a);\n      const bKind = getCellDataKind(b);\n      return aKind < bKind ? -1 : aKind > bKind ? 1 : 0;\n    }\n  };\n}\n\nfunction makeNullableLastComparator(base: <T>(a: T, b: T) => number) {\n  return (a: unknown, b: unknown) => {\n    const aNull = a === null || a === undefined;\n    const bNull = b === null || b === undefined;\n    return aNull && bNull ? 0 : aNull ? -1 : bNull ? 1 : base(a, b);\n  };\n}\n\n/**\n * **This function is exported for tests only**\n */\nexport const _makeCellComparator = makeCellComparator;\n\nfunction compareRdfNodes(a: Rdf.Node, b: Rdf.Node, state: { getLabel(resource: Rdf.Iri): string }): number {\n  if (a.isLiteral() && b.isLiteral()) {\n    if (xsd.NUMERIC_TYPES.has(a.datatype) && xsd.NUMERIC_TYPES.has(b.datatype)) {\n      const aNumeric = Number(a.value);\n      const bNumeric = Number(b.value);\n      if (!Number.isNaN(aNumeric) && !Number.isNaN(bNumeric)) {\n        return aNumeric < bNumeric ? -1 : aNumeric > bNumeric ? 1 : 0;\n      }\n    }\n  }\n\n  const aValue = (a.isIri() && state.getLabel(a)) || a.value;\n  const bValue = (b.isIri() && state.getLabel(b)) || b.value;\n  return aValue.localeCompare(bValue);\n}\n\nfunction getCellDataKind(data: unknown): number {\n  return isPrimitiveDatatype(data) ? 0 : data instanceof Rdf.Node ? 1 : /* other kind */ 2;\n}\n\nconst NON_MUTATING_ARRAY_SORT = function <T>(this: Array<T>, comparator: (a: T, b: T) => number): Array<T> {\n  const clone = [...this];\n  clone.sort(comparator);\n  makeSortNonMutating(clone);\n  return clone;\n};\n\nfunction makeSortNonMutating<T>(arr: Array<T>): void {\n  const sort: Array<T>['sort'] = NON_MUTATING_ARRAY_SORT;\n  Object.defineProperty(arr, 'sort', {\n    enumerable: false,\n    value: sort,\n  });\n}\n\nfunction findReferencedResources(builtConfig: ExtendedGriddleConfig, alreadyFetching: Immutable.Set<Rdf.Iri>) {\n  return Immutable.Set<Rdf.Iri>().withMutations((set) => {\n    for (const item of builtConfig.results) {\n      for (const column of builtConfig.columnMetadata) {\n        if (!column.variableName) {\n          continue;\n        }\n        const columnValue = item[column.variableName];\n        if (columnValue instanceof Rdf.Iri && !alreadyFetching.has(columnValue)) {\n          set.add(columnValue);\n        }\n      }\n    }\n  });\n}\n\nclass KeyedBufferPool<K, V> {\n  private activeCount = 0;\n  private _targets: Immutable.Set<K>;\n  private _result: Immutable.Map<K, V>;\n  private _error: unknown;\n\n  constructor(\n    initialValue: Immutable.Map<K, V>,\n    private cancellation: Cancellation,\n    private onLoad: (keys: Immutable.Set<K>) => Kefir.Property<Immutable.Map<K, V>>,\n    private onCompleted: () => void\n  ) {\n    this._targets = initialValue.keySeq().toSet();\n    this._result = initialValue;\n  }\n\n  get targets() {\n    return this._targets;\n  }\n  get result() {\n    return this._result;\n  }\n  get error() {\n    return this._error;\n  }\n\n  get loading() {\n    return this.activeCount > 0;\n  }\n\n  load(keys: Immutable.Set<K>): void {\n    if (keys.size === 0) {\n      return;\n    }\n    this.activeCount++;\n    this._targets = this._targets.merge(keys);\n    this.cancellation.map(this.onLoad(keys)).observe({\n      value: (value) => {\n        this._result = this._result.merge(value);\n      },\n      error: (error) => {\n        this._error = error;\n      },\n      end: () => {\n        this.activeCount--;\n        if (this.activeCount === 0 && !this.cancellation.aborted) {\n          this.onCompleted();\n        }\n      },\n    });\n  }\n}\n\nexport default Table;\n","/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { Component } from 'react';\nimport * as D from 'react-dom-factories';\n\ninterface GriddlePaginationProps {\n  maxPage: number;\n  currentPage: number;\n  setPage: (pageN: number) => void;\n  previous: () => void;\n  next: () => void;\n}\n\nexport interface CustomPaginationProps {\n  externalCurrentPage?: number;\n  onPageChange?: (newPage: number) => void;\n}\n\nexport type PaginationProps = GriddlePaginationProps & CustomPaginationProps;\n\nexport class Pagination extends Component<PaginationProps, {}> {\n  constructor(props) {\n    super(props);\n  }\n\n  static defaultProps = {\n    maxPage: 0,\n    currentPage: 0,\n  };\n\n  componentDidMount() {\n    this.updateCurrentPageIfRequested(this.props);\n  }\n\n  componentWillUpdate(nextProps: PaginationProps) {\n    if (this.props.onPageChange && nextProps.externalCurrentPage !== this.props.externalCurrentPage) {\n      // update page only in controlled mode\n      this.updateCurrentPageIfRequested(nextProps);\n    }\n  }\n\n  private updateCurrentPageIfRequested(props: PaginationProps) {\n    const shouldUpdatePage =\n      typeof props.externalCurrentPage === 'number' && props.externalCurrentPage !== props.currentPage;\n\n    if (shouldUpdatePage) {\n      this.setPage(props.externalCurrentPage);\n    }\n  }\n\n  pageChange = (event) => {\n    this.setPage(parseInt(event.target.getAttribute('data-value')));\n  };\n\n  private setPage(newPage: number) {\n    this.props.setPage(newPage);\n    if (this.props.onPageChange) {\n      this.props.onPageChange(newPage);\n    }\n  }\n\n  render() {\n    if (this.props.maxPage > 1) {\n      var previous = D.li(\n        {\n          className: this.props.currentPage == 0 ? 'disabled' : '',\n        },\n        D.a(\n          {\n            onClick: this.props.previous,\n          },\n          D.span({}, '\\xAB')\n        )\n      );\n\n      var next = D.li(\n        {\n          className: this.props.currentPage == this.props.maxPage - 1 ? 'disabled' : '',\n        },\n        D.a(\n          {\n            onClick: this.props.next,\n          },\n          D.span({}, '\\xBB')\n        )\n      );\n\n      var startIndex = Math.max(this.props.currentPage - 5, 0);\n      var endIndex = Math.min(startIndex + 11, this.props.maxPage);\n\n      if (this.props.maxPage >= 11 && endIndex - startIndex <= 10) {\n        startIndex = endIndex - 11;\n      }\n\n      var options = [];\n      for (var i = startIndex; i < endIndex; i++) {\n        var selected = this.props.currentPage == i ? 'active' : '';\n        options.push(\n          D.li(\n            {\n              key: i,\n              className: selected,\n            },\n            D.a({ 'data-value': i, onClick: this.pageChange } as any, i + 1)\n          )\n        );\n      }\n\n      return D.nav({}, D.ul({ className: 'pagination' }, previous, options, next));\n    } else {\n      return D.nav({});\n    }\n  }\n}\n","/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\nimport * as Kefir from 'kefir';\n\nimport { Rdf } from 'platform/api/rdf';\nimport { ResourceLink } from 'platform/api/navigation/components';\nimport { SparqlUtil, QueryContext } from 'platform/api/sparql';\nimport { getLabel } from 'platform/api/services/resource-label';\n\nimport { CopyToClipboardComponent } from 'platform/components/copy-to-clipboard';\n\nexport interface RdfValueDisplayProps {\n  data: Rdf.Node;\n  className?: string;\n  label?: string;\n  fetchLabel?: boolean;\n  fetchContext?: QueryContext;\n  showLiteralDatatype?: boolean;\n  linkParams?: {};\n  showCopyToClipboardButton?: boolean;\n}\n\ninterface State {\n  readonly label?: string;\n}\n\nconst NON_BREAKABLE_SPACE = '\\xa0';\n\nexport class RdfValueDisplay extends React.Component<RdfValueDisplayProps, State> {\n  private subscription: Kefir.Subscription | undefined;\n\n  constructor(props: RdfValueDisplayProps) {\n    super(props);\n    this.state = { label: props.label };\n  }\n\n  componentDidMount() {\n    this.fetchLabelForIri(this.props);\n  }\n\n  componentWillReceiveProps(nextProps: RdfValueDisplayProps) {\n    if (!nextProps.data.equals(this.props.data) || nextProps.fetchLabel !== this.props.fetchLabel) {\n      this.fetchLabelForIri(nextProps);\n    }\n  }\n\n  fetchLabelForIri(props: RdfValueDisplayProps) {\n    const node = props.data;\n    if (node instanceof Rdf.Iri) {\n      if (this.subscription) {\n        this.subscription.unsubscribe();\n        this.subscription = undefined;\n      }\n      if (props.label === undefined && props.fetchLabel) {\n        // display non-breakable space instead of nothing to\n        // prevent vertical size changes in most circumstances\n        this.setState({ label: NON_BREAKABLE_SPACE });\n        this.subscription = getLabel(node, { context: props.fetchContext }).observe({\n          value: (label) => this.setState({ label }),\n          error: () => this.setState({ label: node.value }),\n        });\n      } else {\n        this.setState({ label: props.label });\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n      this.subscription = undefined;\n    }\n  }\n\n  render() {\n    const { className } = this.props;\n    const { label } = this.state;\n    const displayValue = renderRdfNode(this.props, label);\n    return <span className={className}>{displayValue}</span>;\n  }\n}\n\nfunction renderRdfNode(props: RdfValueDisplayProps, label: string | undefined): JSX.Element | string | undefined {\n  const { data } = props;\n  if (data.isIri()) {\n    const content = typeof label === 'string' ? label : data.value;\n    const resourceLink = (\n      <ResourceLink\n        className={props.className}\n        data-rdfa-about={data.value}\n        resource={data}\n        title={content}\n        params={props.linkParams}\n      >\n        {content}\n      </ResourceLink>\n    );\n    if (!props.showCopyToClipboardButton) {\n      return resourceLink;\n    }\n    return (\n      <span>\n        {resourceLink}\n        <CopyToClipboardComponent text={data.value}>\n          <button className=\"btn btn-link btn-xs\" title=\"Copy IRI\">\n            <i className=\"fa fa-clipboard text-muted\"></i>\n          </button>\n        </CopyToClipboardComponent>\n      </span>\n    );\n  } else if (data.isLiteral()) {\n    const dataType = props.showLiteralDatatype ? (\n      <i>{` (${SparqlUtil.compactIriUsingPrefix(data.datatype)})`}</i>\n    ) : undefined;\n    return (\n      <span>\n        {data.value}\n        {dataType}\n      </span>\n    );\n  } else if (data.isBnode()) {\n    return data.value;\n  } else {\n    return null;\n  }\n}\n"],"sourceRoot":""}