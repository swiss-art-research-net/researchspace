{"version":3,"sources":["webpack:///./src/main/web/components/events/EventTargetTemplateRender.tsx"],"names":["props","context","cancellation","Cancellation","state","key","data","componentDidMount","this","map","listen","eventType","BuiltInEvents","ComponentTemplateUpdate","target","id","observe","value","setState","prevState","componentWillUnmount","cancelAll","render","template","TemplateItem","source","options","Component","EventTargetTemplateRender"],"mappings":"6IAkBA,OAEA,QACA,SACA,SACA,SAsCA,cAGE,mCAAYA,EAAcC,GAA1B,MACE,YAAMD,EAAOC,IAAQ,K,OAHN,EAAAC,aAAe,IAAI,EAAAC,aAIlC,EAAKC,MAAQ,CACXC,IAAK,EACLC,KAAM,I,EA0BZ,OAjC+C,yCAW7C,oCAAAC,kBAAA,sBACEC,KAAKN,aACFO,IACC,EAAAC,OAAO,CACLC,UAAW,EAAAC,cAAcC,wBACzBC,OAAQN,KAAKR,MAAMe,MAGtBC,QAAQ,CACPC,MAAO,SAAC,G,IAAEX,EAAA,EAAAA,KAAW,SAAKY,UAAS,SAACC,GAA4B,OAAGd,IAAKc,EAAUd,IAAM,EAAGC,KAAI,UAIrG,oCAAAc,qBAAA,WACEZ,KAAKN,aAAamB,aAGpB,oCAAAC,OAAA,WACU,iBAAAC,SACF,aAAElB,EAAA,EAAAA,IAAK,IAAAC,KACb,OAAO,gBAAC,EAAAkB,aAAY,CAACnB,IAAKA,EAAKkB,SAAU,CAAEE,OAAM,EAAEC,QAAO,MAE9D,0BAjCA,CAA+C,EAAAC,WAAlC,EAAAC,4BAmCb,UAAeA","file":"mp-event-target-template-render-7bb3af56736f3241ff8f.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\n\nimport { Component } from 'platform/api/components';\nimport { listen, BuiltInEvents } from 'platform/api/events';\nimport { Cancellation } from 'platform/api/async/Cancellation';\nimport { TemplateItem } from 'platform/components/ui/template';\n\nexport interface EventTargetTemplateRenderConfig {\n  /**\n   * Identifier which will be used as event target id.\n   */\n  id: string;\n  /**\n   * <semantic-link uri='http://help.researchspace.org/resource/FrontendTemplating'>Template</semantic-link> that will be rendered with data passed as context variables.\n   */\n  template: string;\n}\ntype Props = EventTargetTemplateRenderConfig;\n\nexport interface State {\n  key?: number;\n  data?: object;\n}\n\n/**\n * Updates the template component and passes it new properties.\n *\n * @example\n * <mp-event-trigger id='event-trigger' type='Component.TemplateUpdate' targets='[\"event-target\"]'\n *     data='{\"iri\": \"http://example.com/resource\"}'>\n *     <button>Update</button>\n * </mp-event-trigger>\n *\n * <mp-event-target-template-render id='event-target' template='{{> template}}'>\n *     <template id='template'>\n *        <div>\n *          {{#if iri}}\n *            <mp-label iri='{{iri}}'></mp-label>\n *          {{/if}}\n *        </div>\n *     </template>\n * </mp-event-target-template-render>\n */\nexport class EventTargetTemplateRender extends Component<Props, State> {\n  private readonly cancellation = new Cancellation();\n\n  constructor(props: Props, context: any) {\n    super(props, context);\n    this.state = {\n      key: 0,\n      data: {},\n    };\n  }\n\n  componentDidMount() {\n    this.cancellation\n      .map(\n        listen({\n          eventType: BuiltInEvents.ComponentTemplateUpdate,\n          target: this.props.id,\n        })\n      )\n      .observe({\n        value: ({ data }) => this.setState((prevState: State): State => ({ key: prevState.key + 1, data })),\n      });\n  }\n\n  componentWillUnmount() {\n    this.cancellation.cancelAll();\n  }\n\n  render() {\n    const { template: source } = this.props;\n    const { key, data: options } = this.state;\n    return <TemplateItem key={key} template={{ source, options }} />;\n  }\n}\n\nexport default EventTargetTemplateRender;\n"],"sourceRoot":""}