{"version":3,"sources":["webpack:///./src/main/web/components/ui/print/PrintComponent.tsx"],"names":["props","context","observer","MutationObserver","_","debounce","setStyles","loadHtml2Pdf","htmlToPdf","then","library","html2pdf","setState","html2pdfLoaded","setPrintSections","printSections","Kefir","sequentially","pages","map","page","Rdf","iri","flatMap","loadAndParseTemplate","onValue","content","push","findPrintSections","onEnd","concatPrintSections","concat","apply","sections","mergePrintSections","section","isSelected","defaultPrint","groups","forEach","id","group","find","first","length","label","repository","Maybe","fromNullable","semanticContext","getOrElse","undefined","PageService","loadRenderedTemplate","fromPromise","ModuleRegistry","parseHtmlToReact","templateHtml","D","div","toProperty","componentHasType","PrintSectionComponent","isValidChild","children","Children","child","document","head","innerHTML","styles","Array","isArray","filter","item","type","handleCheck","index","e","state","updatedSection","target","checked","newSections","splice","handlePrint","iframe","findDOMNode","frameRef","contentWindow","execCommand","print","handleExportAsPDF","getIframeBody","onFrameMount","componentDidMount","this","querySelector","observe","subtree","characterData","childList","componentWillUnmount","disconnect","contentDocument","render","aside","preview","selectedSections","key","b","block","className","ref","toString","checkboxlist","input","value","onChange","bind","button","onClick","title","style","Component","PrintComponent"],"mappings":"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","file":"mp-print-0e8d8c2e7ae2c4f9d6e5.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\nimport { ReactNode, ReactElement, Children, CSSProperties } from 'react';\nimport * as D from 'react-dom-factories';\nimport * as Maybe from 'data.maybe';\nimport { findDOMNode } from 'react-dom';\nimport Frame from 'react-frame-component';\nimport * as Kefir from 'kefir';\nimport * as block from 'bem-cn';\nimport * as _ from 'lodash';\n\nimport { Rdf } from 'platform/api/rdf';\nimport { PageService } from 'platform/api/services/page';\nimport { ModuleRegistry } from 'platform/api/module-loader';\nimport { Component } from 'platform/api/components';\nimport { isValidChild, componentHasType } from 'platform/components/utils';\n\nimport { PrintSectionComponent, factory as PrintSectionComponentFactory } from './PrintSectionComponent';\n\nimport './print-component.scss';\n\nconst DEFAULT_CLASS = 'mp-print';\n\nexport interface Props {\n  /**\n   * Array of page IRIs\n   */\n  pages: string[];\n  /**\n   * Custom class name\n   */\n  className?: string;\n  /**\n   * Custom styles\n   */\n  style?: CSSProperties;\n\n  /**\n   * Options for client-side pdf generation.\n   * Only if set, the export button will be displayed.\n   * Example:\n   * ```\n   * html-to-pdf='{\n   *    \"filename\":\"test-[[this.label]].pdf\",\n   *   \"margin\": 0,\n   *   \"image\": {\"type\": \"jpeg\", \"quality\": 0.98},\n   *   \"html2canvas\": {\"dpi\": 192, \"letterRendering\": true},\n   *   \"jsPDF\": {\"unit\": \"in\", \"format\": \"letter\", \"orientation\": \"portrait\"}\n   * }'\n   * ```\n   */\n  htmlToPdf: {};\n}\n\nexport interface State {\n  sections?: ReadonlyArray<Section>;\n  styles?: ReadonlyArray<ReactElement<any>>;\n  html2pdfLoaded: boolean;\n}\n\ninterface Section {\n  readonly content: ReactElement<any>;\n  readonly isSelected: boolean;\n}\n\n/**\n * This component finds print sections in pages and renders them into a iframe.\n * Iframe content is exported to PDF by the browsers print functionality.\n *\n * Component can be used together with semantic-context, to specify the repository\n * that should be used for evaluation of `pages`.\n *\n * @example\n * <mp-print-section id=\"1\" label=\"First Section\">\n *     Section 1\n * </mp-print-section>\n * <mp-print-section id=\"1\" label=\"Second Section\">\n *     Section 2<br>\n *     This will be merged for printing with section one.\n * </mp-print-section>\n * <mp-print-section id=\"3\" label=\"Third Section\">\n *     Section 3\n * </mp-print-section>\n *\n * <mp-overlay-dialog title=\"Print Preview\" type=\"lightbox\">\n *     <mp-overlay-dialog-trigger>\n *         <button>Print Page</button>\n *     </mp-overlay-dialog-trigger>\n *     <mp-overlay-dialog-content>\n *         <mp-print pages='[\"[[this]]\"]'></mp-print>\n *     </mp-overlay-dialog-content>\n * </mp-overlay-dialog>\n */\nexport class PrintComponent extends Component<Props, State> {\n  // c.f. comment in componentDidMount\n  observer = new MutationObserver(_.debounce(() => this.setStyles(), 500));\n  private html2pdf;\n\n  private frameRef?: Frame | null;\n\n  constructor(props: Props, context) {\n    super(props, context);\n    this.state = {\n      sections: [],\n      styles: [],\n      html2pdfLoaded: false,\n    };\n  }\n\n  componentDidMount() {\n    this.loadHtml2Pdf();\n    this.setPrintSections();\n\n    // VD-257: setup a mutation overserver, to observe any changes to styles\n    // i.e. for heavy libraries like highcharts the setStyle call at the setState callback\n    // of setPrintSections might be too early and as such styles for highcharts might not be added\n    // to the print iframe\n    const target = document.querySelector('head');\n    this.observer.observe(target, { subtree: false, characterData: false, childList: true });\n  }\n\n  componentWillUnmount() {\n    this.observer.disconnect();\n  }\n\n  private loadHtml2Pdf = () => {\n    if (this.props.htmlToPdf) {\n      import('html2pdf.js').then((library) => {\n        this.html2pdf = library;\n        this.setState({ html2pdfLoaded: true });\n      });\n    }\n  };\n\n  private setPrintSections = () => {\n    const printSections = [];\n\n    Kefir.sequentially(0, this.props.pages)\n      .map((page) => Rdf.iri(page))\n      .flatMap(this.loadAndParseTemplate)\n      .onValue((content) => {\n        printSections.push(this.findPrintSections(content));\n      })\n      .onEnd(() => {\n        const concatPrintSections = [].concat.apply([], printSections);\n        const mergedPrintSections = this.mergePrintSections(concatPrintSections);\n        const sections = mergedPrintSections.map((section) => {\n          return {\n            content: section,\n            isSelected: section.props.defaultPrint,\n          };\n        });\n\n        this.setState(\n          {\n            sections: sections,\n          },\n          this.setStyles\n        );\n      });\n  };\n\n  private mergePrintSections = (sections) => {\n    const groups: { id: string; sections: ReactElement<any>[] }[] = [];\n\n    sections.forEach((section) => {\n      const id = section.props.id;\n\n      const group = _.find(groups, { id });\n\n      if (group) {\n        group.sections.push(section);\n      } else {\n        groups.push({ id, sections: [section] });\n      }\n    });\n\n    return groups.map((group) => {\n      const first = group.sections[0];\n\n      if (group.sections.length === 1) {\n        return first;\n      }\n\n      const { id, label, defaultPrint } = first.props;\n\n      return PrintSectionComponentFactory({ id, label, defaultPrint }, group.sections);\n    });\n  };\n\n  private loadAndParseTemplate = (iri: Rdf.Iri): Kefir.Property<ReactNode> => {\n    const repository = Maybe.fromNullable(this.context.semanticContext)\n      .map((context) => context.repository)\n      .getOrElse(undefined);\n\n    return PageService.loadRenderedTemplate(iri, iri, { repository })\n      .flatMap<ReactNode>((page) =>\n        Kefir.fromPromise(\n          ModuleRegistry.parseHtmlToReact(\n            `\n              <div>\n                ${page.templateHtml}\n              </div>\n            `\n          )\n        ).map<ReactNode>((content) => D.div({}, content))\n      )\n      .toProperty();\n  };\n\n  private findPrintSections = (content: ReactNode, printSections?: ReactElement<any>[]): Array<ReactElement<any>> => {\n    if (!printSections) {\n      printSections = [];\n    }\n\n    if (!content) {\n      return null;\n    }\n\n    if (componentHasType(content, PrintSectionComponent)) {\n      printSections.push(content);\n    } else if (isValidChild(content) && content.props.children) {\n      Children.forEach(content.props.children, (child) => {\n        this.findPrintSections(child, printSections);\n      });\n    }\n\n    return printSections;\n  };\n\n  private setStyles = () => {\n    ModuleRegistry.parseHtmlToReact(document.head.innerHTML).then((head) => {\n      head = Array.isArray(head) ? head : [head];\n      const styles = head.filter((item) => {\n        return item.type === 'link' || item.type === 'style';\n      });\n      this.setState({\n        styles: styles,\n      });\n    });\n  };\n\n  private handleCheck = (index: number, e: React.ChangeEvent<HTMLInputElement>) => {\n    const sections = this.state.sections;\n    const updatedSection: Section = {\n      ...sections[index],\n      isSelected: e.target.checked,\n    };\n    const newSections = [...sections];\n    newSections.splice(index, 1, updatedSection);\n    this.setState({ sections: newSections });\n  };\n\n  private handlePrint = () => {\n    const iframe = findDOMNode(this.frameRef) as HTMLIFrameElement;\n\n    // print iframe\n    const print = iframe.contentWindow.document.execCommand('print', false, null); // for IE\n    if (!print) {\n      iframe.contentWindow.print();\n    }\n  };\n\n  private getIframeBody(iframe: any) {\n    const iframeDocument = iframe.contentDocument || iframe.contentWindow.document;\n    return iframeDocument.querySelector('body');\n  }\n\n  private handleExportAsPDF = () => {\n    const iframe = findDOMNode(this.frameRef) as HTMLIFrameElement;\n    const content = this.getIframeBody(iframe);\n    this.html2pdf(content, this.props.htmlToPdf);\n  };\n\n  public render() {\n    let aside: ReactElement<any>;\n    let preview: ReactElement<any>;\n\n    const sections = this.state.sections;\n\n    const selectedSections = sections\n      .filter((section) => {\n        return section.isSelected;\n      })\n      .map((section) => {\n        return D.div({ key: section.content.props.id }, section.content);\n      });\n\n    const b = block(this.props.className || DEFAULT_CLASS);\n\n    const iframe = (\n      <Frame\n        ref={this.onFrameMount}\n        className={b('iframe').toString()}\n        head={\n          <div>\n            {this.state.styles}\n            <style>{'.hidden-print {display: none} .frame-content {padding: 20px}'}</style>\n          </div>\n        }\n      >\n        {selectedSections}\n      </Frame>\n    );\n\n    if (sections.length > 1) {\n      const checkboxlist = sections.map((section, index) => {\n        const { id, label } = section.content.props;\n        return D.div(\n          { className: 'checkbox', key: id },\n          D.label(\n            {},\n            D.input({\n              type: 'checkbox',\n              value: label,\n              checked: section.isSelected,\n              onChange: this.handleCheck.bind(this, index),\n            }),\n            label\n          )\n        );\n      });\n\n      aside = D.div(\n        { className: 'panel panel-default ' + b('select').toString() },\n        D.div({ className: 'panel-heading ' + b('select-header').toString() }, 'Print Sections'),\n        D.div({ className: 'panel-body ' + b('select-body').toString() }, checkboxlist),\n        D.div(\n          { className: 'panel-footer ' + b('select-footer').toString() },\n          D.button(\n            {\n              className: 'btn btn-primary',\n              onClick: this.handlePrint,\n              title:\n                'Recommended option for native or PDF printing. Uses native browser print ' +\n                'functionlity. Requires Unix, Mac, Windows >10 or a PDF Print Driver being installed.',\n            },\n            'Print PDF'\n          ),\n          ' ',\n          this.props.htmlToPdf && this.state.html2pdfLoaded\n            ? D.button(\n                {\n                  className: 'btn btn-primary',\n                  onClick: this.handleExportAsPDF,\n                  title: 'Client-side export to PDF. Only recommended if no PDF print driver' + 'is available.',\n                },\n                'Export as PDF'\n              )\n            : null\n        )\n      );\n\n      preview = iframe;\n    } else {\n      preview = D.div(\n        { className: b('body-inner').toString() },\n        D.div({ className: b('body-content').toString() }, iframe),\n        D.div(\n          { className: 'panel-footer ' + b('body-footer').toString() },\n          D.button({ className: 'btn btn-primary', onClick: this.handlePrint }, 'Print'),\n          ' ',\n          D.button({ className: 'btn btn-primary', onClick: this.handleExportAsPDF }, 'Export as PDF')\n        )\n      );\n    }\n\n    return D.div(\n      { className: b('').toString(), style: this.props.style },\n      D.div(\n        { className: b('body').toString() },\n        D.div({ className: 'panel panel-default ' + b('preview').toString() }, preview),\n        aside\n      )\n    );\n  }\n\n  private onFrameMount = (frameRef: Frame | null) => {\n    this.frameRef = frameRef;\n  };\n}\n\nexport default PrintComponent;\n"],"sourceRoot":""}