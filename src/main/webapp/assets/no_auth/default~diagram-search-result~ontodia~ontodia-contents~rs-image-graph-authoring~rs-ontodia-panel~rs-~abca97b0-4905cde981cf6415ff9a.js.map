{"version":3,"sources":["webpack:///./src/main/web/components/3-rd-party/ontodia/OntodiaEvents.ts"],"names":["event","EventMaker","DiagramSaved","DiagramChanged","DiagramIsDirty","CreateElement","EditElement","DeleteElement","FocusOnElement"],"mappings":"iIAmBA,IAyFMA,EAzFN,OAyF4CC,WAE/B,EAAAC,aAAeF,EAAM,wBACrB,EAAAG,eAAiBH,EAAM,0BACvB,EAAAI,eAAiBJ,EAAM,0BAEvB,EAAAK,cAAgBL,EAAM,yBACtB,EAAAM,YAAcN,EAAM,uBACpB,EAAAO,cAAgBP,EAAM,yBAEtB,EAAAQ,eAAiBR,EAAM","file":"default~diagram-search-result~ontodia~ontodia-contents~rs-image-graph-authoring~rs-ontodia-panel~rs-~abca97b0-4905cde981cf6415ff9a.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { EventMaker } from 'platform/api/events';\n\n// Workaround: 'typescript-json-schema' doesn't support void type.\nexport type OpaqueElementModel = {};\nexport type OpaqueDiagramModel = {};\nexport type OpaqueAuthoringState = {};\nexport type OpaqueTemporaryState = {};\n\nexport interface OntodiaEventData {\n  /**\n   * Event which should be triggered when diagram has been saved.\n   */\n  'Ontodia.DiagramSaved': {\n    /**\n     * Saved diagram IRI.\n     */\n    resourceIri: string;\n  };\n  /**\n   * Event which should be triggered when diagram has been changed.\n   */\n  'Ontodia.DiagramChanged': {\n    model: OpaqueDiagramModel;\n    authoringState: OpaqueAuthoringState;\n    temporaryState: OpaqueTemporaryState;\n  };\n  /**\n   * Event which should be triggered when diagram has been changed.\n   */\n  'Ontodia.DiagramIsDirty': {\n    /**\n     * Equals to `true` if a diagram has been changed, otherwise equals to `false`.\n     */\n    hasChanges: boolean;\n  };\n  /**\n   * Event which should be triggered to create a new entity and connections from it to target entities.\n   */\n  'Ontodia.CreateElement': {\n    /**\n     * New entity data.\n     */\n    elementData: OpaqueElementModel;\n    /**\n     * New connections from new entity to target entities.\n     */\n    targets: ReadonlyArray<{\n      /**\n       * Target IRI.\n       */\n      targetIri: string;\n      /**\n       * New connection IRI.\n       */\n      linkTypeId: string;\n    }>;\n  };\n  /**\n   * Event which should be triggered to edit an entity.\n   */\n  'Ontodia.EditElement': {\n    /**\n     * IRI of an entity to be edited.\n     */\n    targetIri: string;\n    /**\n     * New data of an entity.\n     */\n    elementData: OpaqueElementModel;\n  };\n  /**\n   * Event which should be triggered to delete an entity.\n   */\n  'Ontodia.DeleteElement': {\n    /**\n     * IRI of an entity to be deleted.\n     */\n    iri: string;\n  };\n  /**\n   * Event which should be triggered to focus on an element.\n   */\n  'Ontodia.FocusOnElement': {\n    /**\n     * IRI of an entity to be focused on.\n     */\n    iri: string;\n  };\n}\nconst event: EventMaker<OntodiaEventData> = EventMaker;\n\nexport const DiagramSaved = event('Ontodia.DiagramSaved');\nexport const DiagramChanged = event('Ontodia.DiagramChanged');\nexport const DiagramIsDirty = event('Ontodia.DiagramIsDirty');\n\nexport const CreateElement = event('Ontodia.CreateElement');\nexport const EditElement = event('Ontodia.EditElement');\nexport const DeleteElement = event('Ontodia.DeleteElement');\n\nexport const FocusOnElement = event('Ontodia.FocusOnElement');\n"],"sourceRoot":""}