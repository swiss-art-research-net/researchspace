{"version":3,"sources":["webpack:///./src/main/web/components/ldp/CreateNewResource.ts"],"names":["graph","iri","triple","literal","rdfs","rdf","createResource","name","LdpService","props","container","context","semanticContext","addResource","type","label","maybe","Just","onSave","render","child","Children","only","this","children","onClick","getOverlaySystem","show","createElement","CreateResourceDialog","onHide","hide","title","placeholder","D","div","cloneElement","Component","component","CreateNewResourceComponent","factory","createFactory"],"mappings":"6IAmBA,OACA,QACA,QAGA,QACA,QACA,SACA,SACA,UAEQA,EAAA,MAAAA,MAAOC,EAAA,MAAAA,IAAKC,EAAA,MAAAA,OAAQC,EAAA,MAAAA,QACpBC,EAAA,eAAAA,KAAMC,EAAA,eAAAA,IAEd,QAkBA,sG,OA2BU,EAAAC,eAAiB,SAACC,GACxB,OAAO,IAAI,EAAAC,WAAW,EAAKC,MAAMC,UAAW,EAAKC,QAAQC,iBAAiBC,YACxEb,EAAM,CAACE,EAAOD,EAAI,IAAKI,EAAIS,KAAMb,EAAI,EAAKQ,MAAMK,OAAQZ,EAAOD,EAAI,IAAKG,EAAKW,MAAOZ,EAAQI,MAC5FS,EAAMC,KAAKV,KASP,EAAAW,OAAS,SAACX,GAChB,OAAO,EAAKD,eAAeC,I,EAE/B,OA1CyC,0CAChC,qCAAAY,OAAP,sBACQC,EAAQ,EAAAC,SAASC,KAAKC,KAAKd,MAAMe,UACjCf,EAAQ,CACZgB,QAAS,WAEP,EAAAC,mBAAmBC,KADD,sBAGhB,EAAAC,cAAc,EAAAC,qBAAsB,CAClCX,OAAQ,EAAKA,OACbY,OAAQ,WAAM,SAAAJ,mBAAmBK,KALnB,wBAMdJ,MAAM,EACNK,MAAO,EAAKvB,MAAMuB,MAClBC,YAAa,EAAKxB,MAAMwB,iBAMhC,OAAOC,EAAEC,IAAI,GAAI,EAAAC,aAAahB,EAAOX,KAuBzC,2BA1CA,CAAyC,EAAA4B,WA6C5B,EAAAC,UAAYC,EACZ,EAAAC,QAAU,EAAAC,cAAc,EAAAH,WACrC,UAAe,EAAAA","file":"mp-ldp-create-new-resource-action-6293af12651cc1d60150.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { ReactElement, Children, Props as ReactProps, cloneElement, createFactory, createElement } from 'react';\nimport * as D from 'react-dom-factories';\nimport * as maybe from 'data.maybe';\nimport * as Kefir from 'kefir';\n\nimport { Component } from 'platform/api/components';\nimport { Rdf, vocabularies } from 'platform/api/rdf';\nimport { LdpService } from 'platform/api/services/ldp';\nimport { getOverlaySystem } from 'platform/components/ui/overlay';\nimport { CreateResourceDialog } from './CreateResourceDialog';\n\nconst { graph, iri, triple, literal } = Rdf;\nconst { rdfs, rdf } = vocabularies;\n\nimport './create-ldp-resource.scss';\n\nexport interface CreateNewResourceProps extends ReactProps<CreateNewResourceComponent> {\n  // initial title for created object\n  title?: string;\n  // prompt to enter title\n  placeholder?: string;\n  // IRI of LDP container to create resource within\n  container: string;\n  // IRI of resource type\n  type: string;\n}\n\n/**\n * Creates new LDP resource. Currently hard-coded usage of rdfs:label to represent object title.\n * Next improvements are to allow placing a semantic form for definition of resource fields and probably sparql construct\n * parametrized with entered values to actually persist them.\n */\nclass CreateNewResourceComponent extends Component<CreateNewResourceProps, {}> {\n  public render() {\n    const child = Children.only(this.props.children) as ReactElement<any>;\n    const props = {\n      onClick: () => {\n        const dialogRef = 'create-new-resource';\n        getOverlaySystem().show(\n          dialogRef,\n          createElement(CreateResourceDialog, {\n            onSave: this.onSave,\n            onHide: () => getOverlaySystem().hide(dialogRef),\n            show: true,\n            title: this.props.title,\n            placeholder: this.props.placeholder,\n          })\n        );\n      },\n    };\n\n    return D.div({}, cloneElement(child, props));\n  }\n\n  /**\n   * Creates graph of persisted resource.\n   * @param name\n   * @returns {Kefir.Property<Rdf.Iri>}\n   */\n  private createResource = (name: string): Kefir.Property<Rdf.Iri> => {\n    return new LdpService(this.props.container, this.context.semanticContext).addResource(\n      graph([triple(iri(''), rdf.type, iri(this.props.type)), triple(iri(''), rdfs.label, literal(name))]),\n      maybe.Just(name)\n    );\n  };\n\n  /**\n   * Callback for dialog approval\n   * @param name\n   * @returns {Property<Property<undefined>>}\n   */\n  private onSave = (name: string): Kefir.Property<any> => {\n    return this.createResource(name);\n  };\n}\n\nexport type component = CreateNewResourceComponent;\nexport const component = CreateNewResourceComponent;\nexport const factory = createFactory(component);\nexport default component;\n"],"sourceRoot":""}