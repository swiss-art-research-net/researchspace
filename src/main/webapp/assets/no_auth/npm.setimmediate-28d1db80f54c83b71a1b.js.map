{"version":3,"sources":["webpack:///./node_modules/setimmediate/setImmediate.js"],"names":["global","setImmediate","registerImmediate","nextHandle","tasksByHandle","currentlyRunningATask","doc","document","attachTo","Object","getPrototypeOf","setTimeout","toString","call","process","installNextTickImplementation","handle","nextTick","runIfPresent","canUsePostMessage","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","onmessage","MessageChannel","installMessageChannelImplementation","channel","port1","event","data","port2","createElement","installReadyStateChangeImplementation","html","documentElement","script","onreadystatechange","removeChild","appendChild","installSetTimeoutImplementation","installPostMessageImplementation","messagePrefix","Math","random","onGlobalMessage","source","indexOf","slice","length","addEventListener","attachEvent","callback","Function","args","Array","arguments","i","task","clearImmediate","run","apply","self","this"],"mappings":"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","file":"npm.setimmediate-28d1db80f54c83b71a1b.js","sourcesContent":["(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6â€“8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n"],"sourceRoot":""}