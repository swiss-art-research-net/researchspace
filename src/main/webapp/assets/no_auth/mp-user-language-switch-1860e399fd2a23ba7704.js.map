{"version":3,"sources":["webpack:///./src/main/web/components/language-switch/UserLanguageSwitch.tsx"],"names":["props","context","state","language","getPreferredUserLanguage","getLanguages","config","this","languages","preferredLanguages","render","uiConfig","ConfigHolder","getUIConfig","options","map","lang","key","label","selectedOption","find","option","unshift","length","NavDropdown","id","title","onSelect","e","onLanguageChanged","MenuItem","eventKey","setPreferredUserLanguage","setState","refresh","Component","UserLanguageSwitch"],"mappings":"6IAkBA,OACA,QACA,QAEA,QACA,QACA,SACA,SA0BA,cACE,4BAAYA,EAA+BC,GAA3C,MACE,YAAMD,EAAOC,IAAQ,K,OACrB,EAAKC,MAAQ,CAAEC,SAAU,EAAAC,4B,EAiD7B,OApDwC,kCAM9B,6BAAAC,aAAR,SAAqBC,GACnB,OAAIC,KAAKP,MAAMQ,UACND,KAAKP,MAAMQ,UAEbF,EAAOG,oBAGhB,6BAAAC,OAAA,sBACQC,EAAW,EAAAC,aAAaC,cAExBC,EAAUP,KAAKF,aAAaM,GAAUI,KAAI,SAACC,GAC/C,MAAO,CAAEC,IAAKD,EAAME,MAAOF,MAGvBb,EAAWI,KAAKL,MAAMC,SAExBgB,EAAiB,EAAAC,KAAKN,GAAS,SAACO,GAAW,OAAAA,EAAOJ,MAAQd,KAM9D,OALKgB,IACHA,EAAiB,CAAEF,IAAKd,EAAUe,MAAOf,GACzCW,EAAQQ,QAAQH,IAGdL,EAAQS,QAAU,EACb,KAIP,gBAAC,EAAAC,YAAW,CACVC,GAAG,qBACHC,MAAOP,EAAeD,MACtBS,SAAU,SAACC,GAAM,SAAKC,kBAAkBD,KAEvC,EAAAb,IAAID,GAAS,SAACO,GAAW,OACxB,gBAAC,EAAAS,SAAQ,CAACb,IAAKI,EAAOJ,IAAKc,SAAUV,EAAOJ,KACzCI,EAAOH,YAOV,6BAAAW,kBAAR,SAA0B1B,GACxB,EAAA6B,yBAAyB7B,GACzBI,KAAK0B,SAAS,CAAE9B,SAAUA,IAC1B,EAAA+B,WAEJ,mBApDA,CAAwC,EAAAC,WAA3B,EAAAC,qBAsDb,UAAeA","file":"mp-user-language-switch-1860e399fd2a23ba7704.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\nimport { find, map } from 'lodash';\nimport { NavDropdown, MenuItem } from 'react-bootstrap';\n\nimport { Component } from 'platform/api/components';\nimport { refresh } from 'platform/api/navigation';\nimport { ConfigHolder, UIConfig } from 'platform/api/services/config-holder';\nimport { getPreferredUserLanguage, setPreferredUserLanguage } from 'platform/api/services/language';\n\ninterface UserLanguagePropsProps {\n  /**\n   * Language tags that the user is able to choose from\n   */\n  languages?: ReadonlyArray<string>;\n}\n\ninterface State {\n  readonly language?: string;\n}\n\n/**\n * Dropdown with language tags where the user can choose from.\n * Selecting a language will set the user's preferred language\n * in the browsers local store.\n *\n * @example\n * <!-- Use languages from platform-wide UI configuration -->\n * <mp-user-language-switch></mp-user-language-switch>\n *\n * <mp-user-language-switch languages='[\"de\",\"en\",\"en-gb\"]'></mp-user-language-switch>\n *\n * @author Johannes Trame <jt@metaphacts.com>\n */\nexport class UserLanguageSwitch extends Component<UserLanguagePropsProps, State> {\n  constructor(props: UserLanguagePropsProps, context: any) {\n    super(props, context);\n    this.state = { language: getPreferredUserLanguage() };\n  }\n\n  private getLanguages(config: UIConfig) {\n    if (this.props.languages) {\n      return this.props.languages;\n    }\n    return config.preferredLanguages;\n  }\n\n  render() {\n    const uiConfig = ConfigHolder.getUIConfig();\n\n    const options = this.getLanguages(uiConfig).map((lang) => {\n      return { key: lang, label: lang };\n    });\n\n    const language = this.state.language;\n\n    let selectedOption = find(options, (option) => option.key === language);\n    if (!selectedOption) {\n      selectedOption = { key: language, label: language };\n      options.unshift(selectedOption);\n    }\n\n    if (options.length <= 1) {\n      return null;\n    }\n\n    return (\n      <NavDropdown\n        id=\"language-selection\"\n        title={selectedOption.label}\n        onSelect={(e) => this.onLanguageChanged(e as string)}\n      >\n        {map(options, (option) => (\n          <MenuItem key={option.key} eventKey={option.key}>\n            {option.label}\n          </MenuItem>\n        ))}\n      </NavDropdown>\n    );\n  }\n\n  private onLanguageChanged(language: string): void {\n    setPreferredUserLanguage(language);\n    this.setState({ language: language });\n    refresh();\n  }\n}\n\nexport default UserLanguageSwitch;\n"],"sourceRoot":""}