{"version":3,"sources":["webpack:///./src/main/web/components/forms/inputs/NestedModalForm.tsx","webpack:///./src/main/web/components/forms/ResourceEditorFormConfig.ts","webpack:///./src/main/web/components/forms/ValidationHelpers.ts","webpack:///./src/main/web/components/forms/FormEvents.ts"],"names":["cancellation","Cancellation","componentWillUnmount","this","cancelAll","render","definition","onSubmit","onCancel","children","subject","propsOverride","id","props","browserPersistence","Rdf","iri","postAction","performFormPostAction","eventProps","isNewSubject","sourceId","queryParams","getPostActionUrlQueryParams","map","getLabel","observe","value","label","FieldValue","fromLabeled","Modal","bsSize","show","onHide","Header","closeButton","Title","getPreferredLabel","Body","cloneElement","Component","NestedModalForm","tryExtractNestedForm","Children","count","child","only","elementHasInputType","InputKind","SemanticForm","undefined","params","key","Object","hasOwnProperty","call","indexOf","substring","length","toLowerCase","parameters","refresh","navigateToResource","onValue","v","Error","trigger","eventType","FormEvents","FormResourceCreated","source","data","isRemovedSubject","FormResourceRemoved","FormResourceUpdated","createDropAskQueryForField","field","constraints","validatePattern","range","r","join","event","EventMaker","FormRemoveResource"],"mappings":"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","file":"default~diagram-search-result~mp-sparql-query-editor~mp-spin-query-template-editor~ontodia~ontodia-e~0a82f85d-c4f375a2be9ce8e02401.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\nimport { Component, Children, ReactElement, ReactNode, cloneElement } from 'react';\nimport { Modal } from 'react-bootstrap';\n\nimport { Cancellation } from 'platform/api/async';\nimport { Rdf } from 'platform/api/rdf';\nimport { getLabel } from 'platform/api/services/resource-label';\n\nimport { FieldDefinition, getPreferredLabel } from '../FieldDefinition';\nimport { FieldValue, AtomicValue } from '../FieldValues';\n\nimport {\n  ResourceEditorFormProps,\n  performFormPostAction,\n  getPostActionUrlQueryParams,\n} from '../ResourceEditorFormConfig';\nimport { elementHasInputType, InputKind } from './InputCommpons';\n\nexport interface NestedModalFormProps {\n  subject?: Rdf.Iri\n  definition: FieldDefinition;\n  onSubmit: (value: AtomicValue) => void;\n  onCancel: () => void;\n  children: ReactElement<ResourceEditorFormProps> | undefined;\n}\n\nexport class NestedModalForm extends Component<NestedModalFormProps, {}> {\n  private readonly cancellation = new Cancellation();\n\n  componentWillUnmount() {\n    this.cancellation.cancelAll();\n  }\n\n  render() {\n    const { definition, onSubmit, onCancel, children, subject } = this.props;\n    const propsOverride: Partial<ResourceEditorFormProps> = {\n      id: children.props.id,\n      browserPersistence: false,\n      subject: subject || Rdf.iri(''),\n      postAction: (subject: Rdf.Iri) => {\n        if (children.props.postAction) {\n          performFormPostAction({\n            postAction: children.props.postAction,\n            subject: subject,\n            eventProps: { isNewSubject: true, sourceId: children.props.id },\n            queryParams: getPostActionUrlQueryParams(children.props),\n          });\n        }\n        this.cancellation.map(getLabel(subject)).observe({\n          value: (label) => {\n            onSubmit(FieldValue.fromLabeled({ value: subject, label }));\n          },\n        });\n      },\n    };\n    return (\n      <Modal bsSize=\"large\" show={true} onHide={onCancel}>\n        <Modal.Header closeButton={true}>\n          <Modal.Title>{\n            (subject ? `Create New ` : 'Edit ') +\n                        `${getPreferredLabel(definition.label) || definition.id || 'Value'}`\n          }</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>{cloneElement(children, propsOverride)}</Modal.Body>\n      </Modal>\n    );\n  }\n}\n\nexport function tryExtractNestedForm(children: ReactNode): ReactElement<ResourceEditorFormProps> | undefined {\n  if (Children.count(children) !== 1) {\n    return undefined;\n  }\n  const child = Children.only(children);\n  return elementHasInputType(child, InputKind.SemanticForm) ? child as ReactElement<ResourceEditorFormProps> : undefined;\n}\n","/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport { ReactNode } from 'react';\n\nimport { Rdf } from 'platform/api/rdf';\nimport { navigateToResource, refresh } from 'platform/api/navigation';\nimport { trigger } from 'platform/api/events';\n\nimport { LdpPersistenceConfig } from './persistence/LdpPersistence';\nimport { SparqlPersistenceConfig } from './persistence/SparqlPersistence';\nimport { RawSparqlPersistenceConfig } from './persistence/RawSparqlPersistence';\nimport { FieldDefinitionProp } from './FieldDefinition';\nimport { TriplestorePersistence } from './persistence/TriplestorePersistence';\nimport { CompositeValue } from './FieldValues';\nimport * as FormEvents from './FormEvents';\n\nexport type PostAction = 'none' | 'reload' | 'redirect' | 'event' | string | ((subject: Rdf.Iri) => void);\n\n/**\n * @see getPostActionUrlQueryParams().\n */\nexport interface ResourceEditorFormProps {\n  fields: ReadonlyArray<FieldDefinitionProp>;\n  /**\n   * IRI of instance described by the form.\n   * This value will be passed down to all queries as $subject.\n   */\n  subject?: Rdf.Iri | string;\n  /**\n   * URI template to customize subject generation.\n   *\n   * The template allows to reference form values, e.g if there is field A that uniquely\n   * identify record, we can specify subject template as `http://collection.bm.com/records/{{A}}`,\n   * where A will be substituted with value of the field A.\n   *\n   * `{{UUID}}` placeholder allows to substitute a random UUID.\n   */\n  newSubjectTemplate?: string;\n  initializeModel?: (model: CompositeValue) => CompositeValue;\n  persistence?: TriplestorePersistenceConfig['type'] | TriplestorePersistenceConfig | TriplestorePersistence;\n  children?: ReactNode;\n  /**\n   * Whether intermediate user inputs to the form should\n   * be persisted on client-side persistence layer (such as local storage, cookies etc).\n   * If undefined or false, the form will neither try persist change\n   * nor try to recover on initalization form states from the persistence layer.\n   */\n  browserPersistence?: boolean;\n  /**\n   * Optional identifier to be used to recover cached\n   * form states from the local storage. By default the current {@link ResourceContext} will\n   * be used as identifier. However, if several forms being embedded on a page,\n   * unique and static form idenfier need to be assigned manually.\n   */\n  formId?: string;\n  /**\n   * Optional post-action to be performed after saving the form.\n   * Can be either \"none\", \"reload\" or \"redirect\" (redirects to the subject of the form)\n   * or any IRI string to which the form will redirect.\n   */\n  postAction?: PostAction;\n  debug?: boolean;\n  /**\n   * Used as source id for emitted events.\n   */\n  id?: string;\n  /**\n   * `true` if persisted component should be added to the default set of the current user\n   *\n   * @default false\n   */\n  addToDefaultSet?: boolean;\n}\n\nexport type TriplestorePersistenceConfig = LdpPersistenceConfig | SparqlPersistenceConfig | RawSparqlPersistenceConfig;\n\n\nconst POST_ACTION_QUERY_PARAM_PREFIX = 'urlqueryparam';\n\n/**\n * Extracts user-defined `urlqueryparam-<KEY>` query params from\n * a form configuration to provide them on post action navigation.\n */\nexport function getPostActionUrlQueryParams(props: ResourceEditorFormProps) {\n  const params: { [paramKey: string]: string } = {};\n\n  for (const key in props) {\n    if (Object.hasOwnProperty.call(props, key)) {\n      if (key.indexOf(POST_ACTION_QUERY_PARAM_PREFIX) === 0) {\n        const queryKey = key.substring(POST_ACTION_QUERY_PARAM_PREFIX.length).toLowerCase();\n        params[queryKey] = props[key];\n      }\n    }\n  }\n\n  return params;\n}\n\n/**\n * Performs either a reload (default) or a redirect after the form has been submited\n * and the data been saved. Alsow can trigger the events:\n * - FormEvents.FormResourceCreated\n * - FormEvents.FormResourceUpdate\n * if the action is 'event'\n * if the action is 'none' nothing happen\n */\nexport function performFormPostAction(parameters: {\n  postAction: PostAction;\n  subject: Rdf.Iri;\n  eventProps: { isNewSubject: boolean; isRemovedSubject?: boolean; sourceId: string };\n  queryParams?: { [paramKey: string]: string };\n}) {\n  const { postAction = 'reload', subject, eventProps, queryParams } = parameters;\n  if (postAction === 'none') {\n    return;\n  }\n\n  if (postAction === 'reload') {\n    refresh();\n  } else if (postAction === 'redirect') {\n    navigateToResource(subject, queryParams).onValue((v) => v);\n  } else if (postAction === 'event') {\n    if (!eventProps.sourceId) {\n      throw new Error(\"If you want use postAction 'event', you have to define the id as well.\");\n    }\n    if (eventProps.isNewSubject) {\n      trigger({\n        eventType: FormEvents.FormResourceCreated,\n        source: eventProps.sourceId,\n        data: { iri: subject.value },\n      });\n    } else if (eventProps.isRemovedSubject) {\n      trigger({\n        eventType: FormEvents.FormResourceRemoved,\n        source: eventProps.sourceId,\n        data: { iri: subject.value },\n      });\n    } else {\n      trigger({\n        eventType: FormEvents.FormResourceUpdated,\n        source: eventProps.sourceId,\n        data: { iri: subject.value },\n      });\n    }\n    return;\n  } else if (typeof postAction === 'function') {\n    postAction(subject);\n  } else {\n    navigateToResource(Rdf.iri(postAction), queryParams).onValue((v) => v);\n  }\n}\n\n","/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { FieldDefinition } from './FieldDefinition';\n\n/**\n * ASK query that can be used together with input that support drop to check if resource can be accepted by the input.\n */\nexport function createDropAskQueryForField(field: FieldDefinition): string {\n  if (field.constraints.length === 1) {\n    return field.constraints[0].validatePattern;\n  } else if (!field.range) {\n    // if no range is defined then we just use ASK query that always succeeds.\n    return 'ASK {}';\n  } else if (field.range.length === 1) {\n    // if only one range then check if value is of type range or any of it's sub-classes.\n    return `\nASK {\n?value rdf:type/rdfs:subClassOf* <${field.range[0].value}> .\n}\n`;\n  } else {\n    // for many ranges value should have type that is in the list\n    const ranges = field.range.map(r => `<${r.value}>`).join(', ');\n    return `\nASK {\n?value rdf:type/rdfs:subClassOf* ?range .\nFILTER( ?range IN (${ranges})) .\n}\n`;\n  }\n}\n","/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { EventMaker } from 'platform/api/events';\n\nexport interface FormEventData {\n  // triggers\n  /**\n   * If the post-action='event' for SemanticFormComponent, Component fires this event after a\n   * new form is submitted\n   */\n  'Form.ResourceCreated': { iri: string };\n  /**\n   * If the post-action='event' for SemanticFormComponent.\n   * Component fires this event on each update of the form including creation\n   */\n  'Form.ResourceUpdated': { iri: string };\n\n  /**\n   * semantic-form fires this event when resource is removed\n   */\n  'Form.ResourceRemoved': { iri: string };\n\n  // listens\n  /**\n   * Triggers remove resource action, iri needs to match current subject.\n   */\n  'Form.RemoveResource': { iri: string };\n}\nconst event: EventMaker<FormEventData> = EventMaker;\n\nexport const FormResourceCreated = event('Form.ResourceCreated');\nexport const FormResourceUpdated = event('Form.ResourceUpdated');\nexport const FormResourceRemoved = event('Form.ResourceRemoved');\n\nexport const FormRemoveResource = event('Form.RemoveResource');\n"],"sourceRoot":""}