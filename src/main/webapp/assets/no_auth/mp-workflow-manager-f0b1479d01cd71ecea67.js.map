{"version":3,"sources":["webpack:///./src/main/web/components/workflow/WorkflowManagerComponent.tsx"],"names":["Status","props","context","cancellation","Cancellation","loadingCancellation","derive","assigneeQueryingCancellation","originalWorkflowGraphs","Map","initialWorkflowState","WorkflowState","empty","workflowService","WorkflowService","onSubmit","setState","status","Updating","workflowsUpdating","iris","map","iri","workflowState","originalGraph","get","updateWorkflowInstantiation","workflowIri","Rdf","Kefir","zip","observe","value","Ready","addNotification","level","message","fetchWorkflowInstantiations","error","console","state","steps","assignees","componentDidMount","this","componentWillReceiveProps","nextProps","cancelAll","clear","componentDidUpdate","prevProps","prevState","curWorkflowState","step","equals","updateAssignees","curAssigness","assignee","find","undefined","componentWillUnmount","definition","length","Loading","workflowStatesQuerying","queryWorkflowInstantiation","graph","set","deserializeWorkflowState","workflowStatesAndStepsQuerying","flatMap","stats","queryWorkflowSteps","currentStep","deriveAndCancel","newStep","assigneeQuery","queryWorkflowAssignees","query","workflowInstantiations","renderStepSelect","options","label","className","styles","onChange","option","newState","disabled","readonly","renderAssigneeSelect","newAssignee","render","ErrorNotification","errorMessage","workflowStateHasChanged","isEqual","workflow","type","submitButton","onClick","resetButton","Spinner","spinner","Component","WorkflowManagerComponent"],"mappings":"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","file":"mp-workflow-manager-f0b1479d01cd71ecea67.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\nimport ReactSelect from 'react-select';\nimport * as Kefir from 'kefir';\n\nimport { Cancellation } from 'platform/api/async';\nimport { Component } from 'platform/api/components';\nimport { Rdf } from 'platform/api/rdf';\nimport { WorkflowService, WorkflowState, WorkflowStep, WorkflowAssignee } from 'platform/api/services/WorkflowService';\nimport { ErrorNotification, addNotification } from 'platform/components/ui/notification';\nimport { Spinner } from 'platform/components/ui/spinner';\n\nimport * as styles from './WorkflowManagerComponent.scss';\n\nenum Status {\n  Loading,\n  Updating,\n  Ready,\n}\n\nexport interface Props {\n  /**\n   * Workflow instantiation IRIs\n   */\n  iris: Array<string>;\n  /**\n   * Workflow definition IRI\n   */\n  definition: string;\n  /**\n   * Prevent changing workflow parameters.\n   */\n  readonly?: boolean;\n}\n\ninterface State {\n  workflowState?: WorkflowState;\n  steps?: ReadonlyArray<WorkflowStep>;\n  assignees?: ReadonlyArray<WorkflowAssignee>;\n  error?: any;\n  status?: Status;\n}\n\n/**\n * Component manages workflow instantiations\n *\n * @example\n * <mp-workflow-manager\n *  iris='[\"http://example.com/workflow/instance\"]'\n *  definition='http://example.com/workflow/definition'>\n * </mp-workflow-manager>\n */\nexport class WorkflowManagerComponent extends Component<Props, State> {\n  private readonly cancellation = new Cancellation();\n  private loadingCancellation = this.cancellation.derive();\n  private assigneeQueryingCancellation = this.cancellation.derive();\n\n  private originalWorkflowGraphs = new Map<string, Rdf.Graph>();\n  private initialWorkflowState = WorkflowState.empty;\n  private workflowService = new WorkflowService();\n\n  constructor(props: Props, context: any) {\n    super(props, context);\n    this.state = {\n      workflowState: WorkflowState.empty,\n      steps: [],\n      assignees: [],\n      status: Status.Ready,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchWorkflowInstantiations(this.props);\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    if (this.props !== nextProps) {\n      this.loadingCancellation.cancelAll();\n      this.initialWorkflowState = WorkflowState.empty;\n      this.originalWorkflowGraphs.clear();\n      this.setState({\n        workflowState: WorkflowState.empty,\n        steps: [],\n        assignees: [],\n        status: Status.Ready,\n      });\n      this.fetchWorkflowInstantiations(nextProps);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    const { workflowState: curWorkflowState, assignees: curAssigness } = this.state;\n    if (curWorkflowState.step && !curWorkflowState.step.equals(prevState.workflowState.step)) {\n      this.updateAssignees();\n    }\n    if (curAssigness !== prevState.assignees) {\n      this.setState(({ workflowState, assignees }) => {\n        const assignee = assignees.find(({ iri }) => iri.equals(workflowState.assignee));\n        return { workflowState: { ...workflowState, assignee: assignee ? assignee.iri : undefined } };\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.cancellation.cancelAll();\n  }\n\n  private fetchWorkflowInstantiations(props: Props) {\n    const { iris, definition } = props;\n    if (!iris.length) {\n      return;\n    }\n\n    this.setState({ status: Status.Loading });\n    const workflowStatesQuerying = iris.map((iri) =>\n      this.workflowService.queryWorkflowInstantiation(iri).map((graph) => {\n        this.originalWorkflowGraphs.set(iri, graph);\n        return this.workflowService.deserializeWorkflowState(Rdf.iri(iri), graph);\n      })\n    );\n    const workflowStatesAndStepsQuerying = Kefir.zip(workflowStatesQuerying).flatMap((stats) => {\n      const workflowState = stats.length === 1 ? stats[0] : WorkflowState.empty;\n      this.initialWorkflowState = workflowState;\n      return this.workflowService\n        .queryWorkflowSteps({\n          definition,\n          currentStep: workflowState.step,\n        })\n        .map((steps) => ({ steps, workflowState }));\n    });\n    this.loadingCancellation = this.cancellation.deriveAndCancel(this.loadingCancellation);\n    this.loadingCancellation.map(workflowStatesAndStepsQuerying).observe({\n      value: ({ steps, workflowState }) =>\n        this.setState({ workflowState, steps, error: undefined, status: Status.Ready }),\n      error: (error) => this.setState({ error, status: Status.Ready }),\n    });\n  }\n\n  private updateAssignees() {\n    this.setState({ status: Status.Loading });\n    const { workflowState, steps } = this.state;\n    const newStep = steps.find(({ iri }) => iri.equals(workflowState.step));\n    const assigneeQuery = newStep ? newStep.assigneeQuery : undefined;\n    if (!assigneeQuery) {\n      this.setState({ assignees: [], status: Status.Ready });\n      return;\n    }\n    this.assigneeQueryingCancellation = this.cancellation.deriveAndCancel(this.assigneeQueryingCancellation);\n    this.assigneeQueryingCancellation\n      .map(\n        this.workflowService.queryWorkflowAssignees({\n          query: assigneeQuery,\n          newStep: workflowState.step,\n          workflowInstantiations: this.props.iris.map(Rdf.iri),\n        })\n      )\n      .observe({\n        value: (assignees) => this.setState({ assignees, status: Status.Ready }),\n        error: (error) => this.setState({ error, status: Status.Ready }),\n      });\n  }\n\n  private renderStepSelect() {\n    const {\n      workflowState: { step },\n      steps,\n      status,\n    } = this.state;\n    const options = steps.map(({ iri, label }) => ({ value: iri.value, label }));\n    return (\n      <div className={styles.state}>\n        <label>Step</label>\n        <ReactSelect\n          value={step ? step.value : ''}\n          options={options}\n          onChange={(option: { value: string } | undefined) =>\n            this.setState(\n              (prevState): State => {\n                const newState = option ? Rdf.iri(option.value) : undefined;\n                return { workflowState: { ...prevState.workflowState, step: newState } };\n              }\n            )\n          }\n          disabled={this.props.readonly || status !== Status.Ready}\n        />\n      </div>\n    );\n  }\n\n  private renderAssigneeSelect() {\n    const {\n      workflowState: { assignee },\n      assignees,\n      status,\n    } = this.state;\n    const options = assignees.map(({ iri, label }) => ({ value: iri.value, label }));\n    return (\n      <div className={styles.assignee}>\n        <label>Assignee</label>\n        <ReactSelect\n          value={assignee ? assignee.value : ''}\n          options={options}\n          onChange={(option: { value: string } | undefined) =>\n            this.setState(\n              (prevState): State => {\n                const newAssignee = option ? Rdf.iri(option.value) : undefined;\n                return { workflowState: { ...prevState.workflowState, assignee: newAssignee } };\n              }\n            )\n          }\n          disabled={this.props.readonly || status !== Status.Ready}\n        />\n      </div>\n    );\n  }\n\n  private onSubmit = () => {\n    this.setState({ status: Status.Updating });\n    const workflowsUpdating = this.props.iris.map((iri) => {\n      const { workflowState } = this.state;\n      const originalGraph = this.originalWorkflowGraphs.get(iri);\n      return this.workflowService.updateWorkflowInstantiation({\n        workflowIri: Rdf.iri(iri),\n        originalGraph,\n        workflowState,\n      });\n    });\n    this.cancellation.map(Kefir.zip(workflowsUpdating)).observe({\n      value: () => {\n        this.setState({ status: Status.Ready });\n        addNotification({\n          level: 'success',\n          message: 'The workflow instantiations has been updated.',\n        });\n        this.fetchWorkflowInstantiations(this.props);\n      },\n      error: (error) => {\n        console.error(error);\n        this.setState({ status: Status.Ready });\n        addNotification({\n          level: 'error',\n          message: 'Error occurred while updating the workflow instantiations.',\n        });\n      },\n    });\n  };\n\n  render() {\n    const { workflowState, error, status } = this.state;\n    if (error) {\n      return <ErrorNotification errorMessage={error} />;\n    }\n    const workflowStateHasChanged = !WorkflowState.isEqual(this.initialWorkflowState, workflowState);\n    return (\n      <div className={styles.workflow}>\n        {this.renderStepSelect()}\n        {this.renderAssigneeSelect()}\n        {!this.props.readonly ? (\n          <button\n            type=\"button\"\n            className={`btn btn-success ${styles.submitButton}`}\n            disabled={!workflowState.step || !workflowStateHasChanged || status !== Status.Ready}\n            onClick={this.onSubmit}\n          >\n            Assign\n          </button>\n        ) : null}\n        {!this.props.readonly && workflowStateHasChanged ? (\n          <button\n            type=\"button\"\n            className={`btn text-danger ${styles.resetButton}`}\n            onClick={() => this.setState({ workflowState: this.initialWorkflowState })}\n            disabled={status !== Status.Ready}\n          >\n            <small>\n              <i className=\"fa fa-times\" /> reset\n            </small>\n          </button>\n        ) : null}\n\n        {status === Status.Loading ? <Spinner className={styles.spinner} /> : null}\n      </div>\n    );\n  }\n}\n\nexport default WorkflowManagerComponent;\n"],"sourceRoot":""}