{"version":3,"sources":["webpack:///./node_modules/d3-format/src/exponent.js","webpack:///./node_modules/d3-format/src/formatDecimal.js","webpack:///./node_modules/d3-format/src/formatPrefixAuto.js","webpack:///./node_modules/d3-format/src/formatSpecifier.js","webpack:///./node_modules/d3-format/src/locale.js","webpack:///./node_modules/d3-format/src/identity.js","webpack:///./node_modules/d3-format/src/formatGroup.js","webpack:///./node_modules/d3-format/src/formatNumerals.js","webpack:///./node_modules/d3-format/src/formatTypes.js","webpack:///./node_modules/d3-format/src/formatRounded.js","webpack:///./node_modules/d3-format/src/formatTrim.js","webpack:///./node_modules/d3-format/src/precisionPrefix.js","webpack:///./node_modules/d3-format/src/defaultLocale.js","webpack:///./node_modules/d3-format/src/precisionRound.js","webpack:///./node_modules/d3-format/src/precisionFixed.js"],"names":["x","Math","abs","NaN","i","p","toExponential","indexOf","coefficient","slice","length","prefixExponent","d","exponent","max","min","floor","n","Array","join","re","formatSpecifier","specifier","match","exec","Error","FormatSpecifier","fill","align","sign","symbol","zero","width","comma","precision","trim","type","this","undefined","prototype","toString","map","prefixes","group","locale","grouping","thousands","call","Number","currencyPrefix","currency","currencySuffix","decimal","numerals","String","percent","minus","nan","newFormat","prefix","test","toLowerCase","suffix","formatType","maybeSuffix","format","value","c","valuePrefix","valueSuffix","valueNegative","isNaN","charCodeAt","Infinity","padding","formatPrefix","f","e","k","pow","t","j","g","push","substring","reverse","replace","toFixed","round","toPrecision","toUpperCase","out","i1","s","i0","step","defaultLocale","definition"],"mappings":"6FAAA,qBAEe,sBACb,OAAOA,EAAI,kBAAcC,KAAKC,IAAIF,KAASA,EAAE,GAAKG,M,kCCHpD,OAGe,wBACb,IAAKC,GAAKJ,EAAIK,EAAIL,EAAEM,cAAcD,EAAI,GAAKL,EAAEM,iBAAiBC,QAAQ,MAAQ,EAAG,OAAO,KACxF,IAAIH,EAAGI,EAAcR,EAAES,MAAM,EAAGL,GAIhC,MAAO,CACLI,EAAYE,OAAS,EAAIF,EAAY,GAAKA,EAAYC,MAAM,GAAKD,GAChER,EAAES,MAAML,EAAI,M,kCCXjB,0DAEWO,EAFX,UAIe,wBACb,IAAIC,EAAI,kBAAcZ,EAAGK,GACzB,IAAKO,EAAG,OAAOZ,EAAI,GACnB,IAAIQ,EAAcI,EAAE,GAChBC,EAAWD,EAAE,GACbR,EAAIS,GAAYF,EAAuE,EAAtDV,KAAKa,KAAK,EAAGb,KAAKc,IAAI,EAAGd,KAAKe,MAAMH,EAAW,MAAY,EAC5FI,EAAIT,EAAYE,OACpB,OAAON,IAAMa,EAAIT,EACXJ,EAAIa,EAAIT,EAAc,IAAIU,MAAMd,EAAIa,EAAI,GAAGE,KAAK,KAChDf,EAAI,EAAII,EAAYC,MAAM,EAAGL,GAAK,IAAMI,EAAYC,MAAML,GAC1D,KAAO,IAAIc,MAAM,EAAId,GAAGe,KAAK,KAAO,kBAAcnB,EAAGC,KAAKa,IAAI,EAAGT,EAAID,EAAI,IAAI,K,kCCdrF,2HACA,IAAIgB,EAAK,2EAEM,SAASC,gBAAgBC,GACtC,KAAMC,EAAQH,EAAGI,KAAKF,IAAa,MAAM,IAAIG,MAAM,mBAAqBH,GACxE,IAAIC,EACJ,OAAO,IAAIG,gBAAgB,CACzBC,KAAMJ,EAAM,GACZK,MAAOL,EAAM,GACbM,KAAMN,EAAM,GACZO,OAAQP,EAAM,GACdQ,KAAMR,EAAM,GACZS,MAAOT,EAAM,GACbU,MAAOV,EAAM,GACbW,UAAWX,EAAM,IAAMA,EAAM,GAAGd,MAAM,GACtC0B,KAAMZ,EAAM,GACZa,KAAMb,EAAM,MAMT,SAASG,gBAAgBJ,GAC9Be,KAAKV,UAA0BW,IAAnBhB,EAAUK,KAAqB,IAAML,EAAUK,KAAO,GAClEU,KAAKT,WAA4BU,IAApBhB,EAAUM,MAAsB,IAAMN,EAAUM,MAAQ,GACrES,KAAKR,UAA0BS,IAAnBhB,EAAUO,KAAqB,IAAMP,EAAUO,KAAO,GAClEQ,KAAKP,YAA8BQ,IAArBhB,EAAUQ,OAAuB,GAAKR,EAAUQ,OAAS,GACvEO,KAAKN,OAAST,EAAUS,KACxBM,KAAKL,WAA4BM,IAApBhB,EAAUU,WAAsBM,GAAahB,EAAUU,MACpEK,KAAKJ,QAAUX,EAAUW,MACzBI,KAAKH,eAAoCI,IAAxBhB,EAAUY,eAA0BI,GAAahB,EAAUY,UAC5EG,KAAKF,OAASb,EAAUa,KACxBE,KAAKD,UAA0BE,IAAnBhB,EAAUc,KAAqB,GAAKd,EAAUc,KAAO,GAZnEf,gBAAgBkB,UAAYb,gBAAgBa,UAe5Cb,gBAAgBa,UAAUC,SAAW,WACnC,OAAOH,KAAKV,KACNU,KAAKT,MACLS,KAAKR,KACLQ,KAAKP,QACJO,KAAKN,KAAO,IAAM,UACHO,IAAfD,KAAKL,MAAsB,GAAK/B,KAAKa,IAAI,EAAgB,EAAbuB,KAAKL,SACjDK,KAAKJ,MAAQ,IAAM,UACAK,IAAnBD,KAAKH,UAA0B,GAAK,IAAMjC,KAAKa,IAAI,EAAoB,EAAjBuB,KAAKH,aAC3DG,KAAKF,KAAO,IAAM,IACnBE,KAAKD,O,kCC7Cb,2FASIK,EAAMvB,MAAMqB,UAAUE,IACtBC,EAAW,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAEhE,sBACb,IAAIC,OAA4BL,IAApBM,EAAOC,eAA+CP,IAArBM,EAAOE,UAA0B,UAAW,kBAAYL,EAAIM,KAAKH,EAAOC,SAAUG,QAASJ,EAAOE,UAAY,IACvJG,OAAqCX,IAApBM,EAAOM,SAAyB,GAAKN,EAAOM,SAAS,GAAK,GAC3EC,OAAqCb,IAApBM,EAAOM,SAAyB,GAAKN,EAAOM,SAAS,GAAK,GAC3EE,OAA6Bd,IAAnBM,EAAOQ,QAAwB,IAAMR,EAAOQ,QAAU,GAChEC,OAA+Bf,IAApBM,EAAOS,SAAyB,UAAW,kBAAeZ,EAAIM,KAAKH,EAAOS,SAAUC,SAC/FC,OAA6BjB,IAAnBM,EAAOW,QAAwB,IAAMX,EAAOW,QAAU,GAChEC,OAAyBlB,IAAjBM,EAAOY,MAAsB,IAAMZ,EAAOY,MAAQ,GAC1DC,OAAqBnB,IAAfM,EAAOa,IAAoB,MAAQb,EAAOa,IAAM,GAE1D,SAASC,UAAUpC,GAGjB,IAAIK,GAFJL,EAAY,kBAAgBA,IAEPK,KACjBC,EAAQN,EAAUM,MAClBC,EAAOP,EAAUO,KACjBC,EAASR,EAAUQ,OACnBC,EAAOT,EAAUS,KACjBC,EAAQV,EAAUU,MAClBC,EAAQX,EAAUW,MAClBC,EAAYZ,EAAUY,UACtBC,EAAOb,EAAUa,KACjBC,EAAOd,EAAUc,KAGR,MAATA,GAAcH,GAAQ,EAAMG,EAAO,KAG7B,UAAYA,UAAqBE,IAAdJ,IAA4BA,EAAY,IAAKC,GAAO,EAAMC,EAAO,MAG1FL,GAAkB,MAATJ,GAA0B,MAAVC,KAAgBG,GAAO,EAAMJ,EAAO,IAAKC,EAAQ,KAI9E,IAAI+B,EAAoB,MAAX7B,EAAiBmB,EAA4B,MAAXnB,GAAkB,SAAS8B,KAAKxB,GAAQ,IAAMA,EAAKyB,cAAgB,GAC9GC,EAAoB,MAAXhC,EAAiBqB,EAAiB,OAAOS,KAAKxB,GAAQmB,EAAU,GAKzEQ,EAAa,UAAY3B,GACzB4B,EAAc,aAAaJ,KAAKxB,GAUpC,SAAS6B,OAAOC,GACd,IAEI9D,EAAGa,EAAGkD,EAFNC,EAAcT,EACdU,EAAcP,EAGlB,GAAa,MAAT1B,EACFiC,EAAcN,EAAWG,GAASG,EAClCH,EAAQ,OACH,CAIL,IAAII,GAHJJ,GAASA,GAGmB,GAAK,EAAIA,EAAQ,EAiB7C,GAdAA,EAAQK,MAAML,GAAST,EAAMM,EAAW9D,KAAKC,IAAIgE,GAAQhC,GAGrDC,IAAM+B,EAAQ,kBAAWA,IAGzBI,GAA4B,IAAVJ,GAAwB,MAATrC,IAAcyC,GAAgB,GAGnEF,GAAeE,EAA0B,MAATzC,EAAeA,EAAO2B,EAAkB,MAAT3B,GAAyB,MAATA,EAAe,GAAKA,GAAQuC,EAC3GC,GAAwB,MAATjC,EAAeM,EAAS,EAAI,iBAAiB,GAAK,IAAM2B,GAAeC,GAA0B,MAATzC,EAAe,IAAM,IAIxHmC,EAEF,IADA5D,GAAK,EAAGa,EAAIiD,EAAMxD,SACTN,EAAIa,GACX,GAA6B,IAAzBkD,EAAID,EAAMM,WAAWpE,KAAc+D,EAAI,GAAI,CAC7CE,GAAqB,KAANF,EAAWf,EAAUc,EAAMzD,MAAML,EAAI,GAAK8D,EAAMzD,MAAML,IAAMiE,EAC3EH,EAAQA,EAAMzD,MAAM,EAAGL,GACvB,OAOJ6B,IAAUF,IAAMmC,EAAQvB,EAAMuB,EAAOO,MAGzC,IAAI/D,EAAS0D,EAAY1D,OAASwD,EAAMxD,OAAS2D,EAAY3D,OACzDgE,EAAUhE,EAASsB,EAAQ,IAAId,MAAMc,EAAQtB,EAAS,GAAGS,KAAKQ,GAAQ,GAM1E,OAHIM,GAASF,IAAMmC,EAAQvB,EAAM+B,EAAUR,EAAOQ,EAAQhE,OAASsB,EAAQqC,EAAY3D,OAAS+D,KAAWC,EAAU,IAG7G9C,GACN,IAAK,IAAKsC,EAAQE,EAAcF,EAAQG,EAAcK,EAAS,MAC/D,IAAK,IAAKR,EAAQE,EAAcM,EAAUR,EAAQG,EAAa,MAC/D,IAAK,IAAKH,EAAQQ,EAAQjE,MAAM,EAAGC,EAASgE,EAAQhE,QAAU,GAAK0D,EAAcF,EAAQG,EAAcK,EAAQjE,MAAMC,GAAS,MAC9H,QAASwD,EAAQQ,EAAUN,EAAcF,EAAQG,EAGnD,OAAOhB,EAASa,GAOlB,OAtEAhC,OAA0BI,IAAdJ,EAA0B,EAChC,SAAS0B,KAAKxB,GAAQnC,KAAKa,IAAI,EAAGb,KAAKc,IAAI,GAAImB,IAC/CjC,KAAKa,IAAI,EAAGb,KAAKc,IAAI,GAAImB,IAgE/B+B,OAAOzB,SAAW,WAChB,OAAOlB,EAAY,IAGd2C,OAaT,MAAO,CACLA,OAAQP,UACRiB,aAZF,SAASA,aAAarD,EAAW4C,GAC/B,IAAIU,EAAIlB,YAAWpC,EAAY,kBAAgBA,IAAsBc,KAAO,IAAKd,IAC7EuD,EAAiE,EAA7D5E,KAAKa,KAAK,EAAGb,KAAKc,IAAI,EAAGd,KAAKe,MAAM,kBAASkD,GAAS,KAC1DY,EAAI7E,KAAK8E,IAAI,IAAKF,GAClBlB,EAASjB,EAAS,EAAImC,EAAI,GAC9B,OAAO,SAASX,GACd,OAAOU,EAAEE,EAAIZ,GAASP,O,kCC3I5B,OAAe,sBACb,OAAO3D,I,kCCDT,OAAe,wBACb,OAAO,SAASkE,EAAOlC,GAOrB,IANA,IAAI5B,EAAI8D,EAAMxD,OACVsE,EAAI,GACJC,EAAI,EACJC,EAAIrC,EAAS,GACbnC,EAAS,EAENN,EAAI,GAAK8E,EAAI,IACdxE,EAASwE,EAAI,EAAIlD,IAAOkD,EAAIjF,KAAKa,IAAI,EAAGkB,EAAQtB,IACpDsE,EAAEG,KAAKjB,EAAMkB,UAAUhF,GAAK8E,EAAG9E,EAAI8E,OAC9BxE,GAAUwE,EAAI,GAAKlD,KACxBkD,EAAIrC,EAASoC,GAAKA,EAAI,GAAKpC,EAASnC,QAGtC,OAAOsE,EAAEK,UAAUlE,KAAK2B,M,kCCf5B,OAAe,sBACb,OAAO,SAASoB,GACd,OAAOA,EAAMoB,QAAQ,UAAU,SAASlF,GACtC,OAAOiD,GAAUjD,S,kCCHvB,+BAGe,WACb,IAAK,SAASJ,EAAGK,GAAK,OAAY,IAAJL,GAASuF,QAAQlF,IAC/C,EAAK,SAASL,GAAK,OAAOC,KAAKuF,MAAMxF,GAAGwC,SAAS,IACjD,EAAK,SAASxC,GAAK,OAAOA,EAAI,IAC9B,EAAK,SAASA,GAAK,OAAOC,KAAKuF,MAAMxF,GAAGwC,SAAS,KACjD,EAAK,SAASxC,EAAGK,GAAK,OAAOL,EAAEM,cAAcD,IAC7C,EAAK,SAASL,EAAGK,GAAK,OAAOL,EAAEuF,QAAQlF,IACvC,EAAK,SAASL,EAAGK,GAAK,OAAOL,EAAEyF,YAAYpF,IAC3C,EAAK,SAASL,GAAK,OAAOC,KAAKuF,MAAMxF,GAAGwC,SAAS,IACjD,EAAK,SAASxC,EAAGK,GAAK,OAAO,kBAAkB,IAAJL,EAASK,IACpD,EAAK,UACL,EAAK,UACL,EAAK,SAASL,GAAK,OAAOC,KAAKuF,MAAMxF,GAAGwC,SAAS,IAAIkD,eACrD,EAAK,SAAS1F,GAAK,OAAOC,KAAKuF,MAAMxF,GAAGwC,SAAS,O,kCChBnD,qBAEe,wBACb,IAAI5B,EAAI,kBAAcZ,EAAGK,GACzB,IAAKO,EAAG,OAAOZ,EAAI,GACnB,IAAIQ,EAAcI,EAAE,GAChBC,EAAWD,EAAE,GACjB,OAAOC,EAAW,EAAI,KAAO,IAAIK,OAAOL,GAAUM,KAAK,KAAOX,EACxDA,EAAYE,OAASG,EAAW,EAAIL,EAAYC,MAAM,EAAGI,EAAW,GAAK,IAAML,EAAYC,MAAMI,EAAW,GAC5GL,EAAc,IAAIU,MAAML,EAAWL,EAAYE,OAAS,GAAGS,KAAK,O,kCCTxE,OACe,sBACbwE,EAAK,IAAK,IAAkCC,EAA9B3E,EAAI4E,EAAEnF,OAAQN,EAAI,EAAG0F,GAAM,EAAO1F,EAAIa,IAAKb,EACvD,OAAQyF,EAAEzF,IACR,IAAK,IAAK0F,EAAKF,EAAKxF,EAAG,MACvB,IAAK,IAAgB,IAAP0F,IAAUA,EAAK1F,GAAGwF,EAAKxF,EAAG,MACxC,QAAS,KAAMyF,EAAEzF,GAAI,MAAMuF,EAASG,EAAK,IAAGA,EAAK,GAGrD,OAAOA,EAAK,EAAID,EAAEpF,MAAM,EAAGqF,GAAMD,EAAEpF,MAAMmF,EAAK,GAAKC,I,kCCTrD,qBAEe,wBACb,OAAO5F,KAAKa,IAAI,EAAgE,EAA7Db,KAAKa,KAAK,EAAGb,KAAKc,IAAI,EAAGd,KAAKe,MAAM,kBAASkD,GAAS,KAAW,kBAASjE,KAAKC,IAAI6F,O,kCCHxG,mJAEInD,EACOqB,EACAU,EAJX,UAce,SAASqB,cAAcC,GAIpC,OAHArD,EAAS,kBAAaqD,GACtBhC,EAASrB,EAAOqB,OAChBU,EAAe/B,EAAO+B,aACf/B,EAZToD,cAAc,CACZ5C,QAAS,IACTN,UAAW,IACXD,SAAU,CAAC,GACXK,SAAU,CAAC,IAAK,IAChBM,MAAO,O,kCCXT,qBAEe,wBAEb,OADAuC,EAAO9F,KAAKC,IAAI6F,GAAOjF,EAAMb,KAAKC,IAAIY,GAAOiF,EACtC9F,KAAKa,IAAI,EAAG,kBAASA,GAAO,kBAASiF,IAAS,I,kCCJvD,qBAEe,sBACb,OAAO9F,KAAKa,IAAI,GAAI,kBAASb,KAAKC,IAAI6F","file":"npm.d3-format-ea8a2ce80ad6653cee36.js","sourcesContent":["import formatDecimal from \"./formatDecimal.js\";\n\nexport default function(x) {\n  return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;\n}\n","// Computes the decimal coefficient and exponent of the specified number x with\n// significant digits p, where x is positive and p is in [1, 21] or undefined.\n// For example, formatDecimal(1.23) returns [\"123\", 0].\nexport default function(x, p) {\n  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf(\"e\")) < 0) return null; // NaN, Â±Infinity\n  var i, coefficient = x.slice(0, i);\n\n  // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n  // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\n  return [\n    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,\n    +x.slice(i + 1)\n  ];\n}\n","import formatDecimal from \"./formatDecimal.js\";\n\nexport var prefixExponent;\n\nexport default function(x, p) {\n  var d = formatDecimal(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1],\n      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,\n      n = coefficient.length;\n  return i === n ? coefficient\n      : i > n ? coefficient + new Array(i - n + 1).join(\"0\")\n      : i > 0 ? coefficient.slice(0, i) + \".\" + coefficient.slice(i)\n      : \"0.\" + new Array(1 - i).join(\"0\") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!\n}\n","// [[fill]align][sign][symbol][0][width][,][.precision][~][type]\nvar re = /^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\n\nexport default function formatSpecifier(specifier) {\n  if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n  var match;\n  return new FormatSpecifier({\n    fill: match[1],\n    align: match[2],\n    sign: match[3],\n    symbol: match[4],\n    zero: match[5],\n    width: match[6],\n    comma: match[7],\n    precision: match[8] && match[8].slice(1),\n    trim: match[9],\n    type: match[10]\n  });\n}\n\nformatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\n\nexport function FormatSpecifier(specifier) {\n  this.fill = specifier.fill === undefined ? \" \" : specifier.fill + \"\";\n  this.align = specifier.align === undefined ? \">\" : specifier.align + \"\";\n  this.sign = specifier.sign === undefined ? \"-\" : specifier.sign + \"\";\n  this.symbol = specifier.symbol === undefined ? \"\" : specifier.symbol + \"\";\n  this.zero = !!specifier.zero;\n  this.width = specifier.width === undefined ? undefined : +specifier.width;\n  this.comma = !!specifier.comma;\n  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;\n  this.trim = !!specifier.trim;\n  this.type = specifier.type === undefined ? \"\" : specifier.type + \"\";\n}\n\nFormatSpecifier.prototype.toString = function() {\n  return this.fill\n      + this.align\n      + this.sign\n      + this.symbol\n      + (this.zero ? \"0\" : \"\")\n      + (this.width === undefined ? \"\" : Math.max(1, this.width | 0))\n      + (this.comma ? \",\" : \"\")\n      + (this.precision === undefined ? \"\" : \".\" + Math.max(0, this.precision | 0))\n      + (this.trim ? \"~\" : \"\")\n      + this.type;\n};\n","import exponent from \"./exponent.js\";\nimport formatGroup from \"./formatGroup.js\";\nimport formatNumerals from \"./formatNumerals.js\";\nimport formatSpecifier from \"./formatSpecifier.js\";\nimport formatTrim from \"./formatTrim.js\";\nimport formatTypes from \"./formatTypes.js\";\nimport {prefixExponent} from \"./formatPrefixAuto.js\";\nimport identity from \"./identity.js\";\n\nvar map = Array.prototype.map,\n    prefixes = [\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"Âµ\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\nexport default function(locale) {\n  var group = locale.grouping === undefined || locale.thousands === undefined ? identity : formatGroup(map.call(locale.grouping, Number), locale.thousands + \"\"),\n      currencyPrefix = locale.currency === undefined ? \"\" : locale.currency[0] + \"\",\n      currencySuffix = locale.currency === undefined ? \"\" : locale.currency[1] + \"\",\n      decimal = locale.decimal === undefined ? \".\" : locale.decimal + \"\",\n      numerals = locale.numerals === undefined ? identity : formatNumerals(map.call(locale.numerals, String)),\n      percent = locale.percent === undefined ? \"%\" : locale.percent + \"\",\n      minus = locale.minus === undefined ? \"-\" : locale.minus + \"\",\n      nan = locale.nan === undefined ? \"NaN\" : locale.nan + \"\";\n\n  function newFormat(specifier) {\n    specifier = formatSpecifier(specifier);\n\n    var fill = specifier.fill,\n        align = specifier.align,\n        sign = specifier.sign,\n        symbol = specifier.symbol,\n        zero = specifier.zero,\n        width = specifier.width,\n        comma = specifier.comma,\n        precision = specifier.precision,\n        trim = specifier.trim,\n        type = specifier.type;\n\n    // The \"n\" type is an alias for \",g\".\n    if (type === \"n\") comma = true, type = \"g\";\n\n    // The \"\" type, and any invalid type, is an alias for \".12~g\".\n    else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = \"g\";\n\n    // If zero fill is specified, padding goes after sign and before digits.\n    if (zero || (fill === \"0\" && align === \"=\")) zero = true, fill = \"0\", align = \"=\";\n\n    // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n    var prefix = symbol === \"$\" ? currencyPrefix : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n        suffix = symbol === \"$\" ? currencySuffix : /[%p]/.test(type) ? percent : \"\";\n\n    // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n    var formatType = formatTypes[type],\n        maybeSuffix = /[defgprs%]/.test(type);\n\n    // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n    precision = precision === undefined ? 6\n        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))\n        : Math.max(0, Math.min(20, precision));\n\n    function format(value) {\n      var valuePrefix = prefix,\n          valueSuffix = suffix,\n          i, n, c;\n\n      if (type === \"c\") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = \"\";\n      } else {\n        value = +value;\n\n        // Determine the sign. -0 is not less than 0, but 1 / -0 is!\n        var valueNegative = value < 0 || 1 / value < 0;\n\n        // Perform the initial formatting.\n        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);\n\n        // Trim insignificant zeros.\n        if (trim) value = formatTrim(value);\n\n        // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.\n        if (valueNegative && +value === 0 && sign !== \"+\") valueNegative = false;\n\n        // Compute the prefix and suffix.\n        valuePrefix = (valueNegative ? (sign === \"(\" ? sign : minus) : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n        valueSuffix = (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\");\n\n        // Break the formatted value into the integer âvalueâ part that can be\n        // grouped, and fractional or exponential âsuffixâ part that is not.\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      }\n\n      // If the fill character is not \"0\", grouping is applied before padding.\n      if (comma && !zero) value = group(value, Infinity);\n\n      // Compute the padding.\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n          padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\n\n      // If the fill character is \"0\", grouping is applied after padding.\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\n\n      // Reconstruct the final output based on the desired alignment.\n      switch (align) {\n        case \"<\": value = valuePrefix + value + valueSuffix + padding; break;\n        case \"=\": value = valuePrefix + padding + value + valueSuffix; break;\n        case \"^\": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;\n        default: value = padding + valuePrefix + value + valueSuffix; break;\n      }\n\n      return numerals(value);\n    }\n\n    format.toString = function() {\n      return specifier + \"\";\n    };\n\n    return format;\n  }\n\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,\n        k = Math.pow(10, -e),\n        prefix = prefixes[8 + e / 3];\n    return function(value) {\n      return f(k * value) + prefix;\n    };\n  }\n\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}\n","export default function(x) {\n  return x;\n}\n","export default function(grouping, thousands) {\n  return function(value, width) {\n    var i = value.length,\n        t = [],\n        j = 0,\n        g = grouping[0],\n        length = 0;\n\n    while (i > 0 && g > 0) {\n      if (length + g + 1 > width) g = Math.max(1, width - length);\n      t.push(value.substring(i -= g, i + g));\n      if ((length += g + 1) > width) break;\n      g = grouping[j = (j + 1) % grouping.length];\n    }\n\n    return t.reverse().join(thousands);\n  };\n}\n","export default function(numerals) {\n  return function(value) {\n    return value.replace(/[0-9]/g, function(i) {\n      return numerals[+i];\n    });\n  };\n}\n","import formatPrefixAuto from \"./formatPrefixAuto.js\";\nimport formatRounded from \"./formatRounded.js\";\n\nexport default {\n  \"%\": function(x, p) { return (x * 100).toFixed(p); },\n  \"b\": function(x) { return Math.round(x).toString(2); },\n  \"c\": function(x) { return x + \"\"; },\n  \"d\": function(x) { return Math.round(x).toString(10); },\n  \"e\": function(x, p) { return x.toExponential(p); },\n  \"f\": function(x, p) { return x.toFixed(p); },\n  \"g\": function(x, p) { return x.toPrecision(p); },\n  \"o\": function(x) { return Math.round(x).toString(8); },\n  \"p\": function(x, p) { return formatRounded(x * 100, p); },\n  \"r\": formatRounded,\n  \"s\": formatPrefixAuto,\n  \"X\": function(x) { return Math.round(x).toString(16).toUpperCase(); },\n  \"x\": function(x) { return Math.round(x).toString(16); }\n};\n","import formatDecimal from \"./formatDecimal.js\";\n\nexport default function(x, p) {\n  var d = formatDecimal(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1];\n  return exponent < 0 ? \"0.\" + new Array(-exponent).join(\"0\") + coefficient\n      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + \".\" + coefficient.slice(exponent + 1)\n      : coefficient + new Array(exponent - coefficient.length + 2).join(\"0\");\n}\n","// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.\nexport default function(s) {\n  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {\n    switch (s[i]) {\n      case \".\": i0 = i1 = i; break;\n      case \"0\": if (i0 === 0) i0 = i; i1 = i; break;\n      default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;\n    }\n  }\n  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;\n}\n","import exponent from \"./exponent.js\";\n\nexport default function(step, value) {\n  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));\n}\n","import formatLocale from \"./locale.js\";\n\nvar locale;\nexport var format;\nexport var formatPrefix;\n\ndefaultLocale({\n  decimal: \".\",\n  thousands: \",\",\n  grouping: [3],\n  currency: [\"$\", \"\"],\n  minus: \"-\"\n});\n\nexport default function defaultLocale(definition) {\n  locale = formatLocale(definition);\n  format = locale.format;\n  formatPrefix = locale.formatPrefix;\n  return locale;\n}\n","import exponent from \"./exponent.js\";\n\nexport default function(step, max) {\n  step = Math.abs(step), max = Math.abs(max) - step;\n  return Math.max(0, exponent(max) - exponent(step)) + 1;\n}\n","import exponent from \"./exponent.js\";\n\nexport default function(step) {\n  return Math.max(0, -exponent(Math.abs(step)));\n}\n"],"sourceRoot":""}