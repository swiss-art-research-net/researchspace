{"version":3,"sources":["webpack:///./src/main/web/components/admin/file-upload/FileUpload.tsx"],"names":["props","context","performPostAction","newFileIri","postAction","navigateToResource","onValue","v","Rdf","iri","refresh","state","alertState","maybe","Nothing","progress","progressText","showOptions","componentDidMount","this","messages","Kefir","pool","message","isJust","get","setState","Just","alert","AlertType","WARNING","onDrop","files","file","contentType","_","isEmpty","FileUploadService","getMimeType","uploadFile","createResourceQuery","generateIdQuery","storage","metadataExtractor","contextUri","onProgress","percent","onError","error","plug","constant","name","render","description","style","width","map","value","Alert","getOrElse","ProgressBar","active","min","max","now","label","Dropzone","bind","className","React","Component","FileUpload"],"mappings":"6IAkBA,OACA,QACA,QACA,QACA,QAEA,QACA,QACA,UAEA,SACA,UAoFA,cAEE,oBAAYA,EAAwBC,GAApC,MACE,YAAMD,EAAOC,IAAQ,K,OA+Ef,EAAAC,kBAAoB,SAACC,GACtB,EAAKH,MAAMI,YAAwC,WAA1B,EAAKJ,MAAMI,WAEJ,aAA1B,EAAKJ,MAAMI,WACpB,EAAAC,mBAAmBF,GAAYG,SAAQ,SAACC,GAAM,OAAAA,KAE9C,EAAAF,mBAAmB,EAAAG,IAAIC,IAAI,EAAKT,MAAMI,aAAaE,SAAQ,SAACC,GAAM,OAAAA,KAJlE,EAAAG,WAhFF,EAAKC,MAAQ,CACXC,WAAYC,EAAMC,UAClBC,SAAUF,EAAMC,UAChBE,aAAcH,EAAMC,UACpBG,aAAa,G,EAmFnB,OA3FgC,0BAY9B,qBAAAC,kBAAA,sBACEC,KAAKC,SAAWC,EAAMC,OACtBH,KAAKC,SAASd,SAAQ,SAACC,GACrB,IAAMgB,EAAU,EAAKZ,MAAMC,WAAWY,OAAS,EAAKb,MAAMC,WAAWa,MAAMF,QAAU,GACrF,EAAKG,SAAS,CACZd,WAAYC,EAAMc,KAAK,CACrBC,MAAO,EAAAC,UAAUC,QACjBP,QAASA,EAAUhB,UAM3B,qBAAAwB,OAAA,SAAOC,GAAP,WACEb,KAAKO,SAAS,CACZd,WAAYC,EAAMC,UAClBC,SAAUF,EAAMC,YAElB,IAAMmB,EAAOD,EAAM,GACbE,EACJC,EAAEC,QAAQjB,KAAKnB,QAAUmC,EAAEC,QAAQjB,KAAKnB,MAAMkC,aAC1C,EAAAG,kBAAkBC,YAAYL,GAC9Bd,KAAKnB,MAAMkC,YAEF,EAAAG,kBAAkBE,WAAW,CAC1CC,oBAAqBrB,KAAKnB,MAAMwC,oBAChCC,gBAAiBtB,KAAKnB,MAAMyC,gBAC5BC,QAASvB,KAAKnB,MAAM0C,QACpBC,kBAAmBxB,KAAKnB,MAAM2C,kBAC9BC,WAAYzB,KAAKnB,MAAM4C,WACvBX,KAAMA,EACNC,YAAaA,EACbW,WAAY,SAACC,GACX,SAAKpB,SAAS,CACZX,SAAUF,EAAMc,KAAamB,GAC7B9B,aAAcH,EAAMc,KAAa,sBAIpCrB,QAAQa,KAAKjB,mBACb6C,SAAQ,SAACC,GAAU,SAAK5B,SAAS6B,KAAK5B,EAAM6B,SAAS,SAAWjB,EAAKkB,KAAO,YAAcH,EAAQ,gBAGvG,qBAAAI,OAAA,sBACQC,EACJlB,EAAEC,QAAQjB,KAAKnB,QAAUmC,EAAEC,QAAQjB,KAAKnB,MAAMqD,aAC1C,4CACAlC,KAAKnB,MAAMqD,YAEjB,OACE,uBAAKC,MAAO,CAAEC,MAAO,QAClBpC,KAAKR,MAAMC,WAAW4C,KAAI,SAACC,GAAU,uBAAC,EAAAC,MAAK,cAAKD,OAAWE,UAAU,MACrExC,KAAKR,MAAMI,SACTyC,KAAI,SAACzC,GAAa,OACjB,gBAAC,EAAA6C,YAAW,CACVC,QAAQ,EACRC,IAAK,EACLC,IAAK,IACLC,IAAKjD,EACLkD,MAAO,EAAKtD,MAAMK,aAAa2C,UAAU,wBAG5CA,UAAU,MACb,gBAAC,EAAAO,SAAQ,CAACnC,OAAQZ,KAAKY,OAAOoC,KAAKhD,OACjC,uBAAKiD,UAAU,eAAef,MAexC,WA3FA,CAAgCgB,EAAMC,WAAzB,EAAAC,aA4Fb,UAAeA","file":"mp-file-upload-61a419a51b2eabafc356.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\nimport * as _ from 'lodash';\nimport * as maybe from 'data.maybe';\nimport * as Kefir from 'kefir';\nimport { ProgressBar } from 'react-bootstrap';\n\nimport { navigateToResource, refresh } from 'platform/api/navigation';\nimport { Rdf } from 'platform/api/rdf';\nimport { FileUploadService } from 'platform/api/services/file-upload';\n\nimport { Alert, AlertConfig, AlertType } from 'platform/components/ui/alert';\nimport { Dropzone } from 'platform/components/ui/dropzone';\n\ninterface FileUploadState {\n  alertState?: Data.Maybe<AlertConfig>;\n  progress?: Data.Maybe<number>;\n  progressText?: Data.Maybe<string>;\n  resourceUri?: Data.Maybe<string>;\n  showOptions?: boolean;\n}\n\ninterface FileUploadProps {\n  /**\n   * SPARQL construct query which is used to generate the data that should be associated with\n   * uploaded file.\n   *\n   * Also the query can use some variables which will be bound with values at runtime:\n   * * __sequence - unique numerical value\n   * * __contextUri__ - see `contextUri` property\n   * * __newId__ - IRI generated with `generateIdQuery`\n   */\n  createResourceQuery: string;\n\n  /**\n   * SPARQL select query which is used to generate unique IRI for the uploaded file.\n   * The query should have only one projection variable *newId* with the IRI.\n   *\n   * Also the query can use some variables which will be bound with values at runtime:\n   * * __sequence__ - unique numerical value\n   * * __contextUri__ - see `contextUri` property\n   */\n  generateIdQuery: string;\n\n  /**\n   * File storage id. Used to detect upload folder based on \"upload-<storage>\"\n   * property value from the environment.prop file.\n   */\n  storage: string;\n\n  /**\n   * File metadata extractor\n   */\n  metadataExtractor?: string;\n\n  /**\n   * Context variable that will be propagated to `createResourceQuery` and `generateIdQuery`.\n   */\n  contextUri: string;\n\n  /**\n   * dropzone caption\n   */\n  description: string;\n\n  /**\n   * MIME content type of the file\n   */\n  contentType: string;\n\n  /**\n   * Optional post-action to be performed after uploading the file.\n   * Can be either \"reload\" or \"redirect\" (redirects to the newly created resource)\n   * or any IRI string to which the form will redirect.\n   */\n  postAction?: string;\n}\n\n/**\n * In the following example `iiifFolder` storage corresponds to `upload-iiifFolder=file:///somefolder` parameter set in the `environment.prop` file.\n *\n * @example\n * <mp-file-upload\n *   create-resource-query='\n *     prefix dc: <http://purl.org/dc/elements/1.1/>\n *     CONSTRUCT {\n *       ?__newId__ a SomeImageType.\n *       ?__newId__ dc:MediaType \"image/jpeg\".\n *     } WHERE {}\n * '\n *   generate-id-query='SELECT ?newId WHERE {BIND(URI(CONCAT(CONCAT(STR(?__contextUri__), \"/\"), ?__sequence__)) as ?newId)}'\n *   context-uri='[[this]]'\n *   storage='iiifFolder'\n *   post-action='redirect'\n * ></mp-file-upload>\n */\nexport class FileUpload extends React.Component<FileUploadProps, FileUploadState> {\n  messages: Kefir.Pool<string>;\n  constructor(props: FileUploadProps, context: any) {\n    super(props, context);\n    this.state = {\n      alertState: maybe.Nothing<AlertConfig>(),\n      progress: maybe.Nothing<number>(),\n      progressText: maybe.Nothing<string>(),\n      showOptions: false,\n    };\n  }\n\n  componentDidMount() {\n    this.messages = Kefir.pool<string>();\n    this.messages.onValue((v) => {\n      const message = this.state.alertState.isJust ? this.state.alertState.get().message : '';\n      this.setState({\n        alertState: maybe.Just({\n          alert: AlertType.WARNING,\n          message: message + v,\n        }),\n      });\n    });\n  }\n\n  onDrop(files: File[]) {\n    this.setState({\n      alertState: maybe.Nothing<AlertConfig>(),\n      progress: maybe.Nothing<number>(),\n    });\n    const file = files[0];\n    const contentType =\n      _.isEmpty(this.props) || _.isEmpty(this.props.contentType)\n        ? FileUploadService.getMimeType(file)\n        : this.props.contentType;\n\n    const upload = FileUploadService.uploadFile({\n      createResourceQuery: this.props.createResourceQuery,\n      generateIdQuery: this.props.generateIdQuery,\n      storage: this.props.storage,\n      metadataExtractor: this.props.metadataExtractor,\n      contextUri: this.props.contextUri,\n      file: file,\n      contentType: contentType,\n      onProgress: (percent) =>\n        this.setState({\n          progress: maybe.Just<number>(percent),\n          progressText: maybe.Just<string>('Uploading ...'),\n        }),\n    });\n    upload\n      .onValue(this.performPostAction)\n      .onError((error) => this.messages.plug(Kefir.constant('File: ' + file.name + ' failed (' + error + ').<br/>')));\n  }\n\n  render() {\n    const description =\n      _.isEmpty(this.props) || _.isEmpty(this.props.description)\n        ? 'Please drag&drop your image file(s) here.'\n        : this.props.description;\n\n    return (\n      <div style={{ width: '50%' }}>\n        {this.state.alertState.map((value) => <Alert {...value} />).getOrElse(null)}\n        {this.state.progress\n          .map((progress) => (\n            <ProgressBar\n              active={true}\n              min={0}\n              max={100}\n              now={progress}\n              label={this.state.progressText.getOrElse('Uploading Files')}\n            />\n          ))\n          .getOrElse(null)}\n        <Dropzone onDrop={this.onDrop.bind(this)}>\n          <div className=\"text-center\">{description}</div>\n        </Dropzone>\n      </div>\n    );\n  }\n\n  private performPostAction = (newFileIri: Rdf.Iri) => {\n    if (!this.props.postAction || this.props.postAction === 'reload') {\n      refresh();\n    } else if (this.props.postAction === 'redirect') {\n      navigateToResource(newFileIri).onValue((v) => v);\n    } else {\n      navigateToResource(Rdf.iri(this.props.postAction)).onValue((v) => v);\n    }\n  };\n}\nexport default FileUpload;\n"],"sourceRoot":""}