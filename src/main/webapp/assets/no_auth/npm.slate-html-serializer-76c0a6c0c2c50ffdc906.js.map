{"version":3,"sources":["webpack:///./node_modules/slate-html-serializer/lib/slate-html-serializer.es.js"],"names":["classCallCheck","instance","Constructor","TypeError","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","toConsumableArray","arr","Array","isArray","arr2","from","String","object","text","TEXT_RULE","deserialize","el","tagName","toLowerCase","marks","nodeName","nodeValue","match","serialize","obj","children","split","reduce","array","push","createElement","defaultParseHtml","html","DOMParser","Error","parseFromString","body","window","document","_initialiseProps","_this","this","options","undefined","_options$toJSON","toJSON","defaultBlock","parseHtml","fragment","childNodes","nodes","deserializeElements","memo","node","original","block","data","json","ret","fromJSON","elements","filter","cruftNewline","forEach","element","deserializeElement","concat","next","toString","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","rules","Symbol","iterator","done","rule","value","type","deserializeMark","err","return","mark","applyMark","map","serializeNode","render","inner","slice","string","serializeString","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","addKey","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","cloneElement","Html","_options$defaultBlock","_options$parseHtml","_options$rules","createProperties"],"mappings":"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","file":"npm.slate-html-serializer-76c0a6c0c2c50ffdc906.js","sourcesContent":["import React from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\nimport typeOf from 'type-of';\nimport { Node, Value } from 'slate';\nimport { Record } from 'immutable';\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\n\n\n\n\n\n\n\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar toConsumableArray = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\n/**\n * String.\n *\n * @type {String}\n */\n\nvar String = new Record({\n  object: 'string',\n  text: ''\n});\n\n/**\n * A rule to (de)serialize text nodes. This is automatically added to the HTML\n * serializer so that users don't have to worry about text-level serialization.\n *\n * @type {Object}\n */\n\nvar TEXT_RULE = {\n  deserialize: function deserialize(el) {\n    if (el.tagName && el.tagName.toLowerCase() === 'br') {\n      return {\n        object: 'text',\n        text: '\\n',\n        marks: []\n      };\n    }\n\n    if (el.nodeName === '#text') {\n      if (el.nodeValue && el.nodeValue.match(/<!--.*?-->/)) return;\n\n      return {\n        object: 'text',\n        text: el.nodeValue,\n        marks: []\n      };\n    }\n  },\n  serialize: function serialize(obj, children) {\n    if (obj.object === 'string') {\n      return children.split('\\n').reduce(function (array, text, i) {\n        if (i !== 0) array.push(React.createElement('br', { key: i }));\n        array.push(text);\n        return array;\n      }, []);\n    }\n  }\n};\n\n/**\n * A default `parseHtml` function that returns the `<body>` using `DOMParser`.\n *\n * @param {String} html\n * @return {Object}\n */\n\nfunction defaultParseHtml(html) {\n  if (typeof DOMParser == 'undefined') {\n    throw new Error('The native `DOMParser` global which the `Html` serializer uses by default is not present in this environment. You must supply the `options.parseHtml` function instead.');\n  }\n\n  var parsed = new DOMParser().parseFromString(html, 'text/html');\n  var body = parsed.body;\n  // COMPAT: in IE 11 body is null if html is an empty string\n\n  return body || window.document.createElement('body');\n}\n\n/**\n * HTML serializer.\n *\n * @type {Html}\n */\n\nvar Html =\n/**\n * Create a new serializer with `rules`.\n *\n * @param {Object} options\n *   @property {Array} rules\n *   @property {String|Object|Block} defaultBlock\n *   @property {Function} parseHtml\n */\n\nfunction Html() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  classCallCheck(this, Html);\n\n  _initialiseProps.call(this);\n\n  var _options$defaultBlock = options.defaultBlock,\n      defaultBlock = _options$defaultBlock === undefined ? 'paragraph' : _options$defaultBlock,\n      _options$parseHtml = options.parseHtml,\n      parseHtml = _options$parseHtml === undefined ? defaultParseHtml : _options$parseHtml,\n      _options$rules = options.rules,\n      rules = _options$rules === undefined ? [] : _options$rules;\n\n\n  defaultBlock = Node.createProperties(defaultBlock);\n\n  this.rules = [].concat(toConsumableArray(rules), [TEXT_RULE]);\n  this.defaultBlock = defaultBlock;\n  this.parseHtml = parseHtml;\n};\n\n/**\n * Add a unique key to a React `element`.\n *\n * @param {Element} element\n * @return {Element}\n */\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this = this;\n\n  this.deserialize = function (html) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _options$toJSON = options.toJSON,\n        toJSON = _options$toJSON === undefined ? false : _options$toJSON;\n    var defaultBlock = _this.defaultBlock,\n        parseHtml = _this.parseHtml;\n\n    var fragment = parseHtml(html);\n    var children = Array.from(fragment.childNodes);\n    var nodes = _this.deserializeElements(children);\n\n    // COMPAT: ensure that all top-level inline nodes are wrapped into a block.\n    nodes = nodes.reduce(function (memo, node, i, original) {\n      if (node.object === 'block') {\n        memo.push(node);\n        return memo;\n      }\n\n      if (i > 0 && original[i - 1].object !== 'block') {\n        var _block = memo[memo.length - 1];\n        _block.nodes.push(node);\n        return memo;\n      }\n\n      var block = _extends({\n        object: 'block',\n        data: {}\n      }, defaultBlock, {\n        nodes: [node]\n      });\n\n      memo.push(block);\n      return memo;\n    }, []);\n\n    // TODO: pretty sure this is no longer needed.\n    if (nodes.length === 0) {\n      nodes = [_extends({\n        object: 'block',\n        data: {}\n      }, defaultBlock, {\n        nodes: [{\n          object: 'text',\n          text: '',\n          marks: []\n        }]\n      })];\n    }\n\n    var json = {\n      object: 'value',\n      document: {\n        object: 'document',\n        data: {},\n        nodes: nodes\n      }\n    };\n\n    var ret = toJSON ? json : Value.fromJSON(json);\n    return ret;\n  };\n\n  this.deserializeElements = function () {\n    var elements = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    var nodes = [];\n\n    elements.filter(_this.cruftNewline).forEach(function (element) {\n      var node = _this.deserializeElement(element);\n\n      switch (typeOf(node)) {\n        case 'array':\n          nodes = nodes.concat(node);\n          break;\n        case 'object':\n          nodes.push(node);\n          break;\n      }\n    });\n\n    return nodes;\n  };\n\n  this.deserializeElement = function (element) {\n    var node = void 0;\n\n    if (!element.tagName) {\n      element.tagName = '';\n    }\n\n    var next = function next(elements) {\n      if (Object.prototype.toString.call(elements) === '[object NodeList]') {\n        elements = Array.from(elements);\n      }\n\n      switch (typeOf(elements)) {\n        case 'array':\n          return _this.deserializeElements(elements);\n        case 'object':\n          return _this.deserializeElement(elements);\n        case 'null':\n        case 'undefined':\n          return;\n        default:\n          throw new Error('The `next` argument was called with invalid children: \"' + elements + '\".');\n      }\n    };\n\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = _this.rules[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var rule = _step.value;\n\n        if (!rule.deserialize) continue;\n        var ret = rule.deserialize(element, next);\n        var type = typeOf(ret);\n\n        if (type !== 'array' && type !== 'object' && type !== 'null' && type !== 'undefined') {\n          throw new Error('A rule returned an invalid deserialized representation: \"' + node + '\".');\n        }\n\n        if (ret === undefined) {\n          continue;\n        } else if (ret === null) {\n          return null;\n        } else if (ret.object === 'mark') {\n          node = _this.deserializeMark(ret);\n        } else {\n          node = ret;\n        }\n\n        if (node.object === 'block' || node.object === 'inline') {\n          node.data = node.data || {};\n          node.nodes = node.nodes || [];\n        } else if (node.object === 'text') {\n          node.marks = node.marks || [];\n          node.text = node.text || '';\n        }\n\n        break;\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return node || next(element.childNodes);\n  };\n\n  this.deserializeMark = function (mark) {\n    var type = mark.type,\n        data = mark.data;\n\n\n    var applyMark = function applyMark(node) {\n      if (node.object === 'mark') {\n        var ret = _this.deserializeMark(node);\n        return ret;\n      } else if (node.object === 'text') {\n        node.marks = node.marks || [];\n        node.marks.push({ type: type, data: data });\n      } else if (node.nodes) {\n        node.nodes = node.nodes.map(applyMark);\n      }\n\n      return node;\n    };\n\n    return mark.nodes.reduce(function (nodes, node) {\n      var ret = applyMark(node);\n      if (Array.isArray(ret)) return nodes.concat(ret);\n      nodes.push(ret);\n      return nodes;\n    }, []);\n  };\n\n  this.serialize = function (value) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var document = value.document;\n\n    var elements = document.nodes.map(_this.serializeNode).filter(function (el) {\n      return el;\n    });\n    if (options.render === false) return elements;\n\n    var html = renderToStaticMarkup(React.createElement(\n      'body',\n      null,\n      elements\n    ));\n    var inner = html.slice(6, -7);\n    return inner;\n  };\n\n  this.serializeNode = function (node) {\n    if (node.object === 'text') {\n      var string = new String({ text: node.text });\n      var text = _this.serializeString(string);\n\n      return node.marks.reduce(function (children, mark) {\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = _this.rules[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var rule = _step2.value;\n\n            if (!rule.serialize) continue;\n            var ret = rule.serialize(mark, children);\n            if (ret === null) return;\n            if (ret) return addKey(ret);\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n\n        throw new Error('No serializer defined for mark of type \"' + mark.type + '\".');\n      }, text);\n    }\n\n    var children = node.nodes.map(_this.serializeNode);\n\n    var _iteratorNormalCompletion3 = true;\n    var _didIteratorError3 = false;\n    var _iteratorError3 = undefined;\n\n    try {\n      for (var _iterator3 = _this.rules[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n        var rule = _step3.value;\n\n        if (!rule.serialize) continue;\n        var ret = rule.serialize(node, children);\n        if (ret === null) return;\n        if (ret) return addKey(ret);\n      }\n    } catch (err) {\n      _didIteratorError3 = true;\n      _iteratorError3 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion3 && _iterator3.return) {\n          _iterator3.return();\n        }\n      } finally {\n        if (_didIteratorError3) {\n          throw _iteratorError3;\n        }\n      }\n    }\n\n    throw new Error('No serializer defined for node of type \"' + node.type + '\".');\n  };\n\n  this.serializeString = function (string) {\n    var _iteratorNormalCompletion4 = true;\n    var _didIteratorError4 = false;\n    var _iteratorError4 = undefined;\n\n    try {\n      for (var _iterator4 = _this.rules[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n        var rule = _step4.value;\n\n        if (!rule.serialize) continue;\n        var ret = rule.serialize(string, string.text);\n        if (ret) return ret;\n      }\n    } catch (err) {\n      _didIteratorError4 = true;\n      _iteratorError4 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion4 && _iterator4.return) {\n          _iterator4.return();\n        }\n      } finally {\n        if (_didIteratorError4) {\n          throw _iteratorError4;\n        }\n      }\n    }\n  };\n\n  this.cruftNewline = function (element) {\n    return !(element.nodeName === '#text' && element.nodeValue === '\\n');\n  };\n};\n\nvar key = 0;\n\nfunction addKey(element) {\n  return React.cloneElement(element, { key: key++ });\n}\n\nexport default Html;\n//# sourceMappingURL=slate-html-serializer.es.js.map\n"],"sourceRoot":""}