{"version":3,"sources":["webpack:///./src/main/web/components/3-rd-party/ontodia/authoring/FieldInputOverride.tsx"],"names":["configure","props","context","Promise","forField","forDatatype","children","Error","collectedInputOverrides","push","target","fieldIri","datatype","input","React","Children","only","Component","FieldInputOverride","assertFieldConfigurationItem"],"mappings":"6IAkBA,OAIA,UA2BA,4C,+CAiBA,OAjBwC,kCACzB,mBAAAA,UAAb,SAAuBC,EAAgCC,G,+BAAqCC,SAAO,W,iDAEjG,GADQC,EAAoCH,EAAK,SAA/BI,EAA0BJ,EAAK,YAAlBK,EAAaL,EAAK,SAC7CG,GAAYC,EACd,MAAM,IAAIE,MAAM,qFAElB,IAAMH,IAAYC,EAChB,MAAM,IAAIE,MAAM,uF,OAElBL,EAAQM,wBAAwBC,KAAK,CACnCC,OAAQ,CACNC,SAAUP,EACVQ,SAAUP,GAEZQ,MAAOC,EAAMC,SAASC,KAAKV,K,WAGjC,mBAjBA,CAAwCQ,EAAMG,WAAjC,EAAAC,qBAmBb,EAAAC,6BAA6BD,GAE7B,UAAeA","file":"ontodia-field-input-override-cbe2ae7f6e5f8638e67f.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\n\nimport * as Forms from 'platform/components/forms';\n\nimport { FieldConfigurationContext, assertFieldConfigurationItem } from './FieldConfigurationCommon';\n\n/**\n * Overrides default inputs for given field or datatype when generating a semantic form\n */\nexport interface FieldInputOverrideConfig {\n  /**\n   * Field for which input have to be overridden. Only for-field or for-datatype can be specified.\n   */\n  forField?: string;\n\n  /**\n   * Datatype for input override. Only for-field or for-datatype can be specified.\n   */\n  forDatatype?: string;\n\n  /**\n   * Input instance for override. Should be exactly one component. for-field property will be\n   * provided automatically when semantic-form is generated, all other properties will be preserved.\n   */\n  children: object;\n}\n\nexport interface FieldInputOverrideProps extends FieldInputOverrideConfig {\n  children: Forms.FieldInputElement;\n}\n\nexport class FieldInputOverride extends React.Component<FieldInputOverrideProps> {\n  static async configure(props: FieldInputOverrideProps, context: FieldConfigurationContext): Promise<void> {\n    const { forField, forDatatype, children } = props;\n    if (forField && forDatatype) {\n      throw new Error(`Cannot set both \"for-field\" and \"for-datatype\" for <ontodia-field-input-override>`);\n    }\n    if (!(forField || forDatatype)) {\n      throw new Error(`Either \"for-field\" or \"for-datatype\" is required for <ontodia-field-input-override>`);\n    }\n    context.collectedInputOverrides.push({\n      target: {\n        fieldIri: forField,\n        datatype: forDatatype,\n      },\n      input: React.Children.only(children),\n    });\n  }\n}\n\nassertFieldConfigurationItem(FieldInputOverride);\n\nexport default FieldInputOverride;\n"],"sourceRoot":""}