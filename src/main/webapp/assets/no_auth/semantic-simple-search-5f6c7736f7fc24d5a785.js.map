{"version":3,"sources":["webpack:///./src/main/web/components/semantic/simple-search/SimpleSearch.ts"],"names":["SemanticSimpleSearchConfig","props","context","renderAutosuggestion","minSearchTermLength","resourceBindingName","query","placeholder","searchTermVariable","multi","defaultQuery","escapeLuceneSyntax","tokenizeLuceneQuery","onSelected","value","navigateToResource","onValue","x","autoSuggestionProps","minimumInput","valueBindingName","actions","templates","suggestion","template","createElement","AutoCompletionInput","_","omitBy","isUndefined","render","D","div","className","this","backwardCompatibleProps","inputPlaceholder","resourceSelection","defaultProps","Component","SimpleSearch"],"mappings":"6IAmBA,OACA,QACA,QAIA,QACA,QACA,UAGA,UAAS,EAAAA,2BAAA,EAAAA,2BACT,QAkBA,kBACE,sBAAYC,EAA0BC,GAAtC,MACE,YAAMD,EAAOC,IAAQ,K,OAoBf,EAAAC,qBAAuB,WACvB,yCACJC,EAAA,EAAAA,oBACAC,EAAA,EAAAA,oBACAC,EAAA,EAAAA,MACAC,EAAA,EAAAA,YACAC,EAAA,EAAAA,mBACAC,EAAA,EAAAA,MACAC,EAAA,EAAAA,aACAC,EAAA,EAAAA,mBACAC,EAAA,EAAAA,oBAGIC,EAAa,EAAKZ,MAAMY,WAC1B,EAAKZ,MAAMY,WACX,SAACC,GACC,EAAAC,mBAAmBD,EAAMT,IAAiCW,SAAQ,SAACC,GAAM,OAAAA,MAEzEC,EAAsB,CAC1BX,YAAaA,EACbD,MAAOA,EACPK,mBAAoBA,EACpBC,oBAAqBA,EACrBH,MAAOA,EACPC,aAAcA,EACdS,aAAcf,EACdgB,iBAAkBf,EAClBG,mBAAoBA,EACpBa,QAAS,CACPR,WAAYA,GAEdS,UAAW,CACTC,WAAY,EAAKtB,MAAMuB,WAI3B,OAAO,EAAAC,cACL,EAAAC,oBAEAC,EAAEC,OAA2DV,EAAqBS,EAAEE,e,EAsB1F,OAnFkC,4BAazB,uBAAAC,OAAP,WACE,OAAOC,EAAEC,IACP,CACEC,UAAW,iBAEbC,KAAK/B,yBA+CD,uBAAAgC,wBAAR,SAAgClC,GAgB9B,OAfIA,EAAMmC,mBACRnC,EAAQ,EAAH,uBACAA,GAAK,CACRM,YAAaN,EAAMmC,oBAGnBnC,EAAMoC,oBACRpC,EAAMI,oBAAsBJ,EAAMoC,kBAAkBhC,oBACpDJ,EAAMuB,SAAWvB,EAAMoC,kBAAkBb,SACzCvB,EAAQ,EAAH,uBACAA,GAAK,CACRI,oBAAqBJ,EAAMoC,kBAAkBhC,oBAC7CmB,SAAUvB,EAAMoC,kBAAkBb,YAG/BvB,GA5EF,aAAAqC,aAAe,CACpB/B,YAAa,wCACbC,mBAAoB,YACpBJ,oBAAqB,EACrBC,oBAAqB,WACrBmB,SAAU,kDAyEd,aAnFA,CAAkC,EAAAe,WAArB,EAAAC,eAqFb,UAAeA,G","file":"semantic-simple-search-5f6c7736f7fc24d5a785.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { ReactElement, createElement } from 'react';\nimport * as D from 'react-dom-factories';\nimport * as _ from 'lodash';\n\nimport { SparqlClient } from 'platform/api/sparql';\nimport { Rdf } from 'platform/api/rdf';\nimport { navigateToResource } from 'platform/api/navigation';\nimport { Component, ComponentContext } from 'platform/api/components';\nimport { AutoCompletionInput, AutoCompletionInputProps } from 'platform/components/ui/inputs';\n\nimport { SemanticSimpleSearchConfig } from './Config';\nexport { SemanticSimpleSearchConfig } from './Config';\nimport './SimpleSearch.scss';\n\nexport interface SimpleSearchProps extends SemanticSimpleSearchConfig {\n  onSelected?: (value: SparqlClient.Binding | SparqlClient.Binding[]) => void;\n  defaultQuery?: string;\n  multi?: boolean;\n}\n\ninterface BackwardCompatibilityProps extends SimpleSearchProps {\n  inputPlaceholder?: string;\n  resourceSelection?: { resourceBindingName?: string; template: string };\n}\n\ninterface SimpleSearchState {\n  result?: Data.Maybe<SparqlClient.SparqlSelectResult>;\n  isLoading?: boolean;\n}\n\nexport class SimpleSearch extends Component<SimpleSearchProps, SimpleSearchState> {\n  constructor(props: SimpleSearchProps, context: ComponentContext) {\n    super(props, context);\n  }\n\n  static defaultProps = {\n    placeholder: 'type to search, minimum 3 symbols ...',\n    searchTermVariable: '__token__',\n    minSearchTermLength: 3,\n    resourceBindingName: 'resource',\n    template: '<mp-label iri=\"{{resource.value}}\"></mp-label>',\n  };\n\n  public render() {\n    return D.div(\n      {\n        className: 'search-widget',\n      },\n      this.renderAutosuggestion()\n    );\n  }\n\n  private renderAutosuggestion = (): ReactElement<AutoCompletionInputProps> => {\n    const {\n      minSearchTermLength,\n      resourceBindingName,\n      query,\n      placeholder,\n      searchTermVariable,\n      multi,\n      defaultQuery,\n      escapeLuceneSyntax,\n      tokenizeLuceneQuery,\n    } = this.backwardCompatibleProps(this.props as BackwardCompatibilityProps);\n    // use external onSelected function if any\n    const onSelected = this.props.onSelected\n      ? this.props.onSelected\n      : (value) => {\n          navigateToResource(value[resourceBindingName] as Rdf.Iri).onValue((x) => x);\n        };\n    const autoSuggestionProps = {\n      placeholder: placeholder,\n      query: query,\n      escapeLuceneSyntax: escapeLuceneSyntax,\n      tokenizeLuceneQuery: tokenizeLuceneQuery,\n      multi: multi,\n      defaultQuery: defaultQuery,\n      minimumInput: minSearchTermLength,\n      valueBindingName: resourceBindingName,\n      searchTermVariable: searchTermVariable,\n      actions: {\n        onSelected: onSelected,\n      },\n      templates: {\n        suggestion: this.props.template,\n      },\n    };\n\n    return createElement(\n      AutoCompletionInput,\n      // remove all undefined props so default values are properly picked\n      _.omitBy<AutoCompletionInputProps, AutoCompletionInputProps>(autoSuggestionProps, _.isUndefined)\n    );\n  };\n\n  private backwardCompatibleProps(props: BackwardCompatibilityProps): SimpleSearchProps {\n    if (props.inputPlaceholder) {\n      props = {\n        ...props,\n        placeholder: props.inputPlaceholder,\n      };\n    }\n    if (props.resourceSelection) {\n      props.resourceBindingName = props.resourceSelection.resourceBindingName;\n      props.template = props.resourceSelection.template;\n      props = {\n        ...props,\n        resourceBindingName: props.resourceSelection.resourceBindingName,\n        template: props.resourceSelection.template,\n      };\n    }\n    return props;\n  }\n}\n\nexport default SimpleSearch;\n"],"sourceRoot":""}