{"version":3,"sources":["webpack:///./src/main/web/components/forms/index.ts","webpack:///./src/main/web/components/forms/static/index.ts","webpack:///./src/main/web/components/forms/auto-form/FormGenerator.tsx"],"names":["readyToSubmit","fieldInitialState","generateSubjectByTemplate","wasIriGeneratedByTemplate","queryValues","ValuePatch","applyValuePatch","computeValuePatch","GenerateFormFromFieldsParams","InputOverride","InputOverrideTarget","FieldInputElement","generateFormFromFields","LdpPersistence","LdpPersistenceConfig","RawSparqlPersistence","RawSparqlPersistenceConfig","FormErrors","FormErrorsProps","RecoverNotification","RecoverNotificationProps","rdf","xsd","generateInputForField","field","treePatterns","TreePickerInput","for","id","autosuggestionPattern","AutocompleteInput","valueSetPattern","SelectInput","xsdDatatype","value","date","time","dateTime","DatePickerInput","boolean","CheckboxInput","_string","langString","PlainTextInput","params","content","fields","lastMatched","overrides","override","fieldIri","datatype","iri","input","generatedInput","React","cloneElement","push","name","className"],"mappings":"4IAmBA,0BACA,0BACA,0BACA,cAAS,EAAAA,cAAA,EAAAA,cAAe,EAAAC,kBAAA,EAAAA,kBAAmB,EAAAC,0BAAA,EAAAA,0BAA2B,EAAAC,0BAAA,EAAAA,0BACtE,0BACA,0BACA,0BACA,cAAS,EAAAC,YAAA,EAAAA,YACT,cAAS,EAAAC,WAAA,EAAAA,WAAY,EAAAC,gBAAA,EAAAA,gBAAiB,EAAAC,kBAAA,EAAAA,kBAEtC,0BACA,0BAEA,cACE,EAAAC,6BAAA,EAAAA,6BACA,EAAAC,cAAA,EAAAA,cACA,EAAAC,oBAAA,EAAAA,oBACA,EAAAC,kBAAA,EAAAA,kBACA,EAAAC,uBAAA,EAAAA,uBAEF,0BACA,0BACA,cAAS,EAAAC,eAAA,EAAAA,eAAgB,EAAAC,qBAAA,EAAAA,qBACzB,cAAS,EAAAC,qBAAA,EAAAA,qBAAsB,EAAAC,2BAAA,EAAAA,4B,kFCvB/B,0BAEA,0BACA,cAAS,EAAAC,WAAA,EAAAA,WAAY,EAAAC,gBAAA,EAAAA,gBACrB,0BACA,cAAS,EAAAC,oBAAA,EAAAA,oBAAqB,EAAAC,yBAAA,EAAAA,0B,sECN9B,WAEA,QAIA,UACA,UACA,UACA,UACA,UACA,UACA,UAGQC,EAAA,eAAAA,IAAKC,EAAA,eAAAA,IAkDb,SAASC,sBAAsBC,GAC7B,GAAIA,EAAMC,aACR,OAAO,gBAAC,EAAAC,gBAAe,CAACC,IAAKH,EAAMI,KAGrC,GAAIJ,EAAMK,sBACR,OAAO,gBAAC,EAAAC,kBAAiB,CAACH,IAAKH,EAAMI,KAGvC,GAAIJ,EAAMO,gBACR,OAAO,gBAAC,EAAAC,YAAW,CAACL,IAAKH,EAAMI,KAGjC,GAAIJ,EAAMS,YACR,OAAQT,EAAMS,YAAYC,OACxB,KAAKZ,EAAIa,KAAKD,MACd,KAAKZ,EAAIc,KAAKF,MACd,KAAKZ,EAAIe,SAASH,MAChB,OAAO,gBAAC,EAAAI,gBAAe,CAACX,IAAKH,EAAMI,KAErC,KAAKN,EAAIiB,QAAQL,MACf,OAAO,gBAAC,EAAAM,cAAa,CAACb,IAAKH,EAAMI,KAEnC,KAAKN,EAAImB,QAAQP,MACjB,KAAKb,EAAIqB,WAAWR,MAClB,OAAO,gBAAC,EAAAS,eAAc,CAAChB,IAAKH,EAAMI,KAKxC,OAAO,gBAAC,EAAAe,eAAc,CAAChB,IAAKH,EAAMI,KA7DpC,kCAAgBhB,uBAAuBgC,GAErC,IADA,IAAMC,EAAyB,GACX,MAAAD,EAAOE,OAAP,eAAe,CAEjC,IAFG,IAAMtB,EAAK,KACVuB,OAAW,EACQ,MAAAH,EAAOI,UAAP,eAAkB,CAApC,IAAMC,EAAQ,KACX,WAAEC,EAAA,EAAAA,SAAUC,EAAA,EAAAA,UACdD,GAAYA,IAAa1B,EAAM4B,KAExBD,GAAY3B,EAAMS,aAAeT,EAAMS,YAAYC,QAAUiB,KADtEJ,EAAcE,EAASI,OAK3B,IAAMC,EAAiBP,EACnBQ,EAAMC,aAAaT,EAAa,CAAEpB,IAAKH,EAAM4B,MAC7C7B,sBAAsBC,GAC1BqB,EAAQY,KAAKH,GAaf,OAXAT,EAAQY,KAAK,gBAAC,EAAAxC,WAAU,OACxB4B,EAAQY,KACN,0BAAQC,KAAK,SAASC,UAAU,mBAAiB,SAInDd,EAAQY,KACN,0BAAQC,KAAK,QAAQC,UAAU,mBAAiB,UAI3Cd","file":"default~diagram-search-result~mp-sparql-query-editor~mp-spin-query-template-editor~ontodia~ontodia-e~1f2fea63-5207274078ed377f867d.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nexport * from './FieldDefinition';\nexport * from './FieldMapping';\nexport * from './FieldValues';\nexport { readyToSubmit, fieldInitialState, generateSubjectByTemplate, wasIriGeneratedByTemplate } from './FormModel';\nexport * from './ResourceEditorForm';\nexport * from './ResourceEditorFormConfig';\nexport * from './SemanticForm';\nexport { queryValues } from './QueryValues';\nexport { ValuePatch, applyValuePatch, computeValuePatch } from './Serialization';\n\nexport * from './inputs';\nexport * from './static';\n\nexport {\n  GenerateFormFromFieldsParams,\n  InputOverride,\n  InputOverrideTarget,\n  FieldInputElement,\n  generateFormFromFields,\n} from './auto-form/FormGenerator';\nexport * from './persistence/PersistenceUtils';\nexport * from './persistence/TriplestorePersistence';\nexport { LdpPersistence, LdpPersistenceConfig } from './persistence/LdpPersistence';\nexport { RawSparqlPersistence, RawSparqlPersistenceConfig } from './persistence/RawSparqlPersistence';\n","/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nexport * from './StaticComponent';\n\nexport * from './Description';\nexport { FormErrors, FormErrorsProps } from './FormErrors';\nexport * from './Label';\nexport { RecoverNotification, RecoverNotificationProps } from './RecoverNotification';\n","/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\n\nimport { vocabularies } from 'platform/api/rdf';\n\nimport { SingleValueInputProps } from '../inputs/SingleValueInput';\nimport { MultipleValuesProps } from '../inputs/MultipleValuesInput';\nimport { AutocompleteInput } from '../inputs/AutocompleteInput';\nimport { TreePickerInput } from '../inputs/TreePickerInput';\nimport { SelectInput } from '../inputs/SelectInput';\nimport { DatePickerInput } from '../inputs/DatePickerInput';\nimport { CheckboxInput } from '../inputs/CheckboxInput';\nimport { PlainTextInput } from '../inputs/PlainTextInput';\nimport { FormErrors } from '../static';\nimport { FieldDefinition } from '../FieldDefinition';\n\nconst { rdf, xsd } = vocabularies;\n\nexport interface GenerateFormFromFieldsParams {\n  fields: ReadonlyArray<FieldDefinition>;\n  overrides: ReadonlyArray<InputOverride>;\n}\n\nexport interface InputOverride {\n  readonly target: InputOverrideTarget;\n  readonly input: FieldInputElement;\n}\n\nexport interface InputOverrideTarget {\n  fieldIri?: string;\n  datatype?: string;\n}\n\nexport type FieldInputElement = React.ReactElement<SingleValueInputProps | MultipleValuesProps>;\n\nexport function generateFormFromFields(params: GenerateFormFromFieldsParams): JSX.Element[] {\n  const content: JSX.Element[] = [];\n  for (const field of params.fields) {\n    let lastMatched: FieldInputElement | undefined;\n    for (const override of params.overrides) {\n      const { fieldIri, datatype } = override.target;\n      if (fieldIri && fieldIri === field.iri) {\n        lastMatched = override.input;\n      } else if (datatype && field.xsdDatatype && field.xsdDatatype.value === datatype) {\n        lastMatched = override.input;\n      }\n    }\n    const generatedInput = lastMatched\n      ? React.cloneElement(lastMatched, { for: field.iri })\n      : generateInputForField(field);\n    content.push(generatedInput);\n  }\n  content.push(<FormErrors />);\n  content.push(\n    <button name=\"submit\" className=\"btn btn-default\">\n      Save\n    </button>\n  );\n  content.push(\n    <button name=\"reset\" className=\"btn btn-default\">\n      Reset\n    </button>\n  );\n  return content;\n}\n\nfunction generateInputForField(field: FieldDefinition): JSX.Element {\n  if (field.treePatterns) {\n    return <TreePickerInput for={field.id} />;\n  }\n\n  if (field.autosuggestionPattern) {\n    return <AutocompleteInput for={field.id} />;\n  }\n\n  if (field.valueSetPattern) {\n    return <SelectInput for={field.id} />;\n  }\n\n  if (field.xsdDatatype) {\n    switch (field.xsdDatatype.value) {\n      case xsd.date.value:\n      case xsd.time.value:\n      case xsd.dateTime.value: {\n        return <DatePickerInput for={field.id} />;\n      }\n      case xsd.boolean.value: {\n        return <CheckboxInput for={field.id} />;\n      }\n      case xsd._string.value:\n      case rdf.langString.value: {\n        return <PlainTextInput for={field.id} />;\n      }\n    }\n  }\n\n  return <PlainTextInput for={field.id} />;\n}\n"],"sourceRoot":""}