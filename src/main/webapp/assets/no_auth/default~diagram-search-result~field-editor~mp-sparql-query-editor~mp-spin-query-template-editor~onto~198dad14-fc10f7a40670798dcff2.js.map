{"version":3,"sources":["webpack:///./src/main/web/components/semantic/lazy-tree/index.ts","webpack:///./src/main/web/components/semantic/lazy-tree/QueryDefaults.ts"],"names":["createRootsQuery","relation","scheme","orderBy","labelPropertyPattern","query","SparqlUtil","parseQuery","childRelation","bindTreePatterns","itemVar","parentVar","PatternBinder","sparqlQuery","createChildrenQuery","createParentsQuery","parentScheme","createSearchQuery","treePattern","patternClone","cloneDeep","VariableRenameBinder","forEach","p","pattern","DefaultLightweightPatterns","schemePattern","relationPattern","orderByPattern","createDefaultTreeQueries","params","prefixes","parsePatterns","schemeIri","Rdf","iri","VariableBinder","__scheme__","patterns","rootsQuery","serializeQuery","childrenQuery","parentsQuery","searchQuery"],"mappings":"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","file":"default~diagram-search-result~field-editor~mp-sparql-query-editor~mp-spin-query-template-editor~onto~198dad14-fc10f7a40670798dcff2.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nexport * from './TreeSelection';\nexport * from './SemanticTreeInput';\nexport * from './NodeModel';\nexport * from './SparqlNodeModel';\nexport * from './LazyTreeSelector';\nexport * from './SelectionMode';\nexport * from './GraphAlgorithms';\nexport * from './KeyedForest';\nexport * from './QueryDefaults';\n","/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { cloneDeep } from 'lodash';\nimport * as SparqlJs from 'sparqljs';\n\nimport { Rdf } from 'platform/api/rdf';\nimport { SparqlUtil, VariableBinder, VariableRenameBinder, PatternBinder } from 'platform/api/sparql';\nimport { ConfigHolder } from 'platform/api/services/config-holder';\n\nimport { ComplexTreePatterns } from './SemanticTreeInput';\n\nexport interface LightwightTreePatterns {\n  /**\n   * Binds to `?__scheme__` variable in the `schemePattern`\n   */\n  scheme?: string;\n  /**\n   * Input bindings: `?__scheme__`\n   * Output bindings: `?item`\n   */\n  schemePattern?: string;\n  /**\n   * Output bindings: `?item`, `?parent`\n   */\n  relationPattern?: string;\n\n  /**\n   * Input bindings: `?item`\n   * Output bindings: `?order`\n   */\n  orderByPattern?: string;\n}\n\nexport const DefaultLightweightPatterns = {\n  schemePattern: '?item <http://www.w3.org/2004/02/skos/core#inScheme> ?__scheme__',\n  relationPattern: '?item <http://www.w3.org/2004/02/skos/core#broader> ?parent',\n  orderByPattern: 'BIND(?label as ?order) .'\n};\n\nexport function createDefaultTreeQueries(params: LightwightTreePatterns = {}): ComplexTreePatterns {\n  const {\n    schemePattern = DefaultLightweightPatterns.schemePattern,\n    relationPattern = DefaultLightweightPatterns.relationPattern,\n    orderByPattern = DefaultLightweightPatterns.orderByPattern\n  } = params;\n\n  const prefixes = SparqlUtil.parseQuery('SELECT * WHERE {}').prefixes;\n  const relation =\n    typeof relationPattern === 'string' ? SparqlUtil.parsePatterns(relationPattern, prefixes) : relationPattern;\n  const orderBy = SparqlUtil.parsePatterns(orderByPattern, prefixes);\n\n  let scheme: ReadonlyArray<SparqlJs.Pattern> = [];\n  if (params.scheme || params.schemePattern) {\n    scheme = SparqlUtil.parsePatterns(schemePattern, prefixes);\n    if (params.scheme) {\n      const schemeIri = Rdf.iri(params.scheme);\n      const binder = new VariableBinder({ __scheme__: schemeIri });\n      scheme.forEach((p) => binder.pattern(p));\n    }\n  }\n\n  const patterns = { relation, scheme, orderBy };\n  return {\n    rootsQuery: SparqlUtil.serializeQuery(createRootsQuery(patterns)),\n    childrenQuery: SparqlUtil.serializeQuery(createChildrenQuery(patterns)),\n    parentsQuery: SparqlUtil.serializeQuery(createParentsQuery(patterns)),\n    searchQuery: SparqlUtil.serializeQuery(createSearchQuery(patterns)),\n  };\n}\n\ninterface TreePatterns {\n  /** Output bindings: `?item`, `?parent` */\n  relation: ReadonlyArray<SparqlJs.Pattern>;\n  /** Output bindings: `?item` */\n  scheme: ReadonlyArray<SparqlJs.Pattern>;\n  /** Output bindings: `?order` */\n  orderBy: ReadonlyArray<SparqlJs.Pattern>;\n}\n\nfunction createRootsQuery({ relation, scheme, orderBy }: TreePatterns) {\n  const { labelPropertyPattern } = ConfigHolder.getUIConfig();\n  const query = SparqlUtil.parseQuery(`\n    SELECT DISTINCT ?item ?label ?hasChildren WHERE {\n      FILTER(?__scheme__)\n      FILTER NOT EXISTS { { FILTER(?__relation__) } }\n      ?item ${labelPropertyPattern} ?label .\n      OPTIONAL { FILTER(?__childRelation__) }\n      BIND(bound(?child) as ?hasChildren)\n      OPTIONAL {\n        FILTER(?__orderBy__)\n      }\n    } ORDER BY ?order ?label\n  `);\n  const childRelation = bindTreePatterns(relation, { itemVar: 'child', parentVar: 'item' });\n  new PatternBinder('__childRelation__', childRelation).sparqlQuery(query);\n  new PatternBinder('__relation__', relation).sparqlQuery(query);\n  new PatternBinder('__scheme__', scheme).sparqlQuery(query);\n  new PatternBinder('__orderBy__', orderBy).sparqlQuery(query);\n  return query;\n}\n\nfunction createChildrenQuery({ relation, scheme, orderBy }: TreePatterns) {\n  const { labelPropertyPattern } = ConfigHolder.getUIConfig();\n  const query = SparqlUtil.parseQuery(`\n    SELECT DISTINCT ?item ?label ?hasChildren WHERE {\n      FILTER(?__relation__)\n      FILTER(?__scheme__)\n      ?item ${labelPropertyPattern} ?label .\n      OPTIONAL { FILTER(?__childRelation__) }\n      BIND(bound(?child) as ?hasChildren)\n      OPTIONAL {\n        FILTER(?__orderBy__)\n      }\n    } ORDER BY ?order ?label\n  `);\n  const childRelation = bindTreePatterns(relation, { itemVar: 'child', parentVar: 'item' });\n  new PatternBinder('__childRelation__', childRelation).sparqlQuery(query);\n  new PatternBinder('__relation__', relation).sparqlQuery(query);\n  new PatternBinder('__scheme__', scheme).sparqlQuery(query);\n  new PatternBinder('__orderBy__', orderBy).sparqlQuery(query);\n  return query;\n}\n\nfunction createParentsQuery({ relation, scheme }: TreePatterns) {\n  const { labelPropertyPattern } = ConfigHolder.getUIConfig();\n  const query = SparqlUtil.parseQuery(`\n    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n    select distinct ?item ?parent ?parentLabel where {\n      FILTER(?__parentScheme__)\n      FILTER(?__relation__)\n      ?parent ${labelPropertyPattern} ?parentLabel .\n    }\n  `);\n  const parentScheme = bindTreePatterns(scheme, { itemVar: 'parent' });\n  new PatternBinder('__parentScheme__', parentScheme).sparqlQuery(query);\n  new PatternBinder('__relation__', relation).sparqlQuery(query);\n  return query;\n}\n\nfunction createSearchQuery({ relation, scheme, orderBy }: TreePatterns) {\n  const { labelPropertyPattern } = ConfigHolder.getUIConfig();\n  const query = SparqlUtil.parseQuery(`\n    PREFIX bds: <http://www.bigdata.com/rdf/search#>\n    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n    SELECT DISTINCT ?item ?label ?score ?hasChildren WHERE {\n      FILTER(?__scheme__)\n      ?item ${labelPropertyPattern} ?label.\n      ?label bds:search ?__token__ ;\n            bds:minRelevance \"0.3\" ;\n            bds:relevance ?score ;\n            bds:matchAllTerms \"true\"  .\n      OPTIONAL { FILTER(?__childRelation__) }\n      BIND(BOUND(?child) AS ?hasChildren)\n      OPTIONAL {\n        FILTER(?__orderBy__)\n      }\n    }\n    ORDER BY DESC(?score) ?order ?label\n    LIMIT 200\n  `);\n  const childRelation = bindTreePatterns(relation, { itemVar: 'child', parentVar: 'item' });\n  new PatternBinder('__childRelation__', childRelation).sparqlQuery(query);\n  new PatternBinder('__scheme__', scheme).sparqlQuery(query);\n  new PatternBinder('__orderBy__', orderBy).sparqlQuery(query);\n  return query;\n}\n\nfunction bindTreePatterns(\n  treePattern: ReadonlyArray<SparqlJs.Pattern>,\n  { itemVar, parentVar }: { itemVar: string; parentVar?: string }\n): SparqlJs.Pattern[] {\n  const patternClone = cloneDeep(treePattern) as SparqlJs.Pattern[];\n\n  if (itemVar !== 'item') {\n    const sourceRenamer = new VariableRenameBinder('item', itemVar);\n    patternClone.forEach((p) => sourceRenamer.pattern(p));\n  }\n\n  if (parentVar && parentVar !== 'parent') {\n    const targetRenamer = new VariableRenameBinder('parent', parentVar);\n    patternClone.forEach((p) => targetRenamer.pattern(p));\n  }\n\n  return patternClone;\n}\n"],"sourceRoot":""}