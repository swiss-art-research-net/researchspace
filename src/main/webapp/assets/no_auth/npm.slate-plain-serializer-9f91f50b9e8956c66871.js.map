{"version":3,"sources":["webpack:///./node_modules/slate-plain-serializer/lib/slate-plain-serializer.es.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","serializeNode","node","options","undefined","_options$delimiter2","delimiter","object","isBlockList","nodes","map","join","text","index","deserialize","string","_options$defaultBlock","defaultBlock","_options$defaultMarks","defaultMarks","_options$delimiter","_options$toJSON","toJSON","isSet","toArray","createProperties","json","document","data","split","line","leaves","marks","ret","fromJSON","serialize","value"],"mappings":"6FAAA,6BAGIA,EAAWC,OAAOC,QAAU,SAAUC,GACxC,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CACzC,IAAIG,EAASF,UAAUD,GAEvB,IAAK,IAAII,KAAOD,EACVN,OAAOQ,UAAUC,eAAeC,KAAKJ,EAAQC,KAC/CL,EAAOK,GAAOD,EAAOC,IAK3B,OAAOL,GA+ET,SAASS,cAAcC,GACrB,IAAIC,EAAUT,UAAUC,OAAS,QAAsBS,IAAjBV,UAAU,GAAmBA,UAAU,GAAK,GAC9EW,EAAsBF,EAAQG,UAC9BA,OAAoCF,IAAxBC,EAAoC,KAAOA,EAG3D,MAAoB,aAAhBH,EAAKK,QAAyC,UAAhBL,EAAKK,QAAsB,QAAMC,YAAYN,EAAKO,OAC3EP,EAAKO,MAAMC,IAAIT,eAAeU,KAAKL,GAEnCJ,EAAKU,KAUhB,IAAIC,EAAQ,CACVC,YArFF,SAASA,YAAYC,GACnB,IAAIZ,EAAUT,UAAUC,OAAS,QAAsBS,IAAjBV,UAAU,GAAmBA,UAAU,GAAK,GAC9EsB,EAAwBb,EAAQc,aAChCA,OAAyCb,IAA1BY,EAAsC,OAASA,EAC9DE,EAAwBf,EAAQgB,aAChCA,OAAyCf,IAA1Bc,EAAsC,GAAKA,EAC1DE,EAAqBjB,EAAQG,UAC7BA,OAAmCF,IAAvBgB,EAAmC,KAAOA,EACtDC,EAAkBlB,EAAQmB,OAC1BA,OAA6BlB,IAApBiB,GAAwCA,EAGjD,MAAIE,MAAMJ,KACZA,EAAeA,EAAaK,WAG9BP,EAAe,OAAKQ,iBAAiBR,GACrCE,EAAeA,EAAaT,IAAI,OAAKe,kBAErC,IAAIC,EAAO,CACTnB,OAAQ,QACRoB,SAAU,CACRpB,OAAQ,WACRqB,KAAM,GACNnB,MAAOM,EAAOc,MAAMvB,GAAWI,KAAI,SAAUoB,GAC3C,OAAOzC,EAAS,GAAI4B,EAAc,CAChCV,OAAQ,QACRqB,KAAM,GACNnB,MAAO,CAAC,CACNF,OAAQ,OACRwB,OAAQ,CAAC,CACPxB,OAAQ,OACRK,KAAMkB,EACNE,MAAOb,aAQfc,EAAMX,EAASI,EAAO,QAAMQ,SAASR,GACzC,OAAOO,GA4CPE,UAlCF,SAASA,UAAUC,GACjB,IAAIjC,EAAUT,UAAUC,OAAS,QAAsBS,IAAjBV,UAAU,GAAmBA,UAAU,GAAK,GAElF,OAAOO,cAAcmC,EAAMT,SAAUxB,KAkCxB","file":"npm.slate-plain-serializer-9f91f50b9e8956c66871.js","sourcesContent":["import { Block, Mark, Node, Value } from 'slate';\nimport { Set } from 'immutable';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n/**\n * Deserialize a plain text `string` to a Slate value.\n *\n * @param {String} string\n * @param {Object} options\n *   @property {Boolean} toJSON\n *   @property {String|Object|Block} defaultBlock\n *   @property {Array|Set} defaultMarks\n * @return {Value}\n */\n\nfunction deserialize(string) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$defaultBlock = options.defaultBlock,\n      defaultBlock = _options$defaultBlock === undefined ? 'line' : _options$defaultBlock,\n      _options$defaultMarks = options.defaultMarks,\n      defaultMarks = _options$defaultMarks === undefined ? [] : _options$defaultMarks,\n      _options$delimiter = options.delimiter,\n      delimiter = _options$delimiter === undefined ? '\\n' : _options$delimiter,\n      _options$toJSON = options.toJSON,\n      toJSON = _options$toJSON === undefined ? false : _options$toJSON;\n\n\n  if (Set.isSet(defaultMarks)) {\n    defaultMarks = defaultMarks.toArray();\n  }\n\n  defaultBlock = Node.createProperties(defaultBlock);\n  defaultMarks = defaultMarks.map(Mark.createProperties);\n\n  var json = {\n    object: 'value',\n    document: {\n      object: 'document',\n      data: {},\n      nodes: string.split(delimiter).map(function (line) {\n        return _extends({}, defaultBlock, {\n          object: 'block',\n          data: {},\n          nodes: [{\n            object: 'text',\n            leaves: [{\n              object: 'leaf',\n              text: line,\n              marks: defaultMarks\n            }]\n          }]\n        });\n      })\n    }\n  };\n\n  var ret = toJSON ? json : Value.fromJSON(json);\n  return ret;\n}\n\n/**\n * Serialize a Slate `value` to a plain text string.\n *\n * @param {Value} value\n * @return {String}\n */\n\nfunction serialize(value) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  return serializeNode(value.document, options);\n}\n\n/**\n * Serialize a `node` to plain text.\n *\n * @param {Node} node\n * @return {String}\n */\n\nfunction serializeNode(node) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$delimiter2 = options.delimiter,\n      delimiter = _options$delimiter2 === undefined ? '\\n' : _options$delimiter2;\n\n\n  if (node.object === 'document' || node.object === 'block' && Block.isBlockList(node.nodes)) {\n    return node.nodes.map(serializeNode).join(delimiter);\n  } else {\n    return node.text;\n  }\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nvar index = {\n  deserialize: deserialize,\n  serialize: serialize\n};\n\nexport default index;\n//# sourceMappingURL=slate-plain-serializer.es.js.map\n"],"sourceRoot":""}