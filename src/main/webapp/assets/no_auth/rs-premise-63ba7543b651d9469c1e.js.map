{"version":3,"sources":["webpack:///./src/main/web/components/arguments/premise/PremiseComponent.tsx","webpack:///./src/main/web/components/arguments/premise/ExistingBeliefView.tsx","webpack:///./src/main/web/components/arguments/premise/BeliefSelection.tsx","webpack:///./src/main/web/components/arguments/ArgumentsStore.ts","webpack:///./src/main/web/components/arguments/premise/ObservationComponent.tsx","webpack:///./src/main/web/components/arguments/premise/BeliefAdoptionComponent.tsx","webpack:///./src/main/web/components/arguments/premise/InferenceMakingComponent.tsx","webpack:///./src/main/web/components/arguments/premise/PremiseEvents.ts"],"names":["Status","props","context","cancellation","Cancellation","editArgument","argument","setState","editingArgumentIndex","_","findIndex","state","premises","arg","removeArgument","prevState","filter","a","argumentFrame","Form","FormGroup","ControlLabel","FormControl","Static","title","note","children","Button","bsSize","bsClass","style","marginLeft","onClick","className","renderObservationArgument","SemanticContextProvider","repository","ResourceLinkComponent","uri","place","value","moment","date","format","renderBeliefAdoptionArgument","assertionBasedBeliefTemplate","fieldBasedBeliefTemplate","Row","Col","md","ExistingBeliefView","belief","renderInferenceArgument","logicType","styles","evidenceList","map","premise","renderPremiseComponent","argumentType","ObservationType","BeliefAdoptionType","InferenceType","cancelNewArgument","addingPremise","newArgumentType","undefined","addArgument","push","premiseForm","initialState","acceptEvidenceQuery","logicTypeQuery","ObservationComponent","onSave","onCancel","BeliefAdoptionComponent","acceptRecordQuery","InferenceMakingComponent","newPremiseSelection","premiseTypeSelection","length","name","onArgumentTypeChange","isArgumentTypeSelected","Radio","checked","inline","renderPremise","index","hr","assertionIri","assertion","Rdf","iri","status","Loading","componentDidMount","this","loadArguments","listenToEvents","componentDidUpdate","prevProps","onChangeArguments","componentWillUnmount","cancelAll","id","trigger","source","eventType","BuiltInEvents","ComponentLoading","loadArgumentsForAssertion","observe","initialPremises","ComponentLoaded","error","console","end","listen","PremiseEvents","SaveArguments","target","onValue","saveArguments","AddArgument","Saving","ArgumentsSaving","loadAssertion","flatMap","beliefs","getOrElse","ArgumentsSaved","data","addNotification","level","message","render","Spinner","defaultProps","crminf","I3_Inference_Logic","rdfs","label","Component","newArguments","initialArguments","removingInitialArguments","Kefir","zip","toProperty","constant","removeInitialArguments","savingArguments","conclusions","saveArgument","Maybe","Just","PremiseComponent","renderCustomBeliefTemplate","template","evidenceCustom","evidenceCustomDeleteButton","TemplateItem","options","close","argumentBeliefType","ArgumentsBeliefTypeAssertionKind","Panel","header","evidence","ExistingBeliefContentView","ArgumentsBeliefTypeFieldKind","componentClass","sm","guessRepository","field","recordDropArea","DropArea","alwaysVisible","query","onDrop","onRecordDrop","dropMessage","messages","dropRecordPlaceholder","evidenceDropArea","viewBelief","argumentsBeliefType","fieldSelection","multiSelection","horizontal","FieldSelection","record","types","placeholder","fieldSelectionPlaceholder","onCancelBelief","onFieldSelection","smOffset","ButtonGroup","bsStyle","onSelectBelief","get","resource","getTypes","isAssertion","some","t","rso","EX_Assertion","equals","beliefType","BeliefTypeArgumentsKind","selectedFields","getOverlaySystem","show","OverlayDialog","onHide","type","selected","normalizedSelected","Array","isArray","hideFieldSelectionDialog","hide","finalBeliefs","Nothing","originRepository","SimpleBeliefValue","Agree","b","onSelect","repositories","getRepositoryStatus","repos","keySeq","toArray","TYPES_QUERY","SparqlUtil","Sparql","combine","r","getTypesFromRepository","flatten","uniqWith","SparqlClient","select","setBindings","__resource__","result","results","bindings","binding","React","BeliefSelection","rdf","assertionContainer","ldpc","ArgumentsContainer","findArgumentsForAssertion","FIND_ARGUMENTS_QUERY","__assertion__","res","argumentIris","isEmpty","graph","pg","graphs","deserializeArgument","getValuesFromPropertyPath","crmsci","S19_Encounter_Event","deserializeObservation","pointer","getValueFromPropertyPath","v","crm","P3_has_note","O21_has_found_at","P4_has_time_span","P82a_begin_of_the_begin","I7_Belief_Adoption","deserializeBeliefAdoption","adoptedBeliefAssertion","PX_adopted_assertion","isJust","adoptedFieldBeliefsIri","head","J6_adopted","deserializeBelief","deserializeInference","premiseIris","J1_used_as_premise","J3_applies","PX_premise_assertion","assertionBelief","PX_premise_target","PX_premise_field","PX_premise_target_repository","l","getArgumentsFieldDefinition","fieldDefition","container","getBeliefsForArgument","argumentIri","matchArgument","Inference","inference","getBeliefGraphs","x","BeliefAdoption","beliefAdoption","Observation","o","serializeArgument","newArgumentIri","conclusionTriples","triple","BASE_IRI","J2_concluded_that","baseArgumentGraph","vocabularies","I1_Argumentation","literal","specificArgumentGraph","serializeSpecificArgument","union","i","serializeInference","ba","serializeBeliefAdoption","serializeObservation","triples","observation","observationTimePg","createObservationTimeSpan","S4_Observation","toJS","timeIri","uuid","v4","time","P82a_end_of_the_end","displayLabel","beliefPg","I5_Inference_Making","argumentGraph","addResource","deleteResource","DateTimePicker","createFactory","reactDatetime","PlaceSelectionConfig","parentsQuery","childrenQuery","rootsQuery","searchQuery","onTitleChange","event","onNoteChange","onDateSelected","xsd","dateTime","onPlaceSelected","selection","TreeSelection","leafs","node","first","canSave","onChange","closeOnSelect","viewMode","dateFormat","timeFormat","inputProps","SemanticTreeInput","initialSelection","onSelectionChanged","disabled","newBelief","beliefHeader","fieldSelectionHeader","onFieldsSelection","LogicSelector","logicTypeSelector","logics","find","option","onLogicChange","clearable","newPremise","savePremise","concat","removePremise","newPremises","splice","evidenceItem","evidenceSelector","EventMaker"],"mappings":"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","file":"rs-premise-63ba7543b651d9469c1e.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2015-2020, © Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as React from 'react';\nimport { Button, Col, ControlLabel, Form, FormControl, FormGroup, Radio, Row } from 'react-bootstrap';\nimport * as moment from 'moment';\nimport * as _ from 'lodash';\nimport * as Kefir from 'kefir';\nimport * as Maybe from 'data.maybe';\n\nimport { Component, SemanticContextProvider } from 'platform/api/components';\nimport { Rdf } from 'platform/api/rdf';\nimport { ResourceLinkComponent } from 'platform/api/navigation/components';\nimport { BuiltInEvents, listen, trigger } from 'platform/api/events';\nimport { Cancellation } from 'platform/api/async/Cancellation';\nimport { addNotification } from 'platform/components/ui/notification';\nimport { Spinner } from 'platform/components/ui/spinner';\n\nimport { rdfs } from 'platform/api/rdf/vocabularies';\nimport { crminf } from 'platform/data/vocabularies';\n\nimport { loadAssertion } from '../AssertionsStore';\nimport {\n  Argument,\n  ArgumentsBelief,\n  ArgumentType,\n  BeliefAdoption,\n  Inference,\n  Observation,\n  BeliefAdoptionType,\n  InferenceType,\n  ObservationType,\n} from '../ArgumentsApi';\nimport { loadArgumentsForAssertion, removeArgument, saveArgument } from '../ArgumentsStore';\nimport { ExistingBeliefView } from './ExistingBeliefView';\n\nimport { ObservationComponent, State as ObservationComponentState } from './ObservationComponent';\nimport { BeliefAdoptionComponent, State as BeliefAdoptionComponentState } from './BeliefAdoptionComponent';\nimport { InferenceMakingComponent, State as InferenceMakingComponentState } from './InferenceMakingComponent';\n\nimport * as PremiseEvents from './PremiseEvents';\n\nimport * as styles from './PremiseComponent.scss';\n\nexport interface PremiseComponentConfig {\n  /**\n   * Unique ID of the component.\n   */\n  id?: string;\n  /**\n   * Assertion IRI.\n   */\n  assertion: string;\n  /**\n   * SPARQL ASK query is used to check that evidences are acceptable.\n   */\n  acceptEvidenceQuery?: string;\n  /**\n   * SPARQL SELECT query returns logic types. Expects the '?logic' and '?label' projection variables.\n   */\n  logicTypeQuery?: string;\n  /**\n   * Custom templates of assertion based beliefs.\n   */\n  assertionBasedBeliefTemplate?: string;\n  /**\n   * Custom templates of field based beliefs.\n   */\n  fieldBasedBeliefTemplate?: string;\n}\n\ninterface Props extends PremiseComponentConfig {\n  onChangeArguments?: (newArguments: ReadonlyArray<Argument>) => void;\n}\n\nenum Status {\n  Loading,\n  Saving,\n}\n\ninterface State {\n  assertionIri?: Rdf.Iri;\n  premises?: ReadonlyArray<Argument>;\n  initialPremises?: ReadonlyArray<Argument>;\n  addingPremise?: boolean;\n  newArgumentType?: ArgumentType;\n  editingArgumentIndex?: number;\n  status?: Status;\n}\n\nexport class PremiseComponent extends Component<Props, State> {\n  static defaultProps: Partial<Props> = {\n    acceptEvidenceQuery: `ASK {}`,\n    logicTypeQuery: `SELECT ?logic ?label {\n      ?logic a ${crminf.I3_Inference_Logic} .\n      ?logic ${rdfs.label} ?label .\n    }`,\n  };\n\n  private readonly cancellation = new Cancellation();\n\n  constructor(props: PremiseComponentConfig, context: any) {\n    super(props, context);\n    this.state = {\n      assertionIri: props.assertion ? Rdf.iri(props.assertion) : undefined,\n      premises: [],\n      status: Status.Loading,\n    };\n  }\n\n  componentDidMount() {\n    if (this.state.assertionIri) {\n      this.loadArguments();\n    } else {\n      this.setState({ status: undefined });\n    }\n    this.listenToEvents();\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    const { onChangeArguments } = this.props;\n    const { premises } = this.state;\n    if (premises !== prevState.premises && onChangeArguments) {\n      onChangeArguments(premises);\n    }\n  }\n\n  componentWillUnmount() {\n    this.cancellation.cancelAll();\n  }\n\n  private loadArguments() {\n    const { id: source } = this.props;\n    const { assertionIri } = this.state;\n    trigger({ source, eventType: BuiltInEvents.ComponentLoading });\n    this.cancellation.map(loadArgumentsForAssertion(assertionIri)).observe({\n      value: (premises) => {\n        this.setState({\n          premises: premises,\n          initialPremises: [...premises],\n        });\n        trigger({ source, eventType: BuiltInEvents.ComponentLoaded });\n      },\n      error: (error) => {\n        console.error(error);\n      },\n      end: () => this.setState({ status: undefined }),\n    });\n  }\n\n  private listenToEvents() {\n    const { id: target } = this.props;\n    listen({ eventType: PremiseEvents.SaveArguments, target }).onValue(() => this.saveArguments());\n    listen({ eventType: PremiseEvents.AddArgument, target }).onValue(() =>\n      this.setState({ addingPremise: true, newArgumentType: ObservationType })\n    );\n  }\n\n  private saveArguments() {\n    const { id } = this.props;\n    const { assertionIri, premises, initialPremises, status } = this.state;\n    if (status === Status.Saving || !assertionIri) {\n      return;\n    }\n    this.setState({ status: Status.Saving });\n    trigger({ source: id, eventType: PremiseEvents.ArgumentsSaving });\n    this.cancellation\n      .map(loadAssertion(assertionIri))\n      .flatMap((assertion) => {\n        const beliefs = assertion.beliefs.map(({ iri }) => iri.getOrElse(undefined));\n        return saveArguments(premises, initialPremises, beliefs);\n      })\n      .observe({\n        value: (premises) => {\n          trigger({\n            source: id,\n            eventType: PremiseEvents.ArgumentsSaved,\n            data: { assertionIri: assertionIri.value },\n          });\n          addNotification({\n            level: 'success',\n            message: 'Arguments have been saved successfully!',\n          });\n          this.setState({ premises, initialPremises: [...premises] });\n        },\n        error: (error) => {\n          console.error(error);\n          addNotification({\n            level: 'error',\n            message: 'Something went wrong during saving the arguments!',\n          });\n        },\n        end: () => this.setState({ status: undefined }),\n      });\n  }\n\n  private editArgument = (argument: Argument) => {\n    this.setState({\n      editingArgumentIndex: _.findIndex(this.state.premises, (arg) => arg === argument),\n    });\n  };\n\n  private removeArgument = (argument: Argument) => {\n    this.setState(\n      (prevState: State): State => {\n        const filteredPremises = _.filter(prevState.premises, (a) => a !== argument);\n        return { premises: filteredPremises };\n      }\n    );\n  };\n\n  private argumentFrame = (props: { argument: Argument; title: string; children?: React.ReactNode }) => (\n    <Form>\n      <FormGroup>\n        <ControlLabel>Premise</ControlLabel>\n        <FormControl.Static>{props.title}</FormControl.Static>\n      </FormGroup>\n      <FormGroup>\n        <ControlLabel>Title</ControlLabel>\n        <FormControl.Static>{props.argument.title}</FormControl.Static>\n      </FormGroup>\n      {props.argument.note ? (\n        <FormGroup>\n          <ControlLabel>Description</ControlLabel>\n          <FormControl.Static>{props.argument.note}</FormControl.Static>\n        </FormGroup>\n      ) : null}\n      {props.children}\n      <Button\n        bsSize=\"sm\"\n        bsClass=\"btn btn-sm btn-default pull-right\"\n        style={{ marginLeft: 10 }}\n        onClick={() => this.removeArgument(props.argument)}\n      >\n        Remove Premise\n      </Button>\n      <Button bsSize=\"sm\" bsClass=\"btn btn-sm btn-default pull-right\" onClick={() => this.editArgument(props.argument)}>\n        Edit Premise\n      </Button>\n      <div className=\"clearfix\" />\n    </Form>\n  );\n\n  private renderObservationArgument = (argument: Observation) => (\n    <this.argumentFrame argument={argument} title=\"Observation\">\n      <FormGroup>\n        <ControlLabel>Place</ControlLabel>\n        <FormControl.Static>\n          <SemanticContextProvider repository=\"default\">\n            <ResourceLinkComponent uri={argument.place.value} />\n          </SemanticContextProvider>\n        </FormControl.Static>\n      </FormGroup>\n      <FormGroup>\n        <ControlLabel>Date</ControlLabel>\n        <FormControl.Static>{moment(argument.date.value).format('LL')}</FormControl.Static>\n      </FormGroup>\n    </this.argumentFrame>\n  );\n\n  private renderBeliefAdoptionArgument = (argument: BeliefAdoption) => {\n    const { assertionBasedBeliefTemplate, fieldBasedBeliefTemplate } = this.props;\n    return (\n      <this.argumentFrame argument={argument} title=\"Adoption\">\n        <Row>\n          <Col md={4}>\n            <ExistingBeliefView\n              belief={argument.belief}\n              assertionBasedBeliefTemplate={assertionBasedBeliefTemplate}\n              fieldBasedBeliefTemplate={fieldBasedBeliefTemplate}\n            />\n          </Col>\n        </Row>\n      </this.argumentFrame>\n    );\n  };\n\n  private renderInferenceArgument = (argument: Inference) => {\n    const { assertionBasedBeliefTemplate, fieldBasedBeliefTemplate } = this.props;\n    return (\n      <this.argumentFrame argument={argument} title=\"Inference\">\n        <FormGroup>\n          <ControlLabel>Logic Type</ControlLabel>\n          <FormControl.Static>\n            <SemanticContextProvider repository=\"assets\">\n              <ResourceLinkComponent uri={argument.logicType.value} />\n            </SemanticContextProvider>\n          </FormControl.Static>\n        </FormGroup>\n        <FormGroup>\n          <ControlLabel>Evidence</ControlLabel>\n          <Row className={styles.evidenceList}>\n            {argument.premises.map((premise) => (\n              <Col md={4} className={styles.evidenceList}>\n                <ExistingBeliefView\n                  belief={premise}\n                  assertionBasedBeliefTemplate={assertionBasedBeliefTemplate}\n                  fieldBasedBeliefTemplate={fieldBasedBeliefTemplate}\n                />\n              </Col>\n            ))}\n          </Row>\n        </FormGroup>\n      </this.argumentFrame>\n    );\n  };\n\n  private renderPremiseComponent = (argument: Argument) => {\n    switch (argument.argumentType) {\n      case ObservationType:\n        return this.renderObservationArgument(argument);\n      case BeliefAdoptionType:\n        return this.renderBeliefAdoptionArgument(argument);\n      case InferenceType:\n        return this.renderInferenceArgument(argument);\n    }\n  };\n\n  private cancelNewArgument = () => {\n    this.setState({\n      addingPremise: false,\n      newArgumentType: undefined,\n      editingArgumentIndex: undefined,\n    });\n  };\n\n  private addArgument = (argument: Argument) => {\n    this.setState(\n      (prevState: State): State => {\n        const premises = [...prevState.premises];\n        if (prevState.editingArgumentIndex >= 0) {\n          premises[prevState.editingArgumentIndex] = argument;\n        } else {\n          premises.push(argument);\n        }\n        return { premises: premises };\n      }\n    );\n  };\n\n  private premiseForm = (argumentType: ArgumentType, initialState?: Argument) => {\n    const { acceptEvidenceQuery, logicTypeQuery, assertionBasedBeliefTemplate, fieldBasedBeliefTemplate } = this.props;\n    const addArgument = (argument) => {\n      this.addArgument(argument);\n      this.cancelNewArgument();\n    };\n    if (argumentType === ObservationType) {\n      return (\n        <ObservationComponent\n          onSave={addArgument}\n          onCancel={this.cancelNewArgument}\n          initialState={initialState as ObservationComponentState}\n        />\n      );\n    } else if (argumentType === BeliefAdoptionType) {\n      return (\n        <BeliefAdoptionComponent\n          acceptRecordQuery={acceptEvidenceQuery}\n          onCancel={this.cancelNewArgument}\n          onSave={addArgument}\n          initialState={initialState as BeliefAdoptionComponentState}\n          assertionBasedBeliefTemplate={assertionBasedBeliefTemplate}\n        />\n      );\n    } else if (argumentType === InferenceType) {\n      return (\n        <InferenceMakingComponent\n          logicTypeQuery={logicTypeQuery}\n          acceptEvidenceQuery={acceptEvidenceQuery}\n          onCancel={this.cancelNewArgument}\n          onSave={addArgument}\n          initialState={initialState as InferenceMakingComponentState}\n          assertionBasedBeliefTemplate={assertionBasedBeliefTemplate}\n          fieldBasedBeliefTemplate={fieldBasedBeliefTemplate}\n        />\n      );\n    }\n    return <p>Select a type of premise for your conclusion</p>;\n  };\n\n  private newPremiseSelection = () => {\n    const { premises, addingPremise, newArgumentType } = this.state;\n    if (addingPremise) {\n      return (\n        <div>\n          {this.premiseTypeSelection()}\n          {this.premiseForm(newArgumentType)}\n          {premises.length ? <hr /> : null}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  private premiseTypeSelection = () => {\n    const name = 'premiseType';\n    const onArgumentTypeChange = (argumentType: ArgumentType) => () => this.setState({ newArgumentType: argumentType });\n    const isArgumentTypeSelected = (argumentType: ArgumentType): boolean => this.state.newArgumentType === argumentType;\n    return (\n      <FormGroup>\n        <Radio\n          name={name}\n          checked={isArgumentTypeSelected(ObservationType)}\n          onClick={onArgumentTypeChange(ObservationType)}\n          inline\n        >\n          Observation\n        </Radio>\n        <Radio\n          name={name}\n          checked={isArgumentTypeSelected(BeliefAdoptionType)}\n          onClick={onArgumentTypeChange(BeliefAdoptionType)}\n          inline\n        >\n          Adoption\n        </Radio>\n        <Radio\n          name={name}\n          checked={isArgumentTypeSelected(InferenceType)}\n          onClick={onArgumentTypeChange(InferenceType)}\n          inline\n        >\n          Inference\n        </Radio>\n      </FormGroup>\n    );\n  };\n\n  private renderPremise = (premise: Argument, index: number, premises: ReadonlyArray<Argument>) => {\n    const { editingArgumentIndex } = this.state;\n    const hr = index < premises.length - 1 ? <hr /> : null;\n    if (editingArgumentIndex === index) {\n      return (\n        <div>\n          <FormGroup>\n            <ControlLabel>Premise</ControlLabel>\n            <FormControl.Static>{premise.argumentType}</FormControl.Static>\n          </FormGroup>\n          {this.premiseForm(premise.argumentType, premise)}\n          {hr}\n        </div>\n      );\n    }\n    return (\n      <div>\n        {this.renderPremiseComponent(premise)}\n        {hr}\n      </div>\n    );\n  };\n\n  render() {\n    const { premises, status } = this.state;\n    if (status === Status.Loading) {\n      return <Spinner />;\n    }\n    return (\n      <div>\n        {this.newPremiseSelection()}\n        {premises.map(this.renderPremise)}\n      </div>\n    );\n  }\n}\n\nexport default PremiseComponent;\n\nexport function saveArguments(\n  newArguments: ReadonlyArray<Argument>,\n  initialArguments: ReadonlyArray<Argument>,\n  beliefs: ReadonlyArray<Rdf.Node>\n): Kefir.Property<Array<Argument>> {\n  const removeInitialArguments = (): Kefir.Property<void> => {\n    if (initialArguments.length) {\n      const removingInitialArguments = initialArguments.map(removeArgument);\n      return Kefir.zip(removingInitialArguments)\n        .map(() => undefined)\n        .toProperty();\n    }\n    return Kefir.constant(undefined);\n  };\n  return removeInitialArguments()\n    .flatMap(() => {\n      if (newArguments.length) {\n        const savingArguments = newArguments.map((argument) => {\n          argument.conclusions = [...beliefs];\n          return saveArgument(argument).map((iri) => ({ ...argument, iri: Maybe.Just(iri) }));\n        });\n        return Kefir.zip(savingArguments);\n      }\n      return Kefir.constant([]);\n    })\n    .toProperty();\n}\n","/**\n * ResearchSpace\n * Copyright (C) 2015-2020, © Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as React from 'react';\nimport { Panel, FormControl, FormGroup, Col, ControlLabel } from 'react-bootstrap';\n\nimport { SemanticContextProvider, Component } from 'platform/api/components';\nimport { ResourceLinkComponent } from 'platform/api/navigation/components';\nimport { TemplateItem } from 'platform/components/ui/template';\n\nimport { ArgumentsBelief, ArgumentsBeliefTypeAssertionKind, ArgumentsBeliefTypeFieldKind } from '../ArgumentsApi';\n\nimport * as styles from './PremiseComponent.scss';\n\nexport interface ExistingBeliefViewProps {\n  belief: ArgumentsBelief;\n  onCancel?: () => void;\n  assertionBasedBeliefTemplate?: string;\n  fieldBasedBeliefTemplate?: string;\n}\n\n/**\n * Renders view for selected Belief(premise in case of \"Inference Making\"\n * or addopted Belief in case of \"Belief Adoption\".\n */\nexport class ExistingBeliefView extends Component<ExistingBeliefViewProps, {}> {\n  private renderCustomBeliefTemplate(belief: ArgumentsBelief, template: string) {\n    const { onCancel } = this.props;\n    return (\n      <div className={styles.evidenceCustom}>\n        {onCancel ? (\n          <div className={styles.evidenceCustomDeleteButton}>\n            <i className=\"fa fa-times\" onClick={onCancel} />\n          </div>\n        ) : null}\n        <TemplateItem\n          template={{\n            source: template,\n            options: { belief },\n          }}\n        />\n      </div>\n    );\n  }\n\n  render() {\n    const { belief, onCancel, assertionBasedBeliefTemplate, fieldBasedBeliefTemplate } = this.props;\n    const close = onCancel ? <i className=\"fa fa-times pull-right\" onClick={onCancel} /> : null;\n    if (belief.argumentBeliefType === ArgumentsBeliefTypeAssertionKind) {\n      if (assertionBasedBeliefTemplate) {\n        return this.renderCustomBeliefTemplate(belief, assertionBasedBeliefTemplate);\n      }\n      return (\n        <Panel\n          header={\n            <div>\n              <span>Assertion based belief</span>\n              {close}\n            </div>\n          }\n          className={`form-horizontal ${styles.evidence}`}\n        >\n          {...ExistingBeliefContentView(belief)}\n        </Panel>\n      );\n    }\n    if (belief.argumentBeliefType === ArgumentsBeliefTypeFieldKind) {\n      if (fieldBasedBeliefTemplate) {\n        return this.renderCustomBeliefTemplate(belief, fieldBasedBeliefTemplate);\n      }\n      return (\n        <Panel\n          header={\n            <div>\n              <span>Field based belief</span>\n              {close}\n            </div>\n          }\n          className={`form-horizontal ${styles.evidence}`}\n        >\n          {...ExistingBeliefContentView(belief)}\n        </Panel>\n      );\n    }\n  }\n}\n\nexport function ExistingBeliefContentView(belief: ArgumentsBelief) {\n  switch (belief.argumentBeliefType) {\n    case ArgumentsBeliefTypeAssertionKind:\n      return [\n        <FormGroup>\n          <Col componentClass={ControlLabel} sm={3}>\n            Assertion\n          </Col>\n          <Col sm={9}>\n            <FormControl.Static>\n              <SemanticContextProvider repository=\"assets\">\n                <ResourceLinkComponent uri={belief.assertion.value} />\n              </SemanticContextProvider>\n            </FormControl.Static>\n          </Col>\n        </FormGroup>,\n      ];\n    case ArgumentsBeliefTypeFieldKind:\n      return [\n        <FormGroup>\n          <Col componentClass={ControlLabel} sm={3}>\n            Record\n          </Col>\n          <Col sm={9}>\n            <FormControl.Static>\n              <ResourceLinkComponent uri={belief.target.value} guessRepository={true} />\n            </FormControl.Static>\n          </Col>\n        </FormGroup>,\n        <FormGroup>\n          <Col componentClass={ControlLabel} sm={3}>\n            Field\n          </Col>\n          <Col sm={9}>\n            <FormControl.Static>\n              {/* fields are always stored in assets repository */}\n              <SemanticContextProvider repository=\"assets\">\n                <ResourceLinkComponent uri={belief.field.iri} />\n              </SemanticContextProvider>\n            </FormControl.Static>\n          </Col>\n        </FormGroup>,\n      ];\n  }\n}\n","/**\n * ResearchSpace\n * Copyright (C) 2015-2020, © Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as React from 'react';\nimport * as Maybe from 'data.maybe';\nimport * as _ from 'lodash';\nimport * as Kefir from 'kefir';\nimport { FormGroup, Col, Button, ControlLabel, ButtonGroup, Form } from 'react-bootstrap';\n\nimport { Rdf } from 'platform/api/rdf';\nimport { SparqlClient, SparqlUtil } from 'platform/api/sparql';\nimport { getOverlaySystem, OverlayDialog } from 'platform/components/ui/overlay';\nimport { getRepositoryStatus } from 'platform/api/services/repository';\nimport { ResourceLinkComponent } from 'platform/api/navigation/components';\nimport { DropArea } from 'platform/components/dnd/DropArea';\n\nimport { rso } from 'platform/data/vocabularies/vocabularies';\n\nimport { FieldSelection } from '../FieldSelection';\nimport {\n  ArgumentsBelief,\n  ArgumentsBeliefTypeAssertionKind,\n  ArgumentsBeliefTypeFieldKind,\n  ArgumentsBeliefType,\n  ArgumentsFieldBelief,\n  BeliefTypeArgumentsKind,\n  ArgumentsAssertionBelief,\n  ArgumentsFieldDefinition,\n  SimpleBeliefValue,\n} from '../ArgumentsApi';\n\nimport * as styles from './PremiseComponent.scss';\n\ninterface SelectedBelief {\n  beliefType: typeof BeliefTypeArgumentsKind;\n  argumentsBeliefType: ArgumentsBeliefType;\n  record: Rdf.Iri;\n  types: Array<Rdf.Iri>;\n  selectedFields: Array<ArgumentsFieldDefinition>;\n}\n\nexport interface BeliefSelectionProps {\n  acceptRecordQuery: string;\n  multiSelection: boolean;\n  onSelect: (belief: Array<ArgumentsBelief>) => void;\n  messages: {\n    beliefHeader: string;\n    dropRecordPlaceholder: string;\n    fieldSelectionHeader: string;\n    fieldSelectionPlaceholder: string;\n  };\n}\n\ninterface State {\n  belief: Data.Maybe<SelectedBelief>;\n}\n\n/**\n * Belief selection component that is used to select Premises for \"Inference Making\" and Beliefs\n * for \"Belief Adoption\" arguments.\n *\n * Selected belief can be existing Assertion, Citation, or Field of some Record.\n */\nexport class BeliefSelection extends React.Component<BeliefSelectionProps, State> {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      belief: Maybe.Nothing<SelectedBelief>(),\n    };\n  }\n\n  render() {\n    return this.state.belief.map(this.viewBelief).getOrElse(this.recordDropArea());\n  }\n\n  private recordDropArea = () => (\n    <DropArea\n      alwaysVisible={true}\n      query={this.props.acceptRecordQuery}\n      repository=\"assets\" // TODO, document the trick with assets repository\n      onDrop={this.onRecordDrop}\n      dropMessage={this.props.messages.dropRecordPlaceholder}\n      className={styles.evidenceDropArea}\n    />\n  );\n\n  private viewBelief = (belief: SelectedBelief) => {\n    if (belief.argumentsBeliefType === ArgumentsBeliefTypeAssertionKind) {\n      return null;\n    } else {\n      return <p>Selecting field...</p>;\n    }\n  };\n\n  private fieldSelection = (belief: SelectedBelief) => {\n    const { messages, multiSelection } = this.props;\n    return (\n      <Form horizontal>\n        <FormGroup>\n          <Col componentClass={ControlLabel} sm={2}>\n            Fields:\n          </Col>\n          <Col sm={10}>\n            <FieldSelection\n              multiSelection={multiSelection}\n              record={belief.record}\n              types={belief.types}\n              placeholder={messages.fieldSelectionPlaceholder}\n              onCancel={this.onCancelBelief}\n              onSave={this.onFieldSelection}\n            />\n          </Col>\n        </FormGroup>\n        <FormGroup>\n          <Col smOffset={2} sm={10}>\n            <ButtonGroup className=\"pull-right\">\n              <Button onClick={this.onCancelBelief} bsStyle=\"danger\">\n                Cancel\n              </Button>\n              <Button\n                bsStyle=\"success\"\n                style={{ marginLeft: '12px' }}\n                onClick={() => this.onSelectBelief(this.state.belief.get())}\n              >\n                Save\n              </Button>\n            </ButtonGroup>\n          </Col>\n        </FormGroup>\n      </Form>\n    );\n  };\n\n  private onRecordDrop = (resource: Rdf.Iri) =>\n    this.getTypes(resource).onValue((types) => {\n      const isAssertion = _.some(types, (t) => rso.EX_Assertion.equals(t));\n      const belief = {\n        beliefType: BeliefTypeArgumentsKind as typeof BeliefTypeArgumentsKind,\n        argumentsBeliefType: (isAssertion\n          ? ArgumentsBeliefTypeAssertionKind\n          : ArgumentsBeliefTypeFieldKind) as ArgumentsBeliefType,\n        assertion: resource,\n        record: resource,\n        types: types,\n        selectedFields: [],\n      };\n      this.setState({\n        belief: Maybe.Just(belief),\n      });\n\n      if (!isAssertion) {\n        getOverlaySystem().show(\n          'field-selection-overlay',\n          <OverlayDialog onHide={this.onCancelBelief} title=\"Field Selection\" type=\"modal\" show={true}>\n            <p>\n              Select Field for <ResourceLinkComponent uri={resource.value} guessRepository={true} />:\n            </p>\n            {this.fieldSelection(belief)}\n          </OverlayDialog>\n        );\n      } else {\n        this.onSelectBelief(belief);\n      }\n    });\n\n  private onFieldSelection = (selected: Array<ArgumentsFieldDefinition> | ArgumentsFieldDefinition) => {\n    const normalizedSelected = Array.isArray(selected) ? selected : [selected];\n    this.setState((state: State) => ({\n      belief: state.belief.map((belief) => ({ ...belief, selectedFields: normalizedSelected })),\n    }));\n  };\n\n  private hideFieldSelectionDialog = () => getOverlaySystem().hide('field-selection-overlay');\n\n  private onSelectBelief = (belief: SelectedBelief) => {\n    this.hideFieldSelectionDialog();\n\n    const finalBeliefs: Array<ArgumentsBelief> = [];\n    switch (belief.argumentsBeliefType) {\n      case ArgumentsBeliefTypeFieldKind:\n        const beliefs: Array<ArgumentsFieldBelief> = _.map(belief.selectedFields, (field) => ({\n          iri: Maybe.Nothing<Rdf.Iri>(),\n          beliefType: BeliefTypeArgumentsKind as typeof BeliefTypeArgumentsKind,\n          argumentBeliefType: ArgumentsBeliefTypeFieldKind as typeof ArgumentsBeliefTypeFieldKind,\n          target: belief.record,\n          field: field,\n          originRepository: 'default',\n          belief: {\n            type: 'simple',\n            value: SimpleBeliefValue.Agree,\n          },\n        }));\n        finalBeliefs.push(...beliefs);\n        break;\n      case ArgumentsBeliefTypeAssertionKind:\n        const b: ArgumentsAssertionBelief = {\n          iri: Maybe.Nothing<Rdf.Iri>(),\n          beliefType: BeliefTypeArgumentsKind as typeof BeliefTypeArgumentsKind,\n          argumentBeliefType: ArgumentsBeliefTypeAssertionKind,\n          assertion: (belief as any).assertion,\n          belief: {\n            type: 'simple',\n            value: SimpleBeliefValue.Agree,\n          },\n        };\n        finalBeliefs.push(b);\n        break;\n    }\n\n    // reset belief selection\n    this.setState({ belief: Maybe.Nothing<SelectedBelief>() });\n    this.props.onSelect(finalBeliefs);\n  };\n  private onCancelBelief = () => {\n    this.hideFieldSelectionDialog();\n    this.setState({ belief: Maybe.Nothing<SelectedBelief>() });\n  };\n\n  private repositories = getRepositoryStatus().map((repos) => repos.keySeq().toArray());\n  private TYPES_QUERY = SparqlUtil.Sparql`SELECT DISTINCT ?type WHERE { ?__resource__ a ?type }`;\n  private getTypes = (resource: Rdf.Iri) =>\n    this.repositories\n      .flatMap((repos) => Kefir.combine(repos.map((r) => this.getTypesFromRepository(r, resource))))\n      .map(_.flatten)\n      .map((types) => _.uniqWith(types, (a, b) => a.equals(b)));\n\n  private getTypesFromRepository = (repository: string, resource: Rdf.Iri): Kefir.Property<Array<Rdf.Iri>> =>\n    SparqlClient.select(SparqlClient.setBindings(this.TYPES_QUERY, { __resource__: resource }), {\n      context: { repository: repository },\n    }).map((result) => result.results.bindings.map((binding) => binding['type'] as Rdf.Iri));\n}\n","/**\n * ResearchSpace\n * Copyright (C) 2015-2020, © Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as Maybe from 'data.maybe';\nimport * as uuid from 'uuid';\nimport * as Kefir from 'kefir';\nimport * as _ from 'lodash';\nimport * as moment from 'moment';\n\nimport { Rdf, vocabularies } from 'platform/api/rdf';\nconst { rdf, rdfs } = vocabularies;\nimport { SparqlClient, SparqlUtil } from 'platform/api/sparql';\nimport { ldpc } from 'platform/api/services/ldp';\n\nimport { rso, crm, crminf, crmsci } from 'platform/data/vocabularies/vocabularies';\n\nimport {\n  Argument,\n  Inference,\n  BeliefAdoption,\n  Observation,\n  matchArgument,\n  ObservationType,\n  BeliefAdoptionType,\n  InferenceType,\n  ArgumentsBeliefTypeFieldKind,\n  ArgumentsBeliefTypeAssertionKind,\n  BeliefTypeArgumentsKind,\n  ArgumentsAssertionBelief,\n  ArgumentsFieldBelief,\n  ArgumentsBelief,\n  SimpleBeliefValue,\n} from './ArgumentsApi';\nimport { getArgumentsFieldDefinition } from './FieldUtils';\nimport { getBeliefGraphs } from './BeliefsUtil';\n\nconst assertionContainer = ldpc(rso.ArgumentsContainer.value);\nexport function loadArgumentsForAssertion(assertionIri: Rdf.Iri): Kefir.Property<Array<Argument>> {\n  return findArgumentsForAssertion(assertionIri)\n    .flatMap((argumentIris) => {\n      if (_.isEmpty(argumentIris)) {\n        return Kefir.constant([]);\n      } else {\n        return Kefir.combine(\n          _.map(argumentIris, (iri) => assertionContainer.get(iri).map((graph) => Rdf.pg(iri, graph)))\n        );\n      }\n    })\n    .flatMap((graphs) => {\n      if (_.isEmpty(graphs)) {\n        return Kefir.constant([]);\n      } else {\n        return Kefir.combine(_.map(graphs, deserializeArgument));\n      }\n    })\n    .toProperty();\n}\n\nconst FIND_ARGUMENTS_QUERY = SparqlUtil.Sparql`\n  SELECT DISTINCT ?argument WHERE {\n    ?__assertion__ <http://www.researchspace.org/ontology/PX_asserts> ?belief .\n    ?argument <http://www.ics.forth.gr/isl/CRMinf/J2_concluded_that> ?belief .\n  }\n`;\nfunction findArgumentsForAssertion(assertionIri: Rdf.Iri): Kefir.Property<Array<Rdf.Iri>> {\n  const query = SparqlClient.setBindings(FIND_ARGUMENTS_QUERY, { __assertion__: assertionIri });\n  return SparqlClient.select(query, { context: { repository: 'assets' } }).map((res) =>\n    res.results.bindings.map((b) => b['argument'] as Rdf.Iri)\n  );\n}\n\nfunction deserializeArgument(pg: Rdf.PointedGraph): Kefir.Property<Argument> {\n  const types = Rdf.getValuesFromPropertyPath<Rdf.Iri>([rdf.type], pg);\n  if (_.some(types, (t) => t.equals(crmsci.S19_Encounter_Event))) {\n    return Kefir.constant(deserializeObservation(pg));\n  } else if (_.some(types, (t) => t.equals(crminf.I7_Belief_Adoption))) {\n    return deserializeBeliefAdoption(pg);\n  } else {\n    return deserializeInference(pg);\n  }\n}\n\nfunction deserializeObservation(pg: Rdf.PointedGraph): Observation {\n  return {\n    iri: Maybe.Just(pg.pointer as Rdf.Iri),\n    argumentType: ObservationType,\n    title: Rdf.getValueFromPropertyPath([rdfs.label], pg)\n      .map((v) => v.value)\n      .getOrElse(''),\n    note: Rdf.getValueFromPropertyPath([crm.P3_has_note], pg)\n      .map((v) => v.value)\n      .getOrElse(''),\n    place: Rdf.getValueFromPropertyPath<Rdf.Iri>([crmsci.O21_has_found_at], pg).getOrElse(undefined),\n    date: Rdf.getValueFromPropertyPath<Rdf.Literal>([crm.P4_has_time_span, crm.P82a_begin_of_the_begin], pg).getOrElse(\n      undefined\n    ),\n  };\n}\n\nfunction deserializeBeliefAdoption(pg: Rdf.PointedGraph): Kefir.Property<BeliefAdoption> {\n  const adoptedBeliefAssertion = Rdf.getValueFromPropertyPath<Rdf.Iri>([rso.PX_adopted_assertion], pg);\n\n  if (adoptedBeliefAssertion.isJust) {\n    return Kefir.constant({\n      iri: Maybe.Just(pg.pointer),\n      argumentType: BeliefAdoptionType,\n      title: Rdf.getValueFromPropertyPath([rdfs.label], pg)\n        .map((v) => v.value)\n        .getOrElse(''),\n      note: Rdf.getValueFromPropertyPath([crm.P3_has_note], pg)\n        .map((v) => v.value)\n        .getOrElse(''),\n      belief: {\n        iri: adoptedBeliefAssertion,\n        beliefType: BeliefTypeArgumentsKind,\n        argumentBeliefType: ArgumentsBeliefTypeAssertionKind,\n        assertion: adoptedBeliefAssertion.get(),\n        belief: {\n          type: 'simple',\n          value: 'Agree',\n        },\n      },\n    } as BeliefAdoption);\n  } else {\n    const adoptedFieldBeliefsIri = _.head(Rdf.getValuesFromPropertyPath<Rdf.Iri>([crminf.J6_adopted], pg));\n    const belief = deserializeBelief(Rdf.pg(adoptedFieldBeliefsIri, pg.graph));\n    return belief.map(\n      (belief: ArgumentsFieldBelief) =>\n        ({\n          iri: Maybe.Just(pg.pointer),\n          argumentType: BeliefAdoptionType,\n          title: Rdf.getValueFromPropertyPath([rdfs.label], pg)\n            .map((v) => v.value)\n            .getOrElse(''),\n          note: Rdf.getValueFromPropertyPath([crm.P3_has_note], pg)\n            .map((v) => v.value)\n            .getOrElse(''),\n          belief: belief,\n        } as BeliefAdoption)\n    );\n  }\n}\n\nfunction deserializeInference(pg: Rdf.PointedGraph): Kefir.Property<Inference> {\n  const premiseIris = Rdf.getValuesFromPropertyPath<Rdf.Iri>([crminf.J1_used_as_premise], pg);\n  return Kefir.combine(premiseIris.map((iri) => deserializeBelief(Rdf.pg(iri, pg.graph))))\n    .map((premises) => {\n      const inference: Inference = {\n        iri: Maybe.Just(pg.pointer as Rdf.Iri),\n        argumentType: InferenceType,\n        title: Rdf.getValueFromPropertyPath([rdfs.label], pg)\n          .map((v) => v.value)\n          .getOrElse(''),\n        note: Rdf.getValueFromPropertyPath([crm.P3_has_note], pg)\n          .map((v) => v.value)\n          .getOrElse(''),\n        logicType: Rdf.getValueFromPropertyPath<Rdf.Iri>([crminf.J3_applies], pg).getOrElse(undefined),\n        premises: premises,\n      };\n      return inference;\n    })\n    .toProperty();\n}\n\nfunction deserializeBelief(pg: Rdf.PointedGraph): Kefir.Property<ArgumentsBelief> {\n  const assertion = Rdf.getValueFromPropertyPath<Rdf.Iri>([rso.PX_premise_assertion], pg);\n  if (assertion.isJust) {\n    const assertionBelief: ArgumentsAssertionBelief = {\n      iri: Maybe.Just(pg.pointer as Rdf.Iri),\n      beliefType: BeliefTypeArgumentsKind,\n      argumentBeliefType: ArgumentsBeliefTypeAssertionKind,\n      assertion: assertion.get(),\n      belief: {\n        type: 'simple',\n        value: SimpleBeliefValue.Agree,\n      },\n    };\n    return Kefir.constant(assertionBelief);\n  } else {\n    const target = Rdf.getValueFromPropertyPath<Rdf.Iri>([rso.PX_premise_target], pg).getOrElse(undefined);\n    const field = Rdf.getValueFromPropertyPath<Rdf.Iri>([rso.PX_premise_field], pg).getOrElse(undefined);\n    const repository = Rdf.getValueFromPropertyPath<Rdf.Literal>([rso.PX_premise_target_repository], pg)\n      .map((l) => l.value)\n      .getOrElse(undefined);\n    return getArgumentsFieldDefinition(field).map((fieldDefition) => {\n      const fieldBelief: ArgumentsFieldBelief = {\n        iri: Maybe.Just(pg.pointer as Rdf.Iri),\n        beliefType: BeliefTypeArgumentsKind,\n        argumentBeliefType: ArgumentsBeliefTypeFieldKind,\n        target: target,\n        field: fieldDefition,\n        originRepository: repository,\n        belief: {\n          type: 'simple',\n          value: SimpleBeliefValue.Agree,\n        },\n      };\n      return fieldBelief;\n    });\n  }\n}\n\nconst container = ldpc(rso.ArgumentsContainer.value);\n\nexport function saveArgument(argument: Argument) {\n  const argumentIri = argument.iri.getOrElse(Rdf.iri(`http://researchspace.org/instances/argument/${uuid.v4()}`));\n  const argumentPremises = getBeliefsForArgument(argumentIri, argument).map((beliefs) =>\n    serializeArgument(argumentIri, argument, beliefs)\n  );\n\n  return argumentPremises.flatMap((argumentGraph) =>\n    container.addResource(argumentGraph, Maybe.Just(argumentIri.value))\n  );\n}\n\nexport function removeArgument(argument: Argument): Kefir.Property<{}> {\n  return container.deleteResource(argument.iri.get());\n}\n\nexport function getBeliefsForArgument(\n  argumentIri: Rdf.Iri,\n  argument: Argument\n): Kefir.Property<Array<Rdf.PointedGraph>> {\n  return matchArgument({\n    Inference: (inference) =>\n      Kefir.combine(inference.premises.map(getBeliefGraphs))\n        .map((x) => _.flatten(x))\n        .toProperty(),\n    BeliefAdoption: (beliefAdoption) => getBeliefGraphs(beliefAdoption.belief),\n    Observation: (o) => Kefir.constant<Array<Rdf.PointedGraph>>([]),\n  })(argument);\n}\n\nexport function serializeArgument(\n  newArgumentIri: Rdf.Iri,\n  argument: Argument,\n  beliefs: Array<Rdf.PointedGraph>\n): Rdf.Graph {\n  const conclusionTriples = argument.conclusions.map((belief) =>\n    Rdf.triple(Rdf.BASE_IRI, crminf.J2_concluded_that, belief)\n  );\n\n  const baseArgumentGraph = Rdf.graph([\n    Rdf.triple(Rdf.BASE_IRI, vocabularies.rdf.type, crminf.I1_Argumentation),\n    Rdf.triple(Rdf.BASE_IRI, vocabularies.rdfs.label, Rdf.literal(argument.title)),\n    Rdf.triple(Rdf.BASE_IRI, crm.P3_has_note, Rdf.literal(argument.note)),\n    ...conclusionTriples,\n  ]);\n\n  const specificArgumentGraph = serializeSpecificArgument(argument, beliefs);\n\n  return Rdf.union(baseArgumentGraph, specificArgumentGraph);\n}\n\nexport function serializeSpecificArgument(argument: Argument, beliefs: Array<Rdf.PointedGraph>): Rdf.Graph {\n  return matchArgument({\n    Inference: (i) => serializeInference(i, beliefs),\n    BeliefAdoption: (ba) => serializeBeliefAdoption(ba, beliefs),\n    Observation: serializeObservation,\n  })(argument);\n}\n\nexport function serializeBeliefAdoption(beliefAdoption: BeliefAdoption, beliefs: Array<Rdf.PointedGraph>): Rdf.Graph {\n  const triples = beliefs.map((belief) => Rdf.triple(Rdf.BASE_IRI, crminf.J6_adopted, belief.pointer));\n\n  if (beliefAdoption.belief.argumentBeliefType === ArgumentsBeliefTypeAssertionKind) {\n    triples.push(Rdf.triple(Rdf.BASE_IRI, rso.PX_adopted_assertion, beliefAdoption.belief.assertion));\n  }\n\n  return Rdf.graph([\n    Rdf.triple(Rdf.BASE_IRI, vocabularies.rdf.type, crminf.I7_Belief_Adoption),\n    ..._.flatMap(beliefs, (b) => b.graph.triples.toArray()),\n    ...triples,\n  ]);\n}\n\nexport function serializeObservation(observation: Observation): Rdf.Graph {\n  const observationTimePg = createObservationTimeSpan(observation);\n  return Rdf.graph([\n    Rdf.triple(Rdf.BASE_IRI, vocabularies.rdf.type, crmsci.S19_Encounter_Event),\n    Rdf.triple(Rdf.BASE_IRI, vocabularies.rdf.type, crmsci.S4_Observation),\n    Rdf.triple(Rdf.BASE_IRI, crmsci.O21_has_found_at, observation.place),\n    Rdf.triple(Rdf.BASE_IRI, crm.P4_has_time_span, observationTimePg.pointer),\n    ...observationTimePg.graph.triples.toJS(),\n  ]);\n}\n\nexport function createObservationTimeSpan(observation: Observation): Rdf.PointedGraph {\n  const timeIri = Rdf.iri(`/time/${uuid.v4()}`);\n  const time = observation.date;\n  const label = Rdf.literal(moment(observation.date.value).format('LL'));\n  return Rdf.pg(\n    timeIri,\n    Rdf.graph([\n      Rdf.triple(timeIri, crm.P82a_begin_of_the_begin, time),\n      Rdf.triple(timeIri, crm.P82a_end_of_the_end, time),\n      Rdf.triple(timeIri, vocabularies.rdfs.label, label),\n      Rdf.triple(timeIri, rso.displayLabel, label),\n    ])\n  );\n}\n\nexport function serializeInference(inference: Inference, beliefs: Array<Rdf.PointedGraph>): Rdf.Graph {\n  const premises = beliefs.map((beliefPg) => Rdf.triple(Rdf.BASE_IRI, crminf.J1_used_as_premise, beliefPg.pointer));\n  return Rdf.graph([\n    Rdf.triple(Rdf.BASE_IRI, vocabularies.rdf.type, crminf.I5_Inference_Making),\n    Rdf.triple(Rdf.BASE_IRI, crminf.J3_applies, inference.logicType),\n    ...premises,\n    ..._.flatMap(beliefs, (b) => b.graph.triples.toArray()),\n  ]);\n}\n","/**\n * ResearchSpace\n * Copyright (C) 2015-2020, © Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as React from 'react';\nimport { FormControl, FormGroup, Form, Button, ControlLabel, ButtonGroup } from 'react-bootstrap';\nimport * as _ from 'lodash';\nimport * as Maybe from 'data.maybe';\n\nimport * as moment from 'moment';\n\nimport * as reactDatetime from 'react-datetime';\nconst DateTimePicker = React.createFactory(reactDatetime);\n\nimport { Rdf, vocabularies } from 'platform/api/rdf';\nimport { SemanticTreeInput, TreeSelection, Node } from 'platform/components/semantic/lazy-tree';\n\nimport { Observation, ObservationType } from '../ArgumentsApi';\n\nexport interface ObservationComponentProps {\n  onSave: (argument: Observation) => void;\n  onCancel: () => void;\n  initialState?: State;\n}\n\nexport interface State {\n  iri: Data.Maybe<Rdf.Iri>;\n  title: string;\n  note: string;\n  place?: Rdf.Iri;\n  date?: Rdf.Literal;\n}\n\nconst PlaceSelectionConfig = {\n  placeholder: 'Search for Location...',\n  parentsQuery: `\n    SELECT DISTINCT ?item ?parent ?parentLabel WHERE {\n      ?parent skos:inScheme <http://collection.britishmuseum.org/id/place> .\n      ?item skos:broader ?parent .\n      ?parent skos:prefLabel ?parentLabel .\n    }\n  `,\n  childrenQuery: `\n    SELECT DISTINCT ?item ?label ?hasChildren WHERE {\n      ?item skos:broader ?parent .\n      ?item skos:inScheme <http://collection.britishmuseum.org/id/place> .\n      ?item skos:prefLabel ?label .\n      OPTIONAL { ?child skos:broader ?item . }\n      BIND(bound(?child) as ?hasChildren)\n    } ORDER BY ?label\n  `,\n  rootsQuery: `\n    SELECT DISTINCT ?item ?label WHERE {\n      ?item skos:inScheme <http://collection.britishmuseum.org/id/place> .\n      FILTER NOT EXISTS { ?item skos:broader ?parent . }\n      ?item skos:prefLabel ?label .\n    }\n  `,\n  searchQuery: `\n    SELECT DISTINCT ?item ?label ?score ?hasChildren WHERE {\n      ?item skos:inScheme <http://collection.britishmuseum.org/id/place> .\n      ?item skos:prefLabel ?label.\n      ?label bds:search ?__token__ ;\n             bds:minRelevance \"0.3\" ;\n             bds:relevance ?score ;\n             bds:matchAllTerms \"true\"  .\n      OPTIONAL { ?child skos:broader ?item. }\n      BIND(BOUND(?child) AS ?hasChildren)\n    }\n    ORDER BY DESC(?score) ?label\n    LIMIT 200\n`,\n};\n\nconst OUTPUT_UTC_DATE_FORMAT = 'YYYY-MM-DD';\nconst OUTPUT_UTC_TIME_FORMAT = 'HH:mm:ss';\n\nexport class ObservationComponent extends React.Component<ObservationComponentProps, State> {\n  constructor(props: ObservationComponentProps, context) {\n    super(props, context);\n    if (props.initialState) {\n      this.state = props.initialState;\n    } else {\n      this.state = {\n        iri: Maybe.Nothing<Rdf.Iri>(),\n        title: '',\n        note: '',\n        place: null,\n        date: null,\n      };\n    }\n  }\n\n  render() {\n    const { initialState } = this.props;\n    return (\n      <Form>\n        <FormGroup>\n          <ControlLabel>Title*</ControlLabel>\n          <FormControl\n            type=\"text\"\n            placeholder=\"Observation title...\"\n            value={this.state.title}\n            onChange={this.onTitleChange}\n          />\n        </FormGroup>\n        <FormGroup>\n          <ControlLabel>Description</ControlLabel>\n          <FormControl\n            componentClass=\"textarea\"\n            placeholder=\"Observation description...\"\n            value={this.state.note}\n            onChange={this.onNoteChange}\n          />\n        </FormGroup>\n        <FormGroup>\n          <ControlLabel>Date*</ControlLabel>\n          <DateTimePicker\n            onChange={this.onDateSelected}\n            closeOnSelect={true}\n            value={this.state.date ? (moment(this.state.date.value) as any) : undefined}\n            viewMode=\"time\"\n            dateFormat={OUTPUT_UTC_DATE_FORMAT}\n            timeFormat={OUTPUT_UTC_TIME_FORMAT}\n            inputProps={{ placeholder: 'Select observation date...' }}\n          />\n        </FormGroup>\n        <FormGroup>\n          <ControlLabel>Place*</ControlLabel>\n          <SemanticTreeInput\n            {...PlaceSelectionConfig}\n            initialSelection={this.state.place ? [this.state.place] : []}\n            onSelectionChanged={this.onPlaceSelected}\n          />\n        </FormGroup>\n        <FormGroup>\n          <ButtonGroup className=\"pull-right\">\n            <Button bsStyle=\"default\" onClick={this.props.onCancel}>\n              Cancel\n            </Button>\n            <Button\n              bsStyle=\"primary\"\n              style={{ marginLeft: '12px' }}\n              onClick={this.saveArgument}\n              disabled={!this.canSave()}\n            >\n              {initialState ? 'Update Premise' : 'Add Premise'}\n            </Button>\n          </ButtonGroup>\n          <div className=\"clearfix\" />\n        </FormGroup>\n      </Form>\n    );\n  }\n\n  private onTitleChange = (event: React.ChangeEvent<any>) => this.setState({ title: event.target.value });\n\n  private onNoteChange = (event: React.ChangeEvent<any>) => this.setState({ note: event.target.value });\n\n  private onDateSelected = (date: any) =>\n    this.setState({ date: Rdf.literal(date.format(), vocabularies.xsd.dateTime) });\n\n  private onPlaceSelected = (selection: TreeSelection<Node>) =>\n    this.setState({\n      place: TreeSelection.leafs(selection)\n        .map((node) => node.iri)\n        .first(),\n    });\n\n  private canSave = () => {\n    const { title, note, place, date } = this.state;\n    return !_.isEmpty(title) && place && date;\n  };\n\n  private saveArgument = () => {\n    const { title, note, place, date, iri } = this.state;\n    this.props.onSave({\n      iri: iri,\n      argumentType: ObservationType,\n      title,\n      note,\n      place,\n      date: date,\n    });\n  };\n}\n","/**\n * ResearchSpace\n * Copyright (C) 2015-2020, © Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as React from 'react';\nimport * as _ from 'lodash';\nimport * as Maybe from 'data.maybe';\nimport { FormControl, FormGroup, ControlLabel, Form, Button, ButtonGroup, Row, Col } from 'react-bootstrap';\n\nimport { Rdf } from 'platform/api/rdf';\n\nimport { ArgumentsBelief, BeliefAdoption, BeliefAdoptionType } from '../ArgumentsApi';\nimport { BeliefSelection } from './BeliefSelection';\nimport { ExistingBeliefView } from './ExistingBeliefView';\n\nexport interface BeliefAdoptionComponentProps {\n  acceptRecordQuery?: string;\n  onCancel: () => void;\n  onSave: (argument: BeliefAdoption) => void;\n  initialState?: State;\n  assertionBasedBeliefTemplate?: string;\n}\n\nexport interface State {\n  iri: Data.Maybe<Rdf.Iri>;\n  title: string;\n  note: string;\n  belief: ArgumentsBelief;\n}\n\nexport class BeliefAdoptionComponent extends React.Component<BeliefAdoptionComponentProps, State> {\n  constructor(props: BeliefAdoptionComponentProps, context) {\n    super(props, context);\n    if (props.initialState) {\n      this.state = props.initialState;\n    } else {\n      this.state = {\n        iri: Maybe.Nothing<Rdf.Iri>(),\n        title: '',\n        note: '',\n        belief: undefined,\n      };\n    }\n  }\n\n  render() {\n    const { initialState, onCancel, assertionBasedBeliefTemplate } = this.props;\n    const { title, note, belief } = this.state;\n    const canSave = title && belief;\n    return (\n      <Form>\n        <FormGroup>\n          <ControlLabel>Title*</ControlLabel>\n          <FormControl type=\"text\" placeholder=\"Premise title...\" value={title} onChange={this.onTitleChange} />\n        </FormGroup>\n        <FormGroup>\n          <ControlLabel>Description</ControlLabel>\n          <FormControl\n            componentClass=\"textarea\"\n            placeholder=\"Premise description...\"\n            value={note}\n            onChange={this.onNoteChange}\n          />\n        </FormGroup>\n        <FormGroup>\n          <Row>\n            <Col md={4}>\n              {belief ? (\n                <ExistingBeliefView\n                  belief={belief}\n                  onCancel={() => this.setState({ belief: undefined })}\n                  assertionBasedBeliefTemplate={assertionBasedBeliefTemplate}\n                />\n              ) : (\n                this.newBelief()\n              )}\n            </Col>\n          </Row>\n        </FormGroup>\n\n        <FormGroup>\n          <ButtonGroup className=\"pull-right\">\n            <Button bsStyle=\"default\" onClick={onCancel}>\n              Cancel\n            </Button>\n            <Button\n              bsStyle=\"primary\"\n              style={{ marginLeft: '12px' }}\n              onClick={() => this.onSelectBelief(belief)}\n              disabled={!canSave}\n            >\n              {initialState ? 'Update Premise' : 'Add Premise'}\n            </Button>\n          </ButtonGroup>\n          <div className=\"clearfix\" />\n        </FormGroup>\n      </Form>\n    );\n  }\n\n  private newBelief = () => {\n    const messages = {\n      beliefHeader: 'Belief adoption',\n      dropRecordPlaceholder: 'You can drag and drop items from Clipboard here, to adopt the belief for the record...',\n      fieldSelectionHeader: 'Field based belief adoption',\n      fieldSelectionPlaceholder: 'Select fields to adopt...',\n    };\n    return (\n      <BeliefSelection\n        multiSelection={false}\n        messages={messages}\n        acceptRecordQuery={this.props.acceptRecordQuery}\n        onSelect={this.onFieldsSelection}\n      />\n    );\n  };\n\n  private onFieldsSelection = (beliefs: Array<ArgumentsBelief>) => {\n    this.setState({ belief: _.head(beliefs) });\n  };\n\n  private onSelectBelief = (belief: ArgumentsBelief) => {\n    this.props.onSave({\n      iri: this.state.iri,\n      argumentType: BeliefAdoptionType,\n      title: this.state.title,\n      note: this.state.note,\n      belief: belief,\n    });\n  };\n\n  private onTitleChange = (event: React.ChangeEvent<any>) => this.setState({ title: event.target.value });\n\n  private onNoteChange = (event: React.ChangeEvent<any>) => this.setState({ note: event.target.value });\n}\n","/**\n * ResearchSpace\n * Copyright (C) 2015-2020, © Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as React from 'react';\nimport * as _ from 'lodash';\nimport * as Maybe from 'data.maybe';\nimport { FormControl, FormGroup, Button, ButtonGroup, Col, ControlLabel, Form, Row } from 'react-bootstrap';\nimport ReactSelect, { ReactSelectProps, Option } from 'react-select';\n\nimport { Rdf } from 'platform/api/rdf';\nimport { SparqlClient } from 'platform/api/sparql';\n\nimport { InferenceType, Inference, ArgumentsBelief, ArgumentsBeliefType } from '../ArgumentsApi';\nimport { BeliefSelection } from './BeliefSelection';\nimport { ExistingBeliefView } from './ExistingBeliefView';\n\nimport * as styles from './PremiseComponent.scss';\n\nexport interface InferenceMakingComponentProps {\n  acceptEvidenceQuery?: string;\n  onCancel: () => void;\n  onSave: (argument: Inference) => void;\n  initialState?: State;\n  logicTypeQuery: string;\n  assertionBasedBeliefTemplate?: string;\n  fieldBasedBeliefTemplate?: string;\n}\n\ninterface NewPremise {\n  type: ArgumentsBeliefType;\n  record: Rdf.Iri;\n  types: Array<Rdf.Iri>;\n  selectedFields: Array<Rdf.Iri>;\n}\n\nexport interface State {\n  iri: Data.Maybe<Rdf.Iri>;\n  title: string;\n  note: string;\n  logicType?: Rdf.Iri;\n  premises: Array<ArgumentsBelief>;\n  logics?: Array<Option<Rdf.Iri>>;\n}\n\nconst LogicSelector: React.ComponentClass<ReactSelectProps<Rdf.Iri>> = ReactSelect;\n\nexport class InferenceMakingComponent extends React.Component<InferenceMakingComponentProps, State> {\n  constructor(props, context) {\n    super(props, context);\n    if (props.initialState) {\n      this.state = props.initialState;\n    } else {\n      this.state = {\n        iri: Maybe.Nothing<Rdf.Iri>(),\n        title: '',\n        note: '',\n        logicType: undefined,\n        premises: [],\n        logics: [],\n      };\n    }\n  }\n\n  componentDidMount() {\n    SparqlClient.select(this.props.logicTypeQuery).onValue((res) => {\n      const logics = res.results.bindings.map((binding) => ({\n        value: binding['logic'] as Rdf.Iri,\n        label: binding['label'].value,\n      }));\n      this.setState({ logics });\n    });\n  }\n\n  render() {\n    const { initialState, assertionBasedBeliefTemplate, fieldBasedBeliefTemplate } = this.props;\n    const { premises } = this.state;\n    return (\n      <Form>\n        <FormGroup>\n          <ControlLabel>Title*</ControlLabel>\n          <FormControl\n            type=\"text\"\n            placeholder=\"Premise title...\"\n            value={this.state.title}\n            onChange={this.onTitleChange}\n          />\n        </FormGroup>\n        <FormGroup>\n          <ControlLabel>Description</ControlLabel>\n          <FormControl\n            componentClass=\"textarea\"\n            placeholder=\"Premise description...\"\n            value={this.state.note}\n            onChange={this.onNoteChange}\n          />\n        </FormGroup>\n        <FormGroup>\n          <ControlLabel>Logic Type*</ControlLabel>\n          {this.logicTypeSelector()}\n        </FormGroup>\n        <FormGroup>\n          <ControlLabel>Evidences</ControlLabel>\n          <Row className={styles.evidenceList}>\n            {premises.map((premise, index) => (\n              <Col sm={4} className={styles.evidenceItem}>\n                <ExistingBeliefView\n                  belief={premise}\n                  onCancel={() => this.removePremise(premise, index)}\n                  assertionBasedBeliefTemplate={assertionBasedBeliefTemplate}\n                  fieldBasedBeliefTemplate={fieldBasedBeliefTemplate}\n                />\n              </Col>\n            ))}\n            <Col sm={4} className={styles.evidenceSelector}>\n              {this.newPremise()}\n            </Col>\n          </Row>\n        </FormGroup>\n        <FormGroup>\n          <ButtonGroup className=\"pull-right\">\n            <Button bsStyle=\"default\" onClick={this.props.onCancel}>\n              Cancel\n            </Button>\n            <Button\n              bsStyle=\"primary\"\n              style={{ marginLeft: '12px' }}\n              onClick={this.saveArgument}\n              disabled={!this.canSave()}\n            >\n              {initialState ? 'Update Premise' : 'Add Premise'}\n            </Button>\n          </ButtonGroup>\n          <div className=\"clearfix\" />\n        </FormGroup>\n      </Form>\n    );\n  }\n\n  private logicTypeSelector = () => {\n    const { logics } = this.state;\n    const selected = this.state.logicType\n      ? _.find(logics, (option) => option.value.equals(this.state.logicType))\n      : null;\n    return (\n      <LogicSelector\n        placeholder=\"Select logic type...\"\n        options={logics}\n        value={selected}\n        onChange={this.onLogicChange}\n        clearable={false}\n      />\n    );\n  };\n\n  private newPremise = () => {\n    const messages = {\n      beliefHeader: 'Assertion based evidence',\n      dropRecordPlaceholder: 'You can drag and drop items from Clipboard here, to add a resource for use as evidence',\n      fieldSelectionHeader: 'Field based evidence',\n      fieldSelectionPlaceholder: 'Select fields for evidence...',\n    };\n    return (\n      <BeliefSelection\n        multiSelection={true}\n        messages={messages}\n        acceptRecordQuery={this.props.acceptEvidenceQuery}\n        onSelect={this.savePremise}\n      />\n    );\n  };\n\n  private onTitleChange = (event: React.ChangeEvent<any>) => {\n    this.setState({ title: event.target.value });\n  };\n\n  private onNoteChange = (event: React.ChangeEvent<any>) => {\n    this.setState({ note: event.target.value });\n  };\n\n  private onLogicChange = (selected: Option<Rdf.Iri>) => {\n    this.setState({ logicType: selected.value });\n  };\n\n  private savePremise = (beliefs: Array<ArgumentsBelief>) => {\n    this.setState((state) => ({\n      premises: state.premises.concat(beliefs),\n    }));\n  };\n\n  private removePremise = (premise: ArgumentsBelief, index: number) => {\n    this.setState((prevState: State) => {\n      const newPremises = [...prevState.premises];\n      newPremises.splice(index, 1);\n      return { premises: newPremises };\n    });\n  };\n\n  private saveArgument = () => {\n    this.props.onSave({\n      iri: this.state.iri,\n      argumentType: InferenceType,\n      logicType: this.state.logicType,\n      title: this.state.title,\n      note: this.state.note,\n      premises: this.state.premises,\n    });\n  };\n\n  private canSave = () => {\n    const { logicType, title, premises } = this.state;\n    return logicType && !_.isEmpty(title) && !_.isEmpty(premises);\n  };\n}\n","/**\n * ResearchSpace\n * Copyright (C) 2015-2020, © Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { EventMaker } from 'platform/api/events';\n\nexport interface PremiseEventData {\n  /**\n   * Event which should be triggered to save arguments.\n   */\n  'Premise.SaveArguments': void;\n  /**\n   * Event which should be triggered when the component starts saving the arguments.\n   */\n  'Premise.ArgumentsSaving': void;\n  /**\n   * Event which should be triggered when the arguments have been saved.\n   */\n  'Premise.ArgumentsSaved': { assertionIri: string };\n  /**\n   * Event which should be trigger to add an argument.\n   */\n  'Premise.AddArgument': void;\n}\nconst event: EventMaker<PremiseEventData> = EventMaker;\n\nexport const SaveArguments = event('Premise.SaveArguments');\nexport const ArgumentsSaving = event('Premise.ArgumentsSaving');\nexport const ArgumentsSaved = event('Premise.ArgumentsSaved');\nexport const AddArgument = event('Premise.AddArgument');\n"],"sourceRoot":""}