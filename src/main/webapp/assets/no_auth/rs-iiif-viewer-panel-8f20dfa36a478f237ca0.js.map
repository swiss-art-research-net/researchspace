{"version":3,"sources":["webpack:///./src/main/web/components/panel-system/IIIFViewerPanel.tsx"],"names":["props","context","cancellation","Cancellation","queryingCancellation","derive","listenToEvents","map","listen","eventType","AddImagesForObjectEvent","target","id","observe","value","event","query","parsedQuery","SparqlUtil","parseQuery","sparql","SparqlClient","setBindings","Rdf","iri","data","objectIri","select","results","images","bindings","image","onValue","trigger","AddObjectImagesEvent","source","targets","imageIris","state","componentDidMount","this","queryImages","componentDidUpdate","prevProps","isEqual","componentWillUnmount","cancelAll","semanticContext","iris","repositories","querying","requests","repository","Kefir","zip","deriveAndCancel","combine","result","imageOrRegion","flatten","forEach","push","setState","render","ImageRegionEditorComponentMirador","Component","IIIFViewerPanel"],"mappings":"6IAkBA,OACA,QACA,QAEA,SACA,QACA,QACA,QACA,QAEA,UACA,UA4BA,cAIE,yBAAYA,EAA6BC,GAAzC,MACE,YAAMD,EAAOC,IAAQ,K,OAJN,EAAAC,aAAe,IAAI,EAAAC,aAC5B,EAAAC,qBAAuB,EAAKF,aAAaG,SAsBzC,EAAAC,eAAiB,WACvB,EAAKJ,aACAK,IACC,EAAAC,OAAO,CACLC,UAAW,EAAAC,wBACXC,OAAQ,EAAKX,MAAMY,MAErBC,QAAQ,CACRC,MAAO,SAACC,G,MACEC,EAAA,QAAAA,MACFC,EAAc,EAAAC,WAAWC,WAAWH,GACpCI,EAAS,EAAAC,aAAaC,YAAYL,IAAW,MAAqB,QAAG,EAAAM,IAAIC,IAAIT,EAAMU,KAAKC,WAAU,IACxG,EAAAL,aAAaM,OAAOP,GACPb,KAAI,SAAC,G,IAAEqB,EAAA,EAAAA,QAAc,OACpBJ,IAAKT,EAAMU,KAAKC,UAChBG,OAAQD,EAAQE,SAASvB,KAAI,SAAC,GAAc,OAAZ,EAAAwB,MAAkBjB,aAEnDkB,SACC,SAAAH,GACE,EAAAI,QAAQ,CACNxB,UAAW,EAAAyB,qBACXC,OAAQ,EAAKnC,MAAMY,GACnBwB,QAAS,CAAC,EAAKpC,MAAMY,IACrBa,KAAM,CACJC,UAAWX,EAAMU,KAAKC,UACtBW,UAAWR,EAAOA,iBA3C9C,EAAKS,MAAQ,G,EAoFjB,OA1FqC,+BASnC,0BAAAC,kBAAA,WACEC,KAAKC,cACLD,KAAKlC,kBAGP,0BAAAoC,mBAAA,SAAmBC,GACZ,EAAAC,QAAQJ,KAAKxC,MAAO2C,IACvBH,KAAKC,eAIT,0BAAAI,qBAAA,WACEL,KAAKtC,aAAa4C,aAqCZ,0BAAAL,YAAR,sBACUM,EAAA,aAAAA,gBACF,aAAE/B,EAAA,EAAAA,MAAOgC,EAAA,EAAAA,KAAM,IAAAC,oBAAA,IAAe,EAAf,iBAEfhC,EAAc,EAAAC,WAAWC,WAAWH,GACpCkC,EAAWF,EAAKzC,KAAI,SAACiB,G,MACnBJ,EAAS,EAAAC,aAAaC,YAAYL,IAAW,MAAqB,QAAG,EAAAM,IAAIC,IAAIA,GAAI,IACjF2B,EAAWF,EAAa1C,KAAI,SAAC6C,GACjC,SAAA/B,aAAaM,OAAOP,EAAQ,CAAEnB,QAAS,CAAEmD,WAAU,KAAM7C,KAAI,SAAC,G,IAAEqB,EAAA,EAAAA,QAAc,OAC5EJ,IAAG,EACHK,OAAQD,EAAQE,SAASvB,KAAI,SAAC,GAAc,OAAZ,EAAAwB,MAAkBjB,gBAGtD,OAAOuC,EAAMC,IAAIH,MAEnBX,KAAKpC,qBAAuBoC,KAAKtC,aAAaqD,gBAAgBf,KAAKpC,sBACnEoC,KAAKpC,qBAAqBG,IAAI8C,EAAMG,QAAQN,IAAWlB,SAAQ,SAACyB,GAC9D,IAAMC,EAAsC,GAC5C,EAAAC,QAAQF,GAAQG,SAAQ,SAAC,G,IAAEpC,EAAA,EAAAA,IAAKK,EAAA,EAAAA,OAC9B6B,EAAcG,KAAK,CAAEnC,UAAWF,EAAKK,OAAM,OAE7C,EAAKiC,SAAS,CAAEJ,cAAa,QAIjC,0BAAAK,OAAA,WACU,IAAAL,EAAA,WAAAA,cACR,OAAKA,EAGE,gBAAC,EAAAM,kCAAiC,cAAKxB,KAAKxC,MAAK,CAAE0D,cAAeA,KAFhE,MAIb,gBA1FA,CAAqC,EAAAO,WAAxB,EAAAC,kBA4Fb,UAAeA","file":"rs-iiif-viewer-panel-8f20dfa36a478f237ca0.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2015-2020, Â© Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as React from 'react';\nimport { isEqual, flatten } from 'lodash';\nimport * as Kefir from 'kefir';\n\nimport { trigger, listen } from 'platform/api/events';\nimport { Cancellation } from 'platform/api/async';\nimport { Component } from 'platform/api/components';\nimport { Rdf } from 'platform/api/rdf';\nimport { SparqlClient, SparqlUtil } from 'platform/api/sparql';\n\nimport { ImageRegionEditorComponentMirador, ImageRegionEditorConfig } from 'platform/components/iiif/ImageRegionEditor';\nimport { AddImagesForObjectEvent, AddObjectImagesEvent, IiifManifestObject } from '../iiif/ImageRegionEditorEvents';\n\n\nconst BINDING_VARIABLE = 'subject';\n\nexport interface IIIFViewerPanelProps extends ImageRegionEditorConfig {\n  /**\n   * SPARQL SELECT query string that is used for fetching images of an entity.\n   * Entities IRIs will be injected into the query using the \"?subject\" binding variable.\n   * The query must expose the \"?image\" query variable.\n   */\n  query: string;\n  /**\n   * Entities IRIs\n   */\n  iris: Array<string>;\n}\n\nexport interface State {\n  imageOrRegion?:  IiifManifestObject[];\n}\n\n/**\n * @example\n * <rs-iiif-viewer-panel-system [[> rsp:IIIFConfig]]\n *    query=\"SELECT ?image WHERE { ?subject crm:P138i_has_representation ?image }\">\n * </rs-iiif-viewer-panel-system>\n */\nexport class IIIFViewerPanel extends Component<IIIFViewerPanelProps, State> {\n  private readonly cancellation = new Cancellation();\n  private queryingCancellation = this.cancellation.derive();\n\n  constructor(props: IIIFViewerPanelProps, context: any) {\n    super(props, context);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    this.queryImages();\n    this.listenToEvents();\n  }\n\n  componentDidUpdate(prevProps: IIIFViewerPanelProps) {\n    if (!isEqual(this.props, prevProps)) {\n      this.queryImages();\n    }\n  }\n\n  componentWillUnmount() {\n    this.cancellation.cancelAll();\n  }\n\n  private listenToEvents = () => {\n    this.cancellation\n        .map(\n          listen({\n            eventType: AddImagesForObjectEvent,\n            target: this.props.id\n          })\n        ).observe({\n          value: (event) => {\n            const { query } = this.props;\n            const parsedQuery = SparqlUtil.parseQuery(query);\n            const sparql = SparqlClient.setBindings(parsedQuery, { [BINDING_VARIABLE]: Rdf.iri(event.data.objectIri) });\n            SparqlClient.select(sparql)\n                        .map(({ results }) => ({\n                          iri: event.data.objectIri,\n                          images: results.bindings.map(({ image }) => image.value),\n                        }))\n                        .onValue(\n                          images => {\n                            trigger({\n                              eventType: AddObjectImagesEvent,\n                              source: this.props.id,\n                              targets: [this.props.id],\n                              data: {\n                                objectIri: event.data.objectIri,\n                                imageIris: images.images\n                              }\n                            });\n                          }\n                        );\n          }\n        })\n  }\n\n  private queryImages() {\n    const { semanticContext } = this.context;\n    const { query, iris, repositories = [semanticContext.repository] } = this.props;\n\n    const parsedQuery = SparqlUtil.parseQuery(query);\n    const querying = iris.map((iri) => {\n      const sparql = SparqlClient.setBindings(parsedQuery, { [BINDING_VARIABLE]: Rdf.iri(iri) });\n      const requests = repositories.map((repository) =>\n        SparqlClient.select(sparql, { context: { repository } }).map(({ results }) => ({\n          iri,\n          images: results.bindings.map(({ image }) => image.value),\n        }))\n      );\n      return Kefir.zip(requests);\n    });\n    this.queryingCancellation = this.cancellation.deriveAndCancel(this.queryingCancellation);\n    this.queryingCancellation.map(Kefir.combine(querying)).onValue((result) => {\n      const imageOrRegion: IiifManifestObject[] = [];\n      flatten(result).forEach(({ iri, images }) => {\n        imageOrRegion.push({ objectIri: iri, images});\n      });\n      this.setState({ imageOrRegion });\n    });\n  }\n\n  render() {\n    const { imageOrRegion } = this.state;\n    if (!imageOrRegion) {\n      return null;\n    }\n    return <ImageRegionEditorComponentMirador {...this.props} imageOrRegion={imageOrRegion} />;\n  }\n}\n\nexport default IIIFViewerPanel;\n"],"sourceRoot":""}