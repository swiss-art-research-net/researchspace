{"version":3,"sources":["webpack:///./src/main/web/components/query-editor/QueryTemplate.tsx","webpack:///./src/main/web/components/query-editor/QueryTemplateTypes.ts","webpack:///./src/main/web/components/query-editor/QueryTemplateArgumentsComponent.ts","webpack:///./src/main/web/components/query-editor/QueryTemplateEditArgument.tsx"],"names":["spin","Well","createFactory","ReactBootstrap","FormGroup","FormControl","ControlLabel","HelpBlock","Button","Radio","QueryValidator","QueryValidatorComponent","QUERY_OPTIONS","value","label","props","context","identifier","Kefir","pool","description","args","query","fetchTemplate","iri","queryTemplateService","getQueryTemplate","Rdf","flatMap","getQueryTemplateCount","onValue","template","queryIri","templateCount","getLabels","categories","map","labels","categoryLabel","categoryIri","literal","toArray","setState","selectQuery","plug","constant","forEach","arg","index","setArgument","Right","SparqlClient","setBindings","SparqlUtil","parseQuery","semanticContext","select","res","parseInt","results","bindings","isUpdateMode","getTemplateTypeForQuery","q","type","UpdateTemplate","queryType","SelectTemplate","ConstructTemplate","AskTemplate","initPool","identifierMapped","validateInputField","v","Just","onError","Nothing","labelMapped","descriptionMapped","argsMapped","validateArguments","queryMapped","combine","toProperty","state","isJust","get","isIri","Error","templateType","o","length","constantError","error","filter","isLeft","addArgument","prevState","slice","push","deleteArgument","splice","createQuery","queryService","addItem","updateQuery","updateItem","onSaveError","er","inProgress","addNotification","title","children","ErrorPresenter","level","onUpdateSuccess","message","refresh","onUpdateError","createTemplate","namespace","existingQueryIri","updateTemplate","qIri","onChangeQuery","isValid","getValidationState","getQuerySection","onChange","onChangeVariables","variables","D","div","createElement","ResourceLink","resource","params","queryiri","viewOnly","autoComplete","AutoCompletionInput","defaultQuery","placeholder","templates","suggestion","actions","onSelected","undefined","onLabelChanged","e","oldSource","old","newSource","currentTarget","newIdentifier","mapIfCorresponds","oldTarget","mapping","slugFromName","newDescription","newQueryLabel","fromNullable","onDescriptionChanged","QueryTemplateService","QueryService","componentWillMount","this","componentDidMount","parseQueryAsync","render","identifierField","validationState","disabled","labelField","descriptionField","componentClass","style","resize","selectQueryOptions","item","selectQueryField","opt","key","name","inline","checked","onClick","target","querySection","disableSave","isNothing","renderCategoriesField","QueryTemplateArgumentsComponent","factory","onAdd","onDelete","bsStyle","categorySuggestionQuery","categoryDefaultQuery","multi","defaultProps","Component","getOrElse","mapped","QueryTemplate","VALUE_TYPES","vocabularies","xsd","LIST_TYPES","Panel","PanelGroup","ButtonToolbar","handleAddNewArgument","emptyArgument","variable","comment","optional","valueType","activeKey","Left","handleDeleteArgument","body","textAlign","h5","margin","display","getOverlaySystem","hide","show","OverlayDialog","bsSize","onHide","handleChangeArgument","argument","renderArgument","filteredArgs","i","notAvailableLabels","fold","notAvailableVariables","header","eventKey","onSelect","QueryTemplateEditArgument","flag","width","accordion","component","defaultValue","FieldValue","asRdfNode","validateLabel","indexOf","validateVariable","getFormValue","empty","variableMapped","commentMapped","valueTypeMapped","defaultValueMapped","flatMapErrors","AtomicValue","errors","FieldError","noErrors","kind","ErrorKind","Input","XsdDataTypeValidation","sameXsdDatatype","anyURI","validateType","getErrors","size","observe","optionalMapped","componentDidUpdate","prevProps","isEqual","className","Col","sm","isAtomic","first"],"mappings":"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","file":"mp-spin-query-template-editor-fdb3a37696a110359fa3.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport { createFactory, createElement, FormEvent, ReactElement } from 'react';\nimport * as D from 'react-dom-factories';\nimport { Component } from 'platform/api/components';\nimport * as ReactBootstrap from 'react-bootstrap';\nimport { Just, Nothing, fromNullable } from 'data.maybe';\nimport { Right } from 'data.either';\nimport * as Kefir from 'kefir';\nimport * as _ from 'lodash';\n\nimport { Rdf, vocabularies } from 'platform/api/rdf';\n\nconst { spin } = vocabularies;\n\nimport { SparqlClient, SparqlUtil } from 'platform/api/sparql';\nimport { ResourceLink } from 'platform/api/navigation/components';\nimport { refresh } from 'platform/api/navigation';\nimport { getLabels } from 'platform/api/services/resource-label';\nimport { slugFromName } from 'platform/api/services/ldp';\nimport { Query, OperationType, QueryService, QueryServiceClass } from 'platform/api/services/ldp-query';\nimport { QueryTemplateService, QueryTemplateServiceClass } from 'platform/api/services/ldp-query-template';\nimport { addNotification, ErrorPresenter } from 'platform/components/ui/notification';\nimport { AutoCompletionInput } from 'platform/components/ui/inputs';\n\nimport { Template, Argument, Value } from './QueryTemplateTypes';\nimport { QueryValidatorComponent } from './QueryValidatorComponent';\nimport * as QueryTemplateArgumentsComponent from './QueryTemplateArgumentsComponent';\nimport React = require('react');\n\nconst Well = createFactory(ReactBootstrap.Well);\nconst FormGroup = createFactory(ReactBootstrap.FormGroup);\nconst FormControl = createFactory(ReactBootstrap.FormControl);\nconst ControlLabel = createFactory(ReactBootstrap.ControlLabel);\nconst HelpBlock = createFactory(ReactBootstrap.HelpBlock);\nconst Button = createFactory(ReactBootstrap.Button);\nconst Radio = createFactory(ReactBootstrap.Radio);\n\nconst QueryValidator = createFactory(QueryValidatorComponent);\n\nconst QUERY_OPTIONS: Array<{ value: EditMode; label: string }> = [\n  { value: 'create', label: 'Create new query' },\n  { value: 'update', label: 'Update query' },\n  { value: 'reference', label: 'Reference existing query' },\n];\n\nconst SELECT_TEMPLATE_COUNT_QUERY = `PREFIX spin: <http://spinrdf.org/spin#>\nSELECT (COUNT(?template) as ?templateCount) WHERE {\n  ?template spin:body ?query\n}`;\n\nexport interface QueryTemplateProps {\n  /** IRI of an existing template to edit. */\n  iri?: string;\n  /** Initial value for query body when creating a new template. */\n  defaultQuery?: string;\n  /** Namespace prefix for generated IRIs of templates, queries and arguments. */\n  namespace?: string;\n  /** Autosuggestion query to choose template categories, e.g from a skos list of terms. */\n  categorySuggestionQuery?: string;\n  /** Default query to choose template categories, e.g from a skos list of terms. */\n  categoryDefaultQuery?: string;\n}\n\ntype EditMode = 'create' | 'update' | 'reference';\n\ninterface State {\n  identifier?: Data.Maybe<Value>;\n  label?: Data.Maybe<Value>;\n  description?: Data.Maybe<Value>;\n  /**\n   * Category bindings:\n   *   'iri' - category IRI\n   */\n  categories?: ReadonlyArray<SparqlClient.Binding>;\n  selectQuery?: EditMode;\n  query?: Query;\n  variables?: string[];\n  args?: Data.Either<Argument, Argument>[];\n  queryIri?: string;\n  existingQueryIri?: string;\n  templateCount?: number;\n  template?: Data.Maybe<Template>;\n  inProgress?: boolean;\n}\n\nexport class QueryTemplate extends Component<QueryTemplateProps, State> {\n  static readonly defaultProps: Partial<QueryTemplateProps> = {\n    categorySuggestionQuery: `\n      PREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n      SELECT DISTINCT ?iri ?label WHERE {\n        ?iri a skos:Concept ;\n          rdfs:label ?label .\n        FILTER(REGEX(STR(?label), $__token__, \\\"i\\\")) .\n      }\n    `,\n    categoryDefaultQuery: `\n      PREFIX skos: <http://www.w3.org/2004/02/skos/core#>\n      SELECT DISTINCT ?iri ?label WHERE {\n        ?iri a skos:Concept ;\n          rdfs:label ?label .\n      } LIMIT 10\n    `,\n  };\n\n  private identifier = Kefir.pool<string>();\n  private label = Kefir.pool<string>();\n  private description = Kefir.pool<string>();\n  private args = Kefir.pool<Data.Either<Argument, Argument>[]>();\n  private query = Kefir.pool<Query>();\n\n  private queryTemplateService: QueryTemplateServiceClass;\n  private queryService: QueryServiceClass;\n\n  constructor(props: QueryTemplateProps, context: any) {\n    super(props, context);\n    const semanticContext = this.context.semanticContext;\n    this.queryTemplateService = QueryTemplateService(semanticContext);\n    this.queryService = QueryService(semanticContext);\n    this.state = {\n      identifier: Nothing<Value>(),\n      label: Nothing<Value>(),\n      description: Nothing<Value>(),\n      categories: [],\n      selectQuery: 'create',\n      query: undefined,\n      variables: [],\n      args: [],\n      template: Nothing<Template>(),\n      inProgress: false,\n    };\n  }\n\n  componentWillMount() {\n    this.initPool();\n  }\n\n  componentDidMount() {\n    if (this.isUpdateMode()) {\n      this.fetchTemplate(this.props.iri);\n    } else if (this.props.defaultQuery) {\n      SparqlUtil.parseQueryAsync(this.props.defaultQuery).onValue((q) => {\n        const queryType: OperationType = q.type === 'update' ? 'UPDATE' : q.queryType;\n        this.query.plug(\n          Kefir.constant({\n            value: this.props.defaultQuery,\n            type: q.type,\n            queryType: queryType,\n            label: '',\n          })\n        );\n      });\n    }\n  }\n\n  private fetchTemplate = (iri: string) => {\n    this.queryTemplateService\n      .getQueryTemplate(Rdf.iri(iri))\n      .flatMap(this.getQueryTemplateCount)\n      .onValue(({ template, queryIri, templateCount }) => {\n        const { identifier, label, description, args } = template;\n        // TODO\n        // fetch labels for existing category IRIs\n        getLabels(template.categories)\n          .map((labels) =>\n            labels\n              .map(\n                (categoryLabel, categoryIri): SparqlClient.Dictionary<Rdf.Node> => ({\n                  iri: categoryIri,\n                  label: Rdf.literal(categoryLabel),\n                })\n              )\n              .toArray()\n          )\n          .onValue((categories) =>\n            this.setState({ queryIri, templateCount, categories, selectQuery: 'update' }, () => {\n              this.identifier.plug(Kefir.constant(identifier));\n              this.label.plug(Kefir.constant(label));\n              this.description.plug(Kefir.constant(description));\n              args.forEach((arg, index) => {\n                this.setArgument(Right<Argument, Argument>(arg), index);\n              });\n            })\n          );\n      });\n  };\n\n  private getQueryTemplateCount = ({\n    template,\n    queryIri,\n  }: {\n    template: Template;\n    queryIri: string;\n  }): Kefir.Property<{ template: Template; queryIri: string; templateCount: number }> => {\n    const query = SparqlClient.setBindings(SparqlUtil.parseQuery(SELECT_TEMPLATE_COUNT_QUERY), {\n      query: Rdf.iri(queryIri),\n    });\n    const context = this.context.semanticContext;\n    return SparqlClient.select(query, { context: context }).map((res) => {\n      return {\n        template: template,\n        queryIri: queryIri,\n        templateCount: parseInt(res.results.bindings[0]['templateCount'].value),\n      };\n    });\n  };\n\n  private isUpdateMode = (): boolean => {\n    return !!this.props.iri;\n  };\n\n  private getTemplateTypeForQuery = (q: Query): Rdf.Iri => {\n    if (q.type === 'update') {\n      return spin.UpdateTemplate;\n    } else {\n      switch (q.queryType) {\n        case 'SELECT':\n          return spin.SelectTemplate;\n        case 'CONSTRUCT':\n          return spin.ConstructTemplate;\n        case 'ASK':\n          return spin.AskTemplate;\n        default:\n          return spin.SelectTemplate;\n      }\n    }\n  };\n\n  private initPool = () => {\n    const identifierMapped = this.identifier.flatMap<Value>(this.validateInputField);\n    identifierMapped\n      .onValue((v) => this.setState({ identifier: Just(v) }))\n      .onError((v) => this.setState({ identifier: Just(v), template: Nothing<Template>() }));\n\n    const labelMapped = this.label.flatMap<Value>(this.validateInputField);\n    labelMapped\n      .onValue((v) => this.setState({ label: Just(v) }))\n      .onError((v) => this.setState({ label: Just(v), template: Nothing<Template>() }));\n\n    const descriptionMapped = this.description.flatMap<Value>(this.validateInputField);\n    descriptionMapped\n      .onValue((v) => this.setState({ description: Just(v) }))\n      .onError((v) => this.setState({ description: Just(v), template: Nothing<Template>() }));\n\n    const argsMapped = this.args.flatMap<Data.Either<Argument, Argument>[]>(this.validateArguments);\n    argsMapped.onError((v) => this.setState({ template: Nothing<Template>() }));\n\n    const queryMapped = this.query;\n    queryMapped\n      .onValue((v) => this.setState({ query: v }))\n      .onError((v) => this.setState({ query: v, template: Nothing<Template>() }));\n\n    Kefir.combine(\n      {\n        identifier: identifierMapped\n          .map((v) => v.value)\n          .toProperty(() => {\n            if (this.state.identifier.isJust) {\n              return this.state.identifier.get().value;\n            }\n          }),\n        label: labelMapped\n          .map((v) => v.value)\n          .toProperty(() => {\n            if (this.state.label.isJust) {\n              return this.state.label.get().value;\n            }\n          }),\n        description: descriptionMapped\n          .map((v) => v.value)\n          .toProperty(() => {\n            if (this.state.description.isJust) {\n              return this.state.description.get().value;\n            }\n          }),\n        args: argsMapped.toProperty(() => this.state.args),\n        query: queryMapped.toProperty(() => this.state.query),\n      },\n      ({ identifier, label, description, args, query }) => {\n        if (!identifier || !label || !description || !query) {\n          return;\n        }\n\n        const categories = this.state.categories.map(({ iri }) => {\n          if (!iri.isIri()) {\n            throw new Error('Query template category is expected to be an IRI');\n          }\n          return iri;\n        });\n\n        const templateType = this.getTemplateTypeForQuery(query);\n\n        const template = {\n          templateType,\n          identifier,\n          label,\n          description,\n          categories,\n          args: args.map((arg) => {\n            return arg.get();\n          }),\n        };\n\n        this.setState({ template: Just(template) });\n\n        return {};\n      }\n    ).onValue((o) => o);\n  };\n\n  private validateInputField = (v: string): Kefir.Property<Value> => {\n    if (v.length < 1) {\n      return Kefir.constantError<Value>({\n        value: v,\n        error: new Error('Please fill out this field.'),\n      });\n    }\n    return Kefir.constant<Value>({ value: v });\n  };\n\n  private validateArguments = (\n    v: Data.Either<Argument, Argument>[]\n  ): Kefir.Property<Data.Either<Argument, Argument>[]> => {\n    const errorArgs = v.filter((arg) => {\n      return arg.isLeft;\n    });\n\n    if (errorArgs.length) {\n      return Kefir.constantError<Data.Either<Argument, Argument>[]>(v);\n    }\n    return Kefir.constant<Data.Either<Argument, Argument>[]>(v);\n  };\n\n  private addArgument = (arg) => {\n    this.setState(\n      (prevState) => {\n        const args = prevState.args.slice();\n        args.push(arg);\n        return { args };\n      },\n      () => this.args.plug(Kefir.constant(this.state.args))\n    );\n  };\n\n  private deleteArgument = (index) => {\n    this.setState(\n      (prevState) => {\n        const args = prevState.args.slice();\n        args.splice(index, 1);\n        return { args };\n      },\n      () => this.args.plug(Kefir.constant(this.state.args))\n    );\n  };\n\n  private setArgument = (arg: Data.Either<Argument, Argument>, index: number) => {\n    this.setState(\n      (prevState) => {\n        const args = prevState.args.slice();\n        args.splice(index, 1, arg);\n        return { args };\n      },\n      () => this.args.plug(Kefir.constant(this.state.args))\n    );\n  };\n\n  private createQuery = (): Kefir.Property<string> => {\n    return this.queryService.addItem(this.state.query).map((iri) => iri.value);\n  };\n\n  private updateQuery = (): Kefir.Property<{}> => {\n    const iri = Rdf.iri(this.state.queryIri);\n    return this.queryService.updateItem(iri, this.state.query);\n  };\n\n  private onSaveError = (er: Error) => {\n    this.setState({ inProgress: false });\n    addNotification(\n      {\n        title: 'Error!',\n        children: (\n          <div>\n            An error has occurred while template saving.\n            <ErrorPresenter error={er} />\n          </div>\n        ),\n        level: 'error',\n      },\n      er\n    );\n  };\n\n  private onUpdateSuccess = () => {\n    this.setState({ inProgress: false });\n    addNotification({\n      title: 'Success!',\n      message: 'Template updated successfully',\n      level: 'success',\n    });\n    refresh();\n  };\n\n  private onUpdateError = (er: Error) => {\n    this.setState({ inProgress: false });\n    addNotification(\n      {\n        title: 'Error!',\n        children: (\n          <div>\n            An error has occurred while template updating.\n            <ErrorPresenter error={er} />\n          </div>\n        ),\n        level: 'error',\n      },\n      er\n    );\n  };\n\n  private createTemplate = () => {\n    const { namespace } = this.props;\n    const { selectQuery, existingQueryIri, template } = this.state;\n\n    this.setState({ inProgress: true });\n\n    if (selectQuery === 'create') {\n      this.createQuery()\n        .flatMap((iri) => this.queryTemplateService.addItem(template.get(), iri, namespace))\n        .onValue((iri: Rdf.Iri) => {\n          refresh();\n        })\n        .onError(this.onSaveError);\n    } else if (selectQuery === 'reference') {\n      this.queryTemplateService\n        .addItem(template.get(), existingQueryIri, namespace)\n        .onValue((iri: Rdf.Iri) => {\n          refresh();\n        })\n        .onError(this.onSaveError);\n    }\n  };\n\n  private updateTemplate = () => {\n    const { namespace } = this.props;\n    const { selectQuery, queryIri, existingQueryIri, template } = this.state;\n\n    const iri = Rdf.iri(this.props.iri);\n\n    this.setState({ inProgress: true });\n\n    if (selectQuery === 'create') {\n      this.createQuery()\n        .flatMap((qIri) => {\n          return this.queryTemplateService.updateItem(iri, template.get(), qIri, namespace);\n        })\n        .onValue(this.onUpdateSuccess)\n        .onError(this.onUpdateError);\n    } else if (selectQuery === 'update') {\n      this.updateQuery()\n        .flatMap(() => {\n          return this.queryTemplateService.updateItem(iri, template.get(), queryIri, namespace);\n        })\n        .onValue(this.onUpdateSuccess)\n        .onError(this.onUpdateError);\n    } else if (selectQuery === 'reference') {\n      this.queryTemplateService\n        .updateItem(iri, template.get(), existingQueryIri, namespace)\n        .onValue(this.onUpdateSuccess)\n        .onError(this.onUpdateError);\n    }\n  };\n\n  private onChangeQuery = (query: Query, isValid: boolean) => {\n    if (isValid) {\n      this.query.plug(Kefir.constant(query));\n    } else {\n      this.query.plug(Kefir.constantError(query));\n    }\n  };\n\n  private getValidationState = (value: Data.Maybe<Value>): 'success' | 'warning' | 'error' => {\n    if (value.isJust && value.get().error) {\n      return 'error';\n    }\n  };\n\n  private getQuerySection = (): ReactElement<any> => {\n    const { selectQuery, queryIri, existingQueryIri, templateCount } = this.state;\n    if (selectQuery === 'create') {\n      return QueryValidator({\n        query: this.state.query,\n        onChange: this.onChangeQuery,\n        onChangeVariables: (v) => this.setState({ variables: v }),\n      });\n    } else if (selectQuery === 'update') {\n      return D.div(\n        {},\n        templateCount > 1\n          ? HelpBlock(\n              {},\n              `* This query is used in ${templateCount}\n             templates and inline editing is disabled. Click `,\n              createElement(\n                ResourceLink,\n                {\n                  resource: Rdf.iri('http://www.researchspace.org/resource/admin/EditBaseQuery'),\n                  params: { queryiri: queryIri },\n                },\n                'here'\n              ),\n              ' to edit the query.'\n            )\n          : null,\n        QueryValidator({\n          iri: queryIri,\n          viewOnly: templateCount > 1,\n          onChange: this.onChangeQuery,\n          onChangeVariables: (v) => this.setState({ variables: v }),\n        })\n      );\n    } else if (selectQuery === 'reference') {\n      const autoComplete = createElement(AutoCompletionInput, {\n        query: `PREFIX bds: <http://www.bigdata.com/rdf/search#>\n               PREFIX prov: <http://www.w3.org/ns/prov#>\n                SELECT ?iri ?label ?text ?modified  WHERE {\n                  ?iri a sp:Query ;\n                    sp:text ?text;\n                    prov:generatedAtTime ?modified;\n                    rdfs:label ?label;\n                    prov:wasAttributedTo ?user.\n                  FILTER(\n                    ?user in (<http://www.researchspace.org/resource/user/querycatalog>,?__useruri__)\n                  )\n                  SERVICE bds:search {\n                                  ?label bds:search \\\"*?token*\\\" ;\n                                    bds:relevance ?score .\n                                }\n                } ORDER BY DESC(?score)  LIMIT 20\n                `,\n        defaultQuery: `PREFIX prov: <http://www.w3.org/ns/prov#>\n              SELECT ?iri ?label ?text ?modified WHERE {\n                  ?iri a sp:Query;\n                    sp:text ?text;\n                    prov:generatedAtTime ?modified;\n                    prov:wasAttributedTo ?user.\n                  FILTER(\n                    ?user in (<http://www.researchspace.org/resource/user/querycatalog>,?__useruri__)\n                  )\n                  OPTIONAL {?iri rdfs:label ?label}\n                } ORDER BY DESC(?modified) LIMIT 10`,\n        placeholder: 'Select query...',\n        templates: {\n          suggestion: `<mp-popover title=\"{{iri.value}}\">\n                  <mp-popover-trigger placement=\"top\"trigger='[\"hover\",\"focus\"]'>\n                    <span>{{label.value}} ({{dateTimeFormat modified.value \"LLL\"}})</span>\n                  </mp-popover-trigger>\n                  <mp-popover-content style=\"background:white;\">\n                      <div>{{text.value}}</div>\n                  </mp-popover-content>\n              </mp-popover>`,\n        },\n        actions: {\n          onSelected: (res) => {\n            if (res) {\n              this.setState({ existingQueryIri: res['iri'].value });\n            } else {\n              this.setState({ existingQueryIri: undefined, variables: [] }, () => {\n                const query = {\n                  label: '',\n                  value: '',\n                  type: '',\n                  queryType: '',\n                } as Query;\n                this.query.plug(Kefir.constantError(query));\n              });\n            }\n          },\n        },\n      });\n      return D.div(\n        {},\n        FormGroup({}, D.div({}, autoComplete)),\n        existingQueryIri\n          ? QueryValidator({\n              iri: existingQueryIri,\n              viewOnly: true,\n              onChange: this.onChangeQuery,\n              onChangeVariables: (v) => this.setState({ variables: v }),\n            })\n          : null\n      );\n    } else {\n      return null;\n    }\n  };\n\n  public render() {\n    const {\n      identifier,\n      label,\n      description,\n      selectQuery,\n      query,\n      args,\n      variables,\n      existingQueryIri,\n      template,\n      inProgress,\n    } = this.state;\n\n    // TODO\n    // we keep this invisible in edit mode\n    // until we have clean-up the identifiers\n    const identifierField = this.isUpdateMode()\n      ? null\n      : FormGroup(\n          { validationState: this.getValidationState(identifier) },\n          ControlLabel({}, 'Preferred Identifier*'),\n          FormControl({\n            type: 'text',\n            value: identifier.isJust ? identifier.get().value : '',\n            onChange: (e) => this.identifier.plug((e.currentTarget as any).value),\n            disabled: this.isUpdateMode(),\n          }),\n          this.getValidationState(identifier) === 'error' ? HelpBlock({}, identifier.get().error.message) : null\n        );\n\n    const labelField = FormGroup(\n      { validationState: this.getValidationState(label) },\n      ControlLabel({}, 'Label*'),\n      FormControl({\n        type: 'text',\n        value: label.isJust ? label.get().value : '',\n        onChange: this.onLabelChanged,\n      }),\n      this.getValidationState(label) === 'error' ? HelpBlock({}, label.get().error.message) : null\n    );\n\n    const descriptionField = FormGroup(\n      { validationState: this.getValidationState(description) },\n      ControlLabel({}, 'Description*'),\n      FormControl({\n        componentClass: 'textarea',\n        style: { resize: 'vertical' },\n        value: description.isJust ? description.get().value : '',\n        onChange: this.onDescriptionChanged,\n      }),\n      this.getValidationState(description) === 'error' ? HelpBlock({}, description.get().error.message) : null\n    );\n\n    const selectQueryOptions = this.isUpdateMode()\n      ? QUERY_OPTIONS\n      : QUERY_OPTIONS.filter((item) => {\n          return item.value !== 'update';\n        });\n\n    const selectQueryField = FormGroup(\n      {},\n      selectQueryOptions.map((opt) =>\n        Radio(\n          {\n            key: opt.value,\n            name: 'mode',\n            value: opt.value,\n            inline: true,\n            checked: opt.value === selectQuery,\n            onChange: (e) => e,\n            onClick: (e) => {\n              const target = e.target as HTMLInputElement;\n              if (selectQuery !== target.value) {\n                this.setState({ selectQuery: target.value as EditMode, variables: [] }, () => {\n                  const query = {\n                    label: '',\n                    value: '',\n                    type: '',\n                    queryType: '',\n                  } as Query;\n                  this.query.plug(Kefir.constantError(query));\n                });\n              }\n            },\n          },\n          opt.label\n        )\n      )\n    );\n\n    const querySection = this.getQuerySection();\n\n    const disableSave =\n      template.isNothing ||\n      inProgress ||\n      (existingQueryIri === undefined && (query === undefined || query.value === undefined));\n\n    return D.div(\n      {},\n      labelField,\n      identifierField,\n      descriptionField,\n      this.renderCategoriesField(),\n      ControlLabel({}, 'Query*'),\n      Well({}, selectQueryField, querySection),\n      QueryTemplateArgumentsComponent.factory({\n        args,\n        variables,\n        onAdd: this.addArgument,\n        onDelete: this.deleteArgument,\n        onChange: this.setArgument,\n      }),\n      Button(\n        {\n          bsStyle: 'success',\n          disabled: disableSave,\n          onClick: this.isUpdateMode() ? this.updateTemplate : this.createTemplate,\n        },\n        this.isUpdateMode() ? 'Update' : 'Save'\n      )\n    );\n  }\n\n  private renderCategoriesField() {\n    if (!this.props.categorySuggestionQuery) {\n      return null;\n    }\n\n    return FormGroup(\n      {},\n      ControlLabel({}, 'Categories'),\n      createElement(AutoCompletionInput, {\n        query: this.props.categorySuggestionQuery,\n        defaultQuery: this.props.categoryDefaultQuery,\n        placeholder: 'Select categories',\n        multi: true,\n        value: this.state.categories,\n        actions: {\n          onSelected: (bindings) => {\n            const categories = bindings as ReadonlyArray<SparqlClient.Binding>;\n            this.setState({ categories }, () => {\n              // FIXME: get rid of all pools\n              // This is a hack to trigger template generation\n              if (this.state.label.isJust) {\n                this.label.plug(Kefir.constant(this.state.label.get().value));\n              }\n            });\n          },\n        },\n      })\n    );\n  }\n\n  private onLabelChanged = (e: FormEvent<ReactBootstrap.FormControl>) => {\n    const oldSource = this.state.label.map((old) => old.value);\n    const newSource = (e.currentTarget as any).value;\n\n    const newIdentifier = mapIfCorresponds({\n      oldSource,\n      newSource,\n      oldTarget: this.state.identifier.map(({ value }) => value),\n      mapping: slugFromName,\n    });\n    const newDescription = mapIfCorresponds({\n      oldSource,\n      newSource,\n      oldTarget: this.state.description.map(({ value }) => value),\n    });\n    const newQueryLabel = mapIfCorresponds({\n      oldSource,\n      newSource,\n      oldTarget: fromNullable(this.state.query).map((query) => query.label),\n    });\n\n    this.label.plug(Kefir.constant(newSource));\n    if (newIdentifier.isJust) {\n      // autofill identifier based on template label\n      this.identifier.plug(Kefir.constant(newIdentifier.get()));\n    }\n    if (newDescription.isJust) {\n      // autofill template description based on template label\n      this.description.plug(Kefir.constant(newDescription.get()));\n    }\n    if (newQueryLabel.isJust) {\n      // autofill query description based on template label\n      this.query.plug(\n        Kefir.constant({\n          ...this.state.query,\n          label: newQueryLabel.get(),\n        })\n      );\n    }\n  };\n\n  private onDescriptionChanged = (e: FormEvent<ReactBootstrap.FormControl>) => {\n    const oldSource = this.state.description.map((old) => old.value);\n    const newSource = (e.currentTarget as any).value;\n\n    const newQueryLabel = mapIfCorresponds({\n      oldSource,\n      newSource,\n      oldTarget: fromNullable(this.state.query).map((query) => query.label),\n    });\n\n    this.description.plug(Kefir.constant(newSource));\n    if (newQueryLabel.isJust) {\n      // autofill query description based on template description\n      this.query.plug(\n        Kefir.constant({\n          ...this.state.query,\n          label: newQueryLabel.get(),\n        })\n      );\n    }\n  };\n}\n\nfunction mapIfCorresponds(params: {\n  oldSource: Data.Maybe<string>;\n  oldTarget: Data.Maybe<string>;\n  newSource: string;\n  mapping?: (source: string) => string;\n}): Data.Maybe<string> {\n  const { oldSource, newSource, mapping = (v: string) => v } = params;\n  const oldTarget = params.oldTarget.getOrElse(undefined);\n  const generateTarget =\n    !oldTarget ||\n    params.oldSource\n      .map(mapping)\n      .map((mapped) => oldTarget === mapped)\n      .getOrElse(false);\n  return generateTarget ? Just(mapping(newSource)) : Nothing<string>();\n}\n\nexport default QueryTemplate;\n","/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { Rdf, vocabularies } from 'platform/api/rdf';\n\nexport const VALUE_TYPES = vocabularies.xsd.LIST_TYPES;\n\nexport interface Template {\n  readonly templateType: Rdf.Iri;\n  readonly identifier: string;\n  readonly label: string;\n  readonly description: string;\n  readonly categories: ReadonlyArray<Rdf.Iri>;\n  readonly args: ReadonlyArray<Argument>;\n}\n\nexport interface Argument {\n  readonly label: string;\n  readonly variable: string;\n  readonly comment: string;\n  readonly valueType: string;\n  readonly defaultValue?: Rdf.Node;\n  readonly optional: boolean;\n}\n\nexport interface Value {\n  readonly value: string;\n  readonly error?: Error;\n}\n","/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { Component, createFactory, createElement } from 'react';\nimport * as D from 'react-dom-factories';\nimport * as ReactBootstrap from 'react-bootstrap';\nimport { Left, Right } from 'data.either';\n\nimport { getOverlaySystem, OverlayDialog } from 'platform/components/ui/overlay';\n\nimport { Argument } from './QueryTemplateTypes';\nimport { QueryTemplateEditArgument } from './QueryTemplateEditArgument';\n\nconst Well = createFactory(ReactBootstrap.Well);\nconst Panel = createFactory(ReactBootstrap.Panel);\nconst PanelGroup = createFactory(ReactBootstrap.PanelGroup);\nconst FormGroup = createFactory(ReactBootstrap.FormGroup);\nconst ControlLabel = createFactory(ReactBootstrap.ControlLabel);\nconst Button = createFactory(ReactBootstrap.Button);\nconst ButtonToolbar = createFactory(ReactBootstrap.ButtonToolbar);\n\nexport interface Props {\n  args: Data.Either<Argument, Argument>[];\n  variables: string[];\n  onAdd: (arg: Data.Either<Argument, Argument>) => void;\n  onDelete: (index: number) => void;\n  onChange: (arg: Data.Either<Argument, Argument>, index: number) => void;\n}\n\nexport interface State {\n  activeKey?: number;\n}\n\nexport class QueryTemplateArgumentsComponent extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      activeKey: 0,\n    };\n  }\n\n  private handleAddNewArgument = () => {\n    const emptyArgument = {\n      label: '',\n      variable: '',\n      comment: '',\n      optional: false,\n      valueType: '',\n    };\n\n    this.setState({ activeKey: this.props.args.length }, () => {\n      this.props.onAdd(Left<Argument, Argument>(emptyArgument));\n    });\n  };\n\n  private handleDeleteArgument = (index) => {\n    const title = 'Delete Argument';\n    const body = D.div(\n      { style: { textAlign: 'center' } },\n      D.h5({ style: { margin: '0 0 20px' } }, 'Are You Sure?'),\n      ButtonToolbar(\n        { style: { display: 'inline-block' } },\n        Button(\n          {\n            bsStyle: 'success',\n            onClick: () => {\n              getOverlaySystem().hide(title);\n\n              this.props.onDelete(index);\n            },\n          },\n          'Yes'\n        ),\n        Button({ bsStyle: 'danger', onClick: () => getOverlaySystem().hide(title) }, 'No')\n      )\n    );\n\n    getOverlaySystem().show(\n      title,\n      createElement(OverlayDialog, {\n        show: true,\n        title: title,\n        bsSize: 'sm',\n        onHide: () => getOverlaySystem().hide(title),\n        children: body,\n      })\n    );\n  };\n\n  private handleChangeArgument = (arg: Argument, index, isValid) => {\n    const argument = isValid ? Right<Argument, Argument>(arg) : Left<Argument, Argument>(arg);\n\n    this.props.onChange(argument, index);\n  };\n\n  private renderArgument = (argument: Argument, index: number, isValid: boolean) => {\n    const { args, variables } = this.props;\n\n    const filteredArgs = args.filter((arg, i) => {\n      return i !== index;\n    });\n\n    const notAvailableLabels = filteredArgs.map((arg) => {\n      return arg.fold(\n        (item) => item.label,\n        (item) => item.label\n      );\n    });\n\n    const notAvailableVariables = filteredArgs.map((arg) => {\n      return arg.fold(\n        (item) => item.variable,\n        (item) => item.variable\n      );\n    });\n\n    return Panel(\n      {\n        key: index,\n        header: argument.label.length ? argument.label : 'No Label',\n        eventKey: index,\n        onSelect: (key) => this.setState({ activeKey: key }),\n        bsStyle: isValid ? 'default' : 'danger',\n      },\n      createElement(QueryTemplateEditArgument, {\n        argument,\n        variables,\n        notAvailableLabels,\n        notAvailableVariables,\n        onDelete: () => {\n          this.handleDeleteArgument(index);\n        },\n        onChange: (arg, flag) => {\n          this.handleChangeArgument(arg, index, flag);\n        },\n      })\n    );\n  };\n\n  render() {\n    const { activeKey } = this.state;\n\n    return FormGroup(\n      { style: { width: '50%' } },\n      ControlLabel({}, 'Arguments'),\n      Well(\n        {},\n        this.props.args.length\n          ? PanelGroup(\n              { activeKey: activeKey, accordion: true },\n              this.props.args.map((item, index) => {\n                return item.fold(\n                  (arg) => this.renderArgument(arg, index, false),\n                  (arg) => this.renderArgument(arg, index, true)\n                );\n              })\n            )\n          : null,\n        Button({ bsSize: 'small', bsStyle: 'primary', onClick: this.handleAddNewArgument }, 'Add New Argument')\n      )\n    );\n  }\n}\n\nexport type component = QueryTemplateArgumentsComponent;\nexport const component = QueryTemplateArgumentsComponent;\nexport const factory = createFactory(component);\nexport default component;\n","/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\nimport { Component, FormEvent } from 'react';\nimport { FormGroup, FormControl, Col, ControlLabel, HelpBlock, Button } from 'react-bootstrap';\nimport { Just, Nothing } from 'data.maybe';\nimport * as Kefir from 'kefir';\nimport { isEqual } from 'lodash';\n\nimport { Rdf, vocabularies, XsdDataTypeValidation } from 'platform/api/rdf';\nimport { validateType, FieldValue, FieldError, ErrorKind, AtomicValue, EmptyValue } from 'platform/components/forms';\n\nimport { VALUE_TYPES, Argument, Value } from './QueryTemplateTypes';\n\nexport interface Props {\n  argument: Argument;\n  variables: string[];\n  notAvailableLabels: string[];\n  notAvailableVariables: string[];\n  onDelete: () => void;\n  onChange: (arg: Argument, isValid: boolean) => void;\n}\n\ninterface State {\n  label?: Data.Maybe<Value>;\n  variable?: Data.Maybe<Value>;\n  comment?: Data.Maybe<Value>;\n  valueType?: Data.Maybe<Value>;\n  defaultValue?: AtomicValue | EmptyValue;\n  isValid?: boolean;\n  optional?: boolean;\n}\n\nexport class QueryTemplateEditArgument extends Component<Props, State> {\n  private label = Kefir.pool<string>();\n  private variable = Kefir.pool<string>();\n  private comment = Kefir.pool<string>();\n  private valueType = Kefir.pool<string>();\n  private defaultValue = Kefir.pool<string>();\n  private optional = Kefir.pool<boolean>();\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      label: Nothing<Value>(),\n      variable: Nothing<Value>(),\n      comment: Nothing<Value>(),\n      valueType: Nothing<Value>(),\n      defaultValue: FieldValue.empty,\n      optional: false,\n      isValid: false,\n    };\n  }\n\n  componentWillMount() {\n    const labelMapped = this.label.flatMap<Value>(this.validateLabel);\n    labelMapped\n      .onValue((v) => this.setState({ label: Just(v) }, this.onChange))\n      .onError((v) => this.setState({ label: Just(v), isValid: false }, this.onChange));\n\n    const variableMapped = this.variable.flatMap<Value>(this.validateVariable);\n    variableMapped\n      .onValue((v) => this.setState({ variable: Just(v) }, this.onChange))\n      .onError((v) => this.setState({ variable: Just(v), isValid: false }, this.onChange));\n\n    const commentMapped = this.comment.flatMap<Value>((v) => Kefir.constant<Value>({ value: v }));\n    commentMapped\n      .onValue((v) => this.setState({ comment: Just(v) }, this.onChange))\n      .onError((v) => this.setState({ comment: Just(v), isValid: false }, this.onChange));\n\n    const valueTypeMapped = this.valueType.flatMap<Value>(this.validateInputField);\n    valueTypeMapped\n      .onValue((v) => this.setState({ valueType: Just(v) }, this.onChange))\n      .onError((v) => this.setState({ valueType: Just(v), isValid: false }, this.onChange));\n\n    const defaultValueMapped = Kefir.combine(\n      [valueTypeMapped.flatMapErrors<Value>((v) => Kefir.constant(v)), this.defaultValue],\n      (valueType, defaultValue): AtomicValue | EmptyValue => {\n        if (!defaultValue) {\n          return FieldValue.empty;\n        } else if (valueType.error) {\n          return {\n            type: AtomicValue.type,\n            value: Rdf.literal(defaultValue),\n            errors: FieldError.noErrors.push({\n              kind: ErrorKind.Input,\n              message: 'Specify value type first',\n            }),\n          };\n        }\n        const type = Rdf.iri(valueType.value);\n        const value = XsdDataTypeValidation.sameXsdDatatype(type, vocabularies.xsd.anyURI)\n          ? Rdf.iri(defaultValue)\n          : Rdf.literal(defaultValue, type);\n        return validateType({ value }, type);\n      }\n    ).flatMap((v) => (FieldValue.getErrors(v).size > 0 ? Kefir.constantError(v) : Kefir.constant(v)));\n\n    defaultValueMapped.observe({\n      value: (defaultValue) => this.setState({ defaultValue }, this.onChange),\n      error: (defaultValue) => this.setState({ defaultValue, isValid: false }, this.onChange),\n    });\n\n    const optionalMapped = this.optional.flatMap((v) => Kefir.constant<boolean>(v));\n    optionalMapped\n      .onValue((v) => {\n        this.setState({ optional: v }, this.onChange);\n      })\n      .onError((v) => this.setState({ optional: v, isValid: false }, this.onChange));\n\n    Kefir.combine(\n      [\n        labelMapped.map((v) => v.value),\n        variableMapped.map((v) => v.value),\n        commentMapped.map((v) => v.value),\n        valueTypeMapped.map((v) => v.value),\n        optionalMapped.map((v) => v),\n        defaultValueMapped,\n      ],\n      (label, variable, comment, valueType, optional) => {\n        if (!label || !variable || !valueType) {\n          return;\n        }\n        this.setState({ isValid: true }, this.onChange);\n        return {};\n      }\n    ).onValue(() => {\n      /* nothing */\n    });\n  }\n\n  componentDidMount() {\n    const argument = this.props.argument;\n\n    this.label.plug(Kefir.constant(argument.label));\n    this.variable.plug(Kefir.constant(argument.variable));\n    this.comment.plug(Kefir.constant(argument.comment));\n    this.valueType.plug(Kefir.constant(argument.valueType));\n    this.defaultValue.plug(Kefir.constant(argument.defaultValue ? argument.defaultValue.value : ''));\n    this.optional.plug(Kefir.constant(argument.optional));\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      !isEqual(prevProps.variables, this.props.variables) ||\n      !isEqual(prevProps.notAvailableVariables, this.props.notAvailableVariables)\n    ) {\n      this.variable.plug(Kefir.constant(this.state.variable.get().value));\n    }\n\n    if (!isEqual(prevProps.notAvailableLabels, this.props.notAvailableLabels)) {\n      this.label.plug(Kefir.constant(this.state.label.get().value));\n    }\n  }\n\n  private onChange = () => {\n    const { label, variable, comment, valueType, defaultValue, isValid, optional } = this.state;\n    const argument = {\n      label: label.get().value,\n      variable: variable.get().value,\n      comment: comment.get().value,\n      valueType: valueType.get().value,\n      defaultValue: FieldValue.asRdfNode(defaultValue) || undefined,\n      optional: optional,\n    };\n\n    this.props.onChange(argument, isValid);\n  };\n\n  private validateInputField = (v: string): Kefir.Property<Value> => {\n    if (v.length < 1) {\n      return Kefir.constantError<Value>({\n        value: v,\n        error: new Error('Please fill out this field.'),\n      });\n    }\n    return Kefir.constant<Value>({ value: v });\n  };\n\n  private validateLabel = (v: string): Kefir.Property<Value> => {\n    if (v.length < 1) {\n      return Kefir.constantError<Value>({\n        value: v,\n        error: new Error('Please fill out this field.'),\n      });\n    }\n\n    if (this.props.notAvailableLabels.indexOf(v) !== -1) {\n      return Kefir.constantError<Value>({\n        value: v,\n        error: new Error(`Label duplicated.`),\n      });\n    }\n\n    return Kefir.constant<Value>({ value: v });\n  };\n\n  private validateVariable = (v: string): Kefir.Property<Value> => {\n    if (v.length < 1) {\n      return Kefir.constantError<Value>({\n        value: v,\n        error: new Error('Please fill out this field.'),\n      });\n    }\n\n    if (this.props.variables.indexOf(v) === -1) {\n      return Kefir.constantError<Value>({\n        value: v,\n        error: new Error(`Variable '${v}' is not in the query.`),\n      });\n    }\n\n    if (this.props.notAvailableVariables.indexOf(v) !== -1) {\n      return Kefir.constantError<Value>({\n        value: v,\n        error: new Error(`Variable duplicated.`),\n      });\n    }\n\n    return Kefir.constant<Value>({ value: v });\n  };\n\n  private getFormValue = (e: FormEvent<FormControl>): Kefir.Property<any> => {\n    return Kefir.constant((e.target as any).value);\n  };\n\n  render() {\n    const { variables, onDelete } = this.props;\n    const { label, variable, comment, valueType, defaultValue, optional } = this.state;\n\n    return (\n      <div className=\"form-horizontal\">\n        <FormGroup validationState={label.isJust && label.get().error ? 'error' : undefined}>\n          <Col sm={2}>\n            <ControlLabel>Label</ControlLabel>\n          </Col>\n          <Col sm={10}>\n            <FormControl\n              type=\"text\"\n              value={label.isJust ? label.get().value : ''}\n              onChange={(e) => this.label.plug(this.getFormValue(e))}\n            />\n            {label.isJust && label.get().error ? <HelpBlock>{label.get().error.message}</HelpBlock> : null}\n          </Col>\n        </FormGroup>\n        <FormGroup validationState={variable.isJust && variable.get().error ? 'error' : undefined}>\n          <Col sm={2}>\n            <ControlLabel>Variable</ControlLabel>\n          </Col>\n          <Col sm={10}>\n            <FormControl\n              componentClass=\"select\"\n              value={variable.isJust ? variable.get().value : ''}\n              onChange={(e) => this.variable.plug(this.getFormValue(e))}\n            >\n              <option value=\"\" disabled={true} style={{ display: 'none' }}>\n                -- select variable --\n              </option>\n              {variables.map((item, index) => (\n                <option key={index} value={item}>\n                  {item}\n                </option>\n              ))}\n            </FormControl>\n            {variable.isJust && variable.get().error ? <HelpBlock>{variable.get().error.message}</HelpBlock> : null}\n          </Col>\n        </FormGroup>\n        <FormGroup validationState={valueType.isJust && valueType.get().error ? 'error' : undefined}>\n          <Col sm={2}>\n            <ControlLabel>Value Type</ControlLabel>\n          </Col>\n          <Col sm={10}>\n            <FormControl\n              componentClass=\"select\"\n              value={valueType.isJust ? valueType.get().value : ''}\n              onChange={(e) => this.valueType.plug(this.getFormValue(e))}\n            >\n              <option value=\"\" disabled={true} style={{ display: 'none' }}>\n                -- select value type --\n              </option>\n              {VALUE_TYPES.map((item) => (\n                <option key={item.value} value={item.value}>\n                  {item.label}\n                </option>\n              ))}\n            </FormControl>\n            {valueType.isJust && valueType.get().error ? <HelpBlock>{valueType.get().error.message}</HelpBlock> : null}\n          </Col>\n        </FormGroup>\n        <FormGroup validationState={FieldValue.getErrors(defaultValue).size > 0 ? 'error' : undefined}>\n          <Col sm={2}>\n            <ControlLabel>Default Value</ControlLabel>\n          </Col>\n          <Col sm={10}>\n            <FormControl\n              type=\"text\"\n              value={FieldValue.isAtomic(defaultValue) ? defaultValue.value.value : ''}\n              onChange={(e) => this.defaultValue.plug(this.getFormValue(e))}\n            />\n            {FieldValue.getErrors(defaultValue).size > 0 ? (\n              <HelpBlock>{FieldValue.getErrors(defaultValue).first().message}</HelpBlock>\n            ) : null}\n          </Col>\n        </FormGroup>\n        <FormGroup validationState={comment.isJust && comment.get().error ? 'error' : undefined}>\n          <Col sm={2}>\n            <ControlLabel>Comment</ControlLabel>\n          </Col>\n          <Col sm={10}>\n            <FormControl\n              type=\"text\"\n              value={comment.isJust ? comment.get().value : ''}\n              onChange={(e) => this.comment.plug(this.getFormValue(e))}\n            />\n            {comment.isJust && comment.get().error ? <HelpBlock>{comment.get().error.message}</HelpBlock> : null}\n          </Col>\n        </FormGroup>\n        <FormGroup>\n          <Col sm={2}>\n            <ControlLabel>Optional</ControlLabel>\n          </Col>\n          <Col sm={10}>\n            <FormControl\n              type=\"checkbox\"\n              style={{ width: '20px' }}\n              checked={optional}\n              onChange={(e) => {\n                // TODO\n                this.optional.plug(Kefir.constant((e.target as any).checked));\n              }}\n            />\n          </Col>\n        </FormGroup>\n        <div className=\"text-right\">\n          <Button bsStyle=\"danger\" bsSize=\"xsmall\" onClick={onDelete}>\n            <span className=\"fa fa-times\"> Delete</span>\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default QueryTemplateEditArgument;\n"],"sourceRoot":""}