{"version":3,"sources":["webpack:///./src/main/web/components/arguments/QuickAssertionComponent.tsx"],"names":["props","context","onBeliefsChange","beliefs","setState","saveAssertion","field","state","valueSeq","toArray","target","Rdf","iri","Maybe","Nothing","title","note","flatMap","assertion","invalidateAllCaches","map","onValue","performPostAction","postAction","navigateToResource","v","refresh","initialBeliefs","componentDidMount","getArgumentsFieldDefinition","this","fieldIri","Just","render","AssertionsComponent","quickAssertion","editMode","Button","bsStyle","className","onClick","getOrElse","defaultProps","Map","React","Component","QuickAssertionComponent"],"mappings":"6IAkBA,OACA,QACA,QACA,QAEA,QACA,QACA,UAEA,UACA,UACA,UAoBA,cACE,iCAAYA,EAAqCC,GAAjD,MACE,YAAMD,EAAOC,IAAQ,K,OAyCf,EAAAC,gBAAkB,SAACC,GAA2C,SAAKC,SAAS,CAAED,QAAO,KAErF,EAAAE,cAAgB,SAACC,GAAoC,kBAC3D,IAAMH,EAAU,EAAKI,MAAMJ,QAAQK,WAAWC,UACxCC,EAAS,EAAAC,IAAIC,IAAI,EAAKZ,MAAMU,QAClC,EAAAL,cAAc,CACZO,IAAKC,EAAMC,UACXR,MAAOA,EACPI,OAAQA,EACRK,MAAO,kBACPC,KAAM,GACNb,QAAO,IAENc,SAAQ,SAACC,GAAc,SAAAC,sBAAsBC,KAAI,WAAM,OAAAF,QACvDG,SAAQ,SAACH,GAAc,SAAKI,kBAAkBJ,EAAUA,gBAGrD,EAAAI,kBAAoB,SAACJ,GACG,SAA1B,EAAKlB,MAAMuB,aAIV,EAAKvB,MAAMuB,YAAwC,WAA1B,EAAKvB,MAAMuB,WAEJ,aAA1B,EAAKvB,MAAMuB,WACpB,EAAAC,mBAAmBN,EAAW,GAAI,UAAUG,SAAQ,SAACI,GAAM,OAAAA,KAE3D,EAAAD,mBAAmB,EAAAb,IAAIC,IAAI,EAAKZ,MAAMuB,YAAa,GAAI,UAAUF,SAAQ,SAACI,GAAM,OAAAA,KAJhF,EAAAC,YA/DF,EAAKnB,MAAQ,CACXJ,QAASH,EAAM2B,eACfrB,MAAOO,EAAMC,W,EAoEnB,OAzE6C,uCAc3C,kCAAAc,kBAAA,sBACE,EAAAC,4BAA4B,EAAAlB,IAAIC,IAAIkB,KAAK9B,MAAM+B,WAAWV,SAAQ,SAACf,GACjE,SAAKF,SAAS,CACZE,MAAOO,EAAMmB,KAAK1B,SAKxB,kCAAA2B,OAAA,sBACE,OAAOH,KAAKvB,MAAMD,MACfc,KAAI,SAACd,GAAU,OACd,2BACE,gBAAC,EAAA4B,oBAAmB,cACd,EAAKlC,MAAK,CACdM,MAAOA,EACPI,OAAQ,EAAAC,IAAIC,IAAI,EAAKZ,MAAMU,QAC3BK,MAAM,mBACNZ,QAAS,EAAKI,MAAMJ,QACpBD,gBAAiB,EAAKA,gBACtBiC,eAAgB,EAAKnC,MAAMoC,YAE7B,gBAAC,EAAAC,OAAM,CAACC,QAAQ,UAAUC,UAAU,aAAaC,QAAS,EAAKnC,cAAcC,IAAM,YAKtFmC,UAAU,OA/BR,wBAAAC,aAAe,CACpBN,UAAU,EACVT,eAAgB,EAAAgB,OA8DpB,wBAzEA,CAA6CC,EAAMC,WAAtC,EAAAC,0BA0Eb,UAAeA","file":"rs-quick-assertion-b5b8333376b6e1e8e3da.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2015-2020, Â© Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as React from 'react';\nimport { Button } from 'react-bootstrap';\nimport { Map } from 'immutable';\nimport * as Maybe from 'data.maybe';\n\nimport { Rdf } from 'platform/api/rdf';\nimport { navigateToResource, refresh } from 'platform/api/navigation';\nimport { invalidateAllCaches } from 'platform/api/services/cache';\n\nimport { AssertionsComponent } from './AssertionsComponent';\nimport { saveAssertion } from './AssertionsStore';\nimport { getArgumentsFieldDefinition } from './FieldUtils';\nimport { AssertedBelief, ArgumentsFieldDefinition } from './ArgumentsApi';\n\nexport interface QuickAssertionComponentProps {\n  fieldIri: string;\n  target: string;\n\n  valueTemplate: string;\n  formTemplate: string;\n\n  postAction?: 'none' | 'reload' | 'redirect' | string;\n  editMode?: boolean;\n  initialBeliefs?: Map<Rdf.Node, AssertedBelief>;\n}\n\ninterface State {\n  beliefs: Map<Rdf.Node, AssertedBelief>;\n  field: Data.Maybe<ArgumentsFieldDefinition>;\n}\n\nexport class QuickAssertionComponent extends React.Component<QuickAssertionComponentProps, State> {\n  constructor(props: QuickAssertionComponentProps, context) {\n    super(props, context);\n    this.state = {\n      beliefs: props.initialBeliefs,\n      field: Maybe.Nothing<ArgumentsFieldDefinition>(),\n    };\n  }\n\n  static defaultProps = {\n    editMode: true,\n    initialBeliefs: Map<Rdf.Node, AssertedBelief>(),\n  };\n\n  componentDidMount() {\n    getArgumentsFieldDefinition(Rdf.iri(this.props.fieldIri)).onValue((field) =>\n      this.setState({\n        field: Maybe.Just(field),\n      })\n    );\n  }\n\n  render() {\n    return this.state.field\n      .map((field) => (\n        <div>\n          <AssertionsComponent\n            {...this.props}\n            field={field}\n            target={Rdf.iri(this.props.target)}\n            title=\"Assert new value\"\n            beliefs={this.state.beliefs}\n            onBeliefsChange={this.onBeliefsChange}\n            quickAssertion={this.props.editMode}\n          />\n          <Button bsStyle=\"success\" className=\"pull-right\" onClick={this.saveAssertion(field)}>\n            Save\n          </Button>\n        </div>\n      ))\n      .getOrElse(null);\n  }\n\n  private onBeliefsChange = (beliefs: Map<Rdf.Node, AssertedBelief>) => this.setState({ beliefs });\n\n  private saveAssertion = (field: ArgumentsFieldDefinition) => () => {\n    const beliefs = this.state.beliefs.valueSeq().toArray();\n    const target = Rdf.iri(this.props.target);\n    saveAssertion({\n      iri: Maybe.Nothing<Rdf.Iri>(),\n      field: field,\n      target: target,\n      title: 'Quick Assertion',\n      note: '',\n      beliefs,\n    })\n      .flatMap((assertion) => invalidateAllCaches().map(() => assertion))\n      .onValue((assertion) => this.performPostAction(assertion.assertion));\n  };\n\n  private performPostAction = (assertion: Rdf.Iri) => {\n    if (this.props.postAction === 'none') {\n      return;\n    }\n\n    if (!this.props.postAction || this.props.postAction === 'reload') {\n      refresh();\n    } else if (this.props.postAction === 'redirect') {\n      navigateToResource(assertion, {}, 'assets').onValue((v) => v);\n    } else {\n      navigateToResource(Rdf.iri(this.props.postAction), {}, 'assets').onValue((v) => v);\n    }\n  };\n}\nexport default QuickAssertionComponent;\n"],"sourceRoot":""}