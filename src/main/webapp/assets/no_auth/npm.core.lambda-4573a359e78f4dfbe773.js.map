{"version":3,"sources":["webpack:///./node_modules/core.lambda/lib/index.js"],"names":["toArray","Function","call","bind","slice","curry","n","f","curried","args","newArgs","arguments","allArgs","concat","argCount","length","apply","spread","as","reduce","g","a","exports","identity","constant","b","flip","compose","uncurry","upon"],"mappings":"4EA4BA,IAAIA,EAAUC,SAASC,KAAKC,KAAK,GAAGC,OA4FpC,SAASC,MAAMC,EAAGC,GAChB,OAEA,SAASC,QAAQC,GACf,OAAO,WACL,IAAIC,EAAWV,EAAQW,WACnBC,EAAWH,EAAKI,OAAOH,GACvBI,EAAWF,EAAQG,OAEvB,OAAOD,EAAWR,EAAME,QAAQI,GACzBE,IAAaR,EAAIC,EAAES,MAAM,KAAMJ,GACdL,EAAES,MAAM,KAAMJ,EAAQR,MAAM,EAAGE,IAC7BU,MAAM,KAAMJ,EAAQR,MAAME,KAXjDE,CAAQ,IAyBjB,SAASS,OAAOV,EAAGW,GACjB,OAAOA,EAAGC,QAAO,SAASC,EAAGC,GAAK,OAAOD,EAAEC,KAAMd,GAzGnDe,EAAQC,SACR,SAASA,SAASF,GAChB,OAAOA,GAaTC,EAAQE,SAAWnB,MAAM,GACzB,SAASmB,SAASH,EAAGI,GACnB,OAAOJ,KAaTC,EAAQN,MAAQX,MAAM,GACtB,SAASW,MAAMT,EAAGc,GAChB,OAAOd,EAAEc,MAcXC,EAAQI,KAAOrB,MAAM,GACrB,SAASqB,KAAKnB,EAAGc,EAAGI,GAClB,OAAOlB,EAAEkB,EAAFlB,CAAKc,MAcdC,EAAQK,QAAUtB,MAAM,GACxB,SAASsB,QAAQpB,EAAGa,EAAGC,GACrB,OAAOd,EAAEa,EAAEC,OAabC,EAAQjB,MAAQA,MAAM,EAAGA,OA0BzBiB,EAAQL,OAASZ,MAAM,EAAGY,QAe1BK,EAAQM,QACR,SAASA,QAAQrB,GACf,OAAO,WAAa,OAAOU,OAAOV,EAAGP,EAAQW,cAa/CW,EAAQO,KAAOxB,MAAM,GACrB,SAASwB,KAAKtB,EAAGa,EAAGC,EAAGI,GACrB,OAAOlB,EAAEa,EAAEC,GAAJd,CAAQa,EAAEK","file":"npm.core.lambda-4573a359e78f4dfbe773.js","sourcesContent":["// Copyright (c) 2013-2014 Quildreen Motta <quildreen@gmail.com>\n//\n// Permission is hereby granted, free of charge, to any person\n// obtaining a copy of this software and associated documentation files\n// (the \"Software\"), to deal in the Software without restriction,\n// including without limitation the rights to use, copy, modify, merge,\n// publish, distribute, sublicense, and/or sell copies of the Software,\n// and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/**\n * Provides pure functional combinators.\n *\n * @module Core/Lambda\n */\n\n// -- Aliases ----------------------------------------------------------\nvar toArray = Function.call.bind([].slice)\n\n\n// -- Implementation ---------------------------------------------------\n\n/**\n * The identity combinator. Always returns the argument it's given.\n *\n * @example\n *   identity(3)        // => 3\n *   identity([1])      // => [1]\n *\n * @summary a → a\n */\nexports.identity = identity\nfunction identity(a) {\n  return a\n}\n\n\n/**\n * The constant combinator. Always returns the first argument it's given.\n *\n * @example\n *   constant(3)(2)             // => 3\n *   constant('foo')([1])       // => 'foo'\n *\n * @summary a → b → a\n */\nexports.constant = curry(2, constant)\nfunction constant(a, b) {\n  return a\n}\n\n\n/**\n * Applies a function to an argument.\n *\n * @example\n *   var inc = (a) => a + 1\n *   apply(inc)(3)      // => 4\n *\n * @summary (a → b) → a → b\n */\nexports.apply = curry(2, apply)\nfunction apply(f, a) {\n  return f(a)\n}\n\n\n/**\n * Inverts the order of the parameters of a binary function.\n *\n * @example\n *   var subtract = (a) => (b) => a - b\n *   subtract(3)(2)             // => 1\n *   flip(subtract)(3)(2)       // => -1\n *\n * @summary (a → b → c) → (b → a → c)\n */\nexports.flip = curry(3, flip)\nfunction flip(f, a, b) {\n  return f(b)(a)\n}\n\n\n/**\n * Composes two functions together.\n *\n * @example\n *   var inc    = (a) => a + 1\n *   var square = (a) => a * a\n *   compose(inc)(square)(2)    // => 5,        inc(square(2))\n *\n * @summary (b → c) → (a → b) → (a → c)\n */\nexports.compose = curry(3, compose)\nfunction compose(f, g, a) {\n  return f(g(a))\n}\n\n\n/**\n * Transforms any function on tuples into a curried function.\n *\n * @example\n *   var sub3 = (a, b, c) => a - b - c\n *   curry(3, sub3)(5)(2)(1)   // => 2\n *\n * @summary Number → ((a1, a2, ..., aN) → b) → (a1 → a2 → ... → aN → b)\n */\nexports.curry = curry(2, curry)\nfunction curry(n, f) {\n  return curried([])\n\n  function curried(args) {\n    return function() {\n      var newArgs  = toArray(arguments)\n      var allArgs  = args.concat(newArgs)\n      var argCount = allArgs.length\n\n      return argCount < n?    curried(allArgs)\n      :      argCount === n?  f.apply(null, allArgs)\n      :      /* > n */        f.apply(null, allArgs.slice(0, n))\n                               .apply(null, allArgs.slice(n)) }}\n}\n\n\n/**\n * Transforms a curried function into one accepting a list of arguments.\n *\n * @example\n *   var add = (a) => (b) => a + b\n *   spread(add)([3, 2])        // => 5\n *\n * @summary (a1 → a2 → ... → aN → b) → (#[a1, a2, ..., aN) → b)\n */\nexports.spread = curry(2, spread)\nfunction spread(f, as) {\n  return as.reduce(function(g, a) { return g(a) }, f)\n}\n\n\n/**\n * Transforms a curried function into a function on tuples.\n *\n * @example\n *   var add = (a) => (b) => a + b\n *   uncurry(add)(3, 2)         // => 5\n *\n * @summary (a1 → a2 → ... → aN → b) → ((a1, a2, ..., aN) → b)\n */\nexports.uncurry = uncurry\nfunction uncurry(f) {\n  return function() { return spread(f, toArray(arguments)) }\n}\n\n\n/**\n * Applies an unary function to both arguments of a binary function.\n *\n * @example\n *   var xss = [[1, 2], [3, 1], [-2, 4]]\n *   sortBy(upon(compare, first))\n *\n * @summary (b → b → c) → (a → b) → (a → a → c)\n */\nexports.upon = curry(4, upon)\nfunction upon(f, g, a, b) {\n  return f(g(a))(g(b))\n}\n"],"sourceRoot":""}