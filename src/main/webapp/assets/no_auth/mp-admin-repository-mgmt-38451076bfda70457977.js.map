{"version":3,"sources":["webpack:///./src/main/web/components/admin/repositories/RepositoryManager.tsx"],"names":["props","context","cancellation","Cancellation","renderRepositories","repositories","repositoryToEdit","Spinner","rows","map","status","id","rowCls","styles","RepositoryRow","RepositoryRowActive","statusCls","online","offline","className","classNames","onClick","onEditRepository","toArray","setState","state","componentDidMount","this","Kefir","combine","getRepositoryStatus","repositoryTemplates","getRepositoryConfigTemplates","observe","value","error","loadingError","componentWillUnmount","cancelAll","render","Alert","bsStyle","holder","RepositorySelectionArea","Button","RepositoryButton","undefined","EditorArea","RepositoryConfigEditor","Component","RepositoryManager"],"mappings":"6IAkBA,QACA,OACA,QACA,OACA,QACA,QAGA,SACA,SAEA,UAEA,SAUA,cAGE,2BAAYA,EAAWC,GAAvB,MACE,YAAMD,EAAOC,IAAQ,K,OAHN,EAAAC,aAAe,IAAI,EAAAC,aAwDpC,EAAAC,mBAAqB,WACb,cAAEC,EAAA,EAAAA,aAAcC,EAAA,EAAAA,iBACtB,IAAKD,EACH,OAAO,gBAAC,EAAAE,QAAO,MAEjB,IAAMC,EAAOH,EACVI,KAAI,SAACC,EAAQC,G,MACNC,IAAM,MACTC,EAAOC,gBAAgB,EACxB,EAACD,EAAOE,qBAAsBJ,IAAOL,E,GAEjCU,EAAYN,EAASG,EAAOI,OAASJ,EAAOK,QAElD,OACE,sBAAIC,UAAWC,EAAWR,GAASS,QAAS,WAAM,SAAKC,iBAAiBX,KACtE,0BAAKA,GACL,0BACE,wBAAMQ,UAAWC,EAAWJ,UAKnCO,UAEH,OACE,yBAAOJ,UAAU,uBACf,6BACE,0BACE,2CACA,sCAGJ,6BAAQX,KAKd,EAAAc,iBAAmB,SAACX,GAClB,EAAKa,SAAS,CACZlB,iBAAkBK,KA3FpB,EAAKc,MAAQ,G,EA8FjB,OAnGuC,iCAQrC,4BAAAC,kBAAA,sBACEC,KAAKzB,aACFO,IACCmB,EAAMC,QAAQ,CACZxB,aAAc,EAAAyB,sBACdC,oBAAqB,EAAAC,kCAGxBC,QAAQ,CACPC,MAAO,SAAC,G,IAAE7B,EAAA,EAAAA,aAAc0B,EAAA,EAAAA,oBACtB,SAAKP,SAAS,CACZnB,aAAY,EACZ0B,oBAAmB,KAEvBI,MAAO,SAACC,GAAiB,SAAKZ,SAAS,CAAEY,aAAY,QAI3D,4BAAAC,qBAAA,WACEV,KAAKzB,aAAaoC,aAGpB,4BAAAC,OAAA,sBACQ,aAAEH,EAAA,EAAAA,aAAc9B,EAAA,EAAAA,iBAAkByB,EAAA,EAAAA,oBAExC,OAAIK,EACK,gBAAC,EAAAI,MAAK,CAACC,QAAQ,Q,IAASL,E,KAG/B,uBAAKjB,UAAWN,EAAO6B,OAAM,mBAAmB,kBAC9C,uBAAKvB,UAAWN,EAAO8B,yBACpBhB,KAAKvB,qBACLE,GACC,gBAAC,EAAAsC,OAAM,CACLH,QAAQ,UACRtB,UAAWN,EAAOgC,iBAClBxB,QAAS,WAAM,SAAKG,SAAS,CAAElB,sBAAkBwC,M,aAEtC,MAIjB,uBAAK3B,UAAWN,EAAOkC,YACpB,gBAAC,EAAAC,uBAAsB,CAACrC,GAAIL,EAAkByB,oBAAqBA,OAgD9E,kBAnGA,CAAuC,EAAAkB,WAA1B,EAAAC,oBAqGb,UAAeA","file":"mp-admin-repository-mgmt-38451076bfda70457977.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as Kefir from 'kefir';\nimport * as React from 'react';\nimport { Alert, Button } from 'react-bootstrap';\nimport * as classNames from 'classnames';\nimport { Cancellation } from 'platform/api/async';\nimport { Component } from 'platform/api/components';\nimport { refresh } from 'platform/api/navigation';\n\nimport { Spinner } from 'platform/components/ui/spinner';\nimport { getRepositoryStatus, getRepositoryConfigTemplates } from 'platform/api/services/repository';\n\nimport * as styles from './RepositoryManager.scss';\n\nimport { RepositoryConfigEditor } from './RepositoryConfigEditor';\nimport { ErrorNotification, addNotification } from 'platform/components/ui/notification';\n\ninterface State {\n  readonly repositories?: Immutable.Map<string, boolean>;\n  readonly loadingError?: any;\n  readonly repositoryToEdit?: string;\n  readonly repositoryTemplates?: string[];\n}\n\nexport class RepositoryManager extends Component<{}, State> {\n  private readonly cancellation = new Cancellation();\n\n  constructor(props: {}, context: any) {\n    super(props, context);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    this.cancellation\n      .map(\n        Kefir.combine({\n          repositories: getRepositoryStatus(),\n          repositoryTemplates: getRepositoryConfigTemplates(),\n        })\n      )\n      .observe({\n        value: ({ repositories, repositoryTemplates }) =>\n          this.setState({\n            repositories,\n            repositoryTemplates,\n          }),\n        error: (loadingError) => this.setState({ loadingError }),\n      });\n  }\n\n  componentWillUnmount() {\n    this.cancellation.cancelAll();\n  }\n\n  render() {\n    const { loadingError, repositoryToEdit, repositoryTemplates } = this.state;\n\n    if (loadingError) {\n      return <Alert bsStyle=\"info\"> {loadingError} </Alert>;\n    }\n    return (\n      <div className={styles.holder} data-flex-layout=\"row top-center\">\n        <div className={styles.RepositorySelectionArea}>\n          {this.renderRepositories()}\n          {repositoryToEdit && (\n            <Button\n              bsStyle=\"primary\"\n              className={styles.RepositoryButton}\n              onClick={() => this.setState({ repositoryToEdit: undefined })}\n            >\n              Create New{' '}\n            </Button>\n          )}\n        </div>\n        <div className={styles.EditorArea}>\n          {<RepositoryConfigEditor id={repositoryToEdit} repositoryTemplates={repositoryTemplates} />}\n        </div>\n      </div>\n    );\n  }\n\n  renderRepositories = () => {\n    const { repositories, repositoryToEdit } = this.state;\n    if (!repositories) {\n      return <Spinner />;\n    }\n    const rows = repositories\n      .map((status, id) => {\n        const rowCls = {\n          [styles.RepositoryRow]: true,\n          [styles.RepositoryRowActive]: id === repositoryToEdit,\n        };\n        const statusCls = status ? styles.online : styles.offline;\n\n        return (\n          <tr className={classNames(rowCls)} onClick={() => this.onEditRepository(id)}>\n            <td>{id}</td>\n            <td>\n              <span className={classNames(statusCls)}></span>\n            </td>\n          </tr>\n        );\n      })\n      .toArray();\n\n    return (\n      <table className=\"table table-striped\">\n        <thead>\n          <tr>\n            <th>Repository ID</th>\n            <th>Status</th>\n          </tr>\n        </thead>\n        <tbody>{rows}</tbody>\n      </table>\n    );\n  };\n\n  onEditRepository = (id: string) => {\n    this.setState({\n      repositoryToEdit: id,\n    });\n  };\n}\n\nexport default RepositoryManager;\n"],"sourceRoot":""}