{"version":3,"sources":["webpack:///./src/main/web/components/admin/rdf-upload/RdfUpload.tsx","webpack:///./src/main/web/components/admin/rdf-upload/extensions.ts"],"names":["props","context","cancellation","Cancellation","onDropAccepted","files","repository","setState","messages","progress","maybe","Nothing","uploads","map","file","fileNumber","contentType","_","isEmpty","SparqlUtil","getMimeType","getFileEnding","targetGraph","state","isJust","get","name","createTimestamp","upload","RDFGraphStoreService","createGraphFromFile","Rdf","iri","encodeURI","keepSourceGraphs","onProgress","percent","Just","length","progressText","observe","value","appendUploadMessage","error","console","Kefir","combine","setTimeout","refresh","onChangeTargetGraph","e","stopPropagation","preventDefault","val","target","trim","onChangeKeepSourceGraphs","checked","onClickLoadByUrl","updateQuery","remoteFileUrl","makeLoadQuery","targetGraphIri","query","parsedUpdate","parseQuery","type","Error","message","semanticContext","SparqlClient","executeSparqlUpdate","end","componentDidMount","RdfUploadExtension","loadAndUpdate","this","getRepositoryInfo","onValue","info","repositoryType","componentWillUnmount","cancelAll","uploadError","alert","AlertType","WARNING","SUCCESS","children","ErrorPresenter","undefined","render","isLoading","Spinner","className","style","config","index","Alert","key","progressBar","ProgressBar","active","min","max","now","label","getOrElse","isInProcess","Boolean","showLoadByUrlTab","NeptuneRepositoryType","allowLoadByUrl","fileUploadTab","React","Fragment","CLASS_NAME","Dropzone","accept","options","TemplateItem","template","source","dropAreaTemplate","classnames","showAdvancedOptions","onClick","showOptions","renderAdvancedOptions","Tabs","id","unmountOnExit","Tab","eventKey","title","disabled","FormControl","placeholder","onChange","currentTarget","Button","bsStyle","Panel","collapsible","expanded","Checkbox","defaultProps","Component","moment","format","RdfUpload","ExtensionPoint"],"mappings":"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","file":"mp-rdf-upload-53db098bdd2f9494a2bb.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\nimport { FormEvent, CSSProperties } from 'react';\nimport * as _ from 'lodash';\nimport { ProgressBar, FormControl, Button, Panel, Checkbox, Tab, Tabs } from 'react-bootstrap';\nimport * as maybe from 'data.maybe';\nimport * as moment from 'moment';\nimport * as Kefir from 'kefir';\nimport * as SparqlJs from 'sparqljs';\nimport * as classnames from 'classnames';\n\nimport { Component } from 'platform/api/components';\nimport { Cancellation } from 'platform/api/async';\nimport { refresh } from 'platform/api/navigation';\nimport { Rdf } from 'platform/api/rdf';\nimport { SparqlClient, SparqlUtil } from 'platform/api/sparql';\n\nimport { RDFGraphStoreService } from 'platform/api/services/rdf-graph-store';\nimport { getRepositoryInfo, RepositoryType, NeptuneRepositoryType } from 'platform/api/services/repository';\n\nimport { Alert, AlertConfig, AlertType } from 'platform/components/ui/alert';\nimport { Dropzone } from 'platform/components/ui/dropzone';\nimport { ErrorPresenter } from 'platform/components/ui/notification';\nimport { Spinner } from 'platform/components/ui/spinner';\nimport { TemplateItem } from 'platform/components/ui/template';\n\nimport { RdfUploadExtension } from './extensions';\n\nimport './RdfUpload.scss';\n\ninterface State {\n  messages?: ReadonlyArray<AlertConfig>;\n  progress?: Data.Maybe<number>;\n  progressText?: Data.Maybe<string>;\n  targetGraph?: Data.Maybe<string>;\n  keepSourceGraphs?: boolean;\n  showOptions?: boolean;\n  remoteFileUrl?: string;\n  repositoryType?: RepositoryType;\n}\n\nexport interface Props {\n  className?: string;\n  style?: CSSProperties;\n\n  contentType?: string;\n\n  /**\n   * Specifies files that can be accepted for upload.\n   * See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#Unique_file_type_specifiers\n   */\n  accept?: string[];\n\n  /**\n   * Preserve graphs from defined in the uploaded file.\n   *\n   * @default false\n   */\n  keepSourceGraphs?: boolean;\n\n  /**\n   * Show \"Load by URL\" tab\n   *\n   * @default true\n   */\n  allowLoadByUrl?: boolean;\n\n  /**\n   * Show advanced upload options\n   *\n   * @default true\n   */\n  showAdvancedOptions?: boolean;\n\n  /**\n   * Drop area content template.\n   * Parameters:\n   *   - isDragAccept - true when drop is accepted\n   *   - isDragReject - true when drop is rejected\n   */\n  dropAreaTemplate?: string;\n}\n\nconst CLASS_NAME = 'RdfUpload';\nconst tabClass = `${CLASS_NAME}__tab`;\nconst noteClass = `${CLASS_NAME}__note`;\n\n/**\n * @example\n * <mp-rdf-upload></mp-rdf-upload>\n */\nexport class RdfUpload extends Component<Props, State> {\n  private readonly cancellation = new Cancellation();\n\n  static defaultProps = {\n    keepSourceGraphs: false,\n    allowLoadByUrl: true,\n    showAdvancedOptions: true,\n    dropAreaTemplate: `<div class='${CLASS_NAME}__rdf-dropzone-content'>Please drag&amp;drop your RDF file(s) here.</div>`\n  }\n\n  constructor(props: Props, context: any) {\n    super(props, context);\n    this.state = {\n      messages: [],\n      progress: maybe.Nothing<number>(),\n      progressText: maybe.Nothing<string>(),\n      targetGraph: maybe.Nothing<string>(),\n      keepSourceGraphs: props.keepSourceGraphs,\n    };\n  }\n\n  componentDidMount() {\n    RdfUploadExtension.loadAndUpdate(this, this.cancellation);\n    this.cancellation.map(getRepositoryInfo('default')).onValue((info) =>\n      this.setState({\n        repositoryType: info.type,\n      })\n    );\n  }\n\n  componentWillUnmount() {\n    this.cancellation.cancelAll();\n  }\n\n  private onDropAccepted = (files: ReadonlyArray<File>) => {\n    const { repository } = this.context.semanticContext;\n\n    this.setState({\n      messages: [],\n      progress: maybe.Nothing<number>(),\n    });\n\n    const uploads = files.map((file: File, fileNumber: number) => {\n      const contentType = _.isEmpty(this.props.contentType)\n        ? SparqlUtil.getMimeType(SparqlUtil.getFileEnding(file))\n        : this.props.contentType;\n      const targetGraph = this.state.targetGraph.isJust\n        ? this.state.targetGraph.get()\n        : `file://${file.name}-${createTimestamp()}`;\n\n      const upload = RDFGraphStoreService.createGraphFromFile({\n        targetGraph: Rdf.iri(encodeURI(targetGraph)),\n        keepSourceGraphs: this.state.keepSourceGraphs,\n        file,\n        contentType,\n        onProgress: (percent) =>\n          this.setState({\n            progress: maybe.Just<number>((fileNumber / files.length + percent / 100) * 100),\n            progressText: maybe.Just<string>(fileNumber + '/' + files.length + ' Files'),\n          }),\n        repository,\n      });\n\n      this.cancellation.map(upload).observe({\n        value: () => this.appendUploadMessage('File: ' + file.name + ' uploaded.'),\n        error: (error) => {\n          console.error(error);\n          this.appendUploadMessage('File: ' + file.name + ' failed.', error);\n        },\n      });\n      return upload;\n    });\n\n    this.cancellation.map(Kefir.combine(uploads)).observe({\n      value: () => setTimeout(() => refresh(), 2000),\n    });\n  };\n\n  private appendUploadMessage(message: string, uploadError?: any) {\n    this.setState(\n      (state: State): State => {\n        return {\n          messages: [\n            ...state.messages,\n            {\n              alert: uploadError ? AlertType.WARNING : AlertType.SUCCESS,\n              message,\n              children: uploadError ? <ErrorPresenter error={uploadError} /> : undefined,\n            },\n          ],\n        };\n      }\n    );\n  }\n\n  private onChangeTargetGraph = (e: FormEvent<FormControl>) => {\n    e.stopPropagation();\n    e.preventDefault();\n    const val = (e.target as any).value.trim();\n    if (!_.isEmpty(val)) {\n      this.setState({ targetGraph: maybe.Just(val) });\n    } else {\n      this.setState({ targetGraph: maybe.Nothing() });\n    }\n  };\n\n  private onChangeKeepSourceGraphs = (e: FormEvent<FormControl>) => {\n    this.setState({ keepSourceGraphs: (e.target as any).checked });\n  };\n\n  render() {\n    if (RdfUploadExtension.isLoading()) {\n      return <Spinner />;\n    }\n    const { className, style } = this.props;\n\n    const messages = this.state.messages.map((config, index) => <Alert key={index} {...config} />);\n    const progressBar = this.state.progress\n      .map((progress) => (\n        <ProgressBar\n          active\n          min={0}\n          max={100}\n          now={progress}\n          label={this.state.progressText.getOrElse('Uploading Files')}\n        />\n      ))\n      .getOrElse(null);\n\n    const isInProcess = Boolean(this.state.progress.getOrElse(0));\n    {/* load by URL doesn't make any sense for Neptune repository */}\n    const showLoadByUrlTab =\n      this.state.repositoryType !== NeptuneRepositoryType && this.props.allowLoadByUrl;\n\n    const fileUploadTab = (\n      <React.Fragment>\n        {progressBar}\n        <div className={noteClass}>\n          RDF files can be uploaded using the drag&amp;drop field below. Clicking into the field will open the\n          browser's default file selector.\n        </div>\n        <Dropzone onDropAccepted={this.onDropAccepted} accept={this.props.accept}>\n          {(options) => <TemplateItem template={{source: this.props.dropAreaTemplate, options}} />}\n        </Dropzone>\n        {messages}\n      </React.Fragment>\n    );\n    return (\n      <div className={classnames(CLASS_NAME, className)} style={style}>\n        {this.props.showAdvancedOptions ?\n         <React.Fragment>\n           <a className={`${CLASS_NAME}__advance`} onClick={() => this.setState({ showOptions: !this.state.showOptions })}>Advanced Options</a>\n           { this.renderAdvancedOptions() }\n         </React.Fragment> : null\n        }\n        {showLoadByUrlTab ?\n         <Tabs id=\"rdf-upload-tabs\" unmountOnExit={true}>\n           <Tab eventKey={1} className={tabClass} title=\"File Upload\" disabled={isInProcess}>\n             {fileUploadTab}\n           </Tab>\n           <Tab eventKey={2} className={tabClass} title=\"Load by HTTP/FTP/File URL\" disabled={isInProcess}>\n             {progressBar}\n             <div className={noteClass}>\n               Please note: Loading via HTTP/FTP/File URL depends on the database backend i.e. it must support the\n               SPARQL LOAD command and must allow outgoing network connections to the publicly accessible HTTP/FTP URLs\n               or must have access to the File URL respectively.\n             </div>\n             <FormControl\n               type=\"text\"\n               value={this.state.remoteFileUrl || ''}\n               placeholder=\"Please enter publicly accessible HTTP/FTP URL\"\n               onChange={(e) =>\n                 this.setState({\n                   remoteFileUrl: ((e.currentTarget as any) as HTMLInputElement).value,\n                 })\n               }\n             />\n             <Button\n               bsStyle=\"primary\"\n               className={`${CLASS_NAME}__load-button`}\n               disabled={!this.state.remoteFileUrl || isInProcess}\n               onClick={this.onClickLoadByUrl}\n             >\n               Load by URL\n             </Button>\n             {messages}\n           </Tab>\n         </Tabs>\n        : fileUploadTab}\n      </div>\n    );\n  }\n\n  private renderAdvancedOptions() {\n    return (\n      <Panel collapsible expanded={this.state.showOptions}>\n        <FormControl\n          type=\"text\"\n          label=\"Target NamedGraph\"\n          placeholder=\"URI of the target NamedGraph. Will be generated automatically if empty.\"\n          onChange={this.onChangeTargetGraph}\n        />\n        <Checkbox label=\"Keep source NamedGraphs\" onChange={this.onChangeKeepSourceGraphs}>\n          Keep source NamedGraphs\n        </Checkbox>\n      </Panel>\n    );\n  }\n\n  private onClickLoadByUrl = () => {\n    this.setState({\n      messages: [],\n      progress: maybe.Nothing<number>(),\n    });\n\n    const { remoteFileUrl, targetGraph } = this.state;\n    let updateQuery: SparqlJs.Update;\n    try {\n      updateQuery = makeLoadQuery(remoteFileUrl, targetGraph);\n    } catch (error) {\n      const message = targetGraph.isJust\n        ? 'Error constructing update query (probably invalid file or named graph URL?)'\n        : 'Error constructing update query (probably invalid file URL?)';\n      this.appendUploadMessage(message, error);\n      return;\n    }\n\n    this.setState({\n      progress: maybe.Just<number>(100),\n      progressText: maybe.Just<string>('Database is processing the LOAD command'),\n    });\n\n    const { semanticContext } = this.context;\n    this.cancellation.map(SparqlClient.executeSparqlUpdate(updateQuery, { context: semanticContext })).observe({\n      value: () => {\n        this.appendUploadMessage('File from URL successfully loaded.');\n        setTimeout(() => refresh(), 2000);\n      },\n      error: (error) => {\n        console.error(error);\n        this.appendUploadMessage('Failed to load file from URL.', error);\n      },\n      end: () => {\n        this.setState({\n          progress: maybe.Nothing<number>(),\n          progressText: maybe.Nothing<string>(),\n        });\n      },\n    });\n  };\n}\n\nfunction makeLoadQuery(remoteFileUrl: string, targetGraph: Data.Maybe<string>): SparqlJs.Update {\n  const targetGraphIri = targetGraph.isJust ? targetGraph.get() : `${remoteFileUrl}-${createTimestamp()}`;\n\n  const query = `LOAD <${encodeURI(remoteFileUrl)}> INTO GRAPH <${encodeURI(targetGraphIri)}>`;\n  const parsedUpdate = SparqlUtil.parseQuery(query);\n  if (parsedUpdate.type !== 'update') {\n    throw new Error('Query must be an update operation');\n  }\n\n  return parsedUpdate;\n}\n\nfunction createTimestamp(): string {\n  return moment().format('DD-MM-YYYY-hh-mm-ss');\n}\n\nexport default RdfUpload;\n","/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { ExtensionPoint } from 'platform/api/module-loader';\n\nimport { RepositoryType } from 'platform/api/services/repository';\n\n// Important! This module is an extension point definition or an implementation, so it\n// should limit it's imports to only base platform APIs and type definitions.\n// Otherwise every module imported here will be bundled as part of main \"app\" bundle.\n//\n// This happens due to the fact that extension point is directly referenced by the\n// implementation which in turn is directly referenced by .mp-extensions.\n// And .mp-extension is loaded eagerly because otherwise extension point won't be\n// aware about implementation existence.\n\nexport interface RdfUploadTabs {\n  [key: string]: (props: RdfUploadProps) => RdfUploadTab | undefined;\n}\n\nexport interface RdfUploadProps {\n  repositoryType: RepositoryType;\n  targetGraph: Data.Maybe<string>;\n}\n\nexport interface RdfUploadTab {\n  title: string;\n  content: JSX.Element;\n}\n\nexport const RdfUploadExtension = new ExtensionPoint<RdfUploadTabs>();\n"],"sourceRoot":""}