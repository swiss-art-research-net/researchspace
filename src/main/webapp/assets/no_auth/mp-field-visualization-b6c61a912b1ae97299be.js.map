{"version":3,"sources":["webpack:///./src/main/web/components/forms/FieldBasedVisualization.ts"],"names":["props","context","state","fieldsData","isLoading","noData","componentDidMount","this","fetchFieldValues","render","createElement","Spinner","renderResult","TemplateItem","template","source","options","subject","additionalSubjects","fields","subjectIri","Rdf","iri","otherSubjects","map","s","Kefir","combine","normalizeFieldDefinition","field","queryValues","selectPattern","semanticContext","values","f","_","cloneDeep","isEmpty","onValue","setState","every","v","defaultProps","getCurrentResource","value","Component","FieldBasedVisualization"],"mappings":"6IAmBA,OACA,QACA,QAEA,QACA,QACA,SACA,SACA,QAEA,UACA,UA2CA,cACE,iCAAYA,EAAOC,GAAnB,MACE,YAAMD,EAAOC,IAAQ,K,OACrB,EAAKC,MAAQ,CACXC,WAAY,GACZC,WAAW,EACXC,QAAQ,G,EA0Dd,OAhE6C,uCAepC,kCAAAC,kBAAP,WACEC,KAAKC,oBAGP,kCAAAC,OAAA,WACE,OAAOF,KAAKL,MAAME,UAAY,EAAAM,cAAc,EAAAC,SAAWJ,KAAKK,gBAGtD,kCAAAA,aAAR,WACE,OAAO,EAAAF,cAAc,EAAAG,aAAc,CACjCC,SAAU,CACRC,OAAQR,KAAKP,MAAMc,SACnBE,QAAS,CACPC,QAASV,KAAKP,MAAMiB,QACpBC,mBAAoBX,KAAKP,MAAMkB,mBAC/BC,OAAQZ,KAAKL,MAAMC,WACnBE,OAAQE,KAAKL,MAAMG,YAMnB,kCAAAG,iBAAR,sBACQ,aAAEW,EAAA,EAAAA,OAAQF,EAAA,EAAAA,QAASC,EAAA,EAAAA,mBACnBE,EAAa,EAAAC,IAAIC,IAAIL,GACrBM,EAAgBL,EAAmBM,KAAI,SAAAC,GAAK,SAAAJ,IAAIC,IAAIG,MAC1DC,EAAMC,QACJR,EAAOK,IACL,EAAAI,0BACAJ,KACA,SAAAK,GAAS,SAAAC,YACPD,EAAME,cAAeX,EAAY,CAAEnB,QAAS,EAAKA,QAAQ+B,iBAAmBT,GAC5EC,KACA,SAAAS,GACE,IAAMC,EAAIC,EAAEC,UAAUP,GAEtB,OADAK,EAAED,OAASE,EAAEE,QAAQJ,GAAU,KAAOA,EAC/BC,SAIbI,SACA,SAAAL,GACE,SAAKM,SAAS,CACZpC,WAAY8B,EACZ7B,WAAW,EACXC,OAAQ8B,EAAEK,MAAMP,GAAQ,SAAAQ,GAAK,OAAa,OAAbA,EAAER,gBAlDhC,wBAAAS,aAAe,CACpBzB,QAAS,EAAA0B,qBAAqBC,MAC9B1B,mBAAoB,IAoDxB,wBAhEA,CAA6C,EAAA2B,WAAhC,EAAAC,0BAiEb,UAAeA","file":"mp-field-visualization-b6c61a912b1ae97299be.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { createElement } from 'react';\nimport * as Kefir from 'kefir';\nimport * as _ from 'lodash';\n\nimport { Rdf } from 'platform/api/rdf';\nimport { Component } from 'platform/api/components';\nimport { TemplateItem } from 'platform/components/ui/template';\nimport { Spinner } from 'platform/components/ui/spinner';\nimport { getCurrentResource } from 'platform/api/navigation';\n\nimport { FieldDefinitionProp, normalizeFieldDefinition } from './FieldDefinition';\nimport { queryValues } from './QueryValues';\nimport { SparqlBindingValue } from './FieldValues';\n\nexport interface FieldBasedVisualizationConfig {\n  /**\n   * The IRI of the resource that needs to be visualized.\n   */\n  subject?: string;\n\n  /**\n   * Additional IRIs for the subject, useful when there are alignment with owl:sameAs or skos:exactMatch.\n   *\n   * If specified field values are fetched for the main subject as well as for additional.\n   */\n  additionalSubjects?: [string]\n\n  /**\n   * Definition for fields that need to be visualized.\n   *\n   * See <semantic-link uri='http://help.researchspace.org/resource/Help:SemanticForm'></semantic-link> for more details about field definitions.\n   */\n  fields: FieldDefinitionProp[];\n\n  /**\n   * <semantic-link uri='http://help.researchspace.org/resource/Help:FrontendTemplating'>Template</semantic-link>, that gets the `fields` value with the list of field definitions injected as template context.\n   * [each helper](http://handlebarsjs.com/builtin_helpers.html#iteration) can be used to iterate over the fields.\n   *\n   * Every field has corresponding metadata (label, xsdDatatype, etc.), as well as list of `values`.\n   *\n   * See <semantic-link uri='http://help.researchspace.org/resource/Help:SemanticForm'></semantic-link> for more details about field definitions.\n   */\n  template: string;\n}\n\nexport interface FieldDefinitionWithData extends FieldDefinitionProp {\n  values: Array<SparqlBindingValue>;\n}\n\ninterface State {\n  fieldsData: Array<FieldDefinitionWithData>;\n  isLoading: boolean;\n  noData: boolean;\n}\nexport class FieldBasedVisualization extends Component<FieldBasedVisualizationConfig, State> {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      fieldsData: [],\n      isLoading: true,\n      noData: true,\n    };\n  }\n\n  static defaultProps = {\n    subject: getCurrentResource().value,\n    additionalSubjects: []\n  };\n\n  public componentDidMount() {\n    this.fetchFieldValues();\n  }\n\n  render() {\n    return this.state.isLoading ? createElement(Spinner) : this.renderResult();\n  }\n\n  private renderResult() {\n    return createElement(TemplateItem, {\n      template: {\n        source: this.props.template,\n        options: {\n          subject: this.props.subject,\n          additionalSubjects: this.props.additionalSubjects,\n          fields: this.state.fieldsData,\n          noData: this.state.noData,\n        },\n      },\n    });\n  }\n\n  private fetchFieldValues() {\n    const { fields, subject, additionalSubjects } = this.props;\n    const subjectIri = Rdf.iri(subject);\n    const otherSubjects = additionalSubjects.map(s => Rdf.iri(s));\n    Kefir.combine(\n      fields.map(\n        normalizeFieldDefinition\n      ).map(\n        field => queryValues(\n          field.selectPattern, subjectIri, { context: this.context.semanticContext }, otherSubjects\n        ).map(\n          values => {\n            const f = _.cloneDeep(field as FieldDefinitionWithData);\n            f.values = _.isEmpty(values) ? null : values;\n            return f;\n          }\n        )\n      )\n    ).onValue(\n      values =>\n        this.setState({\n          fieldsData: values,\n          isLoading: false,\n          noData: _.every(values, v => v.values === null)\n        })\n    );\n  }\n}\nexport default FieldBasedVisualization;\n"],"sourceRoot":""}