{"version":3,"sources":["webpack:///./src/main/web/components/semantic/search/web-components/SemanticSearchTableResult.tsx"],"names":["render","SemanticSearchContext","Consumer","context","SemanticSearchTableResultInner","props","React","Component","SemanticSearchTableResult","state","columnConfiguration","componentDidMount","this","prepareColumnConfiguration","componentDidUpdate","prevProps","searchProfileStore","availableDomains","prevContext","isEqual","graphScopeResults","isJust","prepareGraphScopeColumns","store","get","undefined","columns","column","variableName","id","replace","displayName","type","iri","Rdf","fullIri","tgConcept","categories","has","label","attribute","push","prepareSearchProfileColumns","domains","forEach","domain","setState","mapChildren","children","universalChildren","Children","toArray","map","child","isValidChild","componentHasType","SemanticTable","cloneElement"],"mappings":"6IAkBA,OAEA,QAEA,SACA,UAEA,UAEA,mD,+CAQA,OAR+C,yCAC7C,oCAAAA,OAAA,sBACE,OACE,gBAAC,EAAAC,sBAAsBC,SAAQ,MAC5B,SAACC,GAAY,uBAACC,EAA8B,cAAK,EAAKC,MAAK,CAAEF,QAASA,SAI/E,0BARA,CAA+CG,EAAMC,WAAxC,EAAAC,4BAkBb,kBACE,wCAAYH,GAAZ,MACE,YAAMA,IAAM,K,OACZ,EAAKI,MAAQ,CAAEC,oBAAqB,I,EA+CxC,OAlDoD,8CAMlD,yCAAAC,kBAAA,WACEC,KAAKC,8BAGP,yCAAAC,mBAAA,SAAmBC,GACT,QAAAZ,QACF,qBAAEa,EAAA,EAAAA,mBAAoBC,EAAA,EAAAA,iBAEzBC,EAAYF,mBAAmBG,QAAQH,IACvCE,EAAYD,iBAAiBE,QAAQF,IAEtCL,KAAKC,8BAID,yCAAAA,2BAAR,WACU,IAEFH,EAFE,mBAAAU,kBAEsCC,OA+ClD,SAASC,yBAAyBnB,GACxB,IAAAa,EAAA,EAAAA,mBAAoBI,EAAA,EAAAA,kBACtBG,EAAQP,EAAmBK,OAASL,EAAmBQ,WAAQC,EAC/DC,EAAiC,GACvC,GAAIN,EAAkBC,OACpB,IAAqB,UAAAD,EAAkBI,MAAME,QAAxB,eAAiC,CAAjD,IAAMC,EAAM,KACTC,EAAeD,EAAOE,GAAGC,QAAQ,MAAO,IAC1CC,OAAW,EACf,GAAoB,gBAAhBJ,EAAOK,KAAwB,CACjC,IAAMC,EAAM,EAAAC,IAAIC,QAAQR,EAAOS,UAAUH,KACzCF,EAAcR,GAASA,EAAMc,WAAWC,IAAIL,GAAOV,EAAMc,WAAWb,IAAIS,GAAKM,MAAQX,OAErFG,EAAcJ,EAAOa,UAAUD,MAEjCb,EAAQe,KAAK,CAAEb,aAAY,EAAEG,YAAW,IAG5C,OAAOL,EA/DDJ,CAAyBV,KAAKP,MAAMF,SA2B5C,SAASuC,4BAA4BvC,GAC3B,IAAAa,EAAA,EAAAA,mBAAoBC,EAAA,EAAAA,iBACtBS,EAAiC,GACjCH,EAAQP,EAAmBK,OAASL,EAAmBQ,WAAQC,EAC/DkB,EAAU1B,EAAiBI,OAASJ,EAAiBO,WAAQC,EAC/DkB,GACFA,EAAQC,SAAQ,SAACC,EAAQZ,GACvB,IAAML,EAAeiB,EAAOf,QAAQ,MAAO,IAC3CJ,EAAQe,KAAK,CACXb,aAAY,EACZG,YAAaR,GAASA,EAAMc,WAAWC,IAAIL,GAAOV,EAAMc,WAAWb,IAAIS,GAAKM,MAAQX,OAI1F,OAAOF,EAxCDgB,CAA4B9B,KAAKP,MAAMF,SAE3CS,KAAKkC,SAAS,CAAEpC,oBAAmB,KAG7B,yCAAAqC,YAAR,SAAoBC,GAApB,WACUtC,EAAA,WAAAA,oBACR,OAAO,EAAAuC,kBACL3C,EAAM4C,SAASC,QAAQH,GAAUI,KAAI,SAACC,GACpC,OAAK,EAAAC,aAAaD,GAGd,EAAAE,iBAAiBF,EAAO,EAAAG,eACnBlD,EAAMmD,aAAaJ,EAAO,yBAAKA,EAAMhD,OAAK,CAAEK,oBAAmB,KAE/DJ,EAAMmD,aAAaJ,EAAOA,EAAMhD,MAAO,EAAK0C,YAAYM,EAAMhD,MAAM2C,WALpEK,OAWf,yCAAArD,OAAA,WACE,OAAOY,KAAKmC,YAAYnC,KAAKP,MAAM2C,WAEvC,+BAlDA,CAAoD1C,EAAMC,WAA7C,EAAAH,iCA2Fb,UAAeI","file":"semantic-search-table-result-65413314a9df90fb2c60.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\n\nimport { Rdf } from 'platform/api/rdf';\n\nimport { universalChildren, isValidChild, componentHasType } from 'platform/components/utils';\nimport { SemanticTable, SemanticTableConfig, ColumnConfiguration } from 'platform/components/semantic/table';\n\nimport { SemanticSearchContext, ResultContext, GraphScopeContext } from './SemanticSearchApi';\n\nexport class SemanticSearchTableResult extends React.Component {\n  render() {\n    return (\n      <SemanticSearchContext.Consumer>\n        {(context) => <SemanticSearchTableResultInner {...this.props} context={context} />}\n      </SemanticSearchContext.Consumer>\n    );\n  }\n}\n\ninterface InnerProps {\n  context: ResultContext & GraphScopeContext;\n}\n\ninterface State {\n  columnConfiguration?: ReadonlyArray<ColumnConfiguration>;\n}\n\nexport class SemanticSearchTableResultInner extends React.Component<InnerProps, State> {\n  constructor(props: InnerProps) {\n    super(props);\n    this.state = { columnConfiguration: [] };\n  }\n\n  componentDidMount() {\n    this.prepareColumnConfiguration();\n  }\n\n  componentDidUpdate(prevProps: InnerProps) {\n    const { context: prevContext } = prevProps;\n    const { searchProfileStore, availableDomains } = this.props.context;\n    if (\n      !prevContext.searchProfileStore.isEqual(searchProfileStore) ||\n      !prevContext.availableDomains.isEqual(availableDomains)\n    ) {\n      this.prepareColumnConfiguration();\n    }\n  }\n\n  private prepareColumnConfiguration() {\n    const { graphScopeResults } = this.props.context;\n\n    const columnConfiguration = graphScopeResults.isJust\n      ? prepareGraphScopeColumns(this.props.context)\n      : prepareSearchProfileColumns(this.props.context);\n\n    this.setState({ columnConfiguration });\n  }\n\n  private mapChildren(children: React.ReactNode) {\n    const { columnConfiguration } = this.state;\n    return universalChildren(\n      React.Children.toArray(children).map((child) => {\n        if (!isValidChild(child)) {\n          return child;\n        }\n        if (componentHasType(child, SemanticTable)) {\n          return React.cloneElement(child, { ...child.props, columnConfiguration } as SemanticTableConfig);\n        } else {\n          return React.cloneElement(child, child.props, this.mapChildren(child.props.children));\n        }\n      })\n    );\n  }\n\n  render() {\n    return this.mapChildren(this.props.children);\n  }\n}\n\nfunction prepareSearchProfileColumns(context: ResultContext): ColumnConfiguration[] {\n  const { searchProfileStore, availableDomains } = context;\n  const columns: ColumnConfiguration[] = [];\n  const store = searchProfileStore.isJust ? searchProfileStore.get() : undefined;\n  const domains = availableDomains.isJust ? availableDomains.get() : undefined;\n  if (domains) {\n    domains.forEach((domain, iri) => {\n      const variableName = domain.replace(/^\\?/, '');\n      columns.push({\n        variableName,\n        displayName: store && store.categories.has(iri) ? store.categories.get(iri).label : variableName,\n      });\n    });\n  }\n  return columns;\n}\n\n// TODO: This method should not exists; instead this information\n// should be present in the search profile\nfunction prepareGraphScopeColumns(context: ResultContext & GraphScopeContext): ColumnConfiguration[] {\n  const { searchProfileStore, graphScopeResults } = context;\n  const store = searchProfileStore.isJust ? searchProfileStore.get() : undefined;\n  const columns: ColumnConfiguration[] = [];\n  if (graphScopeResults.isJust) {\n    for (const column of graphScopeResults.get().columns) {\n      const variableName = column.id.replace(/^\\?/, '');\n      let displayName: string;\n      if (column.type === 'var-concept') {\n        const iri = Rdf.fullIri(column.tgConcept.iri);\n        displayName = store && store.categories.has(iri) ? store.categories.get(iri).label : variableName;\n      } else {\n        displayName = column.attribute.label;\n      }\n      columns.push({ variableName, displayName });\n    }\n  }\n  return columns;\n}\n\nexport default SemanticSearchTableResult;\n"],"sourceRoot":""}