{"version":3,"sources":["webpack:///./src/main/web/components/ui/WithTypes.tsx"],"names":["props","context","cancellation","Cancellation","fetchTypes","query","SparqlUtil","parseQuerySync","types","_","isEmpty","SparqlClient","prepareParsedQuery","map","t","Rdf","iri","where","unshift","type","triples","subject","predicate","rdf","value","object","setBindings","construct","observe","labels","directTypes","inferredTypes","forEach","p","equals","rdfs","label","s","o","push","subClassOf","allTypes","concat","allTypesLabels","directTypesLabels","setState","loading","result","join","state","componentDidMount","this","componentWillReceiveProps","isEqual","render","Spinner","TemplateItem","template","source","options","templateContext","variables","Component","WithTypes"],"mappings":"6IAiBA,OACA,QAGA,QACA,SACA,QACA,QAEA,QACA,SACA,SAqBA,cAGE,mBAAYA,EAAOC,GAAnB,MACE,YAAMD,EAAOC,IAAQ,K,OAHN,EAAAC,aAAe,IAAI,EAAAC,aAiCpC,EAAAC,WAAa,SAACJ,GACZ,IAAIK,EACF,EAAAC,WAAWC,eACT,4gCA+BAP,EAAMQ,QAAUC,EAAEC,QAAQV,EAAMQ,OAClCH,EAAQ,EAAAM,aAAaC,mBACnBZ,EAAMQ,MAAMK,KAAI,SAAAC,GAAK,OAAE,EAAK,EAAAC,IAAIC,IAAIF,OAD9B,CAENT,GACOL,EAAMgB,MACfX,EAAMY,MAAMC,QAAQ,CAClBC,KAAM,MACNC,QAAS,CACP,CACEC,QAAS,WAAYC,UAAW,EAAAC,IAAIJ,KAAKK,MAAOC,OAAQ,SAI9DpB,EAAQ,EAAAM,aAAae,YAAYrB,EAAO,CAAC,QAAW,EAAAU,IAAIC,IAAIhB,EAAMgB,QAIpE,EAAKd,aAAaW,IAChB,EAAAF,aAAagB,UAAUtB,IACvBuB,QAAQ,CACRJ,MAAO,SAAAA,GACL,IAAMK,EAAS,GACTC,EAAc,GACdC,EAAgB,GAEtBP,EAAMQ,SAAQ,SAAAlB,GACRA,EAAEmB,EAAEC,OAAO,EAAAC,KAAKC,SAClBP,EAAOf,EAAEuB,EAAEb,OAASV,EAAEwB,EAAEd,OAGtBV,EAAEmB,EAAEC,OAAO,EAAAX,IAAIJ,OACjBW,EAAYS,KAAKzB,EAAEwB,EAAEd,OAGnBV,EAAEmB,EAAEC,OAAO,EAAAC,KAAKK,aAClBT,EAAcQ,KAAKzB,EAAEwB,EAAEd,UAI3B,IAAMiB,EAAWX,EAAYY,OAAOX,GAE9BY,EAAiB,GACvBF,EAAST,SAAQ,SAAAlB,GAAK,OAAA6B,EAAeJ,KAAKV,EAAOf,OAEjD,IAAM8B,EAAoB,GAC1Bd,EAAYE,SAAQ,SAAAlB,GAAK,OAAA8B,EAAkBL,KAAKV,EAAOf,OAEvD,EAAK+B,SAAS,CACZC,SAAS,EACTC,OAAQ,CACNjB,YAAW,EAAEC,cAAa,EAAEU,SAAQ,EACpCE,eAAgBA,EAAeK,KAAK,MACpCJ,kBAAmBA,EAAkBI,KAAK,aAlHlD,EAAKC,MAAQ,CACXH,SAAS,EACTC,OAAQ,CACNjB,YAAa,GACbC,cAAe,GACfU,SAAU,GACVE,eAAgB,GAChBC,kBAAmB,K,EA4H3B,OAzI+B,yBAkB7B,oBAAAM,kBAAA,WACMC,KAAKnD,MAAMgB,MAAQP,EAAEC,QAAQyC,KAAKnD,MAAMQ,OAC1C2C,KAAK/C,WAAW+C,KAAKnD,OAErBmD,KAAKN,SAAS,CAACC,SAAS,KAI5B,oBAAAM,0BAAA,SAA0BpD,GACpBmD,KAAKnD,MAAMgB,MAAQhB,EAAMgB,IAC3BmC,KAAK/C,WAAWJ,GACNS,EAAE4C,QAAQF,KAAKnD,MAAMQ,MAAOR,EAAMQ,QAAWC,EAAEC,QAAQV,EAAMQ,QACvE2C,KAAK/C,WAAWJ,IAiGpB,oBAAAsD,OAAA,WACE,OAAIH,KAAKF,MAAMH,QACN,gBAAC,EAAAS,QAAO,MAER,gBAAC,EAAAC,aAAY,CAACC,SAAU,CAC7BC,OAAQP,KAAKnD,MAAMyD,SACnBE,QAAS,EAAF,kCAAMR,KAAKnD,MAAM4D,iBAAoBT,KAAKF,MAAMF,QAAWI,KAAKnD,MAAM6D,eAIrF,UAzIA,CAA+B,EAAAC,WAAlB,EAAAC,YA2Ib,UAAeA","file":"with-types-49dd517bcf9e0ec168ab.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\nimport * as _ from 'lodash';\nimport * as SparqlJs from 'sparqljs';\n\nimport { Rdf } from 'platform/api/rdf';\nimport { rdfs, rdf } from 'platform/api/rdf/vocabularies';\nimport { SparqlClient, SparqlUtil } from 'platform/api/sparql';\nimport { Cancellation } from 'platform/api/async';\n\nimport { Component } from 'platform/api/components';\nimport { TemplateItem } from 'platform/components/ui/template';\nimport { Spinner } from 'platform/components/ui/spinner';\n\ninterface Props {\n  iri?: string\n  types?: Array<string>\n  templateContext: any\n  template: string\n  variables: any\n}\n\ninterface State {\n  loading: boolean\n  result: {\n    directTypes: String[]\n    inferredTypes: String[]\n    allTypes: String[]\n    allTypesLabels: String\n    directTypesLabels: String\n  }\n}\n\nexport class WithTypes extends Component<Props, State> {\n  private readonly cancellation = new Cancellation();\n\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      loading: true,\n      result: {\n        directTypes: [],\n        inferredTypes: [],\n        allTypes: [],\n        allTypesLabels: '',\n        directTypesLabels: ''\n      }\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.iri || !_.isEmpty(this.props.types)) {\n      this.fetchTypes(this.props);\n    } else {\n      this.setState({loading: false});\n    }\n  }\n\n  componentWillReceiveProps(props: Props) {\n    if (this.props.iri !== props.iri) {\n      this.fetchTypes(props);\n    } else if (!_.isEqual(this.props.types, props.types) && !_.isEmpty(props.types)) {\n      this.fetchTypes(props);\n    }\n  }\n\n  fetchTypes = (props: Props) => {\n    let query =\n      SparqlUtil.parseQuerySync<SparqlJs.ConstructQuery>(\n        `CONSTRUCT {\n          ?iri a ?t .\n          ?t rdfs:label ?tLabel .\n          ?t rdfs:subClassOf ?type .\n          ?type rdfs:label ?label .\n        } WHERE {\n          BIND(COALESCE(?__iri__, <http://example.com>) AS ?iri) .\n          OPTIONAL {\n            ?t rdfs:label ?tEngLabel .\n            FILTER(LANG(?tEngLabel) = \"en\")\n          }\n          OPTIONAL {\n            ?t rdfs:label ?tNoLangLabel .\n            FILTER(LANG(?tNoLangLabel) = \"\")\n          }\n          BIND(COALESCE(?tEngLabel, ?tNoLangLabel, REPLACE(STR(?t), \"^.*/(.*)$\", \"$1\")) AS ?tLabel) .\n          OPTIONAL {\n            ?t rdfs:subClassOf+ ?type .\n            OPTIONAL {\n              ?type rdfs:label ?engLabel .\n              FILTER(LANG(?engLabel) = \"en\")\n            }\n            OPTIONAL {\n              ?type rdfs:label ?noLangLabel .\n              FILTER(LANG(?noLangLabel) = \"\")\n            }\n            BIND(COALESCE(?engLabel, ?noLangLabel, REPLACE(STR(?type), \"^.*/(.*)$\", \"$1\")) AS ?label) .\n          }\n        }`\n      );\n\n    if (props.types && !_.isEmpty(props.types)) {\n      query = SparqlClient.prepareParsedQuery(\n        props.types.map(t => ({'t': Rdf.iri(t)}))\n      )(query);\n    } else if (props.iri) {\n      query.where.unshift({\n        type: 'bgp',\n        triples: [\n          {\n            subject: '?__iri__', predicate: rdf.type.value, object: '?t'\n          } as SparqlJs.Triple,\n        ]\n      });\n      query = SparqlClient.setBindings(query, {'__iri__': Rdf.iri(props.iri)});\n    }\n\n\n    this.cancellation.map(\n      SparqlClient.construct(query)\n    ).observe({\n      value: value => {\n        const labels = {};\n        const directTypes = [];\n        const inferredTypes = [];\n\n        value.forEach(t => {\n          if (t.p.equals(rdfs.label)) {\n            labels[t.s.value] = t.o.value;\n          }\n\n          if (t.p.equals(rdf.type)) {\n            directTypes.push(t.o.value);\n          }\n\n          if (t.p.equals(rdfs.subClassOf)) {\n            inferredTypes.push(t.o.value);\n          }\n        });\n\n        const allTypes = directTypes.concat(inferredTypes);\n\n        const allTypesLabels = [];\n        allTypes.forEach(t => allTypesLabels.push(labels[t]));\n\n        const directTypesLabels = [];\n        directTypes.forEach(t => directTypesLabels.push(labels[t]));\n\n        this.setState({\n          loading: false,\n          result: {\n            directTypes, inferredTypes, allTypes,\n            allTypesLabels: allTypesLabels.join(', '),\n            directTypesLabels: directTypesLabels.join(', ')\n          }\n        });\n      }\n    });\n  }\n\n  render() {\n    if (this.state.loading) {\n      return <Spinner />;\n    } else {\n      return <TemplateItem template={{\n        source: this.props.template,\n        options: {...this.props.templateContext, ...this.state.result, ...this.props.variables}\n        }} />;\n    }\n  }\n}\n\nexport default WithTypes;\n"],"sourceRoot":""}