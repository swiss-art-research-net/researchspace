{"version":3,"sources":["webpack:///./src/main/web/components/admin/rdf-upload/GraphActionLink.ts"],"names":["Button","createFactory","ReactBootstrap","ButtonToolbar","CLASS","props","context","onClick","state","isInProcess","action","getOverlaySystem","hide","show","createElement","OverlayDialog","title","bsSize","onHide","children","D","div","style","textAlign","p","graphuri","display","bsStyle","deleteGraph","repository","acceptHeader","SparqlUtil","getMimeType","fileEnding","ending","endsWith","fileName","startsWith","replace","moment","format","RDFGraphStoreService","downloadGraph","targetGraph","Rdf","iri","onValue","v","render","span","className","classnames","this","Spinner","spinnerDelay","setState","addNotification","level","message","_","refresh","onError","error","Component","GraphActionLink"],"mappings":"6IAmBA,OACA,QACA,QACA,QACA,OACA,QAEA,QACA,QACA,QACA,QACA,UACA,SACA,SACA,SAEMA,EAAS,EAAAC,cAAcC,EAAeF,QACtCG,EAAgB,EAAAF,cAAcC,EAAeC,eAEnD,QAEA,IAAMC,EAAQ,sBAad,cACE,yBAAYC,EAAcC,GAA1B,MACE,YAAMD,EAAOC,IAAQ,K,OAoBvB,EAAAC,QAAU,WACR,IAAI,EAAKC,MAAMC,YAIf,GAA0B,WAAtB,EAAKJ,MAAMK,OAAqB,CAClC,IACM,SAAS,WAAM,SAAAC,mBAAmBC,KADtB,2BAMlB,EAAAD,mBAAmBE,KAND,yBAQhB,EAAAC,cAAc,EAAAC,cAAe,CAC3BF,MAAM,EACNG,MAAO,eACPC,OAAQ,KACRC,OAAM,SACNC,SAAUC,EAAEC,IACV,CAAEC,MAAO,CAAEC,UAAW,WACtBH,EAAEI,EAAE,GAAI,yDAAyD,EAAKnB,MAAMoB,SAAQ,MACpFL,EAAEI,EACA,GACA,+KAEFrB,EACE,CAAEmB,MAAO,CAAEI,QAAS,iBACpB1B,EAAO,CAAE2B,QAAS,UAAWpB,QApBpB,WACf,WACA,EAAKqB,gBAkBmD,OAClD5B,EAAO,CAAE2B,QAAS,SAAUpB,QAAS,UAAU,gBAKlD,GAA0B,QAAtB,EAAKF,MAAMK,OAAkB,CAC9B,IAAAmB,EAAA,0BAAAA,WACFC,EAAe,EAAAC,WAAWC,YAAY,EAAK3B,MAAM4B,YACjDC,EACJ,EAAK7B,MAAM4B,YAAc,EAAAE,SAAS,EAAK9B,MAAMoB,SAAU,EAAKpB,MAAM4B,YAAc,GAAK,EAAK5B,MAAM4B,WAC5FG,EAAW,EAAAC,WAAW,EAAKhC,MAAMoB,SAAU,YAC7C,EAAKpB,MAAMoB,SAASa,QAAQ,WAAY,IAAMJ,EAC9C,gBAAkBK,IAASC,OAAO,uBAAyB,IAAMN,EACrE,EAAAO,qBAAqBC,cAAc,CACjCC,YAAa,EAAAC,IAAIC,IAAI,EAAKxC,MAAMoB,UAChCK,aAAY,EACZM,SAAQ,EACRP,WAAU,IACTiB,SAAQ,SAACC,SAlEd,EAAKvC,MAAQ,CAAEC,aAAa,G,EAwFhC,OA3FqC,+BAMnC,0BAAAuC,OAAA,WACE,OAAO5B,EAAE6B,KACP,CACEC,UAAWC,EAAWC,KAAK/C,MAAM6C,UAAW9C,GAC5CG,QAAS6C,KAAK7C,SAEhB6C,KAAK5C,MAAMC,YACPW,EAAEC,IACA,CAAE6B,UAAc9C,EAAK,kBACrB,EAAAU,cAAc,EAAAuC,QAAS,CAAEC,aAAc,EAAGJ,UAAc9C,EAAK,cAC7DgB,EAAE6B,KAAK,CAAEC,UAAc9C,EAAK,UAAYgD,KAAK/C,MAAMc,WAErDiC,KAAK/C,MAAMc,WAuDX,0BAAAS,YAAR,sBACEwB,KAAKG,SAAS,CAAE9C,aAAa,IAC7B,EAAA+C,gBAAgB,CACdC,MAAO,OACPC,QAAS,0FAGH,IAAA7B,EAAA,6BAAAA,WACR,EAAAY,qBAAqBb,YAAY,CAAEe,YAAa,EAAAC,IAAIC,IAAIO,KAAK/C,MAAMoB,UAAWI,WAAU,IACrFiB,SAAQ,SAACa,GAAM,SAAAC,aACfC,SAAQ,SAACC,GACR,EAAKP,SAAS,CAAE9C,aAAa,IAC7B,EAAA+C,gBAAgB,CACdC,MAAO,QACPC,QAASI,QAInB,gBA3FA,CAAqC,EAAAC,WAAxB,EAAAC,kBA6Fb,UAAeA","file":"mp-graph-store-action-7a468e68c10b6d1d0d0d.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { Props as ReactProps, createElement, createFactory } from 'react';\nimport * as D from 'react-dom-factories';\nimport { startsWith, endsWith } from 'lodash';\nimport * as moment from 'moment';\nimport * as classnames from 'classnames';\nimport * as ReactBootstrap from 'react-bootstrap';\n\nimport { Component } from 'platform/api/components';\nimport { Rdf } from 'platform/api/rdf';\nimport { refresh } from 'platform/api/navigation';\nimport { SparqlUtil } from 'platform/api/sparql';\nimport { RDFGraphStoreService } from 'platform/api/services/rdf-graph-store';\nimport { addNotification } from 'platform/components/ui/notification';\nimport { Spinner } from 'platform/components/ui/spinner';\nimport { getOverlaySystem, OverlayDialog } from 'platform/components/ui/overlay';\n\nconst Button = createFactory(ReactBootstrap.Button);\nconst ButtonToolbar = createFactory(ReactBootstrap.ButtonToolbar);\n\nimport './GraphActionLink.scss';\n\nconst CLASS = 'mp-rdf-graph-action';\n\nexport interface Props extends ReactProps<GraphActionLink> {\n  graphuri: string;\n  action: string;\n  fileEnding?: string;\n  className?: string;\n}\n\nexport interface State {\n  isInProcess?: boolean;\n}\n\nexport class GraphActionLink extends Component<Props, State> {\n  constructor(props: Props, context: any) {\n    super(props, context);\n    this.state = { isInProcess: false };\n  }\n\n  render() {\n    return D.span(\n      {\n        className: classnames(this.props.className, CLASS),\n        onClick: this.onClick,\n      },\n      this.state.isInProcess\n        ? D.div(\n            { className: `${CLASS}__spinner-wrap` },\n            createElement(Spinner, { spinnerDelay: 0, className: `${CLASS}__spinner` }),\n            D.span({ className: `${CLASS}__hide` }, this.props.children)\n          )\n        : this.props.children\n    );\n  }\n\n  onClick = () => {\n    if (this.state.isInProcess) {\n      return;\n    }\n\n    if (this.props.action === 'DELETE') {\n      const dialogRef = 'confirm-graph-deleting';\n      const onHide = () => getOverlaySystem().hide(dialogRef);\n      const onSubmit = () => {\n        onHide();\n        this.deleteGraph();\n      };\n      getOverlaySystem().show(\n        dialogRef,\n        createElement(OverlayDialog, {\n          show: true,\n          title: 'Delete graph',\n          bsSize: 'lg',\n          onHide,\n          children: D.div(\n            { style: { textAlign: 'center' } },\n            D.p({}, `Are you sure that you want to delete the named graph \"${this.props.graphuri}\"?`),\n            D.p(\n              {},\n              `Please note that for larger named graphs (> 1 million statements), the deletion may typically take a few seconds (or even minutes) to be finally processed by the database.`\n            ),\n            ButtonToolbar(\n              { style: { display: 'inline-block' } },\n              Button({ bsStyle: 'success', onClick: onSubmit }, 'Yes'),\n              Button({ bsStyle: 'danger', onClick: onHide }, 'No')\n            )\n          ),\n        })\n      );\n    } else if (this.props.action === 'GET') {\n      const { repository } = this.context.semanticContext;\n      const acceptHeader = SparqlUtil.getMimeType(this.props.fileEnding);\n      const ending =\n        this.props.fileEnding && endsWith(this.props.graphuri, this.props.fileEnding) ? '' : this.props.fileEnding;\n      const fileName = startsWith(this.props.graphuri, 'file:///')\n        ? this.props.graphuri.replace('file:///', '') + ending\n        : 'graph-export-' + moment().format('YYYY-MM-DDTHH-mm-ss') + '.' + ending;\n      RDFGraphStoreService.downloadGraph({\n        targetGraph: Rdf.iri(this.props.graphuri),\n        acceptHeader,\n        fileName,\n        repository,\n      }).onValue((v) => {});\n    }\n  };\n\n  private deleteGraph() {\n    this.setState({ isInProcess: true });\n    addNotification({\n      level: 'info',\n      message: 'The delete command has been executed and is currently being processed by the database',\n    });\n\n    const { repository } = this.context.semanticContext;\n    RDFGraphStoreService.deleteGraph({ targetGraph: Rdf.iri(this.props.graphuri), repository })\n      .onValue((_) => refresh())\n      .onError((error: string) => {\n        this.setState({ isInProcess: false });\n        addNotification({\n          level: 'error',\n          message: error,\n        });\n      });\n  }\n}\n\nexport default GraphActionLink;\n"],"sourceRoot":""}