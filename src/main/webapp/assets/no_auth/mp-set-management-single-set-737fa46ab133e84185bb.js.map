{"version":3,"sources":["webpack:///./src/main/web/components/sets/SingleSet.tsx"],"names":["props","context","cancellation","Cancellation","onDragStart","setViewState","draggingItem","onDragEnd","state","pendingState","ViewModel","loadState","model","getState","setState","getContext","semanticContext","trigger","eventType","data","getChildContext","superContext","childContext","removeSet","this","removeSetItem","startRenamingSet","fetchSetItems","getCurrentSet","openedSet","componentDidMount","registerEventsListener","placeholder","emptySet","Rdf","iri","sets","Immutable","Map","set","value","openAndLoadSet","map","listen","BuiltInEvents","ComponentRefresh","target","id","onValue","loadSets","keepItems","source","render","className","classnames","CLASS_NAME","itemViewMode","DropArea","shouldReactToDrag","query","acceptResourceQuery","onDrop","targetSet","ViewState","displayedSetIri","onDropItemToSet","dropMessage","ResourceLabel","renderHeader","renderItems","Spinner","itemsOrdering","setHasItems","items","length","reorderProps","baseClass","canReorder","isReordering","Boolean","onPressReorder","undefined","Ordering","empty","onPressReorderApply","applyItemsOrder","renderCaption","SearchAndFilters","keywordFilter","filters","setIsOpen","minInputLength","minSearchTermLength","searchText","search","filterValues","onSearchTextChanged","onFilterChanged","children","ReorderItemsButton","ItemViewModeSwitch","mode","onModeChanged","setItemViewMode","ReorderConfirmation","isEditing","editing","EditableLabel","onEditCompleted","newName","onSetEditCompleted","type","title","onClick","highlightedTerm","isSearchOpened","results","searchSet","get","ItemsView","key","template","templateForKind","onOrderChanged","order","defaultProps","Defaults","ForAllProps","childContextTypes","Component","SetManagementContextTypes","SetViewContextTypes","SingleSet"],"mappings":"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","file":"mp-set-management-single-set-737fa46ab133e84185bb.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\nimport * as Immutable from 'immutable';\nimport * as classnames from 'classnames';\n\nimport { Cancellation } from 'platform/api/async';\nimport { Component, ComponentProps } from 'platform/api/components';\nimport { BuiltInEvents, listen, trigger } from 'platform/api/events';\nimport { Rdf } from 'platform/api/rdf';\n\nimport { Ordering } from 'platform/components/ui/reorderable-list';\nimport { ResourceLabel } from 'platform/components/ui/resource-label';\nimport { Spinner } from 'platform/components/ui/spinner';\nimport { DropArea } from 'platform/components/dnd/DropArea';\n\nimport {\n  SetManagementContext,\n  SetManagementContextTypes,\n  SetViewContext,\n  SetViewContextTypes,\n} from './SetManagementApi';\nimport { SetManagementEventType } from 'platform/api/services/ldp-set/SetManagementEvents';\n\nimport * as Defaults from './Defaults';\nimport { SetManagementProps } from './Configuration';\nimport { PlatformSet } from './SetsModel';\nimport { ViewState, ViewModel, emptySet } from './ViewModel';\n\nimport { SearchAndFilters } from './views/SearchAndFilters';\nimport { ItemsView, EditableLabel } from './views/SetsAndItems';\nimport { ReorderingProps, ReorderItemsButton, ReorderConfirmation, ItemViewModeSwitch } from './views/Footer';\n\nimport { CLASS_NAME } from './SetManagement';\n\nexport interface SingleSetProps extends SetManagementProps {\n  /**\n   * IRI of displayed set.\n   */\n  openedSet: string;\n}\n\ntype Props = SingleSetProps & ComponentProps;\nexport class SingleSet extends Component<Props, ViewState> {\n  static readonly defaultProps: Partial<Props> = Defaults.ForAllProps;\n\n  static readonly childContextTypes = {\n    ...Component.childContextTypes,\n    ...SetManagementContextTypes,\n    ...SetViewContextTypes,\n  };\n  getChildContext() {\n    const superContext = super.getChildContext();\n    const childContext: SetManagementContext & SetViewContext = {\n      'mp-set-management': {\n        removeSet: this.model.removeSet,\n        removeSetItem: this.model.removeSetItem,\n        startRenamingSet: this.model.startRenamingSet,\n        fetchSetItems: this.model.fetchSetItems,\n      },\n      'mp-set-management--set-view': {\n        getCurrentSet: () => this.state.openedSet,\n      },\n    };\n    type ChildContext = typeof superContext & typeof childContext;\n    return { ...superContext, ...childContext } as ChildContext;\n  }\n\n  private readonly cancellation = new Cancellation();\n  private model: ViewModel;\n  private pendingState: ViewState;\n\n  constructor(props: Props, context: any) {\n    super(props, context);\n\n    this.state = this.pendingState = ViewModel.loadState(this.props);\n\n    this.model = new ViewModel({\n      props: this.props,\n      cancellation: this.cancellation,\n      getState: () => this.pendingState,\n      setState: (state) => this.setViewState(state),\n      getContext: () => this.context.semanticContext,\n      trigger: (eventType, data) => this.trigger(eventType, data),\n    });\n  }\n\n  /** Disallow to directly call setState() for this component */\n  setState(state: never) {\n    super.setState(state);\n  }\n\n  setViewState(state: ViewState) {\n    this.pendingState = { ...this.pendingState, ...state };\n    super.setState(this.pendingState);\n  }\n\n  componentDidMount() {\n    this.registerEventsListener();\n\n    const placeholder = emptySet(Rdf.iri(this.props.openedSet));\n    this.setViewState({\n      sets: Immutable.Map<string, PlatformSet>().set(placeholder.iri.value, placeholder),\n    });\n    this.model.openAndLoadSet(placeholder.iri);\n  }\n\n  /*\n   * Update data on refresh event.\n   */\n  private registerEventsListener() {\n    this.cancellation\n      .map(\n        listen({\n          eventType: BuiltInEvents.ComponentRefresh,\n          target: this.props.id,\n        })\n      )\n      .onValue(() => this.model.loadSets({ keepItems: false }));\n  }\n\n  private trigger(eventType: SetManagementEventType, data?: any) {\n    trigger({ eventType, source: this.props.id, data });\n  }\n\n  render() {\n    const className = classnames({\n      [CLASS_NAME]: true,\n      [`${CLASS_NAME}--list-view`]: this.state.itemViewMode === 'list',\n      [`${CLASS_NAME}--grid-view`]: this.state.itemViewMode === 'grid',\n    });\n\n    return (\n      <DropArea\n        className={className}\n        shouldReactToDrag={() => !this.state.draggingItem}\n        query={this.props.acceptResourceQuery}\n        onDrop={(iri) => {\n          const targetSet = ViewState.displayedSetIri(this.state);\n          this.model.onDropItemToSet(iri, targetSet);\n        }}\n        dropMessage={<span>Drop items here to add to set \"{<ResourceLabel iri={this.props.openedSet} />}\"</span>}\n      >\n        {this.renderHeader()}\n        {this.renderItems()}\n      </DropArea>\n    );\n  }\n\n  renderHeader() {\n    const set = ViewState.openedSet(this.state);\n    if (!set) {\n      return <Spinner />;\n    }\n\n    const { itemsOrdering, itemViewMode } = this.state;\n    const setHasItems = set.items && set.items.length > 0;\n\n    const reorderProps: ReorderingProps | undefined = setHasItems\n      ? {\n          baseClass: CLASS_NAME,\n          canReorder: setHasItems,\n          isReordering: Boolean(itemsOrdering),\n          onPressReorder: () =>\n            this.setViewState({\n              // toggle reordering mode\n              itemsOrdering: itemsOrdering ? undefined : Ordering.empty,\n            }),\n          onPressReorderApply: this.model.applyItemsOrder,\n        }\n      : undefined;\n\n    return (\n      <div className={`${CLASS_NAME}__single-set-header`}>\n        <div className={`${CLASS_NAME}__single-set-header-top`}>\n          {this.renderCaption(set)}\n          <div className={`${CLASS_NAME}__single-set-header-spacer`} />\n          <SearchAndFilters\n            baseClass={CLASS_NAME}\n            keywordFilter={this.props.keywordFilter}\n            filters={this.props.filters}\n            setIsOpen={true}\n            minInputLength={this.model.minSearchTermLength()}\n            searchText={this.state.search.searchText}\n            filterValues={this.state.search.filterValues}\n            onSearchTextChanged={(searchText) => {\n              this.model.onFilterChanged(true, searchText, this.state.search.filterValues);\n            }}\n            onFilterChanged={(filterValues) => {\n              this.model.onFilterChanged(false, this.state.search.searchText, filterValues);\n            }}\n          />\n        </div>\n        <div className={`${CLASS_NAME}__single-set-header-bottom`}>\n          {this.props.children}\n          <div className={`${CLASS_NAME}__single-set-header-spacer`} />\n          {reorderProps ? <ReorderItemsButton {...reorderProps} /> : null}\n          <ItemViewModeSwitch baseClass={CLASS_NAME} mode={itemViewMode} onModeChanged={this.model.setItemViewMode} />\n        </div>\n        {reorderProps && itemsOrdering ? <ReorderConfirmation {...reorderProps} /> : null}\n      </div>\n    );\n  }\n\n  private renderCaption(set: PlatformSet) {\n    const isEditing = Boolean(set.editing);\n    return (\n      <div className={`${CLASS_NAME}__single-set-caption`}>\n        <div className={`${CLASS_NAME}__single-set-icon`}>\n          <span className=\"fa fa-folder-open\" />\n        </div>\n        {isEditing ? (\n          <EditableLabel\n            editing={set.editing}\n            onEditCompleted={(newName) => this.model.onSetEditCompleted(set, newName)}\n            className={`${CLASS_NAME}__single-set-label`}\n          />\n        ) : (\n          <ResourceLabel iri={this.props.openedSet} className={`${CLASS_NAME}__single-set-label`} />\n        )}\n        {!isEditing ? (\n          <button\n            type=\"button\"\n            title=\"Rename set\"\n            className={`${CLASS_NAME}__single-set-rename-button`}\n            onClick={() => this.model.startRenamingSet(set.iri)}\n          >\n            <span className=\"fa fa-pencil\" />\n          </button>\n        ) : null}\n      </div>\n    );\n  }\n\n  renderItems() {\n    const { itemsOrdering } = this.state;\n\n    let set = ViewState.openedSet(this.state);\n    let highlightedTerm: string | undefined = undefined;\n\n    if (ViewState.isSearchOpened(this.state)) {\n      highlightedTerm = this.state.search.searchText;\n      const results = this.state.search.results;\n      const searchSet = results ? results.get(this.props.openedSet) : undefined;\n      if (searchSet) {\n        set = searchSet;\n      } else {\n        return <div className={`${CLASS_NAME}__search-results-empty`}>No results found</div>;\n      }\n    }\n\n    return (\n      <ItemsView\n        key={'default-set-items'}\n        baseClass={CLASS_NAME}\n        set={set}\n        template={this.model.templateForKind}\n        highlightedTerm={highlightedTerm}\n        onDragStart={this.onDragStart}\n        onDragEnd={this.onDragEnd}\n        itemsOrdering={itemsOrdering}\n        onOrderChanged={(order) => this.setViewState({ itemsOrdering: order })}\n      />\n    );\n  }\n\n  private onDragStart = () => this.setViewState({ draggingItem: true });\n  private onDragEnd = () => this.setViewState({ draggingItem: false });\n}\n\nexport default SingleSet;\n"],"sourceRoot":""}