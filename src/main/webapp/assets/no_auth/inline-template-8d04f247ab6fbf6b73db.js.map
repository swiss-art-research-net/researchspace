{"version":3,"sources":["webpack:///./src/main/web/components/ui/template/InlineTemplate.ts"],"names":["getTemplateString","props","templateIri","template","localScope","markupTemplateScope","partial","getPartial","undefined","source","Error","render","createElement","TemplateItem","this","options","Component","InlineTemplate"],"mappings":"6IAkBA,OAEA,QAEA,SAUA,sF,OAYU,EAAAA,kBAAoB,WAC1B,GAAI,EAAKC,MAAMC,YACb,MAAO,QAAQ,EAAKD,MAAMC,YAAW,MAGvC,GAAI,EAAKD,MAAME,SACb,OAAO,EAAKF,MAAME,SAIpB,IAAMC,EAAa,EAAKH,MAAMI,oBACxBC,EAAUF,EAAaA,EAAWG,WAAW,iBAAcC,EACjE,GAAIF,EACF,OAAOA,EAAQG,OAEf,MAAMC,MAAM,wF,EAIlB,OA/BoC,8BAClC,yBAAAC,OAAA,WACE,OAAO,EAAAC,cACL,EAAAC,aAAc,CACZV,SAAU,CACRM,OAAQK,KAAKd,oBACbe,QAASD,KAAKb,MAAMc,YAyB9B,eA/BA,CAAoC,EAAAC,WAAvB,EAAAC,iBAiCb,UAAeA","file":"inline-template-8d04f247ab6fbf6b73db.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { createElement } from 'react';\n\nimport { Component, ComponentProps } from 'platform/api/components';\n\nimport { TemplateItem } from './TemplateItem';\n\nexport interface InlineTemplateConfig {\n  template?: string\n  templateIri?: string\n  options?: Record<string, any>\n}\n\ntype InlineTemplateProps = InlineTemplateConfig & ComponentProps;\n\nexport class InlineTemplate extends Component<InlineTemplateProps> {\n  render() {\n    return createElement(\n      TemplateItem, {\n        template: {\n          source: this.getTemplateString(),\n          options: this.props.options\n        }\n      }\n    );\n  }\n\n  private getTemplateString = (): string => {\n    if (this.props.templateIri) {\n      return `{{> \"${this.props.templateIri}\"}}`;\n    }\n\n    if (this.props.template) {\n      return this.props.template;\n    }\n\n    // try to get default noResultTemplate \"<template>\" element with id template from the local scope\n    const localScope = this.props.markupTemplateScope;\n    const partial = localScope ? localScope.getPartial('template') : undefined;\n    if (partial) {\n      return partial.source;\n    } else {\n      throw Error(\"<inline-template> requires nested <template id='template'> or 'template' attribute.\");\n    }\n  }\n\n}\n\nexport default InlineTemplate;\n"],"sourceRoot":""}