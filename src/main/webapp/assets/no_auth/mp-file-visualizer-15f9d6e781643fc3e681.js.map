{"version":3,"sources":["webpack:///./src/main/web/components/forms/file-manager/FileVisualizer.tsx"],"names":["IMAGE_TYPES","props","context","cancellation","Cancellation","state","progress","undefined","getFileManager","repository","FileManager","componentDidMount","this","fetchResource","componentWillUnmount","cancelAll","componentWillReceiveProps","iri","map","getFileResource","Rdf","namePredicateIri","mediaTypePredicateIri","observe","value","resource","setState","error","alertState","alert","AlertType","WARNING","message","render","content","resourceIri","indexOf","mediaType","renderImageContent","renderFileContent","renderError","renderEmptyContent","className","styles","FileVisualizer","style","title","fileUrl","getFileUrl","fileName","storage","uploadedImageDepiction","href","src","icon","getFileIcon","key","fileIcon","emptyBody","Spinner","spinner","alertComponent","Alert","Component"],"mappings":"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","file":"mp-file-visualizer-15f9d6e781643fc3e681.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\nimport * as _ from 'lodash';\n\nimport { Cancellation } from 'platform/api/async';\nimport { Component } from 'platform/api/components';\nimport { Rdf } from 'platform/api/rdf';\nimport { FileManager, FileResource } from 'platform/api/services/file-manager';\n\nimport { Alert, AlertConfig, AlertType } from 'platform/components/ui/alert';\nimport { Spinner } from 'platform/components/ui/spinner';\n\nimport * as styles from './FileManager.scss';\n\nconst DEFAULT_TITLE = 'Download file';\nconst IMAGE_TYPES = [\n  'image/gif',\n  'image/jpeg',\n  'image/bmp',\n  'image/png',\n  'image/webp',\n  'image/svg+xml',\n  'image/x-icon',\n];\n\ninterface FileVisualizerState {\n  progress?: number;\n  alertState?: AlertConfig;\n  resource?: FileResource;\n}\n\ninterface FileVisualizerProps {\n  /** IRI of the file resource to generate a visual representation for. */\n  iri: string;\n  /** Additional class names for component root element. */\n  className?: string;\n  /** Additional styles for the wrapping div. */\n  style?: React.CSSProperties;\n  /** Optional text for the wrapping div title. */\n  title?: string;\n  /** ID of the storage where the file is stored. */\n  storage: string;\n  /** Use in case of custom resource definition */\n  namePredicateIri?: string;\n  mediaTypePredicateIri?: string;\n}\n\n/**\n * Visualizer for uploaded files.\n * @example:\n * <mp-file-visualizer\n *  iri='someIri...'\n *  storage='storage-id'\n *  name-predicate-iri='{some-iri}'\n *  media-type-predicate-iri='{some-iri}'>\n * </mp-file-visualizer>\n * where 'iri' is an IRI of a LDP resource created by either the <semantic-form-file-input/> or <mp-file-uploader/>.\n *\n * Requires dedicated ACL permissions to access the REST file upload endpoint.\n */\nexport class FileVisualizer extends Component<FileVisualizerProps, FileVisualizerState> {\n  private readonly cancellation = new Cancellation();\n\n  constructor(props: FileVisualizerProps, context: any) {\n    super(props, context);\n    this.state = { progress: undefined };\n  }\n\n  private getFileManager() {\n    const { repository } = this.context.semanticContext;\n    return new FileManager({ repository });\n  }\n\n  componentDidMount() {\n    this.fetchResource();\n  }\n\n  componentWillUnmount() {\n    this.cancellation.cancelAll();\n  }\n\n  componentWillReceiveProps(props: FileVisualizerProps) {\n    if (props.iri !== this.props.iri) {\n      this.fetchResource(props);\n    }\n  }\n\n  fetchResource(props?: FileVisualizerProps) {\n    props = props || this.props;\n\n    if (props.iri) {\n      this.cancellation\n        .map(\n          this.getFileManager().getFileResource(Rdf.iri(props.iri), {\n            namePredicateIri: this.props.namePredicateIri,\n            mediaTypePredicateIri: this.props.mediaTypePredicateIri,\n          })\n        )\n        .observe({\n          value: (resource) => {\n            this.setState({ resource });\n          },\n          error: (error) => {\n            this.setState({\n              alertState: {\n                alert: AlertType.WARNING,\n                message: `Failed to fetch resource (${error}).`,\n              },\n              progress: null,\n            });\n          },\n        });\n    }\n  }\n\n  render() {\n    const resourceIri = this.props.iri;\n    const { resource } = this.state;\n\n    let content: JSX.Element;\n    if (resource) {\n      const isImage = IMAGE_TYPES.indexOf(resource.mediaType) !== -1;\n      if (isImage) {\n        content = this.renderImageContent(resource);\n      } else {\n        content = this.renderFileContent(resource);\n      }\n    } else if (this.state.alertState) {\n      content = this.renderError();\n    } else if (resourceIri) {\n      content = this.renderEmptyContent();\n    }\n\n    return (\n      <div\n        className={`${styles.FileVisualizer} ${this.props.className ? this.props.className : ''}`}\n        style={this.props.style}\n        title={this.props.title || DEFAULT_TITLE}\n      >\n        {content}\n      </div>\n    );\n  }\n\n  renderImageContent(resource: FileResource) {\n    const fileUrl = FileManager.getFileUrl(resource.fileName, this.props.storage);\n    return (\n      <a className={styles.uploadedImageDepiction} href={fileUrl}>\n        <img src={fileUrl} />\n      </a>\n    );\n  }\n\n  renderFileContent(resource: FileResource) {\n    const icon = getFileIcon(resource.mediaType);\n    const fileUrl = FileManager.getFileUrl(resource.fileName, this.props.storage);\n    return (\n      <a key=\"resource-iri\" href={fileUrl} className={styles.fileIcon}>\n        <i className={icon} aria-hidden=\"true\"></i>\n      </a>\n    );\n  }\n\n  renderEmptyContent() {\n    return (\n      <div className={styles.emptyBody}>\n        <Spinner className={styles.spinner} />\n      </div>\n    );\n  }\n\n  renderError() {\n    return (\n      <div className={styles.emptyBody}>\n        Error\n        <div className={styles.alertComponent}>\n          <Alert {...this.state.alertState}></Alert>\n        </div>\n      </div>\n    );\n  }\n}\nexport default FileVisualizer;\n\nexport function getFileIcon(mediaType: string): string {\n  switch (mediaType) {\n    case 'image/jpeg':\n    case 'image/jpg':\n    case 'image/svg+xml':\n    case 'image/tiff':\n    case 'image/bmp':\n    case 'image/png':\n      return 'fa fa-file-image-o';\n    case 'application/pdf':\n      return 'fa fa-file-pdf-o';\n    case 'application/xml':\n      return 'fa fa-file-excel-o';\n    case 'text/plain':\n      return 'fa fa-file-text';\n    case 'text/html':\n      return 'fa fa-file-text-o';\n    case 'video/mpeg':\n    case 'video/mp4':\n    case 'video/ogg':\n    case 'video/quicktime':\n    case 'video/webm':\n    case 'video/x-ms-wmv':\n    case 'video/x-flv':\n    case 'video/3gpp':\n    case 'video/3gpp2':\n      return 'fa fa-film';\n    default:\n      return 'fa fa-file';\n  }\n}\n"],"sourceRoot":""}