{"version":3,"sources":["webpack:///./src/main/web/components/semantic/search/web-components/KeywordSearch.tsx"],"names":["render","SemanticSearchContext","Consumer","context","KeywordSearchInner","props","Component","keys","Action","initialize","query","SparqlUtil","parseQuerySync","defaultQuery","Maybe","Just","Nothing","queryProp","$property","filter","str","length","minSearchTermLength","debounce","map","buildQuery","defaultQueryProp","_","isEmpty","get","initializers","push","Kefir","constant","merge","onValue","q","setBaseQuery","onKeyPress","event","target","value","baseQuery","token","searchTermVariable","escapeLuceneSyntax","tokenizeLuceneQuery","makeLuceneQuery","SparqlClient","setBindings","state","undefined","componentDidMount","setSearchDomain","this","domain","componentWillReceiveProps","searchProfileStore","isJust","isNothing","placeholder","style","className","FormGroup","controlId","FormControl","onChange","defaultProps","React","KeywordSearch"],"mappings":"6IAkBA,OACA,QACA,QACA,QACA,QAIA,QACA,QACA,SAEA,UAEA,UA+BA,uC,+CAQA,OAR4B,6BAC1B,wBAAAA,OAAA,sBACE,OACE,gBAAC,EAAAC,sBAAsBC,SAAQ,MAC5B,SAACC,GAAY,uBAACC,EAAkB,cAAK,EAAKC,MAAK,CAAEF,QAASA,SAInE,cARA,CAA4B,EAAAG,WAkB5B,cAWE,4BAAYD,GAAZ,MACE,YAAMA,IAAM,K,OAHN,EAAAE,KAAO,EAAAC,SAoCP,EAAAC,WAAa,SAACJ,GACpB,IAAMK,EAAQ,EAAAC,WAAWC,eAAqCP,EAAMK,OAC9DG,EAAeR,EAAMQ,aACvBC,EAAMC,KAAK,EAAAJ,WAAWC,eAAqCP,EAAMQ,eACjEC,EAAME,UAEJC,EAAY,EAAKV,KAAKW,UACzBC,QAAO,SAACC,GAAQ,OAAAA,EAAIC,QAAU,EAAKhB,MAAMiB,uBACzCC,SAAS,EAAKlB,MAAMkB,UACpBC,IAAI,EAAKC,WAAWf,IAEjBgB,EAAmB,EAAKnB,KAAKW,UAChCC,QAAO,SAACC,GAAQ,OAAAf,EAAMQ,cAAgBc,EAAEC,QAAQR,MAChDI,KAAI,WAAM,OAAAX,EAAagB,SAEpBC,EAAe,CAACb,GAClBZ,EAAMQ,cACRiB,EAAaC,KAAKC,EAAMC,SAASpB,EAAagB,OAAQH,GAGxDM,EAAME,MAAMJ,GAAcK,SAAQ,SAACC,GAAM,SAAK/B,MAAMF,QAAQkC,aAAavB,EAAMC,KAAKqB,QAG9E,EAAAE,WAAa,SAACC,GAAwC,SAAKhC,KAAMgC,EAAMC,OAAeC,QAEtF,EAAAhB,WAAa,SAACiB,GAAoC,gBAACC,G,MACnD,UAAEC,EAAA,EAAAA,mBAAoBC,EAAA,EAAAA,mBAAoBC,EAAA,EAAAA,oBAC1CL,EAAQ,EAAA9B,WAAWoC,gBAAgBJ,EAAOE,EAAoBC,GACpE,OAAO,EAAAE,aAAaC,YAAYP,IAAS,MAAKE,GAAqBH,EAAK,MA5DxE,EAAKS,MAAQ,CACXT,WAAOU,G,EA6Db,OA3EiC,kCAkB/B,6BAAAC,kBAAA,WACE,EAAAC,gBAAgBC,KAAKjD,MAAMkD,OAAQD,KAAKjD,MAAMF,SAC9CmD,KAAK7C,WAAW6C,KAAKjD,QAGvB,6BAAAmD,0BAAA,SAA0BnD,GAChB,IAAAF,EAAA,EAAAA,QACJA,EAAQsD,mBAAmBC,QAAUvD,EAAQoD,OAAOI,WACtD,EAAAN,gBAAgBhD,EAAMkD,OAAQpD,IAIlC,6BAAAH,OAAA,WACQ,iBAAE4D,EAAA,EAAAA,YAAaC,EAAA,EAAAA,MAAOC,EAAA,EAAAA,UAC5B,OACE,gBAAC,EAAAC,UAAS,CAACC,UAAU,8BACnB,gBAAC,EAAAC,YAAW,CACVH,UAAWA,EACXD,MAAOA,EACPpB,MAAOa,KAAKJ,MAAMT,MAClBmB,YAAaA,EACbM,SAAUZ,KAAKhB,eAtChB,mBAAA6B,aAA4C,CACjDP,YAAa,wCACbhB,mBAAoB,YACpBtB,oBAAqB,EACrBC,SAAU,IACVsB,oBAAoB,GAqExB,mBA3EA,CAAiCuB,EAAM9D,WA6EvC,UAAe+D","file":"semantic-search-query-keyword-5fc13e093c6e2f6ef316.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\nimport * as Maybe from 'data.maybe';\nimport * as Kefir from 'kefir';\nimport * as _ from 'lodash';\nimport { FormControl, FormGroup } from 'react-bootstrap';\nimport * as SparqlJs from 'sparqljs';\n\nimport { Rdf } from 'platform/api/rdf';\nimport { SparqlUtil, SparqlClient } from 'platform/api/sparql';\nimport { Component } from 'platform/api/components';\nimport { Action } from 'platform/components/utils';\n\nimport { setSearchDomain } from '../commons/Utils';\nimport { SemanticSimpleSearchBaseConfig } from '../../simple-search/Config';\nimport { SemanticSearchContext, InitialQueryContext } from './SemanticSearchApi';\n\nexport interface BaseConfig<T> extends SemanticSimpleSearchBaseConfig {\n  /**\n   * Custom css styles for the input element\n   */\n  style?: T;\n\n  /**\n   * Custom css classes for the input element\n   */\n  className?: string;\n\n  /**\n   * Specify search domain category IRI (full IRI enclosed in <>).\n   * Required, if component is used together with facets.\n   */\n  domain?: string;\n\n  /**\n   * Number of milliseconds to wait after the last keystroke before sending the query.\n   *\n   * @default 300\n   */\n  debounce?: number;\n}\n\nexport interface SemanticSearchKeywordConfig extends BaseConfig<string> {}\n\ninterface KeywordSearchProps extends BaseConfig<React.CSSProperties> {}\n\nclass KeywordSearch extends Component<KeywordSearchProps, {}> {\n  render() {\n    return (\n      <SemanticSearchContext.Consumer>\n        {(context) => <KeywordSearchInner {...this.props} context={context} />}\n      </SemanticSearchContext.Consumer>\n    );\n  }\n}\n\ninterface InnerProps extends KeywordSearchProps {\n  context: InitialQueryContext;\n}\n\ninterface State {\n  value: string;\n}\n\nclass KeywordSearchInner extends React.Component<InnerProps, State> {\n  static defaultProps: Partial<KeywordSearchProps> = {\n    placeholder: 'type to search, minimum 3 symbols ...',\n    searchTermVariable: '__token__',\n    minSearchTermLength: 3,\n    debounce: 300,\n    escapeLuceneSyntax: true,\n  };\n\n  private keys = Action<string>();\n\n  constructor(props: InnerProps) {\n    super(props);\n    this.state = {\n      value: undefined,\n    };\n  }\n\n  componentDidMount() {\n    setSearchDomain(this.props.domain, this.props.context);\n    this.initialize(this.props);\n  }\n\n  componentWillReceiveProps(props: InnerProps) {\n    const { context } = props;\n    if (context.searchProfileStore.isJust && context.domain.isNothing) {\n      setSearchDomain(props.domain, context);\n    }\n  }\n\n  render() {\n    const { placeholder, style, className } = this.props;\n    return (\n      <FormGroup controlId=\"semantic-search-text-input\">\n        <FormControl\n          className={className}\n          style={style}\n          value={this.state.value}\n          placeholder={placeholder}\n          onChange={this.onKeyPress}\n        />\n      </FormGroup>\n    );\n  }\n\n  private initialize = (props: InnerProps) => {\n    const query = SparqlUtil.parseQuerySync<SparqlJs.SelectQuery>(props.query);\n    const defaultQuery = props.defaultQuery\n      ? Maybe.Just(SparqlUtil.parseQuerySync<SparqlJs.SelectQuery>(props.defaultQuery))\n      : Maybe.Nothing<SparqlJs.SelectQuery>();\n\n    const queryProp = this.keys.$property\n      .filter((str) => str.length >= this.props.minSearchTermLength)\n      .debounce(this.props.debounce)\n      .map(this.buildQuery(query));\n\n    const defaultQueryProp = this.keys.$property\n      .filter((str) => props.defaultQuery && _.isEmpty(str))\n      .map(() => defaultQuery.get());\n\n    const initializers = [queryProp];\n    if (props.defaultQuery) {\n      initializers.push(Kefir.constant(defaultQuery.get()), defaultQueryProp);\n    }\n\n    Kefir.merge(initializers).onValue((q) => this.props.context.setBaseQuery(Maybe.Just(q)));\n  };\n\n  private onKeyPress = (event: React.FormEvent<FormControl>) => this.keys((event.target as any).value);\n\n  private buildQuery = (baseQuery: SparqlJs.SelectQuery) => (token: string): SparqlJs.SelectQuery => {\n    const { searchTermVariable, escapeLuceneSyntax, tokenizeLuceneQuery } = this.props;\n    const value = SparqlUtil.makeLuceneQuery(token, escapeLuceneSyntax, tokenizeLuceneQuery);\n    return SparqlClient.setBindings(baseQuery, { [searchTermVariable]: value });\n  };\n}\n\nexport default KeywordSearch;\n"],"sourceRoot":""}