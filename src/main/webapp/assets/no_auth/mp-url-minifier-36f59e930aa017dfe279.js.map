{"version":3,"sources":["webpack:///./src/main/web/components/ui/url-minifier.ts"],"names":["FormControl","createFactory","ReactBootstrap","InputGroup","OverlayTrigger","Popover","Button","props","context","onClick","state","showLink","setState","generateTargetURL","onValue","url","isLoading","gotLink","onError","undefined","this","iri","URLMinifierService","getShortURLForResource","Rdf","semanticContext","repository","makeShortURL","uri","toString","shouldComponentUpdate","nextProps","nextState","refs","show","hide","render","child","Children","only","children","ref","trigger","placement","rootClose","onExit","overlay","id","type","className","value","readOnly","D","span","createElement","CopyToClipboard","text","bsSize","i","cloneElement","assign","disabled","Component","component","URLMinifier","factory"],"mappings":"6IAmBA,OACA,QACA,QACA,SACA,SAEA,SAEA,QACA,UACA,QAEMA,EAAc,EAAAC,cAAcC,EAAeF,aAC3CG,EAAa,EAAAF,cAAcC,EAAeC,YAC1CC,EAAiB,EAAAH,cAAcC,EAAeE,gBAC9CC,EAAU,EAAAJ,cAAcC,EAAeG,SACvCC,EAAS,EAAAL,cAAcC,EAAeI,QAsB5C,cACE,qBAAYC,EAAcC,GAA1B,MACE,YAAMD,EAAOC,IAAQ,K,OAmBvB,EAAAC,QAAU,WACJ,EAAKC,MAAMC,SACb,EAAKC,SAAS,CAAED,UAAU,IAE1B,EAAKE,oBACFC,SAAQ,SAACC,GACR,EAAKH,SAAS,CACZI,WAAW,EACXL,UAAU,EACVM,QAASF,OAGZG,SAAQ,WACP,EAAKN,SAAS,CACZI,WAAW,EACXL,UAAU,EACVM,aAASE,QAlCjB,EAAKT,MAAQ,CACXM,WAAW,EACXL,UAAU,EACVM,aAASE,G,EAkFf,OAxF0B,2BAUhB,sBAAAN,kBAAR,WACE,MAA8B,iBAAnBO,KAAKb,MAAMc,IACbC,EAAmBC,uBACxB,EAAAC,IAAIH,IAAID,KAAKb,MAAMc,KACnBD,KAAKZ,QAAQiB,gBAAgBC,YAGxBJ,EAAmBK,aAAaC,IAAMC,aA0BjD,sBAAAC,sBAAA,SAAsBC,EAAWC,GAM/B,OALKZ,KAAKV,MAAMC,UAAYqB,EAAUrB,SACnCS,KAAKa,KAAc,QAAUC,OACrBd,KAAKV,MAAMC,WAAaqB,EAAUrB,UAC1CS,KAAKa,KAAc,QAAUE,QAEzB,GAGT,sBAAAC,OAAA,sBACQC,EAAQ,EAAAC,SAASC,KAAKnB,KAAKb,MAAMiC,UACvC,OAAOpC,EACL,CACEqC,IAAK,UACLC,QAAS,GACTC,UAAW,SACXC,WAAW,EACXC,OAAQ,WACN,EAAKjC,SAAS,CAAED,UAAU,KAE5BmC,QAASzC,EACP,CAAE0C,GAAI,gBACN5C,EACE,GACAH,EAAY,CAAEgD,KAAM,OAAQC,UAAW,WAAYC,MAAO9B,KAAKV,MAAMO,QAASkC,UAAU,IACxFC,EAAEC,KACA,CAAEJ,UAAW,mBACb,EAAAK,cACEC,EACA,CAAEC,KAAMpC,KAAKV,MAAMC,SAAWS,KAAKV,MAAMO,QAAU,IACnDX,EAAO,CAAEmD,OAAQ,SAAWL,EAAEM,EAAE,CAAET,UAAW,qBAMvD,EAAAU,aACEtB,EACAuB,EAAO,GAAIvB,EAAM9B,MAAO,CACtBsD,SAAUzC,KAAKV,MAAMM,UACrBP,QAASW,KAAKX,aAKxB,YAxFA,CAA0B,EAAAqD,WA2Fb,EAAAC,UAAYC,EACZ,EAAAC,QAAU,EAAAhE,cAAc+D,GACrC,UAAe,EAAAD","file":"mp-url-minifier-36f59e930aa017dfe279.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { createFactory, ReactElement, createElement, cloneElement, Children } from 'react';\nimport * as D from 'react-dom-factories';\nimport * as ReactBootstrap from 'react-bootstrap';\nimport * as CopyToClipboard from 'react-copy-to-clipboard';\nimport * as assign from 'object-assign';\nimport * as Kefir from 'kefir';\nimport * as uri from 'urijs';\n\nimport { Rdf } from 'platform/api/rdf';\nimport * as URLMinifierService from 'platform/api/services/url-minifier';\nimport { Component } from 'platform/api/components';\n\nconst FormControl = createFactory(ReactBootstrap.FormControl);\nconst InputGroup = createFactory(ReactBootstrap.InputGroup);\nconst OverlayTrigger = createFactory(ReactBootstrap.OverlayTrigger);\nconst Popover = createFactory(ReactBootstrap.Popover);\nconst Button = createFactory(ReactBootstrap.Button);\n\nexport interface Props {\n  /** IRI of resource to make minified URL for. */\n  iri?: string;\n}\n\ninterface State {\n  isLoading?: boolean;\n  showLink?: boolean;\n  gotLink?: string;\n}\n\n/**\n * Allow to create and copy minified URL for page.\n * If target resource IRI is not specified then current URL is used instead.\n *\n * @example\n * <mp-url-minifier iri='[[this]]'>\n *   <button class=\"btn btn-default\">Get short URL</button>\n * </mp-url-minifier>\n */\nclass URLMinifier extends Component<Props, State> {\n  constructor(props: Props, context) {\n    super(props, context);\n    this.state = {\n      isLoading: false,\n      showLink: false,\n      gotLink: undefined,\n    };\n  }\n\n  private generateTargetURL(): Kefir.Property<string> {\n    if (typeof this.props.iri === 'string') {\n      return URLMinifierService.getShortURLForResource(\n        Rdf.iri(this.props.iri),\n        this.context.semanticContext.repository\n      );\n    } else {\n      return URLMinifierService.makeShortURL(uri().toString());\n    }\n  }\n\n  onClick = () => {\n    if (this.state.showLink) {\n      this.setState({ showLink: false });\n    } else {\n      this.generateTargetURL()\n        .onValue((url) => {\n          this.setState({\n            isLoading: false,\n            showLink: true,\n            gotLink: url,\n          });\n        })\n        .onError(() => {\n          this.setState({\n            isLoading: false,\n            showLink: false,\n            gotLink: undefined,\n          });\n        });\n    }\n  };\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (!this.state.showLink && nextState.showLink) {\n      (this.refs['trigger'] as any).show();\n    } else if (this.state.showLink && !nextState.showLink) {\n      (this.refs['trigger'] as any).hide();\n    }\n    return true;\n  }\n\n  render(): ReactElement<any> {\n    const child = Children.only(this.props.children) as ReactElement<any>;\n    return OverlayTrigger(\n      {\n        ref: 'trigger',\n        trigger: [],\n        placement: 'bottom',\n        rootClose: true,\n        onExit: () => {\n          this.setState({ showLink: false });\n        },\n        overlay: Popover(\n          { id: 'url-minifier' },\n          InputGroup(\n            {},\n            FormControl({ type: 'text', className: 'input-sm', value: this.state.gotLink, readOnly: true }),\n            D.span(\n              { className: 'input-group-btn' },\n              createElement(\n                CopyToClipboard,\n                { text: this.state.showLink ? this.state.gotLink : '' },\n                Button({ bsSize: 'small' }, D.i({ className: 'fa fa-copy' }))\n              )\n            )\n          )\n        ),\n      },\n      cloneElement(\n        child,\n        assign({}, child.props, {\n          disabled: this.state.isLoading,\n          onClick: this.onClick,\n        })\n      )\n    );\n  }\n}\n\nexport type component = URLMinifier;\nexport const component = URLMinifier;\nexport const factory = createFactory(URLMinifier);\nexport default component;\n"],"sourceRoot":""}