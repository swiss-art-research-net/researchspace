{"version":3,"sources":["webpack:///./src/main/web/components/search/web-components/SemanticSearchContextualizedResult.tsx"],"names":["RelationSelector","render","SemanticSearchContext","Consumer","context","SemanticSearchContextualizedResultInner","props","React","Component","getBindings","state","relation","map","RESULT_VARIABLES","CONTEXT_RELATION_VAR","iri","SEMANTIC_SEARCH_VARIABLES","RELATION_VAR","getOrElse","initialState","profileStore","ranges","relations","_","uniq","flatten","range","getAvailableRelations","isEmpty","Maybe","Nothing","Just","head","rangeCategory","fromNullable","categories","get","relationsFor","domain","valueSeq","toJS","contextSelector","relationsOptions","value","label","className","styles","options","clearable","undefined","optionRenderer","customSuggestionRenderer","tupleTemplate","valueRenderer","customValueRenderer","onChange","selectRelation","placeholder","option","setVisualizationContext","setState","template","createElement","TemplateItem","source","searchProfileStore","Rdf","componentDidMount","this","bindings","Provider","holder","FormGroup","selectorGroup","ControlLabel","Children","only","children","defaultProps","SemanticSearchContextualizedResult"],"mappings":"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","file":"semantic-search-result-context-13a931b14dc47be66930.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2015-2020, Â© Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * @author Artem Kozlov <ak@metaphacts.com>\n */\n\nimport * as React from 'react';\nimport ReactSelect, { ReactSelectProps } from 'react-select';\nimport * as _ from 'lodash';\nimport * as Maybe from 'data.maybe';\nimport { FormGroup, ControlLabel } from 'react-bootstrap';\n\nimport { Rdf } from 'platform/api/rdf';\nimport { TemplateItem } from 'platform/components/ui/template';\n\nimport { RESULT_VARIABLES, SEMANTIC_SEARCH_VARIABLES } from 'platform/components/semantic/search/config/SearchConfig';\nimport { SemanticSearchContext } from 'platform/components/semantic/search/web-components/SemanticSearchApi';\nimport { SearchProfileStore } from 'platform/components/semantic/search/data/profiles/SearchProfileStore';\nimport * as Model from 'platform/components/semantic/search/data/search/Model';\nimport * as styles from './SemanticSearchContextualizedResult.scss';\n\nconst RelationSelector: React.ComponentClass<ReactSelectProps<Model.Relation>> = ReactSelect;\n\ninterface SemanticSearchContextualizedResultProps {\n  ranges: string[];\n  tupleTemplate?: string;\n}\n\n/**\n * Propagates `__contextRelation__` SPARQL variable to search result query.\n * In case of virtual FRs one cane use `FILTER(?__contextRelationPattern__)` placeholder that\n * will be replaced with the corresponding FR pattern.\n */\nclass SemanticSearchContextualizedResult extends React.Component<SemanticSearchContextualizedResultProps> {\n  render() {\n    return (\n      <SemanticSearchContext.Consumer>\n        {(context) => <SemanticSearchContextualizedResultInner {...this.props} context={context} />}\n      </SemanticSearchContext.Consumer>\n    );\n  }\n}\n\ninterface InnerProps extends SemanticSearchContextualizedResultProps {\n  context: SemanticSearchContext;\n}\n\ninterface State {\n  relation?: Data.Maybe<Model.Relation>;\n  relations?: Array<Model.Relation>;\n}\n\nclass SemanticSearchContextualizedResultInner extends React.Component<InnerProps, State> {\n  static defaultProps = {\n    tupleTemplate: `\n        <span title=\"{{label}}\" style=\"display: flex; align-items: center; height: 40px;\">\n          {{label}}\n          {{#ifCond hasRange.thumbnail.length '>' 0}}\n          <img style=\"margin-left: auto; width: 30px; margin-right: 10px\"\n               src=\"{{hasRange.thumbnail}}\"/>\n          {{else}}\n            <span style=\"margin-left: 10px\">  [{{hasRange.label}}]</span>\n          {{/ifCond}}\n        </span>\n    `,\n  };\n\n  constructor(props: InnerProps) {\n    super(props);\n    const initialState = this.props.context.searchProfileStore\n      .map((profileStore) => this.initialState(profileStore, props.ranges.map(Rdf.iri)))\n      .getOrElse({\n        relation: Maybe.Nothing<Model.Relation>(),\n        relations: [],\n      });\n\n    this.state = initialState;\n  }\n\n  private getBindings = () => {\n    return this.state.relation\n      .map((relation) => ({\n        [RESULT_VARIABLES.CONTEXT_RELATION_VAR]: relation.iri,\n        [SEMANTIC_SEARCH_VARIABLES.RELATION_VAR]: relation.iri,\n      }))\n      .getOrElse({} as any);\n  };\n\n  componentDidMount() {\n    this.props.context.setVisualizationContext(this.state.relation);\n  }\n\n  render() {\n    const context: SemanticSearchContext = { ...this.props.context, bindings: this.getBindings() };\n    return (\n      <SemanticSearchContext.Provider value={context}>\n        <div className={styles.holder}>\n          <FormGroup className={styles.selectorGroup}>\n            <ControlLabel>Visualization Context</ControlLabel>\n            {this.props.context.searchProfileStore.map(this.contextSelector).getOrElse(<span />)}\n          </FormGroup>\n          {React.Children.only(this.props.children)}\n        </div>\n      </SemanticSearchContext.Provider>\n    );\n  }\n\n  private initialState = (profileStore: SearchProfileStore, ranges: Array<Rdf.Iri>): State => {\n    const relations = _.uniq(_.flatten(ranges.map((range) => this.getAvailableRelations(profileStore, range))));\n    return {\n      relations: relations,\n      relation: _.isEmpty(relations) ? Maybe.Nothing<Model.Relation>() : Maybe.Just(_.head(relations)),\n    };\n  };\n\n  private getAvailableRelations = (profileStore: SearchProfileStore, range: Rdf.Iri): Array<Model.Relation> => {\n    const rangeCategory = Maybe.fromNullable(profileStore.categories.get(range));\n    return profileStore\n      .relationsFor({\n        domain: this.props.context.domain,\n        range: rangeCategory,\n      })\n      .valueSeq()\n      .toJS();\n  };\n\n  private contextSelector = (profileStore: SearchProfileStore) => {\n    const relationsOptions = _.map(this.state.relations, (relation) => ({ value: relation, label: relation.label }));\n    return (\n      <RelationSelector\n        className={styles.contextSelector}\n        options={relationsOptions}\n        clearable={false}\n        value={this.state.relation.getOrElse(undefined)}\n        optionRenderer={this.customSuggestionRenderer(this.props.tupleTemplate)}\n        valueRenderer={this.customValueRenderer(this.props.tupleTemplate)}\n        onChange={this.selectRelation}\n        placeholder=\"Select Context\"\n      />\n    );\n  };\n\n  private selectRelation = (option: { value: Model.Relation }) => {\n    const relation = Maybe.Just(option.value);\n    this.props.context.setVisualizationContext(relation);\n    this.setState({ relation });\n  };\n\n  private customValueRenderer = (template: string) => (option: any) => {\n    return React.createElement(TemplateItem, {\n      template: {\n        source: template,\n        options: option,\n      },\n    });\n  };\n\n  private customSuggestionRenderer = (template: string) => (option: any) => {\n    return React.createElement(TemplateItem, {\n      template: {\n        source: template,\n        options: option.value,\n      },\n    });\n  };\n}\n\nexport default SemanticSearchContextualizedResult;\n"],"sourceRoot":""}