{"version":3,"sources":["webpack:///./src/main/web/components/sparql-editor/SparqlQueryEditor.tsx","webpack:///./src/main/web/components/query-editor/index.ts","webpack:///./src/main/web/components/sparql-editor/YASRTable.ts"],"names":["props","context","cancellation","Cancellation","executeQuery","query","setState","isExecuting","parsedQuery","SparqlUtil","parseQuery","addRecentQueries","type","sendSparqlQuery","queryType","confirmAndExecuteSparqlUpdate","e","message","_","startsWith","alertState","Just","alert","AlertType","DANGER","SparqlClient","sparqlQuery","stringToSparqlQueryForm","getQueryContext","onAny","event","yasr","setResponse","value","Nothing","executeSparqlUpdate","onValue","v","onError","contextOverride","state","selectedRepository","repository","undefined","semanticContext","queryEditorContext","setQuery","getCurrentUrl","search","render","Row","className","styles","sparqlQueryEditor","Col","componentClass","md","SparqlEditor","ref","editor","backdrop","this","onChange","silent","autocompleters","persistent","map","config","createElement","Alert","getOrElse","controls","HasPermission","permission","Permissions","queryEditorSelectEndpoint","renderRepositorySelector","toLdp","VocabPlatform","QueryTemplateContainer","Button","onClick","getOverlaySystem","show","SaveQueryModal","KEY","onHide","hide","bsStyle","disabled","resultHolder","style","visibility","options","repositoryStatus","push","key","forEach","running","repositorySelector","FormControl","repositorySelectorDropdown","target","componentDidMount","element","findDOMNode","YASR","plugins","registerOutput","YASRTable","outputPlugins","output","useGoogleCharts","persistency","results","contextQuery","getQuery","initialQuery","isNothing","hasSearch","queryChanges","getRepositoryStatus","componentWillUnmount","cancelAll","hideDialog","onConfirm","confirm","ConfirmationDialog","contextTypes","ContextTypes","Component","SparqlQueryEditor","Modal","bsSize","Header","closeButton","Title","Body","SemanticContextProvider","QueryTemplate","defaultQuery","drawnContainer","showLabels","resultsPerPage","name","draw","onChangeShowLabels","onChangeResultsPerPage","parentContainer","ReactDOM","unmountComponentAtNode","parentElement","removeChild","document","appendChild","table","jsonResult","toggleLabel","prevState","componentDidUpdate","prevProps","prefetchAndShowLabels","Boolean","Table","data","Either","Right","sparqlJsonToSelectResult","numberOfDisplayedRows","maybe","layout","tupleTemplate","prefetchLabels","showLiteralDatatype","showCopyToClipboardButton","buttonLabel","D","div","button","classnames","label","selected","clearable","width","marginRight","getAsJson","canHandleResults","getVariables","length","getPriority","getDownloadInfo","getContent","bindingsToCsv","filename","contentType","buttonTitle"],"mappings":"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","file":"mp-sparql-query-editor-92c482cd40b1a8a74107.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\nimport { Component, ReactInstance, ReactNode, createElement } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport { Just, Nothing } from 'data.maybe';\nimport * as Immutable from 'immutable';\nimport { Row, Col, Button, FormControl, Modal, ModalDialogProps } from 'react-bootstrap';\nimport * as YASR from 'yasgui-yasr';\nimport * as _ from 'lodash';\nimport * as SparqlJs from 'sparqljs';\n\nimport { SparqlClient, SparqlUtil, QueryContext } from 'platform/api/sparql';\nimport { getCurrentUrl } from 'platform/api/navigation';\nimport { ContextTypes, ComponentContext, SemanticContextProvider } from 'platform/api/components';\nimport { Cancellation } from 'platform/api/async';\nimport { VocabPlatform } from 'platform/api/rdf/vocabularies';\nimport { getRepositoryStatus } from 'platform/api/services/repository';\nimport { Permissions } from 'platform/api/services/security';\n\nimport { HasPermission } from 'platform/components/security/HasPermission';\nimport { getOverlaySystem } from 'platform/components/ui/overlay';\nimport { Alert, AlertConfig, AlertType } from 'platform/components/ui/alert';\nimport { ConfirmationDialog } from 'platform/components/ui/confirmation-dialog';\nimport { QueryTemplate } from 'platform/components/query-editor';\n\nimport { YASRTable } from './YASRTable';\nimport { SparqlEditor } from './SparqlEditor';\n\nimport { ContextTypes as EditorContextTypes, ComponentContext as EditorContext } from './SparqlQueryEditorContext';\n\nimport * as styles from './SparqlQueryEditor.scss';\nimport 'yasgui-yasr/dist/yasr.css';\n\nexport interface SparqlQueryEditorProps {}\n\ninterface State {\n  readonly isExecuting?: boolean;\n  readonly alertState?: Data.Maybe<AlertConfig>;\n  readonly query?: string;\n  readonly repositoryStatus?: Immutable.Map<string, boolean>;\n  readonly selectedRepository?: string;\n}\n\nexport class SparqlQueryEditor extends Component<SparqlQueryEditorProps, State> {\n  static readonly contextTypes = { ...ContextTypes, ...EditorContextTypes };\n  context: ComponentContext & EditorContext;\n\n  private readonly cancellation = new Cancellation();\n\n  private editor: SparqlEditor;\n  private resultHolder: ReactInstance;\n\n  private yasr: YasguiYasr.Yasr;\n\n  constructor(props: SparqlQueryEditorProps, context: any) {\n    super(props, context);\n    this.state = {\n      isExecuting: false,\n      alertState: Nothing<AlertConfig>(),\n      selectedRepository: getCurrentUrl().search(true)['repository'],\n    };\n  }\n\n  render() {\n    return (\n      <Row className={styles.sparqlQueryEditor}>\n        <Col componentClass=\"div\" md={12}>\n          <SparqlEditor\n            ref={(editor) => (this.editor = editor)}\n            backdrop={this.state.isExecuting}\n            query={this.state.query}\n            onChange={(query) => {\n              this.context.queryEditorContext.setQuery(query.value, { silent: true });\n              this.setState({ query: query.value });\n            }}\n            autocompleters={['variables', 'prefixes']}\n            persistent={() => 'sparqlEndpoint'}\n          />\n          {this.state.alertState.map((config) => createElement(Alert, config)).getOrElse(null)}\n          <div className={`form-inline ${styles.controls}`}>\n            <HasPermission permission={Permissions.queryEditorSelectEndpoint}>\n              {this.renderRepositorySelector()}\n            </HasPermission>\n            <HasPermission\n              permission={Permissions.toLdp('container', VocabPlatform.QueryTemplateContainer, 'create', 'owner')}\n            >\n              <Button\n              className='btn-grey'\n                onClick={() =>\n                  getOverlaySystem().show(\n                    SaveQueryModal.KEY,\n                    <SaveQueryModal\n                      query={this.state.query}\n                      onHide={() => getOverlaySystem().hide(SaveQueryModal.KEY)}\n                    ></SaveQueryModal>\n                  )\n                }\n              >\n                Save\n              </Button>\n            </HasPermission>\n            <Button\n              bsStyle=\"primary\"\n              disabled={this.state.isExecuting}\n              onClick={() => this.executeQuery(this.state.query)}\n            >\n              {this.state.isExecuting ? 'Executing...' : 'Execute'}\n            </Button>\n          </div>\n          <div\n            ref={(resultHolder) => (this.resultHolder = resultHolder)}\n            style={{ visibility: this.state.isExecuting ? 'hidden' : 'visible' }}\n          />\n        </Col>\n      </Row>\n    );\n  }\n\n  private renderRepositorySelector() {\n    const options: ReactNode[] = [];\n    if (this.state.repositoryStatus) {\n      options.push(\n        <option key=\"@empty\" value=\"\">\n          (from context)\n        </option>\n      );\n      this.state.repositoryStatus.forEach((running, repository) =>\n        options.push(\n          <option key={repository} disabled={!running} value={repository}>\n            {repository}\n          </option>\n        )\n      );\n    } else {\n      options.push(\n        <option key=\"@loading\" value=\"\">\n          Loading...\n        </option>\n      );\n    }\n\n    return (\n      <span className={styles.repositorySelector}>\n        <label>\n          Repository:\n          <FormControl\n            componentClass=\"select\"\n            className={styles.repositorySelectorDropdown}\n            value={this.state.selectedRepository}\n            onChange={(e) =>\n              this.setState({\n                selectedRepository: (e.target as HTMLSelectElement).value,\n              })\n            }\n          >\n            {options}\n          </FormControl>\n        </label>\n      </span>\n    );\n  }\n\n  componentDidMount() {\n    const element = findDOMNode(this.resultHolder) as Element;\n    delete YASR.plugins['table'];\n    delete YASR.plugins['pivot'];\n    delete YASR.plugins['gChart'];\n    delete YASR.plugins['leaflet'];\n    YASR.registerOutput('yasrTable', (yasr) => {\n      return YASRTable(yasr);\n    });\n    this.yasr = YASR(element, {\n      outputPlugins: ['rawResponse', 'yasrTable', 'boolean', 'error'],\n      output: 'yasrTable',\n      useGoogleCharts: false,\n      persistency: {\n        results: false,\n      },\n    });\n\n    const { queryEditorContext } = this.context;\n    const contextQuery = queryEditorContext.getQuery();\n    const initialQuery = contextQuery.getOrElse(this.editor.getQuery().value);\n    if (contextQuery.isNothing) {\n      queryEditorContext.setQuery(initialQuery, { silent: true });\n    }\n    this.setState({ query: initialQuery });\n\n    // if a query is supplied via request parameter,\n    // we are going to execute it after the component has been mounted\n    if (getCurrentUrl().hasSearch('query')) {\n      this.executeQuery(initialQuery);\n    }\n\n    this.cancellation.map(queryEditorContext.queryChanges).onValue(({ query, repository }) => {\n      this.setState({\n        alertState: Nothing<AlertConfig>(),\n        query: query.getOrElse(undefined),\n        selectedRepository: repository.getOrElse(''),\n      });\n    });\n\n    this.cancellation.map(getRepositoryStatus()).onValue((repositoryStatus) => this.setState({ repositoryStatus }));\n  }\n\n  componentWillUnmount() {\n    this.cancellation.cancelAll();\n  }\n\n  private executeQuery = (query: string) => {\n    this.setState({ isExecuting: true });\n\n    try {\n      const parsedQuery = SparqlUtil.parseQuery(query);\n      this.addRecentQueries(query);\n      switch (parsedQuery.type) {\n        case 'query':\n          this.sendSparqlQuery(parsedQuery, parsedQuery.queryType);\n          break;\n        case 'update':\n          this.confirmAndExecuteSparqlUpdate(parsedQuery);\n          break;\n      }\n    } catch (e) {\n      const message = _.startsWith(e.message, 'Parse error') ? 'Query Syntax Error. ' + e.message : e.message;\n      this.setState({\n        isExecuting: false,\n        alertState: Just<AlertConfig>({\n          alert: AlertType.DANGER,\n          message: message,\n        }),\n      });\n    }\n  };\n\n  private sendSparqlQuery = (query: SparqlJs.SparqlQuery, queryType: string) => {\n    SparqlClient.sparqlQuery(query, SparqlClient.stringToSparqlQueryForm[queryType], this.getQueryContext()).onAny(\n      (event) => {\n        if (event.type === 'value') {\n          this.yasr.setResponse(event.value);\n          this.setState({\n            alertState: Nothing<AlertConfig>(),\n            isExecuting: false,\n          });\n        } else if (event.type === 'error') {\n          // seems typings are wrong in kefir\n          const e: any = event as any;\n          this.setState({\n            isExecuting: false,\n            alertState: Just<AlertConfig>({\n              alert: AlertType.DANGER,\n              message: e.value['statusText'] ? e.value['statusText'] : e.value['message'],\n            }),\n          });\n        }\n      }\n    );\n  };\n\n  private confirmAndExecuteSparqlUpdate(query: SparqlJs.SparqlQuery) {\n    const dialogRef = 'update-confirmation';\n    const { context } = this.getQueryContext();\n    const hideDialog = () => getOverlaySystem().hide(dialogRef);\n    const props = {\n      message: `Do you want to execute the UPDATE operations on the \"${context.repository}\" repository?`,\n      onHide: () => {\n        hideDialog();\n        this.setState({ isExecuting: false });\n      },\n      onConfirm: (confirm) => {\n        hideDialog();\n        if (confirm) {\n          this.executeSparqlUpdate(query);\n        } else {\n          this.setState({ isExecuting: false });\n        }\n      },\n    };\n    getOverlaySystem().show(dialogRef, createElement(ConfirmationDialog, props));\n  }\n\n  private executeSparqlUpdate = (query: SparqlJs.SparqlQuery) => {\n    SparqlClient.executeSparqlUpdate(query as SparqlJs.Update, this.getQueryContext())\n      .onValue((v) => {\n        this.setState({\n          alertState: Nothing<AlertConfig>(),\n          isExecuting: false,\n        });\n        this.yasr.setResponse('SPARQL Update Operation executed!');\n      })\n      .onError((e: Error) => {\n        this.setState({\n          isExecuting: false,\n          alertState: Just<AlertConfig>({\n            alert: AlertType.DANGER,\n            message: e.message,\n          }),\n        });\n      });\n  };\n\n  private getQueryContext = () => {\n    const contextOverride: Partial<QueryContext> = this.state.selectedRepository\n      ? { repository: this.state.selectedRepository }\n      : undefined;\n    return { context: { ...this.context.semanticContext, ...contextOverride } };\n  };\n\n  private addRecentQueries = (query: string) => {\n    const repository = this.state.selectedRepository || undefined;\n    this.context.queryEditorContext.setQuery(query, { repository });\n  };\n}\n\ninterface SaveQueryModalProps extends ModalDialogProps {\n  query: string;\n}\n\nclass SaveQueryModal extends Component<SaveQueryModalProps, {}> {\n  static readonly KEY = 'SparqlQueryEditor-SaveQuery';\n  render() {\n    const { onHide, query } = this.props;\n    return (\n      <Modal show={true} onHide={onHide} bsSize=\"large\">\n        <Modal.Header closeButton={true}>\n          <Modal.Title>Save Query</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <SemanticContextProvider repository=\"assets\">\n            <QueryTemplate defaultQuery={query} />\n          </SemanticContextProvider>\n        </Modal.Body>\n      </Modal>\n    );\n  }\n}\n\nexport default SparqlQueryEditor;\n","/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nexport * from './QueryTemplateTypes';\nexport * from './QueryTemplate';\n","/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { Component, createElement } from 'react';\nimport * as D from 'react-dom-factories';\nimport * as ReactDOM from 'react-dom';\nimport * as Either from 'data.either';\nimport * as maybe from 'data.maybe';\nimport * as bindingsToCsv from 'yasgui-yasr/src/bindingsToCsv.js';\nimport * as classnames from 'classnames';\nimport ReactSelect, { Option } from 'react-select';\n\nimport { SparqlClient } from 'platform/api/sparql';\nimport { Table, TableLayout } from 'platform/components/semantic/table';\n\ninterface YasrObject {\n  results: {\n    getVariables: () => any;\n    getAsJson: () => any;\n  };\n}\n\ninterface Props {\n  showLabels: boolean;\n  resultsPerPage: number;\n  onChangeShowLabels: (showLabels: boolean) => void;\n  onChangeResultsPerPage: (resultsPerPage: number) => void;\n}\n\ninterface State {\n  showLabels?: boolean;\n  resultsPerPage?: number;\n}\n\n/**\n * Returns a table component with a toggle button to toggle between fetch labels on/off\n */\nfunction table(jsonResult) {\n  return class extends Component<Props, State> {\n    constructor(props, context) {\n      super(props, context);\n      this.state = { showLabels: props.showLabels, resultsPerPage: props.resultsPerPage };\n    }\n\n    componentDidUpdate(prevProps: Props, prevState: State) {\n      const { showLabels, resultsPerPage } = this.state;\n      if (showLabels !== prevState.showLabels) {\n        this.props.onChangeShowLabels(showLabels);\n      }\n      if (resultsPerPage !== prevState.resultsPerPage) {\n        this.props.onChangeResultsPerPage(resultsPerPage);\n      }\n    }\n\n    render() {\n      const { resultsPerPage } = this.state;\n      const prefetchAndShowLabels = Boolean(this.state.showLabels);\n      const table = createElement(Table, {\n        key: 'sparql-endpoint-result-table',\n        data: Either.Right<any[], SparqlClient.SparqlSelectResult>(\n          <SparqlClient.SparqlSelectResult>SparqlClient.sparqlJsonToSelectResult(jsonResult)\n        ),\n        numberOfDisplayedRows: maybe.Nothing<number>(),\n        layout: maybe.Just<TableLayout>({\n          options: { resultsPerPage },\n          tupleTemplate: maybe.Nothing<string>(),\n          showLabels: prefetchAndShowLabels,\n          prefetchLabels: prefetchAndShowLabels,\n        }),\n        showLiteralDatatype: true,\n        showCopyToClipboardButton: true,\n      });\n      const buttonLabel = prefetchAndShowLabels ? 'Fetch Labels: ON' : 'Fetch Labels: OFF';\n      const className = prefetchAndShowLabels ? 'btn-success' : 'btn-danger';\n      return D.div(\n        {className: 'sparql-endpoint-result-table'},\n        D.button(\n          {\n            key: 'sparql-endpoint-label-toogle-button',\n            className: classnames('pull-right btn', className),\n            onClick: this.toggleLabel,\n          },\n          buttonLabel\n        ),\n        createElement(ReactSelect, {\n          value: resultsPerPage,\n          options: [\n            { value: 10, label: '10' },\n            { value: 20, label: '20' },\n            { value: 25, label: '25' },\n            { value: 100, label: '100' },\n          ],\n          onChange: (selected) =>\n            this.setState({\n              resultsPerPage: (selected as Option<number>).value,\n            }),\n          clearable: false,\n          className: 'pull-right',\n          style: { width: 70, marginRight: 10 },\n        }),\n        table\n      );\n    }\n\n    toggleLabel = () => {\n      this.setState((prevState, props) => ({ showLabels: prevState.showLabels ? false : true }));\n    };\n  };\n}\n\n/**\n * Plugin for YASR sparql result visualization library.\n * Implementing the contract as descripted here: http://yasr.yasgui.org/doc/#addingPlugin\n */\nexport function YASRTable(yasr: YasrObject) {\n  let showLabels = false;\n  let resultsPerPage = 10;\n  let drawnContainer: HTMLElement | undefined;\n\n  return {\n    name: 'Table',\n    //  Draw the results. Use the yasr object to retrieve the SPARQL response\n    draw: function () {\n      const props = {\n        showLabels,\n        resultsPerPage,\n        onChangeShowLabels: (value) => (showLabels = value),\n        onChangeResultsPerPage: (value) => (resultsPerPage = value),\n      };\n      const parentContainer: HTMLElement = yasr['resultsContainer'][0];\n      if (drawnContainer) {\n        ReactDOM.unmountComponentAtNode(drawnContainer);\n        if (drawnContainer.parentElement === parentContainer) {\n          parentContainer.removeChild(drawnContainer);\n        }\n      }\n      drawnContainer = document.createElement('div');\n      parentContainer.appendChild(drawnContainer);\n      ReactDOM.render(createElement(table(yasr.results.getAsJson()), props), drawnContainer);\n    },\n\n    canHandleResults: function (): boolean {\n      return (\n        yasr.results &&\n        yasr.results.getVariables &&\n        yasr.results.getVariables() &&\n        yasr.results.getVariables().length > 0\n      );\n    },\n\n    getPriority: function (): number {\n      return 10;\n    },\n\n    getDownloadInfo: function () {\n      if (!yasr.results) {\n        return null;\n      } else {\n        const json = yasr.results.getAsJson();\n\n        if (!json) {\n          return null;\n        }\n\n        return {\n          getContent: function () {\n            return bindingsToCsv(json);\n          },\n          filename: 'queryResults.csv',\n          contentType: 'text/csv',\n          buttonTitle: 'Download as CSV',\n        };\n      }\n    },\n  };\n}\n"],"sourceRoot":""}