{"version":3,"sources":["webpack:///./src/main/web/components/forms/file-manager/FileUploader.tsx"],"names":["props","context","cancellation","Cancellation","state","alertState","undefined","progress","progressText","uploadCompleted","getFileManager","repository","FileManager","componentWillUnmount","this","cancelAll","onDropAccepted","files","setState","file","map","uploadFileAsResource","storage","generateIriQuery","resourceQuery","contextUri","onProgress","percent","observe","value","resource","addNotification","message","level","alert","AlertType","SUCCESS","name","error","WARNING","response","text","onDropRejected","acceptPattern","type","render","Alert","className","styles","FileUploader","ReactBootstrap","ProgressBar","active","min","max","now","label","Dropzone","accept","bind","noClick","Boolean","mpDropZonePlaceHolder","children","placeholder","alertComponent","Component"],"mappings":"6IAkBA,OAEA,QAEA,QACA,SACA,UACA,UAEA,UACA,QACA,SAiFA,cAGE,sBAAYA,EAA0BC,GAAtC,MACE,YAAMD,EAAOC,IAAQ,K,OAHN,EAAAC,aAAe,IAAI,EAAAC,aAIlC,EAAKC,MAAQ,CACXC,gBAAYC,EACZC,cAAUD,EACVE,kBAAcF,EACdG,iBAAiB,G,EA6GvB,OAtHkC,4BAaxB,uBAAAC,eAAR,WACU,IAAAC,EAAA,6BAAAA,WACR,OAAO,IAAI,EAAAC,YAAY,CAAED,WAAU,KAGrC,uBAAAE,qBAAA,WACEC,KAAKZ,aAAaa,aAGpB,uBAAAC,eAAA,SAAeC,GAAf,WACEH,KAAKI,SAAS,CAAEb,WAAY,KAAME,SAAU,KAAME,iBAAiB,IACnE,IAAMU,EAAOF,EAAM,GAEnBH,KAAKZ,aACFkB,IACCN,KAAKJ,iBAAiBW,qBAAqB,CACzCF,KAAMA,EACNG,QAASR,KAAKd,MAAMsB,QACpBC,iBAAkBT,KAAKd,MAAMuB,iBAC7BC,cAAeV,KAAKd,MAAMwB,cAC1BC,WAAYX,KAAKd,MAAMyB,WACvBC,WAAY,SAACC,GACX,SAAKT,SAAS,CACZX,SAAUoB,EACVnB,aAAc,sBAIrBoB,QAAQ,CACPC,MAAO,SAACC,GACN,EAAAC,gBAAgB,CACdC,QAAS,6BACTC,MAAO,YAET,EAAKf,SAAS,CACZb,WAAY,CACV6B,MAAO,EAAAC,UAAUC,QACjBJ,QAAS,SAASb,EAAKkB,KAAI,qCAE7B9B,SAAU,KACVE,iBAAiB,KAGrB6B,MAAO,SAACA,GACN,EAAAP,gBAAgB,CACdC,QAAS,yBACTC,MAAO,UAET,EAAKf,SAAS,CACZb,WAAY,CACV6B,MAAO,EAAAC,UAAUI,QACjBP,QAAS,0BAA0Bb,EAAKkB,KAAI,MAAMC,EAAK,MAAMA,EAAME,SAASC,MAE9ElC,SAAU,KACVE,iBAAiB,QAM3B,uBAAAiC,eAAA,SAAezB,GACb,IAAME,EAAOF,EAAM,GACnBH,KAAKI,SAAS,CACZb,WAAY,CACV6B,MAAO,EAAAC,UAAUI,QACjBP,QAAS,oCAAoClB,KAAKd,MAAM2C,cAAa,SAASxB,EAAKyB,MAErFrC,SAAU,KACVE,iBAAiB,KAIrB,uBAAAoC,OAAA,WACE,IAAMX,EAAQpB,KAAKV,MAAMC,WAAa,gBAAC,EAAAyC,MAAK,cAAKhC,KAAKV,MAAMC,aAAuB,KAEnF,OACE,uBAAK0C,UAAWC,EAAOC,cACpBnC,KAAKV,MAAMG,SACV,gBAAC2C,EAAeC,YAAW,CACzBJ,UAAWC,EAAOzC,SAClB6C,QAAQ,EACRC,IAAK,EACLC,IAAK,IACLC,IAAKzC,KAAKV,MAAMG,SAChBiD,MAAO1C,KAAKV,MAAMI,eAElB,KACJ,gBAAC,EAAAiD,SAAQ,CACPC,OAAQ5C,KAAKd,MAAM2C,cACnB3B,eAAgBF,KAAKE,eAAe2C,KAAK7C,MACzC4B,eAAgB5B,KAAK4B,eAAeiB,KAAK7C,MACzC8C,QAASC,QAAQ/C,KAAKV,MAAMG,WAE5B,uBAAKwC,UAAW,GAAGC,EAAOc,uBACvBhD,KAAKd,MAAM+D,UACV,uBAAKhB,UAAWC,EAAOc,uBACpBhD,KAAKd,MAAMgE,aAAe,sCAKlC9B,EAAQ,uBAAKa,UAAWC,EAAOiB,gBAAiB/B,GAAe,OAIxE,aAtHA,CAAkC,EAAAgC,WAArB,EAAAjB,eAwHb,UAAeA","file":"mp-file-uploader-1d21436c5d0582eabb76.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\nimport * as _ from 'lodash';\nimport * as ReactBootstrap from 'react-bootstrap';\n\nimport { Component } from 'platform/api/components';\nimport { Alert, AlertConfig, AlertType } from 'platform/components/ui/alert';\nimport { Dropzone } from 'platform/components/ui/dropzone';\nimport { FileManager } from 'platform/api/services/file-manager';\n\nimport * as styles from './FileManager.scss';\nimport { Cancellation } from 'platform/api/async';\nimport { addNotification } from 'platform/components/ui/notification';\n\ninterface FileUploaderState {\n  alertState?: AlertConfig;\n  progress?: number;\n  progressText?: string;\n  uploadCompleted?: boolean;\n}\n\ninterface FileUploaderProps {\n  /**\n   * Allow specific types of files.\n   * Several pattern can be concatenated by a comma.\n   * See https://github.com/okonet/attr-accept for more information\n   * @example\n   *  'application/json,video/*'\n   */\n  acceptPattern?: string;\n\n  /**\n   * Context variable that will be propagated to the `resourceQuery` and `generateIdQuery`.\n   */\n  contextUri: string;\n\n  /**\n   * SPARQL select query to generate a unique IRI for the file to be uploaded.\n   * The must have exactly one projection variable *?newId* with the IRI.\n   *\n   * Also the query can use some variables which will be bound with values at runtime:\n   * * __contextUri__ - see `contextUri` property\n   * * __mediaType__ - Medai type: jpg, pdf. By default = 'auto'xw\n   * * __fileName__ - Name of the file\n   */\n  generateIriQuery?: string;\n\n  /**\n   * SPARQL construct query to generate additional meta-data which will be stored toghether with the file meta-data.\n   *\n   * Also the query can use some variables which will be bound with values at runtime:\n   * * __contextUri__ - see `contextUri` property\n   * * __resourceIri__ - IRI generated with `generateIdQuery`\n   * * __mediaType__ - Medai type: jpg, pdf. By default = 'auto'\n   * * __fileName__ - Name of the file\n   */\n  resourceQuery?: string;\n\n  /**\n   * Placeholder for the dropzone. If html child components of the mp-file-uploader are defined, those will be be used as dropzone placeholder.\n   */\n  placeholder?: string;\n\n  /**\n   * ID of the storage to upload the file to.\n   */\n  storage: string;\n}\n\n/**\n * File uploader which uploads a file into a storage and\n * creates RDF meta-data, which is managed as a LDP resource.\n * @example:\n * <mp-file-uploader\n *   placeholder=\"Please drag&drop your image-file here\"\n *   accept-pattern='image/*'\n *   resource-query='\n *    CONSTRUCT {\n *      ?__resourceIri__ a <${VocabPlatform.fileTypePredicate}>.\n *      ?__resourceIri__ <${VocabPlatform.fileNamePredicate}> ?__fileName__.\n *      ?__resourceIri__ <${VocabPlatform.mediaTypePredicate}> ?__mediaType__.\n *      ?__resourceIri__ <${VocabPlatform.fileContextPredicate}> ?__contextUri__.\n *    } WHERE {}\n *   '\n *   generate-iri-query='\n *     SELECT ?resourceIri WHERE {\n *       BIND(URI(CONCAT(STR(?__contextUri__), \"/\", ?__fileName__)) as ?resourceIri)\n *     }\n *   '\n *   context-uri='[[this]]'\n *   storage='file-storage'\n * ></mp-file-uploader>\n */\nexport class FileUploader extends Component<FileUploaderProps, FileUploaderState> {\n  private readonly cancellation = new Cancellation();\n\n  constructor(props: FileUploaderProps, context: any) {\n    super(props, context);\n    this.state = {\n      alertState: undefined,\n      progress: undefined,\n      progressText: undefined,\n      uploadCompleted: false,\n    };\n  }\n\n  private getFileManager() {\n    const { repository } = this.context.semanticContext;\n    return new FileManager({ repository });\n  }\n\n  componentWillUnmount() {\n    this.cancellation.cancelAll();\n  }\n\n  onDropAccepted(files: File[]) {\n    this.setState({ alertState: null, progress: null, uploadCompleted: false });\n    const file = files[0];\n\n    this.cancellation\n      .map(\n        this.getFileManager().uploadFileAsResource({\n          file: file,\n          storage: this.props.storage,\n          generateIriQuery: this.props.generateIriQuery,\n          resourceQuery: this.props.resourceQuery,\n          contextUri: this.props.contextUri,\n          onProgress: (percent) =>\n            this.setState({\n              progress: percent,\n              progressText: 'Uploading ...',\n            }),\n        })\n      )\n      .observe({\n        value: (resource) => {\n          addNotification({\n            message: 'File succesfully uploaded.',\n            level: 'success',\n          });\n          this.setState({\n            alertState: {\n              alert: AlertType.SUCCESS,\n              message: `File \"${file.name}\" has been successfully uploaded.`,\n            },\n            progress: null,\n            uploadCompleted: true,\n          });\n        },\n        error: (error) => {\n          addNotification({\n            message: 'Failed to upload file.',\n            level: 'error',\n          });\n          this.setState({\n            alertState: {\n              alert: AlertType.WARNING,\n              message: `Failed to upload file \"${file.name}\": ${error} - ${error.response.text}`,\n            },\n            progress: null,\n            uploadCompleted: false,\n          });\n        },\n      });\n  }\n\n  onDropRejected(files: File[]) {\n    const file = files[0];\n    this.setState({\n      alertState: {\n        alert: AlertType.WARNING,\n        message: `Incompatible file type: expected ${this.props.acceptPattern}, got ${file.type}`,\n      },\n      progress: null,\n      uploadCompleted: false,\n    });\n  }\n\n  render() {\n    const alert = this.state.alertState ? <Alert {...this.state.alertState}></Alert> : null;\n\n    return (\n      <div className={styles.FileUploader}>\n        {this.state.progress ? (\n          <ReactBootstrap.ProgressBar\n            className={styles.progress}\n            active={true}\n            min={0}\n            max={100}\n            now={this.state.progress}\n            label={this.state.progressText}\n          ></ReactBootstrap.ProgressBar>\n        ) : null}\n        <Dropzone\n          accept={this.props.acceptPattern}\n          onDropAccepted={this.onDropAccepted.bind(this)}\n          onDropRejected={this.onDropRejected.bind(this)}\n          noClick={Boolean(this.state.progress)}\n        >\n          <div className={`${styles.mpDropZonePlaceHolder}`}>\n            {this.props.children || (\n              <div className={styles.mpDropZonePlaceHolder}>\n                {this.props.placeholder || 'Please drag&drop your file here.'}\n              </div>\n            )}\n          </div>\n        </Dropzone>\n        {alert ? <div className={styles.alertComponent}>{alert}</div> : null}\n      </div>\n    );\n  }\n}\n\nexport default FileUploader;\n"],"sourceRoot":""}