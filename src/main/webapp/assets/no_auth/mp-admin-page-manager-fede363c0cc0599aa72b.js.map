{"version":3,"sources":["webpack:///./src/main/web/components/admin/page-manager/PageManager.ts"],"names":["FILTER","ReactSelect","createFactory","Button","ReactBootstrap","ButtonToolbar","props","state","filterPages","v","ALL","filterAll","NONE","filterNone","MODIFIEDTODAY","filterModifiedToday","selected","_","forEach","data","row","push","setState","selectedPages","isLoading","filter","moment","date","isSame","getTable","griddleOptions","onRowClick","onChange","bind","resultsPerPage","rowMetadata","bodyCssClassName","getRowClass","selectOptions","className","multi","options","value","label","optionRenderer","o","clearable","allowCreate","autoload","clearAllText","clearValueText","delimiter","disabled","ignoreCase","matchPos","matchProp","noResultsText","searchable","placeholder","onFilter","colStyle","display","alignItems","paddingRight","D","div","createElement","Table","ref","key","numberOfDisplayedRows","maybe","Just","Either","Left","columnConfiguration","variableName","displayName","cellTemplate","layout","tupleTemplate","Nothing","style","gridTemplateColumns","marginTop","width","b","length","flexGrow","paddingLeft","type","bsSize","bsStyle","onClick","onClickExportSelected","onClickDeleteSelected","Alert","alert","map","config","getOrElse","AlertType","message","isEmpty","filterPool","plug","Kefir","constant","onHide","getOverlaySystem","hide","onConfirm","confirm","deleteSelectedPages","show","ConfirmationDialog","PageService","deleteTemplateRevisions","onValue","success","window","location","reload","onError","err","Error","response","text","exportTemplateRevisions","res","filename","disposition","header","indexOf","matches","exec","replace","blob","Blob","fileSaver","saveAs","some","info","sameRevision","addOrRemoveSelected","item","isUndefined","pool","render","this","isJust","TemplateItem","template","source","get","Spinner","componentWillMount","getAllTemplateInfos","Component","first","second","appId","iri","revision","PageManager"],"mappings":"qIAsDKA,E,QAnCL,OACA,QAEA,QACA,QACA,QACA,UACA,QACA,QAEA,UACA,UAGA,SACA,UACA,SACA,SACA,SACA,SACA,SAEMC,EAAc,EAAAC,cAAc,WAC5BC,EAAS,EAAAD,cAAcE,EAAeD,QACtCE,EAAgB,EAAAH,cAAcE,EAAeC,gBAWnD,SAAKL,GACH,mBACA,iBACA,qCAHF,CAAKA,MAAM,KAMX,kBAGE,qBAAYM,EAAWC,GAAvB,MACE,YAAMD,EAAOC,IAAM,K,OAuCb,EAAAC,YAAc,SAACC,GACrB,OAAQA,GACN,KAAKT,EAAOU,IACV,EAAKC,YACL,MACF,KAAKX,EAAOY,KACV,EAAKC,aACL,MACF,KAAKb,EAAOc,cACV,EAAKC,sBACL,MACF,QACE,EAAKF,eAIH,EAAAF,UAAY,WAClB,IAAMK,EAA2B,GACjCC,EAAEC,QAAQ,EAAKX,MAAMY,MAAM,SAACC,GAC1BJ,EAASK,KAAKD,MAEhB,EAAKE,SAAS,CACZC,cAAeP,EACfQ,WAAW,EACXC,OAAQzB,EAAOU,OAIX,EAAAK,oBAAsB,WAC5B,IAAMC,EAA2B,GACjCC,EAAEC,QAAQ,EAAKX,MAAMY,MAAM,SAACC,GACtBM,EAAON,EAAIO,MAAMC,OAAOF,IAAU,QACpCV,EAASK,KAAKD,MAGlB,EAAKE,SAAS,CACZC,cAAeP,EACfQ,WAAW,EACXC,OAAQzB,EAAOc,iBAIX,EAAAD,WAAa,WACnB,EAAKS,SAAS,CACZC,cAAe,GACfC,WAAW,EACXC,OAAQzB,EAAOY,QAIX,EAAAiB,SAAW,WAEjB,IAyBMC,EAAiB,CAErBC,WAAY,EAAKC,SAASC,KAAK,GAC/BC,eAAgB,GAChBC,YAAa,CAAEC,iBAAkB,EAAKC,YAAYJ,KAAK,KAEnDK,EAAgB,CACpBC,UAAW,iCACXC,OAAO,EACPC,QAAS,CACP,CAAEC,MAAO1C,EAAOY,KAAM+B,MAAO,QAC7B,CAAED,MAAO1C,EAAOU,IAAKiC,MAAO,OAC5B,CAAED,MAAO1C,EAAOc,cAAe6B,MAAO,mBAExCC,eAAgB,SAACC,GAAM,OAAAA,EAAEF,OACzBG,WAAW,EACXC,aAAa,EACbC,UAAU,EACVC,aAAc,aACdC,eAAgB,gBAChBC,UAAW,IACXC,UAAU,EACVC,YAAY,EACZC,SAAU,MACVC,UAAW,MACXC,cAAe,GACfC,YAAY,EACZC,YAAa,SACb1B,SAAU,EAAK2B,SACfjB,MAAO,EAAKnC,MAAMkB,QAUdmC,EAA0B,CAC9BC,QAAS,OACTC,WAAY,SACZC,aAAc,QAahB,OAAOC,EAAEC,IACP,CAAE1B,UAAW,wBAAyBP,SAAU,EAAKA,SAASC,KAAK,IACnE,EAAAiC,cAAc,EAAAC,MAAO,CACnBC,IAAK,YACLC,IAAK,QACLC,sBAAuBC,EAAMC,KAAK,IAClCrD,KAAMsD,EAAOC,KAA6C,EAAKnE,MAAMY,MACrEwD,oBAvFwC,CAC1C,CACEC,aAAc,MACdC,YAAa,OACbC,aAAc,uEAEhB,CACEF,aAAc,QACdC,YAAa,cAEf,CACED,aAAc,WACdC,YAAa,YAEf,CACED,aAAc,SACdC,YAAa,WAEf,CACED,aAAc,OACdC,YAAa,gBACbC,aAAc,kCAmEdC,OAAQR,EAAMC,KAAS,CAAE/B,QAASX,EAAgBkD,cAAeT,EAAMU,cAEzEjB,EAAEC,IACA,CAAEiB,MAnC0B,CAE9BrB,QAAS,OACTsB,oBAAqB,+BACrBrB,WAAY,SACZsB,UAAW,OACXC,MAAO,QA6BchB,IAAK,kBACxBL,EAAEC,IAAI,CAAEiB,MAAOtB,GACbI,EAAEC,IAAI,CAACiB,MArBgB,CAC3BnB,aAAc,SAoBY,mBACtBC,EAAEsB,EAAE,GAAI,EAAK/E,MAAMgB,cAAcgE,SAEnCvB,EAAEC,IAAI,GACJD,EAAEC,IAAI,CAACiB,MAAOtB,EAAUS,IAAK,KAAM,iBACjCL,EAAEC,IAAK,CAACiB,MA7BuB,CACrCM,SAAU,GA4B4BnB,IAAK,KAAMpE,EAAYqC,MAG3D0B,EAAEC,IACA,GACA5D,EACE,CAAC6E,MA7B2B,CAClCrB,QAAS,OACT4B,YAAa,SA4BPtF,EACE,CACEuF,KAAM,SACNC,OAAQ,QACRC,QAAS,UACTC,QAAS,EAAKC,uBAEhB,mBAEF3F,EACE,CACEuF,KAAM,SACNC,OAAQ,QACRC,QAAS,SACTC,QAAS,EAAKE,sBACd3C,SAAU,EAAK7C,MAAMgB,cAAcgE,SAAW,EAAKhF,MAAMY,KAAKoE,QAEhE,qBAIR,EAAArB,cAAc,EAAA8B,MAAO,EAAKzF,MAAM0F,MAAMC,KAAI,SAACC,GAAW,OAAAA,KAAQC,UAAU,CAAEH,MAAO,EAAAI,UAAUzF,KAAM0F,QAAS,SAKtG,EAAA3C,SAAW,SAAC3C,GAClB,IAAM0B,EAAQzB,EAAEsF,QAAQvF,GAAYhB,EAAOY,KAAOI,EAAS0B,MAC3D,EAAK8D,WAAWC,KAAKC,EAAMC,SAAiBjE,KAGtC,EAAAqD,sBAAwB,WAC9B,IACMa,OAAS,WAAM,SAAAC,mBAAmBC,KADtB,0BAEZxG,EAAQ,CACZgG,QAAS,gDACTM,OACAG,UAAW,SAACC,GACVJ,SACII,GACF,EAAKC,wBAKX,EAAAJ,mBAAmBK,KAbD,wBAaiB,EAAAhD,cAAc,EAAAiD,mBAAoB7G,KAG/D,EAAA2G,oBAAsB,WAC5B,EAAAG,YAAYC,wBAAwB,EAAK9G,MAAMgB,eAC5C+F,SAAQ,SAACC,GACJA,GACFC,OAAOC,SAASC,YAGnBC,SAAQ,SAACC,GACR,SAAKtG,SAAS,CACZE,WAAW,EACXyE,MAAO1B,EAAMC,KAAK,EAAAqD,MAAMD,EAAIE,SAASC,aAKrC,EAAAjC,sBAAwB,WAC9B,EAAAsB,YAAYY,wBAAwB,EAAKzH,MAAMgB,eAC5C+F,SAAQ,SAACW,GACR,IAAIC,EAAW,GACTC,EAAcF,EAAIG,OAAO,uBAC/B,GAAID,IAAsD,IAAvCA,EAAYE,QAAQ,cAAsB,CAC3D,IACMC,EADgB,yCACQC,KAAKJ,GACpB,MAAXG,GAAmBA,EAAQ,KAC7BJ,EAAWI,EAAQ,GAAGE,QAAQ,QAAS,KAG3C,IAAM9C,EAAOuC,EAAIG,OAAO,gBAClBK,EAAO,IAAIC,KAAK,CAACT,EAAS,IAAY,UAAI,CAAEvC,KAAMA,IACxDiD,EAAUC,OAAOH,EAAMP,MAExBP,SAAQ,SAACC,GACR,SAAKtG,SAAS,CACZE,WAAW,EACXyE,MAAO1B,EAAMC,KAAK,EAAAqD,MAAMD,UAKxB,EAAAvF,YAAc,SAAClB,GAErB,OADgB,EAAKZ,MAAMgB,cAAcsH,MAAK,SAACC,GAAS,OAAAC,aAAaD,EAAM3H,MAC1D,aAAe,IAG1B,EAAA6H,oBAAsB,SAACC,GAC7B,IAAI1H,EAAgB,EAAKhB,MAAMgB,cAE7BA,EADEA,EAAcsH,MAAK,SAACC,GAAS,OAAAC,aAAaD,EAAMG,MAClC1H,EAAcE,QAAO,SAACqH,GAAS,OAACC,aAAaD,EAAMG,MAEnD,EAAH,eAAO1H,EAAe,CAAA0H,IAErC,EAAK3H,SAAS,CAAEE,WAAW,EAAOD,cAAa,KAGzC,EAAAS,SAAW,SAACZ,GACdH,EAAEiI,YAAY9H,IAAQH,EAAEiI,YAAY9H,EAAId,QAG5C,EAAK0I,oBAAoB5H,EAAId,MAAMa,OA7SnC,EAAKZ,MAAQ,CACXiB,WAAW,EACXD,cAAe,GACfE,OAAQzB,EAAOY,KACfqF,MAAO1B,EAAMU,UACb2C,IAAKrD,EAAMU,WAEb,EAAKuB,WAAaE,EAAMyC,OACxB,EAAK3C,WAAWc,SAAQ,SAAC7G,GAAM,SAAKD,YAAYC,M,EAuSpD,OApTiC,2BAgBxB,sBAAA2I,OAAP,WACE,OAAIC,KAAK9I,MAAMqH,IAAI0B,OACV,EAAApF,cAAc,EAAAqF,aAAc,CAAEC,SAAU,CAAEC,OAAQJ,KAAK9I,MAAMqH,IAAI8B,SAEtEL,KAAK9I,MAAMiB,UACN,EAAA0C,cAAc,EAAAyF,SAGhBN,KAAKxH,YAGP,sBAAA+H,mBAAP,sBACE,EAAAxC,YAAYyC,sBACTvC,SAAQ,SAACW,GACR,EAAK3G,SAAS,CACZE,WAAW,EACXL,KAAM8G,OAGTN,SAAQ,SAACC,GACR,SAAKtG,SAAS,CACZE,WAAW,EACXoG,IAAKrD,EAAMC,KAAKoD,SA8Q1B,YApTA,CAAiC,EAAAkC,WAsTjC,SAASf,aAAagB,EAAqBC,GACzC,OAAOD,EAAME,QAAUD,EAAOC,OAASF,EAAMG,MAAQF,EAAOE,KAAOH,EAAMI,WAAaH,EAAOG,SAvTlF,EAAAC,cA0Tb,UAAeA","file":"mp-admin-page-manager-fede363c0cc0599aa72b.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { createFactory, createElement, Component, CSSProperties } from 'react';\nimport * as D from 'react-dom-factories';\n\nimport * as maybe from 'data.maybe';\nimport * as _ from 'lodash';\nimport * as ReactBootstrap from 'react-bootstrap';\nimport * as Either from 'data.either';\nimport * as Kefir from 'kefir';\nimport * as moment from 'moment';\nimport * as request from 'platform/api/http';\nimport * as fileSaver from 'file-saver';\nimport ReactSelectComponent from 'react-select';\n\nimport { SparqlClient } from 'platform/api/sparql';\nimport { PageService, RevisionInfo, TemplateInfo } from 'platform/api/services/page';\nimport { Table, TableColumnConfiguration } from 'platform/components/semantic/table';\nimport { TemplateItem } from 'platform/components/ui/template';\nimport { Error, Alert, AlertType, AlertConfig } from 'platform/components/ui/alert';\nimport { Spinner } from 'platform/components/ui/spinner';\nimport { getOverlaySystem } from 'platform/components/ui/overlay';\nimport { ConfirmationDialog } from 'platform/components/ui/confirmation-dialog';\n\nconst ReactSelect = createFactory(ReactSelectComponent);\nconst Button = createFactory(ReactBootstrap.Button);\nconst ButtonToolbar = createFactory(ReactBootstrap.ButtonToolbar);\n\ninterface PageAdminState {\n  isLoading: boolean;\n  data?: ReadonlyArray<TemplateInfo>;\n  selectedPages?: ReadonlyArray<RevisionInfo>;\n  filter?: FILTER;\n  alert?: Data.Maybe<AlertConfig>;\n  err?: Data.Maybe<string>;\n}\n\nenum FILTER {\n  NONE,\n  ALL,\n  MODIFIEDTODAY,\n}\n\nexport class PageManager extends Component<{}, PageAdminState> {\n  private filterPool: Kefir.Pool<FILTER>;\n\n  constructor(props: {}, state: PageAdminState) {\n    super(props, state);\n    this.state = {\n      isLoading: true,\n      selectedPages: [],\n      filter: FILTER.NONE,\n      alert: maybe.Nothing<AlertConfig>(),\n      err: maybe.Nothing<string>(),\n    };\n    this.filterPool = Kefir.pool<FILTER>();\n    this.filterPool.onValue((v) => this.filterPages(v));\n  }\n\n  public render() {\n    if (this.state.err.isJust) {\n      return createElement(TemplateItem, { template: { source: this.state.err.get() } });\n    }\n    if (this.state.isLoading) {\n      return createElement(Spinner);\n    }\n\n    return this.getTable();\n  }\n\n  public componentWillMount() {\n    PageService.getAllTemplateInfos()\n      .onValue((res) => {\n        this.setState({\n          isLoading: false,\n          data: res,\n        });\n      })\n      .onError((err) =>\n        this.setState({\n          isLoading: false,\n          err: maybe.Just(err),\n        })\n      );\n  }\n\n  private filterPages = (v: FILTER) => {\n    switch (v) {\n      case FILTER.ALL:\n        this.filterAll();\n        break;\n      case FILTER.NONE:\n        this.filterNone();\n        break;\n      case FILTER.MODIFIEDTODAY:\n        this.filterModifiedToday();\n        break;\n      default:\n        this.filterNone();\n    }\n  };\n\n  private filterAll = () => {\n    const selected: RevisionInfo[] = [];\n    _.forEach(this.state.data, (row) => {\n      selected.push(row);\n    });\n    this.setState({\n      selectedPages: selected,\n      isLoading: false,\n      filter: FILTER.ALL,\n    });\n  };\n\n  private filterModifiedToday = () => {\n    const selected: RevisionInfo[] = [];\n    _.forEach(this.state.data, (row) => {\n      if (moment(row.date).isSame(moment(), 'day')) {\n        selected.push(row);\n      }\n    });\n    this.setState({\n      selectedPages: selected,\n      isLoading: false,\n      filter: FILTER.MODIFIEDTODAY,\n    });\n  };\n\n  private filterNone = () => {\n    this.setState({\n      selectedPages: [],\n      isLoading: false,\n      filter: FILTER.NONE,\n    });\n  };\n\n  private getTable = () => {\n    type ColumnConfiguration = TableColumnConfiguration & { variableName: keyof TemplateInfo };\n    const columnConfig: ColumnConfiguration[] = [\n      {\n        variableName: 'iri',\n        displayName: 'Page',\n        cellTemplate: \"<semantic-link iri='{{iri}}' getlabel=false>{{iri}}</semantic-link>\",\n      },\n      {\n        variableName: 'appId',\n        displayName: 'Source app',\n      },\n      {\n        variableName: 'revision',\n        displayName: 'Revision',\n      },\n      {\n        variableName: 'author',\n        displayName: 'Creator',\n      },\n      {\n        variableName: 'date',\n        displayName: 'Last Modified',\n        cellTemplate: \"{{dateTimeFormat date 'LLL'}}\",\n      },\n    ];\n\n    const griddleOptions = {\n      // isMultipleSelection: true,\n      onRowClick: this.onChange.bind(this),\n      resultsPerPage: 10,\n      rowMetadata: { bodyCssClassName: this.getRowClass.bind(this) },\n    };\n    const selectOptions = {\n      className: 'dataset-selector__multi-select',\n      multi: false,\n      options: [\n        { value: FILTER.NONE, label: 'None' },\n        { value: FILTER.ALL, label: 'All' },\n        { value: FILTER.MODIFIEDTODAY, label: 'Modified today' },\n      ],\n      optionRenderer: (o) => o.label,\n      clearable: true,\n      allowCreate: false,\n      autoload: true,\n      clearAllText: 'Remove all',\n      clearValueText: 'Remove filter',\n      delimiter: '|',\n      disabled: false,\n      ignoreCase: true,\n      matchPos: 'any',\n      matchProp: 'any',\n      noResultsText: '',\n      searchable: false,\n      placeholder: 'Filter',\n      onChange: this.onFilter,\n      value: this.state.filter,\n    };\n    const rowStyle: CSSProperties = {\n\n      display: 'grid',\n      gridTemplateColumns: '1fr 1.5fr fit-content(100px)',\n      alignItems: 'center',\n      marginTop: '10px',\n      width: '100%',\n    };\n    const colStyle: CSSProperties = {\n      display: 'flex',\n      alignItems: 'center',\n      paddingRight: '20px',\n    };\n    const selectContainer: CSSProperties = {\n      flexGrow: 1,\n    };\n    const title: CSSProperties = {\n      paddingRight: '20px',\n    };\n    const toolbarStyle: CSSProperties = {\n      display: 'flex',\n      paddingLeft: '20px',\n    };\n\n    return D.div(\n      { className: 'mph-page-admin-widget', onChange: this.onChange.bind(this) },\n      createElement(Table, {\n        ref: 'table-ref',\n        key: 'table',\n        numberOfDisplayedRows: maybe.Just(10),\n        data: Either.Left<any[], SparqlClient.SparqlSelectResult>(this.state.data as any[]),\n        columnConfiguration: columnConfig,\n        layout: maybe.Just<{}>({ options: griddleOptions, tupleTemplate: maybe.Nothing<string>() }),\n      }),\n      D.div(\n        { style: rowStyle, key: 'selected-pages' },\n        D.div({ style: colStyle }, \n          D.div({style: title}, 'Selected pages:'),\n          D.b({}, this.state.selectedPages.length)\n        ),\n        D.div({}, \n          D.div({style: colStyle, key: '1'}, 'Select pages: ',\n            D.div( {style: selectContainer, key: '2'}, ReactSelect(selectOptions))\n          ),\n        ),\n        D.div(\n          {},\n          ButtonToolbar(\n            {style: toolbarStyle},\n            Button(\n              {\n                type: 'submit',\n                bsSize: 'small',\n                bsStyle: 'primary',\n                onClick: this.onClickExportSelected,\n              },\n              'Export Selected'\n            ),\n            Button(\n              {\n                type: 'submit',\n                bsSize: 'small',\n                bsStyle: 'danger',\n                onClick: this.onClickDeleteSelected,\n                disabled: this.state.selectedPages.length === this.state.data.length,\n              },\n              'Delete Selected'\n            )\n          ),\n      ),\n      createElement(Alert, this.state.alert.map((config) => config).getOrElse({ alert: AlertType.NONE, message: '' })),\n      ) \n    );\n  };\n\n  private onFilter = (selected: { value: any; label: string }) => {\n    const value = _.isEmpty(selected) ? FILTER.NONE : selected.value;\n    this.filterPool.plug(Kefir.constant<FILTER>(value));\n  };\n\n  private onClickDeleteSelected = () => {\n    const dialogRef = 'deletion-confirmation';\n    const onHide = () => getOverlaySystem().hide(dialogRef);\n    const props = {\n      message: 'Do you want to delete the selected templates?',\n      onHide,\n      onConfirm: (confirm) => {\n        onHide();\n        if (confirm) {\n          this.deleteSelectedPages();\n        }\n      },\n    };\n\n    getOverlaySystem().show(dialogRef, createElement(ConfirmationDialog, props));\n  };\n\n  private deleteSelectedPages = () => {\n    PageService.deleteTemplateRevisions(this.state.selectedPages)\n      .onValue((success: boolean) => {\n        if (success) {\n          window.location.reload();\n        }\n      })\n      .onError((err) =>\n        this.setState({\n          isLoading: false,\n          alert: maybe.Just(Error(err.response.text)),\n        })\n      );\n  };\n\n  private onClickExportSelected = () => {\n    PageService.exportTemplateRevisions(this.state.selectedPages)\n      .onValue((res: request.Response) => {\n        let filename = '';\n        const disposition = res.header['content-disposition'];\n        if (disposition && disposition.indexOf('attachment') !== -1) {\n          const filenameRegex = /filename[^;=\\n]*=((['']).*?\\2|[^;\\n]*)/;\n          const matches = filenameRegex.exec(disposition);\n          if (matches != null && matches[1]) {\n            filename = matches[1].replace(/['']/g, '');\n          }\n        }\n        const type = res.header['content-type'];\n        const blob = new Blob([res['xhr']['response']], { type: type });\n        fileSaver.saveAs(blob, filename);\n      })\n      .onError((err: string) =>\n        this.setState({\n          isLoading: false,\n          alert: maybe.Just(Error(err)),\n        })\n      );\n  };\n\n  private getRowClass = (data: TemplateInfo): string => {\n    const hasPage = this.state.selectedPages.some((info) => sameRevision(info, data));\n    return hasPage ? 'bg-success' : '';\n  };\n\n  private addOrRemoveSelected = (item: RevisionInfo) => {\n    let selectedPages = this.state.selectedPages;\n    if (selectedPages.some((info) => sameRevision(info, item))) {\n      selectedPages = selectedPages.filter((info) => !sameRevision(info, item));\n    } else {\n      selectedPages = [...selectedPages, item];\n    }\n    this.setState({ isLoading: false, selectedPages });\n  };\n\n  private onChange = (row: { props?: { data: TemplateInfo } } | undefined): void => {\n    if (_.isUndefined(row) || _.isUndefined(row.props)) {\n      return;\n    }\n    this.addOrRemoveSelected(row.props.data);\n  };\n}\n\nfunction sameRevision(first: RevisionInfo, second: RevisionInfo) {\n  return first.appId === second.appId && first.iri === second.iri && first.revision === second.revision;\n}\n\nexport default PageManager;\n"],"sourceRoot":""}