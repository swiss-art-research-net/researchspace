{"version":3,"sources":["webpack:///./node_modules/public-encrypt/mgf.js","webpack:///./node_modules/public-encrypt/xor.js","webpack:///./node_modules/public-encrypt/withPublic.js","webpack:///./node_modules/public-encrypt/browser.js","webpack:///./node_modules/public-encrypt/publicEncrypt.js","webpack:///./node_modules/public-encrypt/privateDecrypt.js"],"names":["createHash","Buffer","i2ops","c","out","allocUnsafe","writeUInt32BE","module","exports","seed","len","t","alloc","i","length","concat","update","digest","slice","xor","a","b","BN","withPublic","paddedMsg","key","from","toRed","mont","modulus","redPow","publicExponent","fromRed","toArray","publicEncrypt","privateDecrypt","privateEncrypt","buf","publicDecrypt","parseKeys","randomBytes","mgf","crt","publicKey","msg","reverse","padding","oaep","k","byteLength","mLen","iHash","hLen","hLen2","Error","ps","dblen","maskedDb","maskedSeed","pkcs1","nonZero","num","cache","cur","cmp","privateKey","enc","zBuffer","db","compare","dif","Math","min","p1","status","toString"],"mappings":"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","file":"npm.public-encrypt-83cb3a7969f514e3646f.js","sourcesContent":["var createHash = require('create-hash')\nvar Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function (seed, len) {\n  var t = Buffer.alloc(0)\n  var i = 0\n  var c\n  while (t.length < len) {\n    c = i2ops(i++)\n    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()])\n  }\n  return t.slice(0, len)\n}\n\nfunction i2ops (c) {\n  var out = Buffer.allocUnsafe(4)\n  out.writeUInt32BE(c, 0)\n  return out\n}\n","module.exports = function xor (a, b) {\n  var len = a.length\n  var i = -1\n  while (++i < len) {\n    a[i] ^= b[i]\n  }\n  return a\n}\n","var BN = require('bn.js')\nvar Buffer = require('safe-buffer').Buffer\n\nfunction withPublic (paddedMsg, key) {\n  return Buffer.from(paddedMsg\n    .toRed(BN.mont(key.modulus))\n    .redPow(new BN(key.publicExponent))\n    .fromRed()\n    .toArray())\n}\n\nmodule.exports = withPublic\n","exports.publicEncrypt = require('./publicEncrypt')\nexports.privateDecrypt = require('./privateDecrypt')\n\nexports.privateEncrypt = function privateEncrypt (key, buf) {\n  return exports.publicEncrypt(key, buf, true)\n}\n\nexports.publicDecrypt = function publicDecrypt (key, buf) {\n  return exports.privateDecrypt(key, buf, true)\n}\n","var parseKeys = require('parse-asn1')\nvar randomBytes = require('randombytes')\nvar createHash = require('create-hash')\nvar mgf = require('./mgf')\nvar xor = require('./xor')\nvar BN = require('bn.js')\nvar withPublic = require('./withPublic')\nvar crt = require('browserify-rsa')\nvar Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function publicEncrypt (publicKey, msg, reverse) {\n  var padding\n  if (publicKey.padding) {\n    padding = publicKey.padding\n  } else if (reverse) {\n    padding = 1\n  } else {\n    padding = 4\n  }\n  var key = parseKeys(publicKey)\n  var paddedMsg\n  if (padding === 4) {\n    paddedMsg = oaep(key, msg)\n  } else if (padding === 1) {\n    paddedMsg = pkcs1(key, msg, reverse)\n  } else if (padding === 3) {\n    paddedMsg = new BN(msg)\n    if (paddedMsg.cmp(key.modulus) >= 0) {\n      throw new Error('data too long for modulus')\n    }\n  } else {\n    throw new Error('unknown padding')\n  }\n  if (reverse) {\n    return crt(paddedMsg, key)\n  } else {\n    return withPublic(paddedMsg, key)\n  }\n}\n\nfunction oaep (key, msg) {\n  var k = key.modulus.byteLength()\n  var mLen = msg.length\n  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()\n  var hLen = iHash.length\n  var hLen2 = 2 * hLen\n  if (mLen > k - hLen2 - 2) {\n    throw new Error('message too long')\n  }\n  var ps = Buffer.alloc(k - mLen - hLen2 - 2)\n  var dblen = k - hLen - 1\n  var seed = randomBytes(hLen)\n  var maskedDb = xor(Buffer.concat([iHash, ps, Buffer.alloc(1, 1), msg], dblen), mgf(seed, dblen))\n  var maskedSeed = xor(seed, mgf(maskedDb, hLen))\n  return new BN(Buffer.concat([Buffer.alloc(1), maskedSeed, maskedDb], k))\n}\nfunction pkcs1 (key, msg, reverse) {\n  var mLen = msg.length\n  var k = key.modulus.byteLength()\n  if (mLen > k - 11) {\n    throw new Error('message too long')\n  }\n  var ps\n  if (reverse) {\n    ps = Buffer.alloc(k - mLen - 3, 0xff)\n  } else {\n    ps = nonZero(k - mLen - 3)\n  }\n  return new BN(Buffer.concat([Buffer.from([0, reverse ? 1 : 2]), ps, Buffer.alloc(1), msg], k))\n}\nfunction nonZero (len) {\n  var out = Buffer.allocUnsafe(len)\n  var i = 0\n  var cache = randomBytes(len * 2)\n  var cur = 0\n  var num\n  while (i < len) {\n    if (cur === cache.length) {\n      cache = randomBytes(len * 2)\n      cur = 0\n    }\n    num = cache[cur++]\n    if (num) {\n      out[i++] = num\n    }\n  }\n  return out\n}\n","var parseKeys = require('parse-asn1')\nvar mgf = require('./mgf')\nvar xor = require('./xor')\nvar BN = require('bn.js')\nvar crt = require('browserify-rsa')\nvar createHash = require('create-hash')\nvar withPublic = require('./withPublic')\nvar Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function privateDecrypt (privateKey, enc, reverse) {\n  var padding\n  if (privateKey.padding) {\n    padding = privateKey.padding\n  } else if (reverse) {\n    padding = 1\n  } else {\n    padding = 4\n  }\n\n  var key = parseKeys(privateKey)\n  var k = key.modulus.byteLength()\n  if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) {\n    throw new Error('decryption error')\n  }\n  var msg\n  if (reverse) {\n    msg = withPublic(new BN(enc), key)\n  } else {\n    msg = crt(enc, key)\n  }\n  var zBuffer = Buffer.alloc(k - msg.length)\n  msg = Buffer.concat([zBuffer, msg], k)\n  if (padding === 4) {\n    return oaep(key, msg)\n  } else if (padding === 1) {\n    return pkcs1(key, msg, reverse)\n  } else if (padding === 3) {\n    return msg\n  } else {\n    throw new Error('unknown padding')\n  }\n}\n\nfunction oaep (key, msg) {\n  var k = key.modulus.byteLength()\n  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()\n  var hLen = iHash.length\n  if (msg[0] !== 0) {\n    throw new Error('decryption error')\n  }\n  var maskedSeed = msg.slice(1, hLen + 1)\n  var maskedDb = msg.slice(hLen + 1)\n  var seed = xor(maskedSeed, mgf(maskedDb, hLen))\n  var db = xor(maskedDb, mgf(seed, k - hLen - 1))\n  if (compare(iHash, db.slice(0, hLen))) {\n    throw new Error('decryption error')\n  }\n  var i = hLen\n  while (db[i] === 0) {\n    i++\n  }\n  if (db[i++] !== 1) {\n    throw new Error('decryption error')\n  }\n  return db.slice(i)\n}\n\nfunction pkcs1 (key, msg, reverse) {\n  var p1 = msg.slice(0, 2)\n  var i = 2\n  var status = 0\n  while (msg[i++] !== 0) {\n    if (i >= msg.length) {\n      status++\n      break\n    }\n  }\n  var ps = msg.slice(2, i - 1)\n\n  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)) {\n    status++\n  }\n  if (ps.length < 8) {\n    status++\n  }\n  if (status) {\n    throw new Error('decryption error')\n  }\n  return msg.slice(i)\n}\nfunction compare (a, b) {\n  a = Buffer.from(a)\n  b = Buffer.from(b)\n  var dif = 0\n  var len = a.length\n  if (a.length !== b.length) {\n    dif++\n    len = Math.min(a.length, b.length)\n  }\n  var i = -1\n  while (++i < len) {\n    dif += (a[i] ^ b[i])\n  }\n  return dif\n}\n"],"sourceRoot":""}