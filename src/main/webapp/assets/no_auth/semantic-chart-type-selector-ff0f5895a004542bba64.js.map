{"version":3,"sources":["webpack:///./src/main/web/components/semantic/chart/SemanticChartTypeSelector.tsx","webpack:///./src/main/web/components/semantic/chart/ChartEvents.ts"],"names":["props","context","selectChartType","selectedType","setState","overrideProps","type","trigger","eventType","ChartTypeSelected","source","id","data","state","default","_","head","types","componentDidMount","this","render","renderTypeSelector","ButtonGroup","style","className","CLASS_NAME","map","chartType","Button","key","active","onClick","contextTypes","Component","ComponentToolbarContextTypes","defaultProps","SemanticChartTypeSelector","event","EventMaker"],"mappings":"6IAkBA,OACA,QACA,QAEA,SACA,QACA,UAKA,UAmCA,cAIE,mCAAYA,EAAcC,GAA1B,MACE,YAAMD,EAAOC,IAAQ,K,OAoCf,EAAAC,gBAAkB,SAACC,GACzB,EAAKC,SAAS,CAAED,aAAY,IAC5B,EAAKF,QAAQI,cAAc,CAAEC,KAAMH,IACnC,EAAAI,QAAQ,CAAEC,UAAW,EAAAC,kBAAmBC,OAAQ,EAAKV,MAAMW,GAAIC,KAAMT,KAtCrE,EAAKU,MAAQ,CACXV,aAAcH,EAAMc,SAAWC,EAAEC,KAAKhB,EAAMiB,Q,EAuClD,OA9C+C,yCAe7C,oCAAAC,kBAAA,WACEC,KAAKjB,gBAAgBiB,KAAKN,MAAMV,eAGlC,oCAAAiB,OAAA,WACE,OAAOD,KAAKE,sBAGN,oCAAAA,mBAAR,sBACE,OACE,gBAAC,EAAAC,YAAW,CAACC,MAAOJ,KAAKnB,MAAMuB,MAAOC,UAAcC,yBACjDN,KAAKnB,MAAMiB,MAAMS,KAAI,SAACC,GAAc,OACnC,gBAAC,EAAAC,OAAM,CACLJ,UAAcC,0CAAsCE,EACpDE,IAAKF,EACLG,OAAQ,EAAKjB,MAAMV,eAAiBwB,EACpCI,QAAS,WAAM,SAAK7B,gBAAgByB,KAEpC,wBAAMH,UAAcC,8BACpB,wBAAMD,UAAcC,8BAA2BE,SAjClD,0BAAAK,aAAe,EAAH,uBAAQ,EAAAC,UAAUD,cAAiB,EAAAE,8BAU/C,0BAAAC,aAA+B,CACpClB,MAAO,CAAC,OAAQ,MAAO,QAAS,MAAO,UAkC3C,0BA9CA,CAA+C,EAAAgB,WAAlC,EAAAG,4BA+Cb,UAAeA,G,sEC5Ff,IAQMC,EARN,OAQ0CC,WAK7B,EAAA7B,kBAAoB4B,EAAM","file":"semantic-chart-type-selector-ff0f5895a004542bba64.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\nimport * as _ from 'lodash';\nimport { ButtonGroup, Button } from 'react-bootstrap';\n\nimport { trigger } from 'platform/api/events';\nimport { Component, ComponentContext } from 'platform/api/components';\nimport {\n  ComponentToolbarContext,\n  ComponentToolbarContextTypes,\n} from 'platform/components/persistence/ComponentToolbarApi';\nimport { ChartType } from './ChartingCommons';\nimport { ChartTypeSelected } from './ChartEvents';\n\nexport interface SemanticChartTypeSelectorConfig {\n  /**\n   * Adds chart type selector to quickly switch between specified chart types.\n   */\n  types?: ChartType[];\n\n  /**\n   * Default chart type\n   */\n  default?: ChartType;\n\n  /**\n   * CSS style\n   */\n  style?: any;\n\n  /**\n   * CSS class\n   */\n  className?: string;\n\n  /**\n   * ID for issuing component events.\n   */\n  id?: string;\n}\n\ntype Props = SemanticChartTypeSelectorConfig;\ninterface State {\n  selectedType: ChartType;\n}\n\nconst CLASS_NAME = 'semantic-chart';\nexport class SemanticChartTypeSelector extends Component<Props, State> {\n  static contextTypes = { ...Component.contextTypes, ...ComponentToolbarContextTypes };\n  context: ComponentContext & ComponentToolbarContext;\n\n  constructor(props: Props, context: any) {\n    super(props, context);\n    this.state = {\n      selectedType: props.default || _.head(props.types),\n    };\n  }\n\n  static defaultProps: Partial<Props> = {\n    types: ['line', 'bar', 'radar', 'pie', 'donut'],\n  };\n\n  componentDidMount() {\n    this.selectChartType(this.state.selectedType);\n  }\n\n  render() {\n    return this.renderTypeSelector();\n  }\n\n  private renderTypeSelector() {\n    return (\n      <ButtonGroup style={this.props.style} className={`${CLASS_NAME}__types`}>\n        {this.props.types.map((chartType) => (\n          <Button\n            className={`${CLASS_NAME}__type-button chart-type-${chartType}`}\n            key={chartType}\n            active={this.state.selectedType === chartType}\n            onClick={() => this.selectChartType(chartType)}\n          >\n            <span className={`${CLASS_NAME}__type-icon`}></span>\n            <span className={`${CLASS_NAME}__type-label`}>{chartType}</span>\n          </Button>\n        ))}\n      </ButtonGroup>\n    );\n  }\n\n  private selectChartType = (selectedType: ChartType) => {\n    this.setState({ selectedType });\n    this.context.overrideProps({ type: selectedType });\n    trigger({ eventType: ChartTypeSelected, source: this.props.id, data: selectedType });\n  };\n}\nexport default SemanticChartTypeSelector;\n","/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { EventMaker } from 'platform/api/events';\n\nexport interface ChartEventData {\n  /**\n   * Event which should be triggered when a chart type is selected.\n   */\n  'Chart.TypeSelected': string;\n}\nconst event: EventMaker<ChartEventData> = EventMaker;\n\n/**\n * Event which should be triggered when a chart type is selected.\n */\nexport const ChartTypeSelected = event('Chart.TypeSelected');\n"],"sourceRoot":""}