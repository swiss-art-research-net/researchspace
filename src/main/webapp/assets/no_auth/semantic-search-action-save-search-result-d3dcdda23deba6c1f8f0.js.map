{"version":3,"sources":["webpack:///./src/main/web/components/search/web-components/SemanticSearchSaveSearchResultAction.tsx"],"names":["render","SemanticSearchContext","Consumer","context","SaveSearchResultActionInner","props","React","Component","dialogRef","onSave","getOverlaySystem","show","createElement","SaveSetDialog","saveAsNewSearch","bind","onHide","hide","maxSetSize","maybe","Nothing","title","placeholder","name","resultQuery","isNothing","QueryService","addItem","value","SparqlUtil","serializeQuery","get","queryType","type","label","structure","serializeSearch","baseQueryStructure","getOrElse","undefined","facetStructure","flatMap","res","addToDefaultSet","id","Kefir","constant","onValue","child","Children","only","this","children","onClick","cloneElement","defaultProps","SaveSearchResultAction"],"mappings":"6IAsBA,OACA,QACA,QAEA,QACA,UACA,SAEA,UACA,UACA,UACA,UAaA,gD,+CAQA,OARqC,sCACnC,iCAAAA,OAAA,sBACE,OACE,gBAAC,EAAAC,sBAAsBC,SAAQ,MAC5B,SAACC,GAAY,uBAACC,EAA2B,cAAK,EAAKC,MAAK,CAAEF,QAASA,SAI5E,uBARA,CAAqCG,EAAMC,WAc3C,mG,OACE,EAAAC,UAAY,qBAMJ,EAAAC,OAAS,WACf,EAAAC,mBAAmBC,KACjB,EAAKH,UACLF,EAAMM,cAAc,EAAAC,cAAe,CACjCJ,OAAQ,EAAKK,gBAAgBC,KAAK,GAClCC,OAAQ,WAAM,SAAAN,mBAAmBO,KAAK,EAAKT,YAC3CU,WAAYC,EAAMC,UAClBC,MAAO,cACPC,YAAa,kBAKX,EAAAR,gBAAkB,SAACS,GACzB,OAAQ,EAAKlB,MAAMF,QAAQqB,YAAYC,UAgBnC,KAfA,EAAAC,eACGC,QAAQ,CACPC,MAAO,EAAAC,WAAWC,eAAe,EAAKzB,MAAMF,QAAQqB,YAAYO,OAChEC,UAAW,SACXC,KAAM,QACNC,MAAOX,EACPY,UAAW,EAAAC,gBACT,EAAK/B,MAAMF,QAAQkC,mBAAmBC,eAAUC,GAChD,EAAKlC,MAAMF,QAAQqC,eAAeF,eAAUC,MAG/CE,SAAQ,SAACC,GAAQ,OAAC,EAAKrC,MAAMsC,gBAAkB,EAAAA,gBAAgBD,EAAK,EAAKrC,MAAMuC,IAAMC,EAAMC,SAASJ,MACpGK,SAAQ,SAACnB,GACR,EAAAlB,mBAAmBO,KAAK,EAAKT,e,EAazC,OAhD0C,2CAwCjC,sCAAAR,OAAP,WACE,IAAMgD,EAAQ1C,EAAM2C,SAASC,KAAKC,KAAK9C,MAAM+C,UACvC/C,EAAQ,CACZgD,QAASF,KAAK1C,QAGhB,OAAOH,EAAMgD,aAAaN,EAAO3C,IA3C5B,4BAAAkD,aAAe,CACpBZ,iBAAiB,GA4CrB,4BAhDA,CAA0CrC,EAAMC,WAkDhD,UAAeiD","file":"semantic-search-action-save-search-result-d3dcdda23deba6c1f8f0.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2015-2020, Â© Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * @author Artem Kozlov <ak@metaphacts.com>\n */\n\nimport * as React from 'react';\nimport * as Kefir from 'kefir';\nimport * as maybe from 'data.maybe';\n\nimport { SparqlUtil } from 'platform/api/sparql';\nimport { addToDefaultSet } from 'platform/api/services/ldp-set';\nimport { getOverlaySystem } from 'platform/components/ui/overlay';\n\nimport { SaveSetDialog } from 'platform/components/sets';\nimport { QueryService } from 'platform/api/services/ldp-query';\nimport { SemanticSearchContext, ResultContext } from 'platform/components/semantic/search';\nimport { serializeSearch } from 'platform/components/semantic/search/data/search/Serialization';\n\nexport interface SaveSearchResultActionProps {\n  id: string;\n\n  /**\n   * `true` if saved search should be added to the default set of the current user\n   *\n   * @default false\n   */\n  addToDefaultSet?: boolean;\n}\n\nclass SaveSearchResultAction extends React.Component<SaveSearchResultActionProps, {}> {\n  render() {\n    return (\n      <SemanticSearchContext.Consumer>\n        {(context) => <SaveSearchResultActionInner {...this.props} context={context} />}\n      </SemanticSearchContext.Consumer>\n    );\n  }\n}\n\ninterface InnerProps extends SaveSearchResultActionProps {\n  context: ResultContext;\n}\n\nclass SaveSearchResultActionInner extends React.Component<InnerProps, {}> {\n  dialogRef = 'save-search-dialog';\n\n  static defaultProps = {\n    addToDefaultSet: false,\n  };\n\n  private onSave = () => {\n    getOverlaySystem().show(\n      this.dialogRef,\n      React.createElement(SaveSetDialog, {\n        onSave: this.saveAsNewSearch.bind(this),\n        onHide: () => getOverlaySystem().hide(this.dialogRef),\n        maxSetSize: maybe.Nothing<number>(),\n        title: 'Save search',\n        placeholder: 'Search name',\n      })\n    );\n  };\n\n  private saveAsNewSearch = (name: string) => {\n    return !this.props.context.resultQuery.isNothing\n      ? QueryService()\n          .addItem({\n            value: SparqlUtil.serializeQuery(this.props.context.resultQuery.get()),\n            queryType: 'SELECT',\n            type: 'query',\n            label: name,\n            structure: serializeSearch(\n              this.props.context.baseQueryStructure.getOrElse(undefined),\n              this.props.context.facetStructure.getOrElse(undefined)\n            ),\n          })\n          .flatMap((res) => (this.props.addToDefaultSet ? addToDefaultSet(res, this.props.id) : Kefir.constant(res)))\n          .onValue((value) => {\n            getOverlaySystem().hide(this.dialogRef);\n          })\n      : null;\n  };\n\n  public render() {\n    const child = React.Children.only(this.props.children) as React.ReactElement<any>;\n    const props = {\n      onClick: this.onSave,\n    };\n\n    return React.cloneElement(child, props);\n  }\n}\n\nexport default SaveSearchResultAction;\n"],"sourceRoot":""}