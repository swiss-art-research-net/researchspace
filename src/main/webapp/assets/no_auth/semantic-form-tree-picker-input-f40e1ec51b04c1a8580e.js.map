{"version":3,"sources":["webpack:///./src/main/web/components/forms/inputs/TreePickerInput.tsx"],"names":["CLASS_NAME","props","context","onNestedFormSubmit","value","setState","nestedFormOpen","values","concat","onValuesChanged","toggleNestedForm","state","config","definition","treePatterns","Object","assign","type","scheme","treeQueries","createDefaultTreeQueries","treeVersionKey","componentWillReceiveProps","nextProps","previousValues","this","treeSelectionSet","nextValues","toSetOfIris","filter","v","FieldValue","isAtomic","isIri","map","toSet","size","equals","treeSelection","toArray","render","maxOccurs","nestedForm","tryExtractNestedForm","children","showCreateNewButton","length","className","renderTreePicker","renderCreateNewButton","NestedModalForm","onSubmit","onCancel","openDropdownOnFocus","closeDropdownOnSelection","rootsQuery","childrenQuery","parentsQuery","searchQuery","placeholder","createDefaultPlaceholder","getPreferredLabel","label","toLocaleLowerCase","SemanticTreeInput","key","droppable","query","createDropAskQueryForField","styles","enabled","outline","disabled","initialSelection","multipleSelection","onSelectionChanged","selection","selectionLeafs","TreeSelection","leafs","selectionSet","leaf","iri","onTreeSelectionChanged","Immutable","List","fromLabeled","undefined","updateValues","handler","errors","validate","Button","bsStyle","onClick","makeHandler","CardinalityCheckingHandler","defaultProps","MultipleValuesInput","TreePickerInput","assertStatic"],"mappings":"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","file":"semantic-form-tree-picker-input-f40e1ec51b04c1a8580e.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\nimport { Button } from 'react-bootstrap';\nimport * as Immutable from 'immutable';\n\nimport { Rdf } from 'platform/api/rdf';\n\nimport {\n  SemanticTreeInput,\n  Node as TreeNode,\n  SelectionNode,\n  TreeSelection,\n  ComplexTreePatterns,\n  createDefaultTreeQueries,\n  LightwightTreePatterns,\n} from 'platform/components/semantic/lazy-tree';\n\nimport { FieldDefinition, getPreferredLabel, TreeQueriesConfig, SimpleTreeConfig } from '../FieldDefinition';\nimport { FieldValue, AtomicValue, ErrorKind } from '../FieldValues';\nimport {\n  MultipleValuesInput,\n  MultipleValuesProps,\n  MultipleValuesHandlerProps,\n  CardinalityCheckingHandler,\n} from './MultipleValuesInput';\nimport { NestedModalForm, tryExtractNestedForm } from './NestedModalForm';\nimport { createDropAskQueryForField } from '../ValidationHelpers';\n\nexport interface TreePickerInputProps extends MultipleValuesProps {\n  placeholder?: string;\n\n  /**\n   * Automatically open/close dropdown in full mode when input focused/blurred.\n   * @default true\n   */\n  openDropdownOnFocus?: boolean;\n\n  /**\n   * Closes the dropdown when some value is selected.\n   *\n   * @default true\n   */\n  closeDropdownOnSelection?: boolean;\n\n  /**\n   * Override Tree Patterns from the Field Definition.\n   */\n  treePatterns?: LightwightTreePatterns\n\n  /**\n   * Override scheme from Field Definitions. Overrides the scheme from tree-patterns.\n   */\n  scheme?: string;\n}\n\ninterface State {\n  readonly treeVersionKey?: number;\n  readonly treeQueries?: ComplexTreePatterns;\n  readonly treeSelection?: ReadonlyArray<Rdf.Iri>;\n  readonly treeSelectionSet?: Immutable.Set<Rdf.Iri>;\n  readonly nestedFormOpen?: boolean;\n}\n\nconst CLASS_NAME = 'semantic-form-tree-picker-input';\n\n/**\n * Component to select one or many values from a hierarchy represented by a tree selector.\n *\n * @example\n * <semantic-form-tree-picker-input for='place'></semantic-form-tree-picker-input>\n */\nexport class TreePickerInput extends MultipleValuesInput<TreePickerInputProps, State> {\n  static defaultProps: Partial<TreePickerInputProps> = {\n    openDropdownOnFocus: true,\n    closeDropdownOnSelection: true,\n  };\n\n  constructor(props: TreePickerInputProps, context: any) {\n    super(props, context);\n    let config = props.definition.treePatterns;\n    if (props.treePatterns) {\n      config = Object.assign(\n        {},\n        props.definition.treePatterns || {},\n        {type: 'simple', ...props.treePatterns} as SimpleTreeConfig)\n    }\n    if (props.scheme && !config) {\n      config = {type: 'simple', scheme: props.scheme };\n    } else if (props.scheme && config.type === 'simple') {\n      config.scheme = props.scheme;\n    }\n    const treeQueries: ComplexTreePatterns = config?.type === 'full' ? config : createDefaultTreeQueries(config);\n    this.state = { treeVersionKey: 0, treeQueries };\n  }\n\n  componentWillReceiveProps(nextProps: TreePickerInputProps) {\n    const previousValues = this.state.treeSelectionSet;\n    const nextValues = toSetOfIris(nextProps.values);\n    const isValuesSame =\n      (!previousValues && nextValues.size === 0) ||\n      (previousValues &&\n        previousValues.equals(\n          // workaround for broken typyings for ImmutableJS with TypeScript 2.6.0\n          // (Set<T> not assignable to Iterable<T, T>)\n          nextValues as Immutable.Iterable<Rdf.Iri, Rdf.Iri>\n        ));\n\n    if (!isValuesSame) {\n      this.setState(\n        (state): State => ({\n          treeVersionKey: state.treeVersionKey + 1,\n          treeSelection: nextValues.toArray(),\n          treeSelectionSet: nextValues,\n        })\n      );\n    }\n  }\n\n  render() {\n    const { maxOccurs } = this.props.definition;\n    const { treeSelection } = this.state;\n    const nestedForm = tryExtractNestedForm(this.props.children);\n    const showCreateNewButton = nestedForm && (!treeSelection || treeSelection.length < maxOccurs);\n    return (\n      <div className={CLASS_NAME}>\n        {this.renderTreePicker()}\n        {showCreateNewButton ? this.renderCreateNewButton() : null}\n        {this.state.nestedFormOpen ? (\n          <NestedModalForm\n            definition={this.props.definition}\n            onSubmit={this.onNestedFormSubmit}\n            onCancel={() => this.setState({ nestedFormOpen: false })}\n          >\n            {nestedForm}\n          </NestedModalForm>\n        ) : null}\n      </div>\n    );\n  }\n\n  private onNestedFormSubmit = (value: AtomicValue) => {\n    this.setState({ nestedFormOpen: false });\n    const values = this.props.values.concat(value);\n    this.onValuesChanged(values);\n  };\n\n  private renderTreePicker() {\n    const { openDropdownOnFocus, closeDropdownOnSelection, definition } = this.props;\n    const { treeVersionKey, treeQueries, treeSelection } = this.state;\n    const { rootsQuery, childrenQuery, parentsQuery, searchQuery } = treeQueries;\n\n    const placeholder =\n      typeof this.props.placeholder === 'string'\n        ? this.props.placeholder\n        : createDefaultPlaceholder(definition);\n\n    return (\n      <SemanticTreeInput\n        key={treeVersionKey}\n        droppable={{\n          // enable droppable for autocomplete input\n          query: createDropAskQueryForField(definition),\n          styles: {\n            enabled: {\n              outline: '2px solid #1D0A6E'\n            },\n            disabled: {}\n          }\n        }}\n        className={`${CLASS_NAME}__picker`}\n        placeholder={placeholder}\n        rootsQuery={rootsQuery}\n        childrenQuery={childrenQuery}\n        parentsQuery={parentsQuery}\n        searchQuery={searchQuery}\n        initialSelection={treeSelection}\n        multipleSelection={true}\n        openDropdownOnFocus={openDropdownOnFocus}\n        closeDropdownOnSelection={closeDropdownOnSelection}\n        onSelectionChanged={(selection) => {\n          const selectionLeafs = TreeSelection.leafs(selection);\n          const selectionSet = selectionLeafs.map((leaf) => leaf.iri).toSet();\n          this.setState(\n            {\n              treeSelection: selectionSet.toArray(),\n              treeSelectionSet: selectionSet,\n              nestedFormOpen: false,\n            },\n            () => this.onTreeSelectionChanged(selectionLeafs)\n          );\n        }}\n      />\n    );\n  }\n\n  private onTreeSelectionChanged(leafs: Immutable.List<SelectionNode<TreeNode>>) {\n    const values = Immutable.List(\n      leafs.map(({ iri, label }) =>\n        FieldValue.fromLabeled({\n          value: iri,\n          label: label ? label.value : undefined,\n        })\n      )\n    );\n    this.onValuesChanged(values);\n  }\n\n  private onValuesChanged(values: Immutable.List<FieldValue>) {\n    const { updateValues, handler } = this.props;\n    updateValues(({ errors }) => handler.validate({ values, errors }));\n  }\n\n  private renderCreateNewButton() {\n    return (\n      <Button className={`${CLASS_NAME}__create-button`} bsStyle=\"default\" onClick={this.toggleNestedForm}>\n        <span className=\"fa fa-plus\" />\n        <span>Create new</span>\n      </Button>\n    );\n  }\n\n  private toggleNestedForm = () => {\n    this.setState((state): State => ({ nestedFormOpen: !state.nestedFormOpen }));\n  };\n\n  static makeHandler(props: MultipleValuesHandlerProps<TreePickerInputProps>) {\n    return new CardinalityCheckingHandler(props);\n  }\n}\n\nfunction toSetOfIris(values: Immutable.List<FieldValue>) {\n  return values\n    .filter((v) => FieldValue.isAtomic(v) && v.value.isIri())\n    .map((v) => (v as AtomicValue).value as Rdf.Iri)\n    .toSet();\n}\n\nfunction createDefaultPlaceholder(definition: FieldDefinition): string {\n  const entityLabel = (getPreferredLabel(definition.label) || 'entity').toLocaleLowerCase();\n  return `Search or browse for values of ${entityLabel} here...`;\n}\n\nMultipleValuesInput.assertStatic(TreePickerInput);\n\nexport default TreePickerInput;\n"],"sourceRoot":""}