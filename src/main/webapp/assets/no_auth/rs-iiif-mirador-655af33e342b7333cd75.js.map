{"version":3,"sources":["webpack:///./src/main/web/components/iiif/ImageRegionEditor.ts","webpack:///./src/main/web/components/iiif/ImageRegionEditorEvents.ts"],"names":["props","context","cancellation","Cancellation","infoQueryingCancellation","derive","manifestQueryingCancellation","triggerManifestUpdatedEvent","objects","trigger","eventType","ManifestUpdatedEvent","source","id","data","triggerRegionUpdatedEvent","regionIri","oa","imageIri","on","full","objectIri","state","allImages","find","i","images","includes","regionLabel","getAnnotationTextResource","chars","value","onMiradorInitialized","mirador","scrollToRegions","canvasId","Array","from","info","image","imageIRI","boundingBox","listenToEvents","length","size","eventEmitter","publish","map","listen","AddObjectImagesEvent","target","observe","event","some","im","miradorInstance","one","e","slots","objectImages","os","manifest","viewer","manifestsPanel","manifestListItems","jsonLd","sequences","canvases","c","slotAddress","last","layoutAddress","workspace","windows","newImage","imageIris","unshift","setState","ImageApi","getIIIFServerUrl","iiifServerUrl","queryImagesInfo","flatMap","iiifImageId","queryManifestParameters","infos","iiifImageIds","iri","createManifest","onValue","manifestJson","Mirador","Manifest","RemoveRegion","windowForImage","w","canvasID","annotation","annotationsList","a","annotationEndpoint","remove","search","Rdf","regions","regionToRemove","region","HighlightRegion","ZoomToRegionEvent","scrollToImageRegion","getRepositories","Maybe","fromNullable","repositories","orElse","semanticContext","chain","repository","getOrElse","scrollToRegion","view","annotations","viewport","bounds","parseImageSubarea","selector","default","get","computeDisplayedRegionWithMargin","onEnd","loading","normalizeImageProps","imageOrRegion","isArray","toPairs","componentDidMount","this","queryAllImagesInfo","shouldComponentUpdate","nextProps","nextState","isEqual","error","errorMessage","imageIdPattern","querying","Kefir","constant","infoQuerying","imageOrRegionIri","queryIIIFImageOrRegion","flatMapErrors","undefined","combine","deriveAndCancel","result","Map","forEach","imagesInfo","imageInfo","set","imageId","renderMirador","element","removeMirador","manifestQuerying","allParams","params","filter","param","addNotification","level","children","React","createElement","ResourceLinkComponent","zip","allManifests","manifests","miradorConfig","miradorConfigFromManifest","targetElement","onInitialized","queryingImagesInfo","imageServiceUri","constructServiceRequestUri","queryImageBounds","canvasSize","baseIri","isRegion","toProperty","useDetailsSidebar","annotationViewTooltipTemplate","AnnotationEndpointProxy","LdpAnnotationEndpoint","RegionCreatedEvent","RegionUpdatedEvent","RegionRemovedEvent","windowObjects","loadedManifest","viewType","sidePanel","canvasControls","annotationState","annotationRefresh","windowSettings","saveSession","manifestUri","location","manifestContent","name","module","options","endpoint","availableAnnotationDrawingTools","annotationBodyEditor","jsonStorageEndpoint","componentWillUnmount","cancelAll","miradorElement","render","D","div","className","style","position","width","height","ErrorNotification","ref","defaultProps","propTypes","PropTypes","any","isRequired","string","Component","ImageRegionEditorComponentMirador","onCreated","onUpdated","onRemoved","init","userAuthorize","action","canvasIri","create","update","f","createFactory","EventMaker","AddImagesForObjectEvent"],"mappings":"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","file":"rs-iiif-mirador-655af33e342b7333cd75.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2015-2020, © Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as React from 'react';\nimport * as D from 'react-dom-factories';\nimport * as PropTypes from 'prop-types';\nimport {\n  isEqual, toPairs, some, find, last, size,\n} from 'lodash';\nimport * as Maybe from 'data.maybe';\nimport * as Kefir from 'kefir';\n\nimport { trigger, listen } from 'platform/api/events';\nimport { Cancellation } from 'platform/api/async';\nimport { Rdf } from 'platform/api/rdf';\nimport { addNotification, ErrorNotification } from 'platform/components/ui/notification';\nimport { Component } from 'platform/api/components';\nimport { ResourceLinkComponent } from 'platform/api/navigation/components';\n\nimport * as ImageApi from '../../data/iiif/ImageAPI';\nimport { queryIIIFImageOrRegion, ImageOrRegionInfo, parseImageSubarea } from '../../data/iiif/ImageAnnotationService';\nimport { Manifest, createManifest } from '../../data/iiif/ManifestBuilder';\nimport { LdpAnnotationEndpoint, AnnotationEndpoint, ImagesInfoByIri } from '../../data/iiif/AnnotationEndpoint';\nimport { ManifestUpdatedEvent, ZoomToRegionEvent, IiifManifestObject, AddObjectImagesEvent, RegionCreatedEvent, RegionUpdatedEvent, RegionRemovedEvent, HighlightRegion, RemoveRegion } from './ImageRegionEditorEvents';\n\nimport { renderMirador, removeMirador, scrollToRegions, scrollToRegion } from './mirador/Mirador';\nimport { computeDisplayedRegionWithMargin } from './ImageThumbnail';\nimport { OARegionAnnotation, getAnnotationTextResource } from 'platform/data/iiif/LDPImageRegionService';\n\nexport interface ImageRegionEditorConfig {\n  id?: string;\n  imageOrRegion: string | { [iri: string]: Array<string> } | IiifManifestObject[];\n  imageIdPattern: string;\n  iiifServerUrl: string;\n  repositories?: Array<string>;\n\n  /**\n   * Use details sidebar instead of built-in mirador details view\n   */\n  useDetailsSidebar?: boolean;\n\n  /**\n   * These are special handlebars template passed to mirador, they don't work in the same\n   * way as platform templates and can't be used with <template> tag\n   */\n  annotationViewTooltipTemplate?: string;\n}\n\nexport interface ImageRegionEditorProps extends ImageRegionEditorConfig {\n  annotationEndpoint?: AnnotationEndpoint;\n  onMiradorInitialized?: (miradorInstance: Mirador.Instance) => void;\n}\n\ninterface ImageRegionEditorState {\n  loading?: boolean;\n  info?: Map<string, ImageOrRegionInfo>;\n  iiifImageId?: Map<string, string>;\n  errorMessage?: string;\n\n  allImages: IiifManifestObject[];\n}\n\n/**\n * @example\n * <div style='height: 700px'>\n *   <rs-iiif-mirador image-or-region='http://example.com/AN00230/AN00230725_001_l.jpg'\n *     image-id-pattern='BIND(REPLACE(str(?imageIRI),\n *       \"^.+/[A-Z0]*([1-9][0-9]*)_.*$\", \"$1\") AS ?imageID)'\n *     iiif-server-url='http://example.com/IIIF'>\n *   </rs-iiif-mirador>\n * </div>\n */\nexport class ImageRegionEditorComponentMirador extends Component<ImageRegionEditorProps, ImageRegionEditorState> {\n  static defaultProps: Partial<ImageRegionEditorProps> = {\n    id: 'mirador',\n  };\n\n  private readonly cancellation = new Cancellation();\n  private annotationEndpoint: AnnotationEndpoint;\n  private infoQueryingCancellation = this.cancellation.derive();\n  private manifestQueryingCancellation = this.cancellation.derive();\n\n  static readonly propTypes: { [K in keyof ImageRegionEditorProps]?: any } = {\n    imageOrRegion: PropTypes.any.isRequired,\n    imageIdPattern: PropTypes.string.isRequired,\n    iiifServerUrl: PropTypes.string.isRequired,\n  };\n\n  private miradorElement: HTMLElement;\n  private miradorInstance: Mirador.Instance;\n\n  constructor(props: ImageRegionEditorProps, context: any) {\n    super(props, context);\n    this.state = {\n      loading: true,\n      allImages: this.normalizeImageProps(props),\n    };\n  }\n\n  private normalizeImageProps({ imageOrRegion }: ImageRegionEditorProps) {\n    if (typeof imageOrRegion === 'string') {\n      return [\n        { objectIri: imageOrRegion, images: [imageOrRegion] },\n      ];\n    } else if (Array.isArray(imageOrRegion)) {\n      return imageOrRegion;\n    } else {\n      return toPairs(imageOrRegion).map(([objectIri, images]) => ({ images, objectIri }));\n    }\n  }\n\n  componentDidMount() {\n    this.queryAllImagesInfo();\n  }\n\n  private triggerManifestUpdatedEvent = (objects: IiifManifestObject[]) => {\n    trigger({\n      eventType: ManifestUpdatedEvent,\n      source: this.props.id,\n      data: { objects }\n    });\n  }\n\n  private triggerRegionUpdatedEvent =\n    (eventType: typeof RegionCreatedEvent | typeof RegionUpdatedEvent | typeof RegionRemovedEvent) =>\n    (regionIri: Rdf.Iri, oa: OARegionAnnotation) => {\n      const imageIri = oa.on[0].full;\n      const objectIri = this.state.allImages.find(i => i.images.includes(imageIri)).objectIri;\n      const regionLabel = getAnnotationTextResource(oa).chars;\n      trigger({\n        eventType,\n        source: this.props.id,\n        data: {\n          objectIri, imageIri, regionIri: regionIri.value, regionLabel\n        }\n      });\n    }\n\n  public shouldComponentUpdate(nextProps: ImageRegionEditorProps, nextState: ImageRegionEditorState) {\n    return nextState.loading !== this.state.loading || !isEqual(nextProps, this.props);\n  }\n\n  private queryAllImagesInfo() {\n    this.queryImagesInfo(this.state.allImages).observe({\n      value: ({ info, iiifImageId }) => {\n        this.setState({ loading: false, iiifImageId, info });\n      },\n      error: (error) => this.setState({ loading: false, errorMessage: error }),\n    });\n  }\n\n  private queryImagesInfo(allImages: IiifManifestObject[]) {\n    const { imageIdPattern } = this.props;\n\n    const querying = allImages.map(({ images }) => {\n      if (!images.length) {\n        return Kefir.constant([]);\n      }\n      const infoQuerying = images\n        .map(Rdf.iri)\n        .map((imageOrRegionIri) =>\n          queryIIIFImageOrRegion(imageOrRegionIri, imageIdPattern, this.getRepositories()).flatMapErrors<\n            ImageOrRegionInfo\n          >(() => Kefir.constant(undefined))\n        );\n      return Kefir.combine(infoQuerying);\n    });\n\n    this.infoQueryingCancellation = this.cancellation.deriveAndCancel(this.infoQueryingCancellation);\n    return this.infoQueryingCancellation.map(Kefir.combine(querying)).map(\n      (result) => {\n        const info = new Map<string, ImageOrRegionInfo>();\n        const iiifImageId = new Map<string, string>();\n        result.forEach((imagesInfo) =>\n          imagesInfo.forEach((imageInfo) => {\n            if (!imageInfo) {\n              return;\n            }\n            info.set(imageInfo.iri.value, imageInfo);\n            iiifImageId.set(imageInfo.iri.value, imageInfo.imageId);\n          })\n        );\n        return { info, iiifImageId };\n      }\n    );\n  }\n\n\n  private renderMirador(element: HTMLElement) {\n    if (!this.state || !this.state.info || !element) {\n      return;\n    }\n\n    removeMirador(this.miradorInstance, element);\n\n    const iiifServerUrl = ImageApi.getIIIFServerUrl(this.props.iiifServerUrl);\n\n    const manifestQuerying = this.state.allImages.map(({ objectIri, images }) =>\n      this.queryManifestParameters({\n        infos: this.state.info,\n        iiifImageIds: this.state.iiifImageId,\n        iri: objectIri, images, iiifServerUrl\n      }).flatMap((allParams) => {\n        const params = allParams.filter((param) => param !== undefined);\n        if (params.length === 0) {\n          addNotification({\n            level: 'error',\n            children: React.createElement(\n              'p',\n              {},\n              'Images of the entity ',\n              React.createElement(ResourceLinkComponent, { iri: objectIri }),\n              ' not found'\n            ),\n          });\n          return Kefir.constant(undefined);\n        }\n        if (params.length < allParams.length) {\n          addNotification({\n            level: 'warning',\n            children: React.createElement(\n              'p',\n              {},\n              'Some images of the entity ',\n              React.createElement(ResourceLinkComponent, { iri: objectIri }),\n              ' not found'\n            ),\n          });\n        }\n        return createManifest(params);\n      })\n    );\n\n    this.manifestQueryingCancellation = this.cancellation.deriveAndCancel(this.manifestQueryingCancellation);\n    this.manifestQueryingCancellation.map(Kefir.zip(manifestQuerying)).onValue((allManifests) => {\n      const manifests = allManifests.filter((manifest) => manifest !== undefined);\n      const miradorConfig = this.miradorConfigFromManifest(manifests);\n      this.miradorInstance = renderMirador({\n        targetElement: element,\n        miradorConfig,\n        onInitialized: this.onMiradorInitialized,\n      });\n    });\n  }\n\n  private onMiradorInitialized = (mirador: Mirador.Instance) => {\n    scrollToRegions(mirador, ({ canvasId }) => {\n      for (const [iri, image] of Array.from(this.state.info)) {\n        if (canvasId === image.imageIRI.value) {\n          return image.boundingBox;\n        }\n      }\n      return undefined;\n    });\n    this.listenToEvents();\n    this.triggerManifestUpdatedEvent(this.state.allImages);\n\n    /**\n     * If we have one than one object or one than one image for the object then show\n     * image selection view in the mirador\n     */\n    const { allImages } = this.state;\n    if (\n      allImages.length > 1 || (allImages.length == 1 && size(allImages[0].images) > 1)\n    ) {\n      mirador.eventEmitter.publish('TOGGLE_LOAD_WINDOW');\n    }\n\n\n    if (this.props.onMiradorInitialized) {\n      this.props.onMiradorInitialized(mirador);\n    }\n  }\n\n  private listenToEvents = () => {\n    this.cancellation\n      .map(\n        listen({\n          eventType: AddObjectImagesEvent,\n          target: this.props.id\n        })\n      )\n      .observe({\n        value: (event) => {\n          const { allImages } = this.state;\n          if (!some(allImages, im => im.objectIri === event.data.objectIri)) {\n            // if we don't have object images loaded, then we need to fetch the manifest\n            const newImage = { objectIri: event.data.objectIri, images: event.data.imageIris };\n            allImages.unshift(newImage);\n            this.setState({ allImages: this.state.allImages })\n\n            const iiifServerUrl = ImageApi.getIIIFServerUrl(this.props.iiifServerUrl);\n            this.queryImagesInfo([newImage])\n              .flatMap(\n                ({ info, iiifImageId }) => {\n                  return this.queryManifestParameters({\n                    infos: info, iiifImageIds: iiifImageId,\n                    iri: event.data.objectIri, images: event.data.imageIris, iiifServerUrl\n                  })\n                }\n              )\n              .flatMap(createManifest)\n              .onValue((manifestJson) => {\n                const manifest = new Mirador.Manifest(manifestJson['@id'], '', manifestJson);\n                this.miradorInstance.eventEmitter.publish('manifestReceived', manifest, 'Test');\n                this.triggerManifestUpdatedEvent(allImages);\n\n                // add new window with new manifest, see handling of the ZoomToRegionEvent for the explanation of the logic behind this code\n                const onSlotAdded = (e, { slots }: { slots: Mirador.Slot[] }) => {\n                  this.miradorInstance.eventEmitter.publish(\n                    'ADD_WINDOW', {\n                      manifest,\n                      slotAddress: last(slots).layoutAddress\n                    }\n                  );\n                };\n                this.miradorInstance.eventEmitter.one('slotsUpdated', onSlotAdded)\n                this.miradorInstance.eventEmitter.publish(\n                  'SPLIT_RIGHT_FROM_WINDOW',\n                  this.miradorInstance.viewer.workspace.windows[0].id\n                );\n              });\n          } else {\n            // if object images are already loaded then just add new slot with the object\n            const onSlotAdded = (e, { slots }: { slots: Mirador.Slot[] }) => {\n              const objectImages = allImages.find(os => os.objectIri === event.data.objectIri);\n              const manifest =\n                this.miradorInstance.viewer.manifestsPanel.manifestListItems.find(\n                  ({ manifest }) =>\n                    manifest.jsonLd.sequences[0].canvases.some(\n                      c => objectImages.images.includes(c['@id'])\n                    )\n                ).manifest;\n              this.miradorInstance.eventEmitter.publish(\n                'ADD_WINDOW', {\n                  manifest,\n                  slotAddress: last(slots).layoutAddress\n                }\n              );\n            };\n            this.miradorInstance.eventEmitter.one('slotsUpdated', onSlotAdded)\n            this.miradorInstance.eventEmitter.publish(\n              'SPLIT_RIGHT_FROM_WINDOW',\n              this.miradorInstance.viewer.workspace.windows[0].id\n            );\n          }\n        }\n      });\n\n\n\n    this.cancellation\n      .map(\n        listen({\n          eventType: RemoveRegion,\n          target: this.props.id\n        })\n      )\n      .observe({\n        value: (event) => {\n          const windows = this.miradorInstance.viewer.workspace.windows;\n          const windowForImage = windows.find(w => w.canvasID === event.data.imageIri);\n\n          if (windowForImage) {\n            const annotation = windowForImage.annotationsList.find(a => a['@id'] === event.data.regionIri) as OARegionAnnotation;\n            this.cancellation.map(\n              this.annotationEndpoint.remove(annotation)\n            ).observe({\n              value: (event) => {\n                this.miradorInstance.eventEmitter.publish('updateAnnotationList.'+windowForImage.id);\n              }\n            })\n          } else {\n            this.cancellation.map(\n              this.annotationEndpoint\n                .search(Rdf.iri(event.data.imageIri))\n                .flatMap(\n                  regions => {\n                    const regionToRemove =\n                      regions.find(region => region['@id'] === event.data.regionIri);\n                    return this.annotationEndpoint.remove(regionToRemove);\n                  }\n                )\n            ).observe({\n              value: () => {/**/}\n            })\n          }\n        }\n      });\n\n    this.cancellation\n      .map(\n        listen({\n          eventType: HighlightRegion,\n          target: this.props.id\n        })\n      )\n      .observe({\n        value: (event) => {\n          this.miradorInstance.eventEmitter.publish('highlightAnnotation', event.data.regionIri)\n        }\n      });\n\n\n    this.cancellation\n      .map(\n        listen({\n          eventType: ZoomToRegionEvent,\n          target: this.props.id\n        })\n      )\n      .observe({\n        value: (event) => {\n          const windows = this.miradorInstance.viewer.workspace.windows;\n          const windowForImage = windows.find(w => w.canvasID === event.data.imageIri);\n\n          if (windowForImage) {\n            this.scrollToImageRegion(event.data.imageIri, event.data.regionIri)\n          } else {\n            // Mirador handles events asynchronously, so here:\n            //  1. we trigger \"SPLIT_RIGHT_FROM_WINDOW\" event to add new mirador window\n            //  2. then when it is ready Mirador triggers \"slotsUpdated\" event\n            //  3. and we load needed image into the new window\n            //  4. when image with annotations is loaded Mirador triggers \"ANNOTATIONS_LIST_UPDATED\" event\n            //  5. and then we scroll to the region\n\n            const onSlotAdded = (e, { slots }: { slots: Mirador.Slot[] }) => {\n              const onAnnotationsReady = () => {\n                this.scrollToImageRegion(event.data.imageIri, event.data.regionIri)\n              };\n              this.miradorInstance.eventEmitter.one('ANNOTATIONS_LIST_UPDATED', onAnnotationsReady);\n\n              const manifest =\n                this.miradorInstance.viewer.manifestsPanel.manifestListItems.find(\n                  ({ manifest }) => some(manifest.jsonLd.sequences[0].canvases, c => c['@id'] === event.data.imageIri)\n                ).manifest;\n              this.miradorInstance.eventEmitter.publish(\n                'ADD_WINDOW', {\n                manifest,\n                canvasID: event.data.imageIri,\n                slotAddress: last(slots).layoutAddress\n              }\n              );\n            };\n\n            this.miradorInstance.eventEmitter.one('slotsUpdated', onSlotAdded)\n            this.miradorInstance.eventEmitter.publish('SPLIT_RIGHT_FROM_WINDOW', windows[0].id)\n          }\n        }\n      })\n  }\n\n  private queryManifestParameters({\n    iri,\n    images,\n    iiifServerUrl,\n    infos,\n    iiifImageIds\n  }: {\n    iri: string;\n    images: Array<string>;\n    iiifServerUrl: string;\n    infos?: ReadonlyMap<string, ImageOrRegionInfo>;\n    iiifImageIds?: ReadonlyMap<string, string>;\n  }) {\n    if (!images.length) {\n      return Kefir.constant([]);\n    }\n    const queryingImagesInfo = images.map((imageIri) => {\n      const imageInfo = infos.get(imageIri);\n      const iiifImageId = iiifImageIds.get(imageIri);\n      if (!imageInfo || !iiifImageId) {\n        return Kefir.constant(undefined);\n      }\n      const imageServiceUri = ImageApi.constructServiceRequestUri(iiifServerUrl, iiifImageId);\n      return ImageApi.queryImageBounds(iiifServerUrl, iiifImageId)\n        .flatMap((canvasSize) =>\n          Kefir.constant({\n            baseIri: imageInfo.isRegion ? imageInfo.imageIRI : Rdf.iri(iri),\n            imageIri: imageInfo.imageIRI,\n            imageServiceUri,\n            canvasSize,\n          })\n        )\n        .flatMapErrors(() => Kefir.constant(undefined));\n    });\n    return Kefir.zip(queryingImagesInfo).toProperty();\n  }\n\n  private getRepositories = () =>\n    Maybe.fromNullable(this.props.repositories)\n      .orElse(() => Maybe.fromNullable(this.context.semanticContext).chain((c) => Maybe.fromNullable([c.repository])))\n      .getOrElse(['default']);\n\n  private miradorConfigFromManifest(manifests: Array<Manifest>): Mirador.Options {\n    const {\n      id, annotationEndpoint, useDetailsSidebar,\n      annotationViewTooltipTemplate,\n    } = this.props;\n    const imagesInfo = this.state.info as ImagesInfoByIri;\n\n    this.annotationEndpoint = new AnnotationEndpointProxy(\n      annotationEndpoint || new LdpAnnotationEndpoint({ imagesInfo }),\n      this.triggerRegionUpdatedEvent(RegionCreatedEvent),\n      this.triggerRegionUpdatedEvent(RegionUpdatedEvent),\n      this.triggerRegionUpdatedEvent(RegionRemovedEvent),\n    );\n\n    const windowObjects: Mirador.WindowObject[] =\n      manifests.length > 1 ? [] : [{\n        loadedManifest: manifests[0]['@id'] as string,\n        viewType: 'ImageView',\n        sidePanel: false,\n        canvasControls: {\n          annotations: {\n            annotationState: 'on',\n            annotationRefresh: true,\n          },\n        },\n      }];\n\n    return {\n      id: id, // The CSS ID selector for the containing element.\n      useDetailsSidebar, annotationViewTooltipTemplate,\n      windowSettings: {\n        sidePanel: !useDetailsSidebar\n      },\n      saveSession: false,\n      data: manifests.map((manifest) => ({\n        manifestUri: manifest['@id'],\n        location: '',\n        manifestContent: manifest,\n      })),\n      annotationEndpoint: {\n        name: 'ResearchSpace annotation endpoint',\n        module: 'AdapterAnnotationEndpoint',\n        options: {\n          endpoint: this.annotationEndpoint,\n        },\n      },\n      availableAnnotationDrawingTools: ['Rectangle', 'Ellipse', 'Freehand', 'Polygon', 'Pin'],\n      windowObjects,\n      annotationBodyEditor: {\n        module: 'researchspaceAnnotationBodyEditor',\n        options: {},\n      },\n      jsonStorageEndpoint: {\n        name: 'Dummy JSON Storage',\n        module: 'DummyJSONStorage',\n        options: {},\n      },\n    };\n  }\n\n  componentWillUnmount() {\n    this.cancellation.cancelAll();\n    removeMirador(this.miradorInstance, this.miradorElement);\n  }\n\n  render() {\n    const { errorMessage } = this.state;\n    return D.div(\n      {\n        className: 'mirador',\n        style: { position: 'relative', width: '100%', height: '100%' }\n      },\n      errorMessage\n        ? React.createElement(ErrorNotification, { errorMessage })\n        : D.div({\n          ref: (element) => {\n            this.miradorElement = element;\n            this.renderMirador(element);\n          },\n          id: this.props.id,\n          className: 'researchspace-mirador',\n          style: { width: '100%', height: '100%', position: 'relative' },\n        })\n    );\n  }\n\n  private scrollToImageRegion = (imageIri: string, regionIri: string) => {\n    const windows = this.miradorInstance.viewer.workspace.windows;\n    const windowForImage = windows.find(w => w.canvasID === imageIri);\n    scrollToRegion(windowForImage, view => {\n      const annotations = windowForImage.annotationsList;\n      const annotation = find(annotations, a => a['@id'] === regionIri);\n      const viewport = windowForImage.canvases[imageIri].bounds;\n      const boundingBox =\n        parseImageSubarea(annotation.on[0].selector.default.value).get();\n\n      return computeDisplayedRegionWithMargin(\n        boundingBox, viewport, 0.05\n      );\n    }).onEnd(() => {\n      // make observable active (hot)\n    });\n  }\n}\n\nclass AnnotationEndpointProxy implements AnnotationEndpoint {\n  constructor(\n    private endpoint: AnnotationEndpoint,\n    private onCreated: (regionIri: Rdf.Iri, oa: OARegionAnnotation) => void,\n    private onUpdated: (regionIri: Rdf.Iri, oa: OARegionAnnotation) => void,\n    private onRemoved: (regionIri: Rdf.Iri, oa: OARegionAnnotation) => void,\n  ) {}\n\n  init = this.endpoint.init ? () =>  {\n    this.endpoint.init();\n  } : undefined;\n\n  search(canvasIri: Rdf.Iri) {\n    return this.endpoint.search(canvasIri);\n  }\n\n  create(annotation: OARegionAnnotation) {\n    return this.endpoint.create(annotation)\n      .onValue(regionIri => this.onCreated(regionIri, annotation));\n  }\n\n  update(annotation: OARegionAnnotation) {\n    return this.endpoint.update(annotation)\n      .onValue(regionIri => this.onUpdated(regionIri, annotation));\n  }\n\n  remove(annotation: OARegionAnnotation) {\n    return this.endpoint.remove(annotation)\n      .onValue(() => this.onRemoved(Rdf.iri(annotation['@id']), annotation));\n  }\n\n  userAuthorize = this.endpoint.userAuthorize ? (action: any, annotation: OARegionAnnotation) => {\n    return this.endpoint.userAuthorize(action, annotation);\n  } : undefined;\n}\n\nexport type c = ImageRegionEditorComponentMirador;\nexport const c = ImageRegionEditorComponentMirador;\nexport const f = React.createFactory(c);\nexport default c;\n","/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { EventMaker } from 'platform/api/events';\n\nexport interface IiifManifestObject {\n  objectIri: string;\n\n  /**\n   * List of images associated with the object\n   */\n  images?: string[];\n}\n\nexport interface ImageRegionEditorEventData {\n  // trigger\n  'IIIFViewer.ManifestUpdated': {objects?: IiifManifestObject[]}\n\n  'IIIFViewer.RegionCreated': {objectIri: string, imageIri: string, regionIri: string, regionLabel: string}\n\n  'IIIFViewer.RegionRemoved': {objectIri: string, imageIri: string, regionIri: string, regionLabel: string}\n\n  'IIIFViewer.RegionUpdated': {objectIri: string, imageIri: string, regionIri: string, regionLabel: string}\n\n  // listen\n  'IIIFViewer.ZoomToRegion': {imageIri: string, regionIri: string}\n  'IIIFViewer.HighlightRegion': {regionIri: string}\n\n  // TODO, implement RemoveRegion\n  'IIIFViewer.RemoveRegion': { objectIri: string, imageIri: string, regionIri: string }\n\n  'IIIFViewer.AddObjectImages': {objectIri: string, imageIris: string[]}\n  'IIIFViewer.AddImagesForObject': {objectIri: string}\n}\n\nconst event: EventMaker<ImageRegionEditorEventData> = EventMaker;\n\nexport const ManifestUpdatedEvent = event('IIIFViewer.ManifestUpdated');\nexport const RegionCreatedEvent = event('IIIFViewer.RegionCreated');\nexport const RegionUpdatedEvent = event('IIIFViewer.RegionUpdated');\nexport const RegionRemovedEvent = event('IIIFViewer.RegionRemoved');\n\nexport const ZoomToRegionEvent = event('IIIFViewer.ZoomToRegion');\nexport const HighlightRegion = event('IIIFViewer.HighlightRegion');\nexport const RemoveRegion = event('IIIFViewer.RemoveRegion');\nexport const AddObjectImagesEvent = event('IIIFViewer.AddObjectImages');\nexport const AddImagesForObjectEvent = event('IIIFViewer.AddImagesForObject');\n"],"sourceRoot":""}