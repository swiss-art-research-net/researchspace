{"version":3,"sources":["webpack:///./node_modules/nested-property/index.js"],"names":["module","exports","set","setNestedProperty","object","property","value","split","reduce","obj","prop","idx","length","get","getNestedProperty","has","hasNestedProperty","options","array","own","hasOwnProperty","hasOwn","this","isIn","isInNestedProperty","objectInPath","pathExists","validPath"],"mappings":"6FASAA,EAAOC,QAAU,CACfC,IA6EF,SAASC,kBAAkBC,EAAQC,EAAUC,GACzC,GAAIF,GAA2B,iBAAVA,EAAoB,CACrC,GAAuB,iBAAZC,GAAqC,KAAbA,EAAiB,CAChD,IAAIE,EAAQF,EAASE,MAAM,KAC3B,OAAOA,EAAMC,QAAO,SAAUC,EAAKC,EAAMC,GAKrC,OAJAF,EAAIC,GAAQD,EAAIC,IAAS,GACrBH,EAAMK,QAAWD,EAAM,IACvBF,EAAIC,GAAQJ,GAETG,EAAIC,KACZN,GACA,MAAuB,iBAAZC,GACdD,EAAOC,GAAYC,EACZF,EAAOC,IAEPD,EAGX,OAAOA,GA9FbS,IAeF,SAASC,kBAAkBV,EAAQC,GAC/B,OAAID,GAA2B,iBAAVA,EACM,iBAAZC,GAAqC,KAAbA,EACnBA,EAASE,MAAM,KACdC,QAAO,SAAUC,EAAKC,GAC/B,OAAOD,GAAOA,EAAIC,KACnBN,GACuB,iBAAZC,EACPD,EAAOC,GAEPD,EAGJA,GA3BbW,IAyCF,SAASC,kBAAkBZ,EAAQC,EAAUY,GAGzC,OAFAA,EAAUA,GAAW,MAEjBb,GAA2B,iBAAVA,KACM,iBAAZC,GAAqC,KAAbA,EACnBA,EAASE,MAAM,KACdC,QAAO,SAAUC,EAAKC,EAAMC,EAAKO,GAC1C,OAAIP,GAAOO,EAAMN,OAAS,EAClBK,EAAQE,OACEV,IAAOA,EAAIW,eAAeV,MAElB,OAARD,GAA8B,iBAAPA,KAAmBC,KAAQD,IAG7DA,GAAOA,EAAIC,KACnBN,GACuB,iBAAZC,GACPA,KAAYD,IAzD7BiB,OAAQ,SAAUjB,EAAQC,EAAUY,GAChC,OAAOK,KAAKP,IAAIX,EAAQC,EAAUY,GAAW,CAACE,KAAK,KAEvDI,KAuGF,SAASC,mBAAmBpB,EAAQC,EAAUoB,EAAcR,GAGxD,GAFAA,EAAUA,GAAW,GAEjBb,GAA2B,iBAAVA,EAAoB,CACrC,GAAuB,iBAAZC,GAAqC,KAAbA,EAAiB,CAChD,IAEIqB,EAFAnB,EAAQF,EAASE,MAAM,KACvBgB,GAAO,EAQX,OALAG,IAAenB,EAAMC,QAAO,SAAUC,EAAKC,GAEvC,OADAa,EAAOA,GAAQd,IAAQgB,KAAmBhB,GAAOA,EAAIC,KAAUe,EACxDhB,GAAOA,EAAIC,KACnBN,GAECa,EAAQU,UACDJ,GAAQG,EAERH,EAGX,OAAO,EAGX,OAAO","file":"npm.nested-property-daa5354a83780e8164c8.js","sourcesContent":["/**\n* @license nested-property https://github.com/cosmosio/nested-property\n*\n* The MIT License (MIT)\n*\n* Copyright (c) 2014-2015 Olivier Scherrer <pode.fr@gmail.com>\n*/\n\"use strict\";\n\nmodule.exports = {\n  set: setNestedProperty,\n  get: getNestedProperty,\n  has: hasNestedProperty,\n  hasOwn: function (object, property, options) {\n      return this.has(object, property, options || {own: true});\n  },\n  isIn: isInNestedProperty\n};\n\n/**\n * Get the property of an object nested in one or more objects\n * given an object such as a.b.c.d = 5, getNestedProperty(a, \"b.c.d\") will return 5.\n * @param {Object} object the object to get the property from\n * @param {String} property the path to the property as a string\n * @returns the object or the the property value if found\n */\nfunction getNestedProperty(object, property) {\n    if (object && typeof object == \"object\") {\n        if (typeof property == \"string\" && property !== \"\") {\n            var split = property.split(\".\");\n            return split.reduce(function (obj, prop) {\n                return obj && obj[prop];\n            }, object);\n        } else if (typeof property == \"number\") {\n            return object[property];\n        } else {\n            return object;\n        }\n    } else {\n        return object;\n    }\n}\n\n/**\n * Tell if a nested object has a given property (or array a given index)\n * given an object such as a.b.c.d = 5, hasNestedProperty(a, \"b.c.d\") will return true.\n * It also returns true if the property is in the prototype chain.\n * @param {Object} object the object to get the property from\n * @param {String} property the path to the property as a string\n * @param {Object} options:\n *  - own: set to reject properties from the prototype\n * @returns true if has (property in object), false otherwise\n */\nfunction hasNestedProperty(object, property, options) {\n    options = options || {};\n\n    if (object && typeof object == \"object\") {\n        if (typeof property == \"string\" && property !== \"\") {\n            var split = property.split(\".\");\n            return split.reduce(function (obj, prop, idx, array) {\n                if (idx == array.length - 1) {\n                    if (options.own) {\n                        return !!(obj && obj.hasOwnProperty(prop));\n                    } else {\n                        return !!(obj !== null && typeof obj == \"object\" && prop in obj);\n                    }\n                }\n                return obj && obj[prop];\n            }, object);\n        } else if (typeof property == \"number\") {\n            return property in object;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n\n/**\n * Set the property of an object nested in one or more objects\n * If the property doesn't exist, it gets created.\n * @param {Object} object\n * @param {String} property\n * @param value the value to set\n * @returns object if no assignment was made or the value if the assignment was made\n */\nfunction setNestedProperty(object, property, value) {\n    if (object && typeof object == \"object\") {\n        if (typeof property == \"string\" && property !== \"\") {\n            var split = property.split(\".\");\n            return split.reduce(function (obj, prop, idx) {\n                obj[prop] = obj[prop] || {};\n                if (split.length == (idx + 1)) {\n                    obj[prop] = value;\n                }\n                return obj[prop];\n            }, object);\n        } else if (typeof property == \"number\") {\n            object[property] = value;\n            return object[property];\n        } else {\n            return object;\n        }\n    } else {\n        return object;\n    }\n}\n\n/**\n * Tell if an object is on the path to a nested property\n * If the object is on the path, and the path exists, it returns true, and false otherwise.\n * @param {Object} object to get the nested property from\n * @param {String} property name of the nested property\n * @param {Object} objectInPath the object to check\n * @param {Object} options:\n *  - validPath: return false if the path is invalid, even if the object is in the path\n * @returns {boolean} true if the object is on the path\n */\nfunction isInNestedProperty(object, property, objectInPath, options) {\n    options = options || {};\n\n    if (object && typeof object == \"object\") {\n        if (typeof property == \"string\" && property !== \"\") {\n            var split = property.split(\".\"),\n                isIn = false,\n                pathExists;\n\n            pathExists = !!split.reduce(function (obj, prop) {\n                isIn = isIn || obj === objectInPath || (!!obj && obj[prop] === objectInPath);\n                return obj && obj[prop];\n            }, object);\n\n            if (options.validPath) {\n                return isIn && pathExists;\n            } else {\n                return isIn;\n            }\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n"],"sourceRoot":""}