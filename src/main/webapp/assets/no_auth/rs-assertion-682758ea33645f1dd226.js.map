{"version":3,"sources":["webpack:///./src/main/web/components/arguments/AssertionComponent.tsx","webpack:///./src/main/web/components/arguments/AssertionEvents.ts"],"names":["PostAction","Status","IS_CANONICAL_ASK_QUERY","rso","targetsRecord","PX_asserts","PX_asserts_value","PX_is_canonical_value","HAS_ARGUMENT_ASK_QUERY","crminf","J2_concluded_that","SEMANTIC_NARRATIVE_ASK_QUERY","UserDefinedPage","props","context","cancellation","Cancellation","onChangeBelief","belief","setState","beliefs","isCanonical","value","remove","targetValue","set","onRemoveBelief","getBeliefValue","forValue","target","field","node","AssertionsComponent","deserializeBeliefValue","state","get","getDefaultBelief","onSaveAssertion","id","postAction","title","description","narrative","assertionIri","status","Saving","assertion","iri","Maybe","fromNullable","note","valueSeq","toArray","map","saveAssertion","flatMap","None","undefined","trigger","source","eventType","AssertionEvents","AssertionSaved","data","resourceIri","Kefir","constant","navigateToResource","observe","addNotification","level","message","error","e","console","renderValue","index","valueTemplate","className","classnames","styles","dot","item","canonical","notCanonical","hasArgument","key","row","dotCell","valueCell","TemplateItem","template","options","normalizeFieldDefinition","beliefCell","Belief","fields","argumentsFields","sort","compareFieldDefinitionsByLabel","Rdf","length","Immutable","Map","newValues","Loading","getChildContext","superContext","changeBelief","this","removeBelief","componentDidMount","queryValues","updateFormTemplate","loadAssertion","componentDidUpdate","prevProps","prevState","resetState","componentWillUnmount","cancelAll","onValue","assertedBeliefs","values","addingNewValue","addingNarrative","semanticContext","selectPattern","querying","isCanonicalQuery","parametrizeQuery","isCanonicalQuerying","SparqlClient","ask","hasArgumentQuery","hasArgumentQuerying","combine","zip","queryStr","parsedQuery","SparqlUtil","parseQuerySync","setBindings","subject","templateDataContext","formTemplate","capturer","CapturedContext","inheritAndCapture","appliedTemplateScope","compile","then","ModuleRegistry","parseHtmlToReact","parentContext","capturedDataContext","getResult","renderNewValueForm","fieldClone","minOccurs","maxOccurs","input","href","onClick","preventDefault","ResourceEditorForm","newSubjectTemplate","persistence","browserPersistence","FormGroup","Button","bsStyle","name","style","marginLeft","ControlLabel","renderNarrative","Panel","collapsible","expanded","DropArea","alwaysVisible","query","repository","onDrop","dropMessage","ResourceLinkComponent","renderAssertionForm","isSaving","isSaveDisabled","isEmpty","some","SimpleBeliefValue","NoOpinion","FormControl","type","placeholder","onChange","componentClass","disabled","renderNote","label","noteDot","renderValues","beliefTitle","body","Spinner","render","getPreferredLabel","newValue","newField","find","currentModel","persist","initialModel","persistCompositeValue","Agree","concat","entries","computeModelDiff","FieldValue","empty","_","entry","equals","nestedValues","filter","LdpPersistence","persistModelUpdates","inserted","flatten","defaultProps","Redirect","childContextTypes","Component","ArgumentsContextTypes","TemplateContextTypes","a","b","AssertionComponent","event","EventMaker"],"mappings":"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","file":"rs-assertion-682758ea33645f1dd226.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2015-2020, © Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as React from 'react';\nimport ReactSelect from 'react-select';\nimport { FormControl, ControlLabel, FormGroup, Button, Panel } from 'react-bootstrap';\nimport * as Maybe from 'data.maybe';\nimport * as Immutable from 'immutable';\nimport * as _ from 'lodash';\nimport * as Kefir from 'kefir';\nimport * as SparqlJs from 'sparqljs';\nimport * as classnames from 'classnames';\n\nimport { Component, ComponentChildContext, TemplateContextTypes } from 'platform/api/components';\nimport { TemplateItem } from 'platform/components/ui/template';\nimport { Rdf } from 'platform/api/rdf';\nimport { CapturedContext } from 'platform/api/services/template';\nimport { ModuleRegistry } from 'platform/api/module-loader';\nimport { SparqlClient, SparqlUtil } from 'platform/api/sparql';\nimport { Cancellation } from 'platform/api/async/Cancellation';\nimport { trigger } from 'platform/api/events';\n\nimport {\n  CompositeValue,\n  FieldDefinitionProp,\n  FieldValue,\n  LdpPersistence,\n  ResourceEditorForm,\n  SparqlBindingValue,\n  getPreferredLabel,\n  computeModelDiff,\n  queryValues,\n  normalizeFieldDefinition,\n} from 'platform/components/forms';\nimport { Spinner } from 'platform/components/ui/spinner';\nimport { DropArea } from 'platform/components/dnd/DropArea';\nimport { ResourceLinkComponent } from 'platform/api/navigation/components';\nimport { navigateToResource } from 'platform/api/navigation';\nimport { addNotification } from 'platform/components/ui/notification';\n\nimport { crminf, rso } from 'platform/data/vocabularies';\n\nimport {\n  ArgumentsFieldDefinition,\n  Assertion,\n  AssertedBelief,\n  ArgumentsContext,\n  ArgumentsContextTypes,\n  SimpleBeliefValue,\n} from './ArgumentsApi';\nimport { saveAssertion, loadAssertion } from './AssertionsStore';\nimport { AssertionsComponent } from './AssertionsComponent';\nimport { Belief } from './Belief';\n\nimport * as AssertionEvents from './AssertionEvents';\n\nimport * as styles from './AssertionComponent.scss';\n\nconst DEFAULT_VALUE_TEMPLATE = `<div>\n  {{#ifCond field.xsdDatatype.value \"==\"  \"http://www.w3.org/2001/XMLSchema#string\"}}\n    {{value.value.value}}\n  {{/ifCond}}\n  {{#ifCond field.xsdDatatype.value \"==\"  \"http://www.w3.org/2001/XMLSchema#dateTime\"}}\n    {{value.value.value}}\n  {{/ifCond}}\n  {{#ifCond field.xsdDatatype.value \"==\"  \"http://www.w3.org/2001/XMLSchema#anyURI\"}}\n    <semantic-link uri=\"{{value.value.value}}\" guess-repository=true></semantic-link>\n  {{/ifCond}}\n</div>`;\n\nconst IS_CANONICAL_ASK_QUERY = `ASK {\n  OPTIONAL {\n    ?assertion ${rso.targetsRecord} ?subject ;\n               ${rso.PX_asserts} ?belief .\n    ?belief ${rso.PX_asserts_value} ?value .\n    ?belief ${rso.PX_is_canonical_value} ?isCanonicalValue .\n  }\n  FILTER(!bound(?belief) || ?isCanonicalValue)\n}`;\n\nconst HAS_ARGUMENT_ASK_QUERY = `ASK {\n  ?assertion ${rso.targetsRecord} ?subject ;\n             ${rso.PX_asserts} ?belief .\n  ?belief ${rso.PX_asserts_value} ?value .\n  FILTER EXISTS { ?argument ${crminf.J2_concluded_that} ?belief }\n}`;\n\nconst SEMANTIC_NARRATIVE_ASK_QUERY = `ASK {\n  ?value a ${rso.UserDefinedPage}.\n}`;\n\nexport enum PostAction {\n  None = 'none',\n  Redirect = 'redirect',\n}\n\nexport enum Status {\n  Loading,\n  Saving,\n}\n\nexport interface DefaultConfig {\n  /**\n   * Unique ID of the component.\n   */\n  id: string;\n  /**\n   * Template to display values of the field.\n   */\n  valueTemplate?: string;\n  /**\n   * Form to be used to add an alternative value to the field.\n   */\n  formTemplate?: string;\n  /**\n   * Optional post-action to be performed after saving the assertion.\n   */\n  postAction?: PostAction;\n}\n\nexport interface CreateAssertionConfig extends DefaultConfig {\n  /**\n   * Resource IRI.\n   */\n  target: string;\n  /**\n   * Field definitions.\n   */\n  fields: ReadonlyArray<FieldDefinitionProp>;\n}\n\nexport interface EditAssertionConfig extends DefaultConfig {\n  /**\n   * Assertion IRI.\n   */\n  assertion: string;\n}\n\nexport type AssertionComponentConfig = CreateAssertionConfig | EditAssertionConfig;\n\ntype Props = AssertionComponentConfig;\n\ninterface Value extends SparqlBindingValue {\n  isCanonical: boolean;\n  hasArgument: boolean;\n}\n\ninterface State {\n  target?: Rdf.Iri;\n  fields?: ReadonlyArray<ArgumentsFieldDefinition>;\n  field?: ArgumentsFieldDefinition;\n  title?: string;\n  description?: string;\n  beliefs?: Immutable.Map<Rdf.Node, AssertedBelief>;\n  values?: ReadonlyArray<Value>;\n  addingNewValue?: boolean;\n  newValues?: ReadonlyArray<Rdf.Node>;\n  formTemplate?: React.ReactNode;\n  capturedDataContext?: CapturedContext;\n  addingNarrative?: boolean;\n  narrative?: Rdf.Iri;\n  assertionIri?: Rdf.Iri;\n  status?: Status;\n}\n\n/**\n * The component to create/edit assertions.\n *\n * @example\n *\n * <!-- Demo configuration for creating an assertion -->\n * <rs-assertion target='http://example.com/some-resource' fields='{[...]}'></rs-assertion>\n *\n * <!-- Demo configuration for editing an assertion -->\n * <rs-assertion target='http://example.com/some-resource'></rs-assertion>\n */\nexport class AssertionComponent extends Component<Props, State> {\n  static defaultProps: Partial<Props> = {\n    fields: [],\n    valueTemplate: DEFAULT_VALUE_TEMPLATE,\n    postAction: PostAction.Redirect,\n  };\n\n  private readonly cancellation = new Cancellation();\n\n  constructor(props: Props, context: any) {\n    super(props, context);\n    const { target, fields } = props as CreateAssertionConfig;\n    const { assertion } = props as EditAssertionConfig;\n    const argumentsFields = fields\n      .map((field) => {\n        return { ...field, iri: field.iri || field.id, id: 'field' };\n      })\n      .sort(compareFieldDefinitionsByLabel);\n    this.state = {\n      target: target ? Rdf.iri(target) : undefined,\n      fields: argumentsFields,\n      field: argumentsFields.length === 1 ? argumentsFields[0] : undefined,\n      title: '',\n      description: '',\n      beliefs: Immutable.Map<Rdf.Node, AssertedBelief>(),\n      newValues: [],\n      assertionIri: assertion ? Rdf.iri(assertion) : undefined,\n      status: assertion ? Status.Loading : undefined,\n    };\n  }\n\n  static childContextTypes = {\n    ...Component.childContextTypes,\n    ...ArgumentsContextTypes,\n    ...TemplateContextTypes,\n  };\n\n  getChildContext(): ComponentChildContext & ArgumentsContext {\n    const superContext = super.getChildContext();\n    return {\n      ...superContext,\n      changeBelief: this.onChangeBelief,\n      removeBelief: this.onRemoveBelief,\n      getBeliefValue: this.getBeliefValue,\n    };\n  }\n\n  componentDidMount() {\n    const { field, assertionIri } = this.state;\n    if (field) {\n      this.queryValues(field);\n      this.updateFormTemplate();\n    }\n    if (assertionIri) {\n      this.loadAssertion();\n    }\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    const { field, assertionIri } = this.state;\n    if (field !== prevState.field && !assertionIri) {\n      this.resetState();\n      if (field) {\n        this.queryValues(field);\n        this.updateFormTemplate();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    this.cancellation.cancelAll();\n  }\n\n  private loadAssertion() {\n    this.cancellation.map(loadAssertion(this.state.assertionIri)).onValue((assertion) => {\n      const assertedBeliefs = Immutable.Map<Rdf.Node, AssertedBelief>(\n        assertion.beliefs.map((belief) => [belief.targetValue, belief])\n      );\n      this.setState({\n        target: assertion.target,\n        field: assertion.field,\n        title: assertion.title,\n        description: assertion.note,\n        narrative: assertion.narrative,\n        beliefs: assertedBeliefs,\n      });\n      this.queryValues(assertion.field);\n      this.updateFormTemplate();\n    });\n  }\n\n  private resetState() {\n    this.setState({\n      title: '',\n      description: '',\n      beliefs: Immutable.Map<Rdf.Node, AssertedBelief>(),\n      values: undefined,\n      newValues: [],\n      addingNewValue: false,\n      narrative: undefined,\n      addingNarrative: false,\n    });\n  }\n\n  private queryValues(field: ArgumentsFieldDefinition) {\n    const { semanticContext: context } = this.context;\n    const { target } = this.state;\n    this.setState({ status: Status.Loading });\n    queryValues(field.selectPattern, target, { context })\n      .flatMap((values) => {\n        if (!values.length) {\n          return Kefir.constant([]);\n        }\n        const querying = values.map((value) => {\n          const isCanonicalQuery = this.parametrizeQuery(IS_CANONICAL_ASK_QUERY, value);\n          const isCanonicalQuerying = SparqlClient.ask(isCanonicalQuery, { context });\n\n          const hasArgumentQuery = this.parametrizeQuery(HAS_ARGUMENT_ASK_QUERY, value);\n          const hasArgumentQuerying = SparqlClient.ask(hasArgumentQuery, { context });\n\n          return Kefir.combine({\n            isCanonical: isCanonicalQuerying,\n            hasArgument: hasArgumentQuerying,\n          }).map(({ isCanonical, hasArgument }) => ({ ...value, isCanonical, hasArgument }));\n        });\n        return Kefir.zip(querying);\n      })\n      .onValue((values) => this.setState({ values, status: undefined }));\n  }\n\n  private parametrizeQuery(queryStr: string, value: SparqlBindingValue) {\n    const { target } = this.state;\n    const parsedQuery = SparqlUtil.parseQuerySync<SparqlJs.AskQuery>(queryStr);\n    return SparqlClient.setBindings(parsedQuery, { subject: target, value: value.value });\n  }\n\n  private updateFormTemplate() {\n    const { templateDataContext } = this.context;\n    const { formTemplate } = this.props;\n    if (!formTemplate) {\n      return;\n    }\n    const capturer = CapturedContext.inheritAndCapture(templateDataContext);\n    this.appliedTemplateScope\n      .compile(formTemplate)\n      .then((template) =>\n        ModuleRegistry.parseHtmlToReact(\n          template({ field: this.state.field }, { capturer, parentContext: templateDataContext })\n        )\n      )\n      .then((formTemplate) => {\n        this.setState({\n          formTemplate: formTemplate,\n          capturedDataContext: capturer.getResult(),\n        });\n      });\n  }\n\n  private onChangeBelief = (belief: AssertedBelief) => {\n    this.setState(\n      ({ beliefs }): State => {\n        if (belief.isCanonical && belief.belief.value === 'No Opinion') {\n          return { beliefs: beliefs.remove(belief.targetValue) };\n        }\n        return { beliefs: beliefs.set(belief.targetValue, belief) };\n      }\n    );\n  };\n\n  private onRemoveBelief = (belief: AssertedBelief) => {\n    this.setState(({ beliefs }): State => ({ beliefs: beliefs.remove(belief.targetValue) }));\n  };\n\n  private getBeliefValue = (forValue: string, isCanonical: boolean): AssertedBelief => {\n    const { target, field, beliefs } = this.state;\n    const node = AssertionsComponent.deserializeBeliefValue(this.state.field, forValue);\n    return beliefs.get(node) || AssertionsComponent.getDefaultBelief(target, field, node, isCanonical, 'default');\n  };\n\n  private onSaveAssertion = () => {\n    const { id, postAction } = this.props;\n    const { target, field, title, description, beliefs, narrative, assertionIri } = this.state;\n\n    this.setState({ status: Status.Saving });\n\n    const assertion: Assertion = {\n      iri: Maybe.fromNullable(assertionIri),\n      title: title,\n      note: description,\n      narrative: narrative,\n      field: field,\n      target: target,\n      beliefs: beliefs.valueSeq().toArray(),\n    };\n    this.cancellation\n      .map(saveAssertion(assertion))\n      .flatMap((saveAssertion) => {\n        if (postAction === PostAction.None) {\n          this.setState({\n            assertionIri: saveAssertion.assertion,\n            status: undefined,\n          });\n          trigger({\n            source: id,\n            eventType: AssertionEvents.AssertionSaved,\n            data: { resourceIri: saveAssertion.assertion.value },\n          });\n          return Kefir.constant(undefined);\n        }\n        return navigateToResource(saveAssertion.assertion, {}, 'assets');\n      })\n      .observe({\n        value: () => {\n          addNotification({\n            level: 'success',\n            message: `Assertion has been ${assertionIri ? 'updated' : 'saved'} successfully!`,\n          });\n        },\n        error: (e) => {\n          console.error(e);\n          addNotification({\n            level: 'error',\n            message: `Something went wrong during ${assertionIri ? 'updating' : 'saving'} the assertion.`,\n          });\n          this.setState({ status: undefined });\n        },\n      });\n  };\n\n  private renderNewValueForm() {\n    const { target, field, addingNewValue, formTemplate } = this.state;\n    if (!formTemplate) {\n      return null;\n    }\n\n    const fieldClone = { ...field } as any;\n    fieldClone.values = this.state.newValues.map((value) => ({ value }));\n    fieldClone.minOccurs = 1;\n    fieldClone.maxOccurs = 1;\n\n    let input = (\n      <div>\n        <a\n          href=\"\"\n          onClick={(e) => {\n            e.preventDefault();\n            this.setState({ addingNewValue: true });\n          }}\n        >\n          Add an alternative value...\n        </a>\n      </div>\n    );\n    if (addingNewValue && formTemplate) {\n      input = (\n        <ResourceEditorForm\n          newSubjectTemplate={target.value}\n          fields={[fieldClone]}\n          persistence={this}\n          browserPersistence={false}\n          postAction={() => this.setState({ addingNewValue: false })}\n        >\n          <FormGroup>{formTemplate}</FormGroup>\n          <div data-flex-layout=\"row top-right\">\n            <Button bsStyle=\"danger\" onClick={() => this.setState({ addingNewValue: false })}>\n              Cancel\n            </Button>\n            <button name=\"submit\" className=\"btn btn-success\" style={{ marginLeft: 12 }}>\n              Submit\n            </button>\n          </div>\n        </ResourceEditorForm>\n      );\n    }\n    return (\n      <FormGroup>\n        <ControlLabel>New Value</ControlLabel>\n        {input}\n      </FormGroup>\n    );\n  }\n\n  private renderNarrative() {\n    const { addingNarrative, narrative } = this.state;\n    let input = (\n      <div>\n        <a\n          href=\"\"\n          onClick={(e) => {\n            e.preventDefault();\n            this.setState((prevState: State): State => ({ addingNarrative: !prevState.addingNarrative }));\n          }}\n        >\n          Add semantic narrative...\n        </a>\n        {addingNarrative ? (\n          <Panel collapsible expanded={addingNarrative}>\n            <DropArea\n              alwaysVisible={true}\n              query={SEMANTIC_NARRATIVE_ASK_QUERY}\n              repository=\"assets\"\n              onDrop={(narrative) => this.setState({ narrative })}\n              dropMessage=\"You can drag and drop Semantic Narrative from Clipboard here, to use it as a description\"\n            />\n          </Panel>\n        ) : null}\n      </div>\n    );\n    if (narrative) {\n      input = (\n        <div>\n          <ResourceLinkComponent iri={narrative.value} />\n        </div>\n      );\n    }\n    return (\n      <FormGroup>\n        <ControlLabel>Narrative</ControlLabel>\n        {input}\n      </FormGroup>\n    );\n  }\n\n  private renderAssertionForm() {\n    const { field, title, description, beliefs, assertionIri, status } = this.state;\n    if (!field) {\n      return null;\n    }\n    const isSaving = status === Status.Saving;\n    const isSaveDisabled =\n      isSaving ||\n      status === Status.Loading ||\n      title.length === 0 ||\n      beliefs.isEmpty() ||\n      beliefs.some(({ belief }) => belief.value === SimpleBeliefValue.NoOpinion);\n    return (\n      <div>\n        <hr />\n        <h4>New Assertion</h4>\n        <FormGroup>\n          <ControlLabel>Title*</ControlLabel>\n          <FormControl\n            type=\"text\"\n            value={title}\n            placeholder=\"Enter assertion title...\"\n            onChange={(e) => this.setState({ title: (e.target as HTMLInputElement).value })}\n          />\n        </FormGroup>\n        <FormGroup>\n          <ControlLabel>Description</ControlLabel>\n          <FormControl\n            componentClass=\"textarea\"\n            value={description}\n            placeholder=\"Enter assertion description...\"\n            onChange={(e) => this.setState({ description: (e.target as HTMLTextAreaElement).value })}\n          />\n        </FormGroup>\n        {this.renderNarrative()}\n        {this.renderNewValueForm()}\n        <Button bsStyle=\"primary\" onClick={this.onSaveAssertion} disabled={isSaveDisabled}>\n          {isSaving ? (\n            <span>\n              {assertionIri ? 'Updating' : 'Saving'}\n              <i className=\"fa fa-cog fa-spin\" style={{ marginLeft: 5 }} />\n            </span>\n          ) : assertionIri ? (\n            'Update Assertion'\n          ) : (\n            'Save Assertion'\n          )}\n        </Button>\n      </div>\n    );\n  }\n\n  private renderValue = (\n    value: {\n      value: Rdf.Node;\n      isCanonical: boolean;\n      hasArgument: boolean;\n    },\n    index: number\n  ) => {\n    const { valueTemplate } = this.props;\n    const { field } = this.state;\n    const className = classnames({\n      [styles.dot]: true,\n      [styles.item]: true,\n      [styles.canonical]: value.isCanonical,\n      [styles.notCanonical]: !value.isCanonical,\n      [styles.hasArgument]: value.hasArgument,\n    });\n    return (\n      <div key={index} className={styles.row}>\n        <div className={styles.dotCell}>\n          <span className={className} />\n        </div>\n        <div className={styles.valueCell}>\n          <TemplateItem\n            template={{\n              source: valueTemplate,\n              options: { value, field: normalizeFieldDefinition(field) },\n            }}\n          />\n        </div>\n        <div className={styles.beliefCell}>\n          <Belief forValue={value.value.value} isCanonical={value.isCanonical} />\n        </div>\n      </div>\n    );\n  };\n\n  private renderNote() {\n    return (\n      <div>\n        <span className={`label ${styles.label} ${styles.canonical}`}>BRITISH MUSEUM</span>\n        <br />\n        <span className={`label ${styles.label} ${styles.notCanonical}`}>COMMUNITY</span>\n        <br />\n        <div className={styles.note}>\n          <span className={`${styles.dot} ${styles.canonical} ${styles.hasArgument} ${styles.noteDot}`} />\n          <span className={`${styles.dot} ${styles.notCanonical} ${styles.hasArgument} ${styles.noteDot}`} />\n          <i className={styles.note}>Has an argument given in support of a belief</i>\n        </div>\n        <div className={styles.note}>\n          <span className={`${styles.dot} ${styles.canonical} ${styles.noteDot}`} />\n          <span className={`${styles.dot} ${styles.notCanonical} ${styles.noteDot}`} />\n          <i className={styles.note}>No argument given</i>\n        </div>\n      </div>\n    );\n  }\n\n  private renderValues() {\n    const { field, values, newValues } = this.state;\n    if (!field) {\n      return null;\n    }\n    if (!values) {\n      return <Spinner />;\n    }\n    return (\n      <div>\n        <div className={styles.row}>\n          <div className={styles.dotCell} />\n          <div className={styles.valueCell}>\n            <strong>Value</strong>\n          </div>\n          <div className={styles.beliefCell}>\n            <i className={styles.beliefTitle}>Do you agree?</i>\n          </div>\n        </div>\n        <div className={styles.body}>\n          {!values.length && !newValues.length ? (\n            <i>No Values</i>\n          ) : (\n            <div>\n              {values.map(this.renderValue)}\n              {newValues.map((value, index) =>\n                this.renderValue({ value, isCanonical: false, hasArgument: false }, index)\n              )}\n            </div>\n          )}\n        </div>\n        {this.renderNote()}\n      </div>\n    );\n  }\n\n  render() {\n    const { fields, field, assertionIri, status } = this.state;\n    if (status === Status.Loading) {\n      return <Spinner />;\n    }\n    return (\n      <div>\n        <FormGroup>\n          <ControlLabel>Field to assert on</ControlLabel>\n          {assertionIri ? (\n            <FormControl type=\"text\" value={getPreferredLabel(field.label)} disabled={true} />\n          ) : (\n            <ReactSelect\n              value={field ? field.iri : undefined}\n              options={fields.map((field) => ({ value: field.iri, label: getPreferredLabel(field.label) }))}\n              onChange={(newValue: { value: string }) => {\n                const newField = newValue ? fields.find((field) => field.iri === newValue.value) : undefined;\n                this.setState({ field: newField });\n              }}\n            />\n          )}\n        </FormGroup>\n        {this.renderValues()}\n        {this.renderAssertionForm()}\n      </div>\n    );\n  }\n\n  remove(currentModel: CompositeValue) {\n    // TODO implement remove assertion\n    return undefined;\n  }\n\n  persist(initialModel: CompositeValue, currentModel: CompositeValue): Kefir.Property<void> {\n    const { target, field } = this.state;\n    return this.persistCompositeValue(initialModel, currentModel).map((values) =>\n      this.setState(\n        (prevState: State): State => {\n          const belief = AssertionsComponent.getDefaultBelief(target, field, values[0], false, 'default');\n          belief.belief.value = SimpleBeliefValue.Agree;\n          return {\n            beliefs: prevState.beliefs.set(values[0], belief),\n            newValues: prevState.newValues.concat(values),\n          };\n        }\n      )\n    );\n  }\n\n  private persistCompositeValue(\n    initialModel: CompositeValue,\n    currentModel: CompositeValue\n  ): Kefir.Property<ReadonlyArray<Rdf.Node>> {\n    const { target } = this.state;\n    const entries = computeModelDiff(FieldValue.empty, currentModel);\n    if (entries.length > 1) {\n      const topLevelFieldValue = _.find(entries, (entry) => entry.subject.equals(target));\n      const nestedValues = _.filter(entries, (entry) => !entry.subject.equals(target));\n      return new LdpPersistence()\n        .persistModelUpdates(nestedValues[0].subject, nestedValues)\n        .map(() => topLevelFieldValue.inserted);\n    } else {\n      return Kefir.constant(_.flatten(entries.map((entry) => entry.inserted as Array<Rdf.Node>)));\n    }\n  }\n}\n\nexport default AssertionComponent;\n\nfunction compareFieldDefinitionsByLabel(a: ArgumentsFieldDefinition, b: ArgumentsFieldDefinition): number {\n  if (a.label < b.label) {\n    return -1;\n  }\n  if (a.label > b.label) {\n    return 1;\n  }\n  return 0;\n}\n","/**\n * ResearchSpace\n * Copyright (C) 2015-2020, © Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { EventMaker } from 'platform/api/events';\n\nexport interface AssertionEventData {\n  /**\n   * Event which should be triggered when an assertion has been saved\n   */\n  'Assertion.Saved': { resourceIri: string };\n}\nconst event: EventMaker<AssertionEventData> = EventMaker;\n\nexport const AssertionSaved = event('Assertion.Saved');\n"],"sourceRoot":""}