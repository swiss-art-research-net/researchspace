{"version":3,"sources":["webpack:///./src/main/web/components/semantic/graph/layouts/CircleLayout.ts"],"names":["CircleLayout","registerCytoscapeLayout","identity","mapOptions","api","options","has","sortBy","sort"],"mappings":"iIAmBA,YACA,UAEA,UACA,UAmFa,EAAAA,aAAe,EAAAC,wBAAwB,SAAU,EAAAC,UAG9D,SAASC,WAAWC,EAAmBC,GACrC,GAAI,EAAAC,IAAID,EAAS,UAAW,CAC1B,IAAME,EAASF,EAAgB,OAC/BA,EAAc,KAAI,EAAAG,KAAKD,GAEzB,OAAOF,KAPT,UAAe,EAAAL","file":"semantic-graph-layout-circle-2a79aa85e82da4e7246d.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { has } from 'lodash';\nimport { identity } from 'core.lambda';\n\nimport { registerCytoscapeLayout, CytoscapeApi } from '../api/Api';\nimport { sort } from '../api/LayoutHelpers';\n\n/**\n * The circle layout puts nodes in a circle\n */\nexport interface SemanticGraphCircleLayoutConfig {\n  /**\n   * Whether to fit the viewport to the graph\n   *\n   * @default true\n   */\n  fit?: boolean;\n\n  /**\n   * The padding on fit in pixels\n   *\n   * @default 30\n   */\n  padding?: number;\n\n  /**\n   * Prevents node overlap, may overflow bounding-box and radius if not enough space\n   *\n   * @default true\n   */\n  avoidOverlap?: boolean;\n\n  /**\n   * The radius of the circle in pixels\n   */\n  radius?: number;\n\n  /**\n   * Where nodes start in radians\n   *\n   * @default 3/2*Math.Pi\n   */\n  startAngle?: number;\n\n  /**\n   * How many radians should be between the first and last node (defaults to full circle)\n   */\n  sweep?: number;\n\n  /**\n   * Whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)\n   *\n   * @default true\n   */\n  clockwise?: boolean;\n\n  /**\n   * Full IRI of the property which value can be used to order nodes. Property value should be some kind of number, e.g `xsd:integer`, or at least valid number in `xsd:string` literal.\n   */\n  sortBy?: string;\n  /**\n   * Whether to transition the node positions\n   *\n   * @default false\n   */\n  animate?: boolean;\n\n  /**\n   * Duration of animation in ms if enabled\n   *\n   * @default 500\n   */\n  animationDuration?: boolean;\n\n  /**\n   * Easing of animation if enabled. For possible values see `transition-timing-function` at [easing](http://js.cytoscape.org/#style/transition-animation)\n   */\n  animationEasing?: string;\n}\n\n/**\n * Register built-in cytoscape circle layout.\n *\n * @example\n *   <graph-layout-circle></graph-layout-circle>\n *\n * @see http://js.cytoscape.org/#layouts/circle\n */\nexport const CircleLayout = registerCytoscapeLayout('circle', identity, mapOptions);\nexport default CircleLayout;\n\nfunction mapOptions(api: CytoscapeApi, options: Cy.LayoutOptions): Cy.LayoutOptions {\n  if (has(options, 'sortBy')) {\n    const sortBy = options['sortBy'];\n    options['sort'] = sort(sortBy);\n  }\n  return options;\n}\n"],"sourceRoot":""}