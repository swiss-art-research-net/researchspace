{"version":3,"sources":["webpack:///./src/main/web/components/ui/redirect-action/RedirectAction.ts","webpack:///./src/main/web/components/ui/redirect-action/RedirectActionEvents.ts"],"names":["props","context","cancellation","Cancellation","state","refresh","componentDidMount","id","action","queryParams","this","map","listen","eventType","RedirectActionPerform","target","observe","value","result","data","iri","addNotification","level","message","performRedirectAction","subject","navigateToResource","onValue","v","Rdf","Iri","error","componentWillUnmount","cancelAll","render","Component","RedirectAction","event","EventMaker"],"mappings":"6IAmBA,OAEA,QACA,SACA,QACA,QACA,UACA,SA+DA,cAGE,wBAAYA,EAAOC,GAAnB,MACE,YAAMD,EAAOC,IAAQ,K,OAHf,EAAAC,aAAe,IAAI,EAAAC,aAIzB,EAAKC,MAAQ,CACXC,SAAS,G,EAkCf,OAxCoC,8BAUlC,yBAAAC,kBAAA,WACQ,iBAAEC,EAAA,EAAAA,GAAIC,EAAA,EAAAA,OAAQC,EAAA,EAAAA,YAEpBC,KAAKR,aAAaS,IAAI,EAAAC,OAAO,CAAEC,UAAW,EAAAC,sBAAuBC,OAAQR,KAAOS,QAAQ,CACtFC,MAAO,SAACC,GACS,aAAXV,GAA0BU,EAAOC,KAAKC,KACxC,EAAAC,gBAAgB,CACdC,MAAO,QACPC,QACE,qGAyBd,SAASC,sBAAsBC,EAAkBjB,EAA4BC,GAC5D,WAAXD,EACF,EAAAH,UACoB,aAAXG,EACT,EAAAkB,mBAAmBD,EAAShB,GAAakB,SAAQ,SAACC,GAAM,OAAAA,KAExD,EAAAF,mBAAmB,EAAAG,IAAIT,IAAIZ,GAASC,GAAakB,SAAQ,SAACC,GAAM,OAAAA,KA5B5DJ,CAAsB,IAAI,EAAAK,IAAIC,IAAIZ,EAAOC,KAAKC,KAAMZ,EAAQC,IAE9DsB,MAAO,WACL,EAAAV,gBAAgB,CACdC,MAAO,QACPC,QAAS,6DAMjB,yBAAAS,qBAAA,WACEtB,KAAKR,aAAa+B,aAGpB,yBAAAC,OAAA,WACE,OAAO,MAEX,eAxCA,CAAoC,EAAAC,WAAvB,EAAAC,iBA0Cb,UAAeA,G,sEChHf,IASMC,EATN,OASmDC,WAEtC,EAAAxB,sBAAwBuB,EAAM","file":"mp-event-target-redirect-f34d4d926ac4ad5cb225.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { Component } from 'react';\n\nimport { refresh, navigateToResource } from 'platform/api/navigation';\nimport { listen } from 'platform/api/events';\nimport { Cancellation } from 'platform/api/async';\nimport { Rdf } from 'platform/api/rdf';\nimport { RedirectActionPerform } from './RedirectActionEvents';\nimport { addNotification } from 'platform/components/ui/notification';\n\nexport type RedirectActionType = 'reload' | 'redirect' | string;\n\nexport interface RedirectActionProps {\n  /**\n   * Unique id of the component that can be used by event emitters as a target.\n   */\n  id: string;\n\n  /**\n   * Defines which action will be performed once\n   * 'RedirectActionPerform' event will be catched:\n   * - 'reload' - the current page will be reloaded with provided query parameters\n   * - 'redirect' - page will be redirecte to the IRI specified in the event\n   * with provided query parameters\n   * - '{..string IRI..} - It's possible to manually specifie resource IRI to redirect.\n   */\n  action: RedirectActionType;\n\n  /**\n   * Defines a set of query parameters which will be passed to the post action navigation.\n   */\n  queryParams?: { [key: string]: string };\n}\n\n/**\n * Component which provides redirect feature.\n * In response to the event (RedirectAction.perform)\n * component perform redirect/reload operation where\n * the IRI of the target resource can be passed via parameters\n * or together with event\n *\n * <semantic-form\n *   id='semantic-form-example'\n *   post-action='event'\n *   new-subject-template='http://example.com/person-name-{{UUID}}'\n *   fields='[\n *     {\n *       \"id\": \"name\",\n *       \"label\": \"Name\",\n *       \"description\": \"\",\n *       \"xsdDatatype\": \"xsd:string\",\n *       \"minOccurs\": \"1\",\n *       \"maxOccurs\": \"1\",\n *       \"selectPattern\": \"SELECT $value WHERE {$subject rdfs:label $value}\",\n *       \"insertPattern\": \"INSERT {$subject rdfs:label $value}WHERE{}\"\n *     }\n *   ]'>\n *   <semantic-form-text-input for='name'></semantic-form-text-input>\n *   <button name='submit'>Create</button>\n *   <button name='reset'>Reset</button>\n * </semantic-form>\n *\n * <mp-event-proxy id='form-resource-created' on-event-type='Form.ResourceUpdated'\n *   proxy-event-type='RedirectAction.perform' proxy-targets='[\"redirect-to-resource\"]'>\n * </mp-event-proxy>\n *\n * <mp-event-target-redirect\n *   id='redirect-to-resource'\n *   action='redirect'\n * ></mp-event-target-redirect>\n */\nexport class RedirectAction extends Component<RedirectActionProps> {\n  private cancellation = new Cancellation();\n\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      refresh: false,\n    };\n  }\n\n  componentDidMount() {\n    const { id, action, queryParams } = this.props;\n\n    this.cancellation.map(listen({ eventType: RedirectActionPerform, target: id })).observe({\n      value: (result) => {\n        if (action === 'redirect' && !result.data.iri) {\n          addNotification({\n            level: 'error',\n            message:\n              'The component is working in the \"redirect\" mode' + \", but the catched event doesn't provide any IRI.\",\n          });\n        }\n        performRedirectAction(new Rdf.Iri(result.data.iri), action, queryParams);\n      },\n      error: () => {\n        addNotification({\n          level: 'error',\n          message: `Something went wrong. Event wasn\\'t properly handled.`,\n        });\n      },\n    });\n  }\n\n  componentWillUnmount() {\n    this.cancellation.cancelAll();\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default RedirectAction;\n\nfunction performRedirectAction(subject: Rdf.Iri, action: RedirectActionType, queryParams?: { [key: string]: string }) {\n  if (action === 'reload') {\n    refresh();\n  } else if (action === 'redirect') {\n    navigateToResource(subject, queryParams).onValue((v) => v);\n  } else {\n    navigateToResource(Rdf.iri(action), queryParams).onValue((v) => v);\n  }\n}\n","/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { EventMaker } from 'platform/api/events';\n\nexport interface RedirectActionEventData {\n  /**\n   * <mp-event-target-redirect/> listen to this event and\n   * perform redirect action in response to the event\n   */\n  'RedirectAction.perform': { iri?: string };\n}\nconst event: EventMaker<RedirectActionEventData> = EventMaker;\n\nexport const RedirectActionPerform = event('RedirectAction.perform');\n"],"sourceRoot":""}