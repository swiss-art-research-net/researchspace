{"version":3,"sources":["webpack:///./src/main/web/components/semantic/graph/layouts/PresetLayout.ts"],"names":["PresetLayout","registerCytoscapeLayout","identity","mapOptions","api","options","has","positionBy","xProp","yProp","xFn","getNumberValueForProperty","yFn","element","chain","x","map","y","getOrElse","undefined","console","error"],"mappings":"iIAmBA,YACA,UAEA,UACA,UAoEa,EAAAA,aAAe,EAAAC,wBAAwB,SAAU,EAAAC,UAM9D,SAASC,WAAWC,EAAmBC,GACjC,EAAAC,IAAID,EAAS,cAAgB,EAAAC,IAAID,EAAS,aAC5CA,EAAmB,UAYvB,SAASE,WAAWC,EAAeC,GACjC,IAAMC,EAAM,EAAAC,0BAA0BH,GAChCI,EAAM,EAAAD,0BAA0BF,GACtC,OAAO,SAAUI,GACf,OAAOH,EAAIG,GACRC,OAAM,SAACC,GACN,OAAAH,EAAIC,GAASG,KAAI,SAACC,GAChB,MAAO,CAAEF,EAAGA,EAAGE,EAAGA,SAGrBC,UAAU,CAAEH,OAAGI,EAAWF,OAAGE,KAtBTZ,CAAWF,EAAmB,UAAGA,EAAmB,WAG3Ee,QAAQC,MAAM,2EAGhB,OAAOhB,KAbT,UAAe,EAAAL","file":"semantic-graph-layout-preset-0e49b8cc717533f5a53a.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { has } from 'lodash';\nimport { identity } from 'core.lambda';\n\nimport { registerCytoscapeLayout, CytoscapeApi } from '../api/Api';\nimport { getNumberValueForProperty } from '../api/LayoutHelpers';\n\n/**\n * The preset layout puts nodes in the positions you specify manually\n */\nexport interface SemanticGraphPresetLayoutConfig {\n  /**\n   * Full IRI of the property that points to node X position value\n   */\n  positionX: string;\n\n  /**\n   * Full IRI of the property that points to node Y position value\n   */\n  positionY: string;\n\n  /**\n   * Zoom level to set, `fit` property need to be set to false\n   */\n  zoom?: number;\n\n  /**\n   * The pan level to set, `fit` property need to be set to false\n   */\n  pan?: Cy.Position;\n\n  /**\n   * Whether to fit the viewport to the graph\n   *\n   * @default true\n   */\n  fit?: boolean;\n\n  /**\n   * The padding on fit in pixels\n   *\n   * @default 30\n   */\n  padding?: number;\n\n  /**\n   * Whether to transition the node positions\n   *\n   * @default false\n   */\n  animate?: boolean;\n\n  /**\n   * Duration of animation in ms if enabled\n   *\n   * @default 500\n   */\n  animationDuration?: boolean;\n\n  /**\n   * Easing of animation if enabled. For possible values see `transition-timing-function` at [easing](http://js.cytoscape.org/#style/transition-animation)\n   */\n  animationEasing?: string;\n}\n\n/**\n * Register built-in cytoscape preset layout.\n *\n * @example\n *   <graph-layout-preset position-x=\"<propXiri>\" position-y=\"<propYiri>\"></graph-layout-preset>\n *\n * @see http://js.cytoscape.org/#layouts/preset\n */\nexport const PresetLayout = registerCytoscapeLayout('preset', identity, mapOptions);\nexport default PresetLayout;\n\n// TODO create proper type definitions for PresetLayout options;\nexport type Props = Cy.LayoutOptions;\n\nfunction mapOptions(api: CytoscapeApi, options: Cy.LayoutOptions): Cy.LayoutOptions {\n  if (has(options, 'positionX') && has(options, 'positionY')) {\n    options['positions'] = positionBy(options['positionX'], options['positionY']);\n  } else {\n    // TODO think about proper error handling in graph component API\n    console.error('Graph Preset Layout: position-x and position-y attributes are required!');\n  }\n\n  return options;\n}\n\n/**\n * Transform position properties to position function required by the layout.\n */\nfunction positionBy(xProp: string, yProp: string) {\n  const xFn = getNumberValueForProperty(xProp);\n  const yFn = getNumberValueForProperty(yProp);\n  return function (element: Cy.CollectionFirstNode): { x: number; y: number } {\n    return xFn(element)\n      .chain((x) =>\n        yFn(element).map((y) => {\n          return { x: x, y: y };\n        })\n      )\n      .getOrElse({ x: undefined, y: undefined });\n  };\n}\n"],"sourceRoot":""}