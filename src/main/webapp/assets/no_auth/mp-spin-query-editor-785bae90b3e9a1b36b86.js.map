{"version":3,"sources":["webpack:///./src/main/web/components/query-editor/QueryEditorComponent.ts"],"names":["FormGroup","createFactory","ReactBootstrap","Alert","Button","QueryValidator","QueryValidatorComponent","props","context","createQuery","queryService","addItem","state","query","onValue","iri","navigateToResource","onError","updateQuery","Rdf","updateItem","onChangeQuery","isValid","setState","semanticContext","QueryService","componentDidMount","this","getQueryTemplateCount","templateCount","SparqlClient","setBindings","SparqlUtil","parseQuery","select","map","res","parseInt","results","bindings","value","render","D","div","bsStyle","strong","onChange","disabled","onClick","Component","QueryEditorComponent","component","factory"],"mappings":"6IAmBA,OACA,QACA,QAGA,QACA,QACA,QACA,QAEA,UAEA,UAEMA,EAAY,EAAAC,cAAcC,EAAeF,WACzCG,EAAQ,EAAAF,cAAcC,EAAeC,OACrCC,EAAS,EAAAH,cAAcC,EAAeE,QAEtCC,EAAiB,EAAAJ,cAAc,EAAAK,yBAiBrC,cAEE,8BAAYC,EAAcC,GAA1B,MACE,YAAMD,EAAOC,IAAQ,KAgBf,EAAAC,YAAc,WACpB,EAAKC,aACFC,QAAQ,EAAKC,MAAMC,OACnBC,SAAQ,SAACC,GACR,SAAAC,mBAAmBD,GAAKD,SAAQ,kBAIjCG,SAAQ,gBAKL,EAAAC,YAAc,WACpB,IAAMH,EAAM,EAAAI,IAAIJ,IAAI,EAAKR,MAAMQ,KAC/B,OAAO,EAAKL,aACTU,WAAWL,EAAK,EAAKH,MAAMC,OAC3BC,SAAQ,eAGRG,SAAQ,gBAaL,EAAAI,cAAgB,SAACR,EAAcS,GACrC,EAAKC,SAAS,CAAEV,MAAK,EAAES,QAAO,KAjD9B,IAAME,EAAkB,EAAKhB,QAAQgB,gB,OACrC,EAAKd,aAAe,EAAAe,aAAaD,GACjC,EAAKZ,MAAQ,CAAEU,SAAS,G,EAiF5B,OAvF0C,oCASxC,+BAAAI,kBAAA,sBACUX,EAAA,WAAAA,IAEJA,GACFY,KAAKC,sBAAsBb,GAAKD,SAAQ,SAACe,GACvC,EAAKN,SAAS,CAAEM,cAAa,QA8B3B,+BAAAD,sBAAR,SAA8Bb,GAC5B,IAAMF,EAAQ,EAAAiB,aAAaC,YAAY,EAAAC,WAAWC,WA5DlB,iIA4D2D,CAAEpB,MAAO,EAAAM,IAAIJ,IAAIA,KACtGP,EAAUmB,KAAKnB,QAAQgB,gBAC7B,OAAO,EAAAM,aAAaI,OAAOrB,EAAO,CAAEL,QAASA,IAAW2B,KAAI,SAACC,GAC3D,OAAOC,SAASD,EAAIE,QAAQC,SAAS,GAAkB,cAAEC,WAQtD,+BAAAC,OAAP,WACU,IAAA1B,EAAA,WAAAA,IACF,aAAEO,EAAA,EAAAA,QAASO,EAAA,EAAAA,cAEjB,OAAOa,EAAEC,IACP,GACA3C,EACE,GACA6B,EACI1B,EACE,CAAEyC,QAAS,WACXF,EAAEG,OAAO,GAAI,aACb,yBAAyBhB,EAAa,6FAGxC,KACJxB,EAAe,CACbU,IAAKY,KAAKpB,MAAMQ,IAChB+B,SAAUnB,KAAKN,iBAGnBjB,EACE,CACEwC,QAAS,UACTG,UAAWzB,EACX0B,QAASjC,EAAMY,KAAKT,YAAcS,KAAKlB,aAEzCM,EAAM,SAAW,YAIzB,qBAvFA,CAA0C,EAAAkC,WAA7B,EAAAC,uBA0FA,EAAAC,UAAYD,EACZ,EAAAE,QAAU,EAAAnD,cAAc,EAAAkD,WACrC,UAAe,EAAAA","file":"mp-spin-query-editor-785bae90b3e9a1b36b86.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { createFactory } from 'react';\nimport * as D from 'react-dom-factories';\nimport * as ReactBootstrap from 'react-bootstrap';\nimport * as Kefir from 'kefir';\n\nimport { Component } from 'platform/api/components';\nimport { Rdf } from 'platform/api/rdf';\nimport { SparqlClient, SparqlUtil } from 'platform/api/sparql';\nimport { navigateToResource } from 'platform/api/navigation';\n\nimport { Query, QueryService, QueryServiceClass } from 'platform/api/services/ldp-query';\n\nimport { QueryValidatorComponent } from './QueryValidatorComponent';\n\nconst FormGroup = createFactory(ReactBootstrap.FormGroup);\nconst Alert = createFactory(ReactBootstrap.Alert);\nconst Button = createFactory(ReactBootstrap.Button);\n\nconst QueryValidator = createFactory(QueryValidatorComponent);\n\nconst SELECT_TEMPLATE_COUNT_QUERY = `PREFIX spin: <http://spinrdf.org/spin#>\nSELECT (COUNT(?template) as ?templateCount) WHERE {\n  ?template spin:body ?query\n}`;\n\nexport interface Props {\n  iri?: string;\n}\n\nexport interface State {\n  query?: Query;\n  isValid?: boolean;\n  templateCount?: number;\n}\n\nexport class QueryEditorComponent extends Component<Props, State> {\n  private queryService: QueryServiceClass;\n  constructor(props: Props, context: any) {\n    super(props, context);\n    const semanticContext = this.context.semanticContext;\n    this.queryService = QueryService(semanticContext);\n    this.state = { isValid: false };\n  }\n\n  componentDidMount() {\n    const { iri } = this.props;\n\n    if (iri) {\n      this.getQueryTemplateCount(iri).onValue((templateCount) => {\n        this.setState({ templateCount });\n      });\n    }\n  }\n\n  private createQuery = () => {\n    this.queryService\n      .addItem(this.state.query)\n      .onValue((iri) =>\n        navigateToResource(iri).onValue(() => {\n          /* nothing */\n        })\n      )\n      .onError(() => {\n        /* nothing */\n      });\n  };\n\n  private updateQuery = () => {\n    const iri = Rdf.iri(this.props.iri);\n    return this.queryService\n      .updateItem(iri, this.state.query)\n      .onValue(() => {\n        /* nothing */\n      })\n      .onError(() => {\n        /* nothing */\n      });\n  };\n\n  private getQueryTemplateCount(iri: string): Kefir.Property<number> {\n    const query = SparqlClient.setBindings(SparqlUtil.parseQuery(SELECT_TEMPLATE_COUNT_QUERY), { query: Rdf.iri(iri) });\n    const context = this.context.semanticContext;\n    return SparqlClient.select(query, { context: context }).map((res) => {\n      return parseInt(res.results.bindings[0]['templateCount'].value);\n    });\n  }\n\n  private onChangeQuery = (query: Query, isValid: boolean) => {\n    this.setState({ query, isValid });\n  };\n\n  public render() {\n    const { iri } = this.props;\n    const { isValid, templateCount } = this.state;\n\n    return D.div(\n      {},\n      FormGroup(\n        {},\n        templateCount\n          ? Alert(\n              { bsStyle: 'warning' },\n              D.strong({}, 'Warning! '),\n              `This query is used in ${templateCount} templates.\n              Modifications to the query below may break existing templates.`\n            )\n          : null,\n        QueryValidator({\n          iri: this.props.iri,\n          onChange: this.onChangeQuery,\n        })\n      ),\n      Button(\n        {\n          bsStyle: 'success',\n          disabled: !isValid,\n          onClick: iri ? this.updateQuery : this.createQuery,\n        },\n        iri ? 'Update' : 'Create'\n      )\n    );\n  }\n}\n\nexport type component = QueryEditorComponent;\nexport const component = QueryEditorComponent;\nexport const factory = createFactory(component);\nexport default component;\n"],"sourceRoot":""}