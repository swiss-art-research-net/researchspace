{"version":3,"sources":["webpack:///./src/main/web/components/sets/actions/RemoveSetAction.tsx"],"names":["props","context","onClick","e","state","showConfirmation","setState","document","body","addEventListener","handleClickOutside","stopPropagation","onYesClick","isRemoving","removeSet","getCurrentSet","onNoClick","onSelect","event","confirmationRef","contains","target","componentWillUnmount","removeEventListener","this","render","child","Children","only","children","className","ref","node","ButtonToolbar","Button","bsStyle","bsSize","cloneElement","contextTypes","SetManagementContextTypes","SetViewContextTypes","Component","RemoveSetAction"],"mappings":"6IAkBA,OACA,OACA,QAEA,UA4BA,cAKE,yBAAYA,EAAOC,GAAnB,MACE,YAAMD,EAAOC,IAAQ,K,OAWf,EAAAC,QAAU,SAACC,GACZ,EAAKC,MAAMC,mBACd,EAAKC,SAAS,CAAED,kBAAkB,IAClCE,SAASC,KAAKC,iBAAiB,QAAS,EAAKC,oBAC7CP,EAAEQ,oBAIE,EAAAC,WAAa,WACnB,EAAKN,SAAS,CAAEO,YAAY,IAC5B,EAAKZ,QAAQ,qBAAqBa,UAAU,EAAKb,QAAQ,+BAA+Bc,kBAGlF,EAAAC,UAAY,WAClB,EAAKV,SAAS,CAAED,kBAAkB,IAC9B,EAAKL,MAAMiB,UACb,EAAKjB,MAAMiB,YAOP,EAAAP,mBAAqB,SAACQ,GACxB,EAAKC,kBAAoB,EAAKA,gBAAgBC,SAASF,EAAMG,SAC/D,EAAKf,SAAS,CAAED,kBAAkB,KAnCpC,EAAKD,MAAQ,CACXC,kBAAkB,EAClBQ,YAAY,G,EA0DlB,OAnEqC,+BAanC,0BAAAS,qBAAA,WACEf,SAASC,KAAKe,oBAAoB,QAASC,KAAKd,qBAgC3C,0BAAAe,OAAP,sBACQC,EAAQ,EAAAC,SAASC,KAAKJ,KAAKxB,MAAM6B,UACjC7B,EAAQ,CAAEE,QAASsB,KAAKtB,SAC9B,OAAIsB,KAAKpB,MAAMC,iBAEX,uBAAKyB,UAAU,0BAA0BC,IAAK,SAACC,GAAS,OAAC,EAAKb,gBAAkBa,IAC9E,6CACA,gBAAC,EAAAC,cAAa,KACZ,gBAAC,EAAAC,OAAM,CAACC,QAAQ,UAAUC,OAAO,SAASlC,QAASsB,KAAKR,WAAS,MAGjE,gBAAC,EAAAkB,OAAM,CAACC,QAAQ,SAASC,OAAO,SAASlC,QAASsB,KAAKZ,YACpDY,KAAKpB,MAAMS,WAAa,MAAQ,SAMlC,EAAAwB,aAAaX,EAAO1B,IA/DjB,gBAAAsC,aAAe,EAAH,uBAAQ,EAAAC,2BAA8B,EAAAC,qBAkElE,gBAnEA,CAAqC,EAAAC,WAAxB,EAAAC,kBAoEb,UAAeA","file":"mp-set-management-action-remove-set-6e88dd65aced9f41ee5d.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\nimport { Component, Children, ReactElement, cloneElement } from 'react';\nimport { Button, ButtonToolbar } from 'react-bootstrap';\n\nimport {\n  SetManagementContextTypes,\n  SetManagementContext,\n  SetViewContext,\n  SetViewContextTypes,\n} from '../SetManagementApi';\n\ninterface Props {\n  /**\n   * When component is used inside react-bootstrap dropdown, we want to close the dropdown\n   * when user cancels remove action, and this onSelect function passed from the\n   * parent dropdown is what we can use for that purpose.\n   */\n  onSelect?: () => void;\n}\n\ninterface State {\n  showConfirmation?: boolean;\n  isRemoving?: boolean;\n}\n\n/**\n * Removes currently active set from the system.\n *\n * This action can be used only inside <mp-set-management> component templates.\n *\n * @example <mp-set-management-action-remove-set></mp-set-management-action-remove-set>\n */\nexport class RemoveSetAction extends Component<Props, State> {\n  public static contextTypes = { ...SetManagementContextTypes, ...SetViewContextTypes };\n  context: SetManagementContext & SetViewContext;\n\n  private confirmationRef: HTMLElement;\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      showConfirmation: false,\n      isRemoving: false,\n    };\n  }\n\n  componentWillUnmount() {\n    document.body.removeEventListener('click', this.handleClickOutside);\n  }\n\n  private onClick = (e) => {\n    if (!this.state.showConfirmation) {\n      this.setState({ showConfirmation: true });\n      document.body.addEventListener('click', this.handleClickOutside);\n      e.stopPropagation();\n    }\n  };\n\n  private onYesClick = () => {\n    this.setState({ isRemoving: true });\n    this.context['mp-set-management'].removeSet(this.context['mp-set-management--set-view'].getCurrentSet());\n  };\n\n  private onNoClick = () => {\n    this.setState({ showConfirmation: false });\n    if (this.props.onSelect) {\n      this.props.onSelect();\n    }\n  };\n\n  /**\n   * Cancel action if clicked outside of the component.\n   */\n  private handleClickOutside = (event) => {\n    if (this.confirmationRef && !this.confirmationRef.contains(event.target)) {\n      this.setState({ showConfirmation: false });\n    }\n  };\n\n  public render() {\n    const child = Children.only(this.props.children) as ReactElement<any>;\n    const props = { onClick: this.onClick };\n    if (this.state.showConfirmation) {\n      return (\n        <div className=\"remove-set-confirmation\" ref={(node) => (this.confirmationRef = node)}>\n          <span>Are you sure?</span>\n          <ButtonToolbar>\n            <Button bsStyle=\"default\" bsSize=\"xsmall\" onClick={this.onNoClick}>\n              no\n            </Button>\n            <Button bsStyle=\"danger\" bsSize=\"xsmall\" onClick={this.onYesClick}>\n              {this.state.isRemoving ? '...' : 'yes'}\n            </Button>\n          </ButtonToolbar>\n        </div>\n      );\n    } else {\n      return cloneElement(child, props);\n    }\n  }\n}\nexport default RemoveSetAction;\n"],"sourceRoot":""}