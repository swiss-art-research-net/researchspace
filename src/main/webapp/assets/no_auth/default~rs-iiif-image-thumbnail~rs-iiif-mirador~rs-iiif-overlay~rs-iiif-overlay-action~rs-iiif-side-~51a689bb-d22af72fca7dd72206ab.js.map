{"version":3,"sources":["webpack:///./src/main/web/data/iiif/ImageAPI.ts","webpack:///./src/main/web/data/iiif/ImageAnnotationService.ts"],"names":["Region","toString","Full","x","y","width","height","this","Rectangular","Absolute","Percent","full","Size","BestFit","scale","Quality","constructInformationRequestUri","serverAndPrefix","imageId","constructServiceRequestUri","Rotation","angle","Degrees","Clockwise","MirrorThenClockwise","zero","constructImageUri","params","region","size","rotation","quality","Default","toLowerCase","format","r","queryImageBounds","uri","Kefir","fromNodeCallback","cb","request","get","accept","end","err","res","json","JSON","parse","text","toProperty","getIIIFServerUrl","relativeOrAbsoluteUrl","URI","absoluteTo","window","location","href","IMAGE_REGION_INFO_QUERY","SparqlUtil","Sparql","INLINE_REGION_INFO_QUERY","parseImageSubarea","value","maybe","Nothing","match","exec","Just","parseFloat","queryIIIFImageOrRegion","imageOrRegion","imageIdPattern","repositories","searchRepositoriesForImage","combine","map","repository","getImageBindings","query","imageIdPatterns","SparqlClient","prepareParsedQuery","Rdf","literal","bbox","viewport","svg","cloneQuery","parsePatterns","prefixes","constantError","WrappingError","PatternBinder","sparqlQuery","parametrizedQuery","setBindings","__iri__","select","context","flatMap","images","imageBindings","_","filter","bindigs","isSelectResultEmpty","isEmpty","length","constant","results","bindings","binding","type","imageIRI","imageID","isIri","indexOf","iri","isRegion","fromNullable","chain","b","__html","getOrElse","undefined","boundingBox","svgContent"],"mappings":"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","file":"default~rs-iiif-image-thumbnail~rs-iiif-mirador~rs-iiif-overlay~rs-iiif-overlay-action~rs-iiif-side-~51a689bb-d22af72fca7dd72206ab.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2015-2020, Â© Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as Kefir from 'kefir';\nimport * as request from 'superagent';\nimport * as URI from 'urijs';\n\nexport interface ImageRequestParams {\n  imageId: string;\n  region?: Region;\n  size?: Size;\n  rotation?: Rotation;\n  quality?: Quality;\n  format: string;\n}\n\nexport abstract class Region {\n  abstract toString(): string;\n}\nexport namespace Region {\n  export class Full extends Region {\n    toString() {\n      return 'full';\n    }\n  }\n  abstract class Rectangular extends Region {\n    constructor(public x: number, public y: number, public width: number, public height: number) {\n      super();\n    }\n    toString() {\n      return `${this.x},${this.y},${this.width},${this.height}`;\n    }\n  }\n  export class Absolute extends Rectangular {}\n  export class Percent extends Rectangular {\n    toString() {\n      return 'pct:' + super.toString();\n    }\n  }\n  export const full = new Full();\n}\n\nexport abstract class Size {\n  abstract toString(): string;\n}\nexport namespace Size {\n  export class Full extends Size {\n    toString() {\n      return 'full';\n    }\n  }\n  abstract class Rectangular extends Size {\n    constructor(public width: number, public height: number) {\n      super();\n    }\n    toString() {\n      return `${this.width ? this.width : ''},${this.height ? this.height : ''}`;\n    }\n  }\n  export class Absolute extends Rectangular {}\n  export class BestFit extends Rectangular {\n    toString() {\n      return '!' + super.toString();\n    }\n  }\n  export class Percent extends Size {\n    constructor(public scale: number) {\n      super();\n    }\n    toString() {\n      return `pct:${this.scale}`;\n    }\n  }\n  export const full = new Full();\n}\n\nexport abstract class Rotation {\n  abstract toString(): string;\n}\nexport namespace Rotation {\n  abstract class Degrees extends Rotation {\n    constructor(public angle: number) {\n      super();\n    }\n    toString() {\n      return `${this.angle}`;\n    }\n  }\n  export class Clockwise extends Degrees {}\n  export class MirrorThenClockwise extends Degrees {\n    toString() {\n      return '!' + super.toString();\n    }\n  }\n  export const zero = new Clockwise(0);\n}\n\nexport enum Quality {\n  Color,\n  Gray,\n  Bitonal,\n  Default,\n}\n\nexport function constructImageUri(serverAndPrefix: string, params: ImageRequestParams) {\n  const region = params.region || Region.full;\n  const size = params.size || Size.full;\n  const rotation = params.rotation || Rotation.zero;\n  const quality = Quality[params.quality || Quality.Default].toLowerCase();\n  const format = params.format;\n  let r = `${serverAndPrefix}/${params.imageId}/${region}/${size}/${rotation}/${quality}`;\n  if (params.format !== 'auto') {\n    r = r + '.' + format;\n  }\n  return r;\n}\n\nexport function constructInformationRequestUri(serverAndPrefix: string, imageId: string) {\n  return constructServiceRequestUri(serverAndPrefix, imageId) + `/info.json`;\n}\n\nexport function constructServiceRequestUri(serverAndPrefix: string, imageId: string) {\n  return serverAndPrefix + `/${imageId}`;\n}\n\nexport interface ImageBounds {\n  width: number;\n  height: number;\n}\n\nexport function queryImageBounds(serverAndPrefix: string, imageId: string) {\n  const uri = constructInformationRequestUri(serverAndPrefix, imageId);\n  return Kefir.fromNodeCallback<ImageBounds>((cb) => {\n    request\n      .get(uri)\n      .accept('application/ld+json')\n      .end((err, res) => {\n        if (err) {\n          cb(err);\n        } else {\n          const json = JSON.parse(res.text);\n          cb(err, json);\n        }\n      });\n  }).toProperty();\n}\n\n/*\n * Incoming config.iiifServerUrl could be absolute or relative\n * (due to no client-side configuration and ease of deployment).\n * When generating manifests we need to use absolute URI,\n * so we're ensuring to have absolute URL after this point.\n */\nexport function getIIIFServerUrl(relativeOrAbsoluteUrl: string): string {\n  return URI(relativeOrAbsoluteUrl).absoluteTo(window.location.href).toString();\n}\n","/**\n * ResearchSpace\n * Copyright (C) 2015-2020, Â© Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as _ from 'lodash';\nimport * as Kefir from 'kefir';\nimport * as maybe from 'data.maybe';\nimport * as SparqlJs from 'sparqljs';\n\nimport { SparqlClient, SparqlUtil, PatternBinder, cloneQuery } from 'platform/api/sparql';\nimport { Rdf } from 'platform/api/rdf';\nimport { WrappingError } from 'platform/api/async';\n\nexport interface ImageSubarea {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n}\n\nexport interface ImageOrRegionInfo {\n  iri: Rdf.Iri;\n  imageId: string;\n  isRegion: boolean;\n  boundingBox?: ImageSubarea;\n  viewport?: ImageSubarea;\n  svgContent?: { __html: string };\n  imageIRI: Rdf.Iri;\n}\n\nexport type ExplicitRegion = {\n  bbox?: string\n  svg?: string\n  viewport?: string\n};\n\nconst IMAGE_REGION_INFO_QUERY = SparqlUtil.Sparql`\n  prefix rso: <http://www.researchspace.org/ontology/>\n  prefix crmdig: <http://www.ics.forth.gr/isl/CRMdig/>\n\n  select ?type ?imageID ?area ?bbox ?viewport ?svg ?imageIRI {\n    OPTIONAL {\n      ?__iri__ a rso:EX_Digital_Image .\n      BIND(\"image\" AS ?type)\n      BIND(?__iri__ as ?imageIRI)\n    }\n    OPTIONAL {\n      ?__iri__ a rso:EX_Digital_Image_Region;\n            rdf:value ?svg.\n      ?__iri__ crmdig:L49_is_primary_area_of ?imageIRI .\n      BIND(\"region\" AS ?type)\n      OPTIONAL { ?__iri__ rso:boundingBox ?bbox }\n      OPTIONAL { ?__iri__ rso:viewport ?viewport }\n    }\n    FILTER(?__imageIdPattern__)\n  }\n` as SparqlJs.SelectQuery;\n\nconst INLINE_REGION_INFO_QUERY = SparqlUtil.Sparql`\nselect ?type ?imageID ?area ?bbox ?viewport ?svg ?imageIRI {\n  BIND(?__iri__ as ?imageIRI) .\n  BIND(\"region\" AS ?type)\n  FILTER(?__imageIdPattern__)\n}\n` as SparqlJs.SelectQuery;\n\n\nexport function queryIIIFImageOrRegion(\n  imageOrRegion: Rdf.Iri,\n  imageIdPattern: string,\n  repositories: Array<string>,\n  region?: ExplicitRegion\n): Kefir.Property<ImageOrRegionInfo> {\n  return searchRepositoriesForImage(imageOrRegion, imageIdPattern, repositories, region)\n    .flatMap((bindings) => {\n      const binding = bindings[0];\n      const { type, imageIRI, imageID } = binding;\n      if (!type || !imageIRI.isIri()) {\n        return Kefir.constantError<any>(`Image or region ${imageOrRegion} not found.`);\n      } else if (!imageID || imageID.value.indexOf('/') >= 0) {\n        return Kefir.constantError<any>(\n          `Invalid image ID '${imageID.value}' ` + `generated from ${imageIRI} using pattern: ${imageIdPattern}`\n        );\n      }\n\n      if (type.value === 'image') {\n        return Kefir.constant<ImageOrRegionInfo>({\n          iri: imageOrRegion,\n          imageId: imageID.value,\n          isRegion: false,\n          imageIRI: imageIRI,\n        });\n      } else if (type.value === 'region') {\n        const viewport = maybe.fromNullable(binding['viewport']).chain((b) => parseImageSubarea(b.value));\n        const bbox = maybe.fromNullable(binding['bbox']).chain((b) => parseImageSubarea(b.value));\n        const svg = maybe.fromNullable(binding['svg']).map((b) => ({ __html: b.value }));\n        return Kefir.constant<ImageOrRegionInfo>({\n          iri: imageOrRegion,\n          imageId: imageID.value,\n          isRegion: true,\n          viewport: viewport.getOrElse(undefined),\n          boundingBox: bbox.getOrElse(undefined),\n          svgContent: svg.getOrElse(undefined),\n          imageIRI: imageIRI,\n        });\n      }\n    })\n    .toProperty();\n}\n\nfunction searchRepositoriesForImage(\n  imageOrRegion: Rdf.Iri, imageIdPattern: string, repositories: Array<string>, region?: ExplicitRegion\n) {\n  return Kefir.combine(\n    repositories.map((repository) => getImageBindings(imageOrRegion, imageIdPattern, repository, region))\n  ).flatMap((images) => {\n    const imageBindings = _.filter(images, (bindigs) => !SparqlUtil.isSelectResultEmpty(bindigs));\n    if (_.isEmpty(imageBindings)) {\n      return Kefir.constantError<any>(`Image or region ${imageOrRegion} not found.`);\n    } else if (imageBindings.length > 1) {\n      return Kefir.constantError<any>(`Multiple images and/or regions ${imageOrRegion} found.`);\n    } else {\n      return Kefir.constant(imageBindings[0].results.bindings);\n    }\n  });\n}\n\nfunction getImageBindings(\n  imageOrRegion: Rdf.Iri,\n  imageIdPattern: string,\n  repository: string,\n  region?: ExplicitRegion\n): Kefir.Property<SparqlClient.SparqlSelectResult> {\n  let query: SparqlJs.SelectQuery;\n  if (region) {\n    query =\n      SparqlClient.prepareParsedQuery(\n        [\n          {\n            'bbox': Rdf.literal(region.bbox),\n            'viewport': Rdf.literal(region.viewport),\n            'svg': Rdf.literal(region.svg),\n          },\n        ]\n      )(\n        cloneQuery(INLINE_REGION_INFO_QUERY)\n      );\n  } else {\n    query = cloneQuery(IMAGE_REGION_INFO_QUERY);\n  }\n  let imageIdPatterns: SparqlJs.Pattern[];\n  try {\n    imageIdPatterns = SparqlUtil.parsePatterns(imageIdPattern, query.prefixes);\n  } catch (err) {\n    return Kefir.constantError<any>(new WrappingError(`Failed to parse image ID patterns '${imageIdPattern}':`, err));\n  }\n\n  new PatternBinder('__imageIdPattern__', imageIdPatterns).sparqlQuery(query);\n  const parametrizedQuery = SparqlClient.setBindings(query, { __iri__: imageOrRegion });\n\n  return SparqlClient.select(parametrizedQuery, { context: { repository: repository } });\n}\n\nexport function parseImageSubarea(value: string): Data.Maybe<ImageSubarea> {\n  if (!value) {\n    return maybe.Nothing<ImageSubarea>();\n  }\n  const match = /^xywh=([^,]+),([^,]+),([^,]+),([^,]+)$/.exec(value);\n  if (!match) {\n    return maybe.Nothing<ImageSubarea>();\n  }\n  return maybe.Just({\n    x: parseFloat(match[1]),\n    y: parseFloat(match[2]),\n    width: parseFloat(match[3]),\n    height: parseFloat(match[4]),\n  });\n}\n"],"sourceRoot":""}