{"version":3,"sources":["webpack:///./src/main/web/components/ldp/ExportResource.ts"],"names":["isIriProps","props","_","has","isSelectionProps","context","cancellation","Cancellation","onClick","selection","iri","exportURL","getLDPService","getExportURL","repository","map","getLabels","Rdf","observe","value","labels","name","toArray","reduce","acc","curr","label","replace","filename","moment","format","window","location","hostname","open","error","Error","checkProps","componentWillReceiveProps","this","componentWillUnmount","cancelAll","LdpService","semanticContext","render","child","Children","only","children","cloneElement","assign","disabled","length","Component","ExportResourceComponent"],"mappings":"6IAmBA,OACA,SACA,QACA,QAEA,QACA,SACA,QACA,SACA,QAUA,SAASA,WAAWC,GAClB,OAAOC,EAAEC,IAAIF,EAAO,OAEtB,SAASG,iBAAiBH,GACxB,OAAOC,EAAEC,IAAIF,EAAO,aAUtB,kBAGE,iCAAYA,EAAcI,GAA1B,MACE,YAAMJ,EAAOI,IAAQ,K,OAHN,EAAAC,aAAe,IAAI,EAAAC,aAyB5B,EAAAC,QAAU,WAChB,IAAMC,EAAYT,WAAW,EAAKC,OAAS,CAAC,EAAKA,MAAMS,KAAO,EAAKT,MAAMQ,UACnEE,EAAY,EAAKC,gBAAgBC,aAAaJ,GAC5CK,EAAA,0BAAAA,WACR,EAAKR,aAAaS,IAAI,EAAAC,UAAUP,EAAUM,IAAI,EAAAE,IAAIP,KAAM,CAAEL,QAAS,CAAES,WAAU,MAAOI,QAAQ,CAC5FC,MAAO,SAACC,GACN,IAAMC,EAAOD,EAAOE,UAAUC,QAAO,SAACC,EAAKC,GACzC,IAAMC,EAAQD,EAAKE,QAAQ,MAAO,KAClC,MAAe,KAARH,EAAaE,EAAWF,EAAG,IAAIE,IACrC,IACGE,EAAcC,IAASC,OAAO,oBAAmB,IAAIC,OAAOC,SAASC,SAAQ,IAAIZ,EAAI,QAC3FU,OAAOG,KAAQvB,EAAS,aAAaiB,EAAY,WAEnDO,MAAO,SAACA,GACN,MAAMC,MAAMD,OAnChB,EAAKE,WAAWpC,G,EAkDpB,OAvD6C,uCAQ3C,kCAAAqC,0BAAA,SAA0BrC,GACxBsC,KAAKF,WAAWpC,IAGlB,kCAAAuC,qBAAA,WACED,KAAKjC,aAAamC,aAGpB,kCAAAJ,WAAA,SAAWpC,GACT,GAAID,WAAWC,KAAWG,iBAAiBH,GACzC,KAAM,sEAIV,kCAAAW,cAAA,WACE,OAAO,IAAI,EAAA8B,WAAW,GAAIH,KAAKlC,QAAQsC,kBAsBlC,kCAAAC,OAAP,WACE,IAAMC,EAAQ,EAAAC,SAASC,KAAKR,KAAKtC,MAAM+C,UACvC,OAAO,EAAAC,aACLJ,EACAK,EAAO,GAAIL,EAAM5C,MAAO,CACtBkD,SAAU/C,iBAAiBmC,KAAKtC,QAA0C,IAAhCsC,KAAKtC,MAAMQ,UAAU2C,OAC/D5C,QAAS+B,KAAK/B,YAItB,wBAvDA,CAA6C,EAAA6C,WAAhC,EAAAC,0BAyDb,UAAeA","file":"mp-ldp-export-resource-988df9335ad44cfe3671.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { ReactElement, cloneElement, Children } from 'react';\nimport * as assign from 'object-assign';\nimport * as _ from 'lodash';\nimport * as moment from 'moment';\n\nimport { Component, ComponentContext } from 'platform/api/components';\nimport { LdpService } from 'platform/api/services/ldp';\nimport { Cancellation } from 'platform/api/async';\nimport { getLabels } from 'platform/api/services/resource-label';\nimport { Rdf } from 'platform/api/rdf';\n\ninterface IriProps {\n  iri: string;\n}\ninterface SelectionProps {\n  selection: string[];\n}\nexport type Props = IriProps | SelectionProps;\n\nfunction isIriProps(props: Props): props is IriProps {\n  return _.has(props, 'iri');\n}\nfunction isSelectionProps(props: Props): props is SelectionProps {\n  return _.has(props, 'selection');\n}\n\n/**\n * Export LDP resource.\n * @example\n *  <mp-ldp-export-resource iri=\"http://example.com/resource\">\n *      <button class=\"btn btn-default\">Export resource</button>\n *  </mp-ldp-export-resource>\n */\nexport class ExportResourceComponent extends Component<Props, {}> {\n  private readonly cancellation = new Cancellation();\n\n  constructor(props: Props, context: ComponentContext) {\n    super(props, context);\n    this.checkProps(props);\n  }\n\n  componentWillReceiveProps(props: Props) {\n    this.checkProps(props);\n  }\n\n  componentWillUnmount() {\n    this.cancellation.cancelAll();\n  }\n\n  checkProps(props: Props) {\n    if (isIriProps(props) === isSelectionProps(props)) {\n      throw 'Property iri xor selection of mp-ldp-export-resource should be set';\n    }\n  }\n\n  getLDPService() {\n    return new LdpService('', this.context.semanticContext);\n  }\n\n  private onClick = () => {\n    const selection = isIriProps(this.props) ? [this.props.iri] : this.props.selection;\n    const exportURL = this.getLDPService().getExportURL(selection);\n    const { repository } = this.context.semanticContext;\n    this.cancellation.map(getLabels(selection.map(Rdf.iri), { context: { repository } })).observe({\n      value: (labels) => {\n        const name = labels.toArray().reduce((acc, curr) => {\n          const label = curr.replace(/\\s/g, '-');\n          return acc === '' ? label : `${acc}-${label}`;\n        }, '');\n        const filename = `${moment().format('YYYY-MM-DDTHH-mm')}-${window.location.hostname}-${name}.trig`;\n        window.open(`${exportURL}&filename=${filename}`, '_blank');\n      },\n      error: (error) => {\n        throw Error(error);\n      },\n    });\n  };\n\n  public render() {\n    const child = Children.only(this.props.children) as ReactElement<any>;\n    return cloneElement(\n      child,\n      assign({}, child.props, {\n        disabled: isSelectionProps(this.props) && this.props.selection.length === 0,\n        onClick: this.onClick,\n      })\n    );\n  }\n}\n\nexport default ExportResourceComponent;\n"],"sourceRoot":""}