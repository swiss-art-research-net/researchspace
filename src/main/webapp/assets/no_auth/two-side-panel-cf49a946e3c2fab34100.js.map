{"version":3,"sources":["webpack:///./src/main/web/components/ui/two-side-panel/TwoSidePanel.tsx"],"names":["event","EventMaker","ShowBackEvent","ShowFrontEvent","props","context","cancellation","Cancellation","state","showBack","frontVariables","backVariables","componentDidMount","this","map","listen","eventType","target","id","observe","value","data","dontRefresh","setState","render","refreshOnChange","TemplateItem","template","source","getTemplate","options","backPanel","React","Fragment","componentProps","style","display","key","propsTemplate","localScope","markupTemplateScope","partial","getPartial","undefined","defaultProps","variables","Component","TwoSidePanel"],"mappings":"6IAkBA,OAEA,SACA,QAEA,SACA,QAMMA,EAAwC,EAAAC,WACjC,EAAAC,cAAgBF,EAAM,yBACtB,EAAAG,eAAiBH,EAAM,0BAkDpC,kBAQE,sBAAYI,EAAOC,GAAnB,MACE,YAAMD,EAAOC,IAAQ,K,OAHN,EAAAC,aAAe,IAAI,EAAAC,aAKlC,EAAKC,MAAQ,CACXC,UAAU,EACVC,eAAgB,GAChBC,cAAe,I,EA+GrB,OA7HkC,4BAkBhC,uBAAAC,kBAAA,sBACEC,KAAKP,aACAQ,IACC,EAAAC,OAAO,CACLC,UAAW,EAAAd,cACXe,OAAQJ,KAAKT,MAAMc,MAGtBC,QAAQ,CACPC,MAAO,SAAC,G,IAAEC,EAAA,EAAAA,MACJA,aAAI,EAAJA,EAAMC,cAAe,EAAKd,MAAMC,UAGlC,EAAKc,SAAS,CACZd,UAAU,EACVE,cAAeU,GAAQ,QAMnCR,KAAKP,aACAQ,IACC,EAAAC,OAAO,CACLC,UAAW,EAAAb,eACXc,OAAQJ,KAAKT,MAAMc,MAGtBC,QAAQ,CACPC,MAAO,SAAC,G,IAACC,EAAA,EAAAA,KACP,EAAKE,SAAS,CACZd,UAAU,EACVC,eAAgBW,GAAQ,SAMpC,uBAAAG,OAAA,WACE,GAAIX,KAAKT,MAAMqB,gBACb,OAAIZ,KAAKL,MAAMC,SAEX,gBAAC,EAAAiB,aAAY,CAACC,SAAU,CACtBC,OAAQf,KAAKgB,YAAY,QACzBC,QAAS,EAAF,uBACDjB,KAAKT,MAAMO,eACXE,KAAKL,MAAMG,kBAMnB,gBAAC,EAAAe,aAAY,CAACC,SAAU,CACtBC,OAAQf,KAAKgB,YAAY,SACzBC,QAAS,EAAF,uBACDjB,KAAKT,MAAMM,gBACXG,KAAKL,MAAME,mBAMvB,IAAMqB,EACJlB,KAAKL,MAAMC,SAET,gBAAC,EAAAiB,aAAY,CAACC,SAAU,CACtBC,OAAQf,KAAKgB,YAAY,QACzBC,QAAS,EAAF,uBACDjB,KAAKT,MAAMO,eACXE,KAAKL,MAAMG,kBAGjB,KACN,OACE,gBAACqB,EAAMC,SAAQ,KACb,gBAAC,EAAAP,aAAY,CACXQ,eAAgB,CACdC,MAAO,CACLC,QAASvB,KAAKL,MAAMC,SAAW,OAAS,UAG5CkB,SAAU,CACRC,OAAQf,KAAKgB,YAAY,SACzBC,QAAS,EAAF,uBACDjB,KAAKT,MAAMM,gBACXG,KAAKL,MAAME,mBAIpBqB,IAMD,uBAAAF,YAAR,SAAoBQ,GAClB,IAAMC,EAAgBzB,KAAKT,MAAMiC,GACjC,GAAIC,EACF,OAAOA,EAET,IAAMC,EAAa1B,KAAKT,MAAMoC,oBACxBC,EAAUF,EAAaA,EAAWG,WAAWL,QAAOM,EAC1D,OAAIF,EACKA,EAAQb,YADjB,GAvHK,aAAAgB,aAAe,CACpBC,UAAW,GACXpB,iBAAiB,GA0HrB,aA7HA,CAAkC,EAAAqB,WAArB,EAAAC,eA+Hb,UAAeA","file":"two-side-panel-cf49a946e3c2fab34100.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as React from 'react';\n\nimport { listen, EventMaker } from 'platform/api/events';\nimport { Component, ComponentProps } from 'platform/api/components';\n\nimport { TemplateItem } from 'platform/components/ui/template';\nimport { Cancellation } from 'platform/api/async';\n\nexport interface TwoSidePanelEvents {\n  'TwoSidePanel.ShowBack': Record<string, any>;\n  'TwoSidePanel.ShowFront': Record<string, any>;\n}\nconst event: EventMaker<TwoSidePanelEvents> = EventMaker;\nexport const ShowBackEvent = event('TwoSidePanel.ShowBack');\nexport const ShowFrontEvent = event('TwoSidePanel.ShowFront');\n\nexport interface TwoSidePanelProps extends ComponentProps {\n  id: string;\n\n  /**\n   * Front side template .\n   */\n  front?: string;\n\n  /**\n   * Back side template .\n   */\n  back?: string;\n\n  /**\n   * Default variables that are propagated to the front template .\n   */\n  frontVariables: Record<string, any>;\n\n\n  /**\n   * Default variables that are propagated to the back template .\n   */\n  backVariables: Record<string, any>;\n\n  /**\n   * Don't re-render the template when side is switched.\n   *\n   * @default true\n   */\n  refreshOnChange?: boolean;\n}\n\ninterface State {\n  showBack: boolean;\n  frontVariables: Record<string, any>;\n  backVariables: Record<string, any>;\n}\n\n\n/**\n * Flip panel component. See Help:MPComponents documentation page for more detauls.\n *\n * <two-side-panel id='component-id' front='{{> front}}' back='{{> back}}'>\n *    <template id='front'></template>\n *    <template id='back'></template>\n * </two-side-panel>\n *\n */\nexport class TwoSidePanel extends Component<TwoSidePanelProps, State> {\n  static defaultProps = {\n    variables: {},\n    refreshOnChange: true,\n  };\n\n  private readonly cancellation = new Cancellation();\n\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      showBack: false,\n      frontVariables: {},\n      backVariables: {},\n    };\n  }\n\n  componentDidMount() {\n    this.cancellation\n        .map(\n          listen({\n            eventType: ShowBackEvent,\n            target: this.props.id,\n          })\n        )\n        .observe({\n          value: ({ data }) => {\n            if (data?.dontRefresh && this.state.showBack) {\n              // if event has don't refresh flag and we are already showing back panel then do nothing\n            } else {\n              this.setState({\n                showBack: true,\n                backVariables: data || {}\n              })\n            }\n          }\n        });\n\n    this.cancellation\n        .map(\n          listen({\n            eventType: ShowFrontEvent,\n            target: this.props.id,\n          })\n        )\n        .observe({\n          value: ({data}) => {\n            this.setState({\n              showBack: false,\n              frontVariables: data || {}\n            })\n          }\n        });\n  }\n\n  render() {\n    if (this.props.refreshOnChange) {\n      if (this.state.showBack) {\n        return (\n          <TemplateItem template={{\n            source: this.getTemplate('back'),\n            options: {\n              ... this.props.backVariables,\n              ... this.state.backVariables\n            }\n          }} />\n        );\n      } else {\n        return (\n          <TemplateItem template={{\n            source: this.getTemplate('front'),\n            options: {\n              ... this.props.frontVariables,\n              ... this.state.frontVariables\n            }\n          }} />\n        );\n      }\n    } else {\n      const backPanel =\n        this.state.showBack ?\n        (\n          <TemplateItem template={{\n            source: this.getTemplate('back'),\n            options: {\n              ... this.props.backVariables,\n              ... this.state.backVariables\n            }\n          }} />\n        ) : null;\n      return (\n        <React.Fragment>\n          <TemplateItem\n            componentProps={{\n              style: {\n                display: this.state.showBack ? 'none' : 'block',\n              },\n            }}\n            template={{\n              source: this.getTemplate('front'),\n              options: {\n                ... this.props.frontVariables,\n                ... this.state.frontVariables\n              }\n            }}\n          />\n          {backPanel}\n        </React.Fragment>\n      );\n    }\n  }\n\n  private getTemplate(key: 'front' | 'back'): string | undefined {\n    const propsTemplate = this.props[key];\n    if (propsTemplate) {\n      return propsTemplate;\n    }\n    const localScope = this.props.markupTemplateScope;\n    const partial = localScope ? localScope.getPartial(key) : undefined;\n    if (partial) {\n      return partial.source;\n    }\n    return undefined;\n  }\n}\n\nexport default TwoSidePanel;\n"],"sourceRoot":""}