{"version":3,"sources":["webpack:///./src/main/web/components/panel-system/PanelSystem.tsx"],"names":["props","onChangeHolder","key","setState","expandedPanelKey","size","prevSize","undefined","renderPanel","panel","index","type","PanelSystemHolder","id","className","styles","React","cloneElement","fullScreenButton","onClick","state","componentDidUpdate","prevProps","prevState","this","window","dispatchEvent","Event","render","SplitPane","split","minSize","paneStyle","overflow","pane1Style","borderBottom","onChange","Children","map","children","Component","PanelSystem"],"mappings":"6IAkBA,OACA,UAEA,UAEA,UASA,cAGE,qBAAYA,GAAZ,MACE,YAAMA,IAAM,K,OAUN,EAAAC,eAAiB,SAACC,GACxB,EAAKC,UAAS,SAAC,G,IAAEC,EAAA,EAAAA,iBACf,OAAIA,GAAoBA,IAAqBF,EACpC,CAAEG,KAAM,EAAKC,SAAUF,sBAAkBG,GAE3C,SAIH,EAAAC,YAAc,SAACC,EAAyBC,GAC9C,GAAqB,iBAAVD,GAAsBA,EAAME,OAAS,EAAAC,kBAC9C,OAAO,KAGD,IAAAR,EAAA,QAAAA,iBACFF,EAAMO,EAAMT,MAAMa,GACxB,OACE,uBAAKC,UAAWC,EAAON,OACpBO,EAAMC,aAAaR,EAAO,EAAF,uBACpBA,EAAMT,OAAK,CACdC,eAAgB,WACd,EAAKA,eAAeC,OAGvBE,IAAqBF,EACpB,0BACEY,UAAW,0BAA0BC,EAAOG,iBAC5CC,QAAS,WAAM,SAAKhB,SAAS,CAAEE,KAAM,EAAKC,SAAUF,sBAAkBG,MAEtE,qBAAGO,UAAU,oBAGf,0BACEA,UAAW,0BAA0BC,EAAOG,iBAC5CC,QAAS,WACP,SAAKhB,UAAS,SAAC,G,IAAEE,EAAA,EAAAA,KAEf,OADA,EAAKC,SAAWD,EACT,CAAEA,MAASK,EAAQ,EAAI,KAAG,IAAKN,iBAAkBF,QAI5D,qBAAGY,UAAU,oBAlDrB,EAAKM,MAAQ,CAAEf,KAAM,O,EAuEzB,OA5EiC,2BAQ/B,sBAAAgB,mBAAA,SAAmBC,EAAkBC,GAC/BC,KAAKJ,MAAMf,OAASkB,EAAUlB,MAChCoB,OAAOC,cAAc,IAAIC,MAAM,YAoDnC,sBAAAC,OAAA,sBACE,OACE,gBAACC,EAAS,CACRC,MAAM,aACNC,QAAS,EACT1B,KAAMmB,KAAKJ,MAAMf,KACjB2B,UAAW,CAAEC,SAAU,UACvBC,WAAY,CAAEC,aAAc,qBAC5BC,SAAU,SAAC/B,GAAS,SAAKF,SAAS,CAAEE,KAAI,EAAED,sBAAkBG,MAE3DS,EAAMqB,SAASC,IAAId,KAAKxB,MAAMuC,SAAUf,KAAKhB,eAItD,YA5EA,CAAiCQ,EAAMwB,WAA1B,EAAAC,cA8Eb,UAAeA","file":"rs-panel-system-846540165218daa6baad.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2015-2020, Â© Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as React from 'react';\nimport * as SplitPane from 'react-split-pane';\n\nimport { PanelSystemHolder } from './PanelSystemHolder';\n\nimport * as styles from './PanelSystem.scss';\n\nexport interface Props {}\n\nexport interface State {\n  size?: string | number;\n  expandedPanelKey?: React.Key;\n}\n\nexport class PanelSystem extends React.Component<Props, State> {\n  private prevSize: string | number;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = { size: '50%' };\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    if (this.state.size !== prevState.size) {\n      window.dispatchEvent(new Event('resize'));\n    }\n  }\n\n  private onChangeHolder = (key: React.Key) => {\n    this.setState(({ expandedPanelKey }) => {\n      if (expandedPanelKey && expandedPanelKey !== key) {\n        return { size: this.prevSize, expandedPanelKey: undefined };\n      }\n      return null;\n    });\n  };\n\n  private renderPanel = (panel: React.ReactChild, index: number) => {\n    if (typeof panel !== 'object' || panel.type !== PanelSystemHolder) {\n      return null;\n    }\n\n    const { expandedPanelKey } = this.state;\n    const key = panel.props.id;\n    return (\n      <div className={styles.panel}>\n        {React.cloneElement(panel, {\n          ...panel.props,\n          onChangeHolder: () => {\n            this.onChangeHolder(key);\n          },\n        })}\n        {expandedPanelKey === key ? (\n          <button\n            className={`btn btn-default btn-xs ${styles.fullScreenButton}`}\n            onClick={() => this.setState({ size: this.prevSize, expandedPanelKey: undefined })}\n          >\n            <i className=\"fa fa-compress\" />\n          </button>\n        ) : (\n          <button\n            className={`btn btn-default btn-xs ${styles.fullScreenButton}`}\n            onClick={() =>\n              this.setState(({ size }) => {\n                this.prevSize = size;\n                return { size: `${index ? 0 : 100}%`, expandedPanelKey: key };\n              })\n            }\n          >\n            <i className=\"fa fa-expand\" />\n          </button>\n        )}\n      </div>\n    );\n  };\n\n  render() {\n    return (\n      <SplitPane\n        split=\"horizontal\"\n        minSize={0}\n        size={this.state.size}\n        paneStyle={{ overflow: 'hidden' }}\n        pane1Style={{ borderBottom: '1px solid #a2a2a2' }}\n        onChange={(size) => this.setState({ size, expandedPanelKey: undefined })}\n      >\n        {React.Children.map(this.props.children, this.renderPanel)}\n      </SplitPane>\n    );\n  }\n}\n\nexport default PanelSystem;\n"],"sourceRoot":""}