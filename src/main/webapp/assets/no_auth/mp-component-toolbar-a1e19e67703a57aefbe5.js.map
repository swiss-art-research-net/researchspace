{"version":3,"sources":["webpack:///./src/main/web/components/persistence/ComponentToolbar.ts"],"names":["props","context","overrideComponentProps","setState","propsOverride","state","error","checkTree","getChildContext","overrideProps","this","componentWillReceiveProps","children","length","_","find","child","componentHasType","ComponentToolbarActionsComponent","ComponentToolbarComponentComponent","render","createElement","ErrorNotification","errorMessage","Children","toArray","actionsParent","componentParent","component","only","updatedComponent","cloneElement","Object","assign","actions","D","div","className","style","classnames","styles","map","action","childContextTypes","ComponentToolbarContextTypes","Component","ComponentToolbarComponent"],"mappings":"6IAmBA,QACA,OACA,OACA,QAEA,QACA,SACA,SACA,UACA,UACA,UAEA,UA6BA,cACE,mCAAYA,EAAcC,GAA1B,MACE,YAAMD,EAAOC,IAAQ,K,OAuBf,EAAAC,uBAAyB,SAACF,GAChC,EAAKG,SAAS,CAAEC,cAAeJ,KAvB/B,EAAKK,MAAQ,CACXC,MAAO,EAAKC,UAAUP,GACtBI,cAAe,I,EAkErB,OAvE+C,yCAc7C,oCAAAI,gBAAA,WACE,OAAO,EAAP,uBACK,YAAMA,gBAAe,YAAE,CAC1BC,cAAeC,KAAKR,0BAIxB,oCAAAS,0BAAA,SAA0BX,GACxBU,KAAKP,SAAS,CAAEG,MAAOI,KAAKH,UAAUP,MAOhC,oCAAAO,UAAR,SAAkBP,GAChB,OAC4B,IAA1BA,EAAMY,SAASC,QACdC,EAAEC,KAAKf,EAAMY,UAAU,SAACI,GAAU,SAAAC,iBAAiBD,EAAO,EAAAE,sCAC1DJ,EAAEC,KAAKf,EAAMY,UAAU,SAACI,GAAU,SAAAC,iBAAiBD,EAAO,EAAAG,uCAOtD,KALE,2HAQX,oCAAAC,OAAA,WACE,GAAIV,KAAKL,MAAMC,MACb,OAAO,EAAAe,cAAc,EAAAC,kBAAmB,CAAEC,aAAcb,KAAKL,MAAMC,QAErE,IAAMM,EAAW,EAAAY,SAASC,QAAQf,KAAKV,MAAMY,UACvCc,EAAgBZ,EAAEC,KAAKH,GAAU,SAACI,GACtC,SAAAC,iBAAiBD,EAAO,EAAAE,qCAEpBS,EAAkBb,EAAEC,KAAKH,GAAU,SAACI,GACxC,SAAAC,iBAAiBD,EAAO,EAAAG,uCAEpBS,EAAY,EAAAJ,SAASK,KAAKF,EAAgB3B,MAAMY,UAChDkB,EAAmB,EAAAC,aAAaH,EAAWI,OAAOC,OAAO,GAAIL,EAAU5B,MAAOU,KAAKL,MAAMD,gBACzF8B,EAAUR,EAAc1B,MAAMY,SACpC,OAAOuB,EAAEC,IACP,CAAEC,UAAW3B,KAAKV,MAAMqC,UAAWC,MAAO5B,KAAKV,MAAMsC,OACrDH,EAAEC,IAAG,MAALD,EAAC,kBACC,CACEE,UAAWE,EAAWC,EAAON,QAASR,EAAc1B,MAAMqC,WAC1DC,MAAOZ,EAAc1B,MAAMsC,QAE1B,EAAAd,SAASiB,IAAIP,GAAS,SAACQ,GACxB,OAAO,EAAAX,aAAaW,EAAQ,EAAF,uBAAOA,EAAO1C,OAAK,CAAE4B,UAAWE,UAG9DA,IA3DG,0BAAAa,kBAAoB,EAAH,uBACnB,EAAAC,8BACA,EAAAC,UAAUF,mBA4DjB,0BAvEA,CAA+C,EAAAE,WAAlC,EAAAC,4BAyEb,UAAeA","file":"mp-component-toolbar-a1e19e67703a57aefbe5.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as _ from 'lodash';\nimport * as classnames from 'classnames';\nimport { createElement, cloneElement, Children, isValidElement, ReactElement, CSSProperties } from 'react';\nimport * as D from 'react-dom-factories';\n\nimport { Component } from 'platform/api/components';\nimport { ErrorNotification } from 'platform/components/ui/notification';\nimport { componentHasType } from 'platform/components/utils';\nimport { ComponentToolbarActionsComponent } from 'platform/components/persistence/ComponentToolbarActions';\nimport { ComponentToolbarComponentComponent } from 'platform/components/persistence/ComponentToolbarComponent';\nimport { ComponentToolbarContextTypes } from './ComponentToolbarApi';\n\nimport * as styles from './ComponentToolbar.scss';\n\ninterface Props {\n  className?: string;\n  style?: CSSProperties;\n}\n\ninterface State {\n  error: any;\n  propsOverride: {};\n}\n\n/**\n * Component for performing actions from toolbar over other component.\n * Actions are described in mp-component-toolbar-actions child\n * and only component in mp-component-toolbar-component child, no other children allowed\n *\n * @example\n *  <mp-component-toolbar>\n *    <mp-component-toolbar-actions>\n *      <mp-component-toolbar-action-download />\n *      <mp-component-toolbar-action-save />\n *    </mp-component-toolbar-actions>\n *\n *    <mp-component-toolbar-component>\n *      <semantic-chart type='bar' query='...' />\n *    </mp-component-toolbar-component>\n *  </mp-component-toolbar>\n */\nexport class ComponentToolbarComponent extends Component<Props, State> {\n  constructor(props: Props, context: any) {\n    super(props, context);\n    this.state = {\n      error: this.checkTree(props),\n      propsOverride: {},\n    };\n  }\n\n  static childContextTypes = {\n    ...ComponentToolbarContextTypes,\n    ...Component.childContextTypes,\n  };\n\n  getChildContext() {\n    return {\n      ...super.getChildContext(),\n      overrideProps: this.overrideComponentProps,\n    };\n  }\n\n  componentWillReceiveProps(props: Props) {\n    this.setState({ error: this.checkTree(props) });\n  }\n\n  private overrideComponentProps = (props: {}) => {\n    this.setState({ propsOverride: props });\n  };\n\n  private checkTree(props) {\n    if (\n      props.children.length !== 2 ||\n      !_.find(props.children, (child) => componentHasType(child, ComponentToolbarActionsComponent)) ||\n      !_.find(props.children, (child) => componentHasType(child, ComponentToolbarComponentComponent))\n    ) {\n      return (\n        `mp-component-toolbar should contain exactly 2 children: ` +\n        `mp-component-toolbar-actions and mp-component-toolbar-component`\n      );\n    }\n    return null;\n  }\n\n  render() {\n    if (this.state.error) {\n      return createElement(ErrorNotification, { errorMessage: this.state.error });\n    }\n    const children = Children.toArray(this.props.children);\n    const actionsParent = _.find(children, (child) =>\n      componentHasType(child, ComponentToolbarActionsComponent)\n    ) as ReactElement<any>;\n    const componentParent = _.find(children, (child) =>\n      componentHasType(child, ComponentToolbarComponentComponent)\n    ) as ReactElement<any>;\n    const component = Children.only(componentParent.props.children);\n    const updatedComponent = cloneElement(component, Object.assign({}, component.props, this.state.propsOverride));\n    const actions = actionsParent.props.children as ReactElement<any>;\n    return D.div(\n      { className: this.props.className, style: this.props.style },\n      D.div(\n        {\n          className: classnames(styles.actions, actionsParent.props.className),\n          style: actionsParent.props.style,\n        },\n        ...Children.map(actions, (action: ReactElement<any>) => {\n          return cloneElement(action, { ...action.props, component: updatedComponent });\n        })\n      ),\n      updatedComponent\n    );\n  }\n}\n\nexport default ComponentToolbarComponent;\n"],"sourceRoot":""}