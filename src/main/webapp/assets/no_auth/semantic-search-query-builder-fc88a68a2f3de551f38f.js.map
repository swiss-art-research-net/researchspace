{"version":3,"sources":["webpack:///./src/main/web/components/search/query-builder/QueryBuilder.tsx","webpack:///./src/main/web/components/search/query-builder/OLMapSelection.tsx","webpack:///./src/main/web/components/search/query-builder/ItemSelector.tsx","webpack:///./src/main/web/components/search/query-builder/SearchStore.ts","webpack:///./src/main/web/components/search/date/DateFormatSelector.tsx","webpack:///./src/main/web/components/search/date/SimpleDateInput.tsx","webpack:///./src/main/web/components/search/query-builder/TextSelection.tsx","webpack:///./src/main/web/components/search/query-builder/MapSelectionOverlay.tsx"],"names":["DEFAULT_TEXT_HELP_PAGE","Rdf","iri","SearchClause","clause","id","children","generatedId","uniqueId","className","styles","searchClause","render","SemanticSearchContext","Consumer","context","QueryBuilderInner","props","Component","renderSearch","search","searchState","isNested","existingClauses","_","conjuncts","map","conjunct","isActiveClause","conjunctIndex","renderActiveSearchClause","renderFullClause","domain","andSeparator","flatten","initial","value","isNewConjunct","concat","isSearchCollapsed","state","searchSummary","searchArea","style","display","searchSummaryHolder","isUndefined","classnames","searchExpand","searchCollapse","onClick","onSearchToggle","setState","Model","matchConjunct","Relation","c","renderRelationClause","Text","renderTextClause","baseConfig","renderDomain","renderRelation","relation","renderRange","range","renderSimpleTerms","addDisjunctionButton","addConjunctionButton","removeConjunctionButton","renderNestedTerms","disjuncts","textSearchRelationPlaceholder","category","domainElement","renderResource","categoryViewTemplate","selectedDomain","withoutEdit","EditKinds","Domain","withEdit","Range","selectedRange","relationViewTemplate","selectedRelation","filter","term","kind","EntityDisjunctKinds","Search","renderSimpleTerm","disjunct","Disjunct","selectedTerm","ModelUtils","disjunctToString","terms","renderNestedTerm","renderNestedSearch","nestedSearchHolder","whereSeparator","addDisjunctButton","e","store","addDisjunction","trigger","eventType","SearchEvents","SearchOrDisjunctSelected","source","addConjunctButton","addConjunction","SearchAndConjunctSelected","removeConjunctButton","removeConjunction","removeActiveConjunctionButton","resetEditMode","editKind","element","itemHolder","editButton","edit","renderExtendedDomainSelection","categorySelection","domains","domainSelection","selectExtendedDomain","relationSelectorPlaceholder","renderExtendedRelationSelection","relationSelector","relations","selectExtendedRelation","relationSelection","isNestedSearch","selectRelation","relationPlaceholder","textDisjunctSelector","toString","patternConfig","getConfigPatternForCategory","helpPageIRI","helpPage","fullIri","escapeLuceneSyntax","undefined","searchBasedTermSelectorHolder","onSelect","onTextTermSelect","text","selectTerm","resourceTermSelector","AutoCompletionInput","resourceSelector","prepareAutoCompletionInputConfig","placeTermSelector","tooltip","Tooltip","OverlayTrigger","placement","overlay","mapSelectionButton","showMapSelection","onHide","getOverlaySystem","hide","show","OverlayDialog","type","title","suggestionConfig","geoSelector","onCancel","onSearchAreaSelected","area","SelectType","Box","box","Circle","circle","hierarchyTermSelector","SemanticTreeInput","hierarchySelector","prepareHierarchySelectorInputConfig","dateTermSelector","SearchDateFormatSubmitted","onOpen","SearchSelectDateFormatOpened","onChange","SearchDateFormatSelected","data","droppableConfig","query","setClauseBindings","vocabularies","VocabPlatform","Set","enabled","border","disabled","components","disabledHover","label","selectResourceTerm","description","tuple","includes","QueryService","getQuery","onValue","SparqlUtil","parseQuerySync","categories","action","mode","selectorMode","tupleTemplate","resources","itemClassName","categorySelectionItem","actions","selectResource","CategoryOrRelationSelected","nestedSearchButton","nlp","noun","pluralize","selectSubSearchTerm","position","thumbnail","magnifierIcon","src","getTreeSelectorConfigForRelation","treeSelectorRelations","treeSelector","treeSelectorCategories","has","hasRange","getResourceSelectorConfigForRelation","resourceSelectorRelations","resourceSelectorCategories","Maybe","Nothing","componentDidMount","this","searchProfileStore","isJust","initSearch","componentWillReceiveProps","nextProps","isEqual","nextContext","profileStore","searchStore","isExtendedSearch","extendedSearch","esNew","esOld","getOrElse","SearchStore","projectionVariable","baseQueryStructure","currentSearchState","currentState","currentSearch","setDomain","get","setBaseQueryStructure","currentSearchQuery","setBaseQuery","renderChild","child","React","Children","only","isValidChild","Error","invisible","cloneElement","searchAreaHolder","renderSearchArea","renderSearchState","searchClauseArea","head","length","last","rangeSelection","termSelection","textTermSelection","selectDomain","isNesteadSearch","D","div","ranges","selectRange","searchClauseHolder","activeTerm","termSelector","termKind","nestedSearch","rangeLabel","article","searchBasedTermSelector","searchBasedTermSelectorLabel","searhState","selectorPatterns","hierarchySelectorConfig","isLightweightTreeConfig","createDefaultTreeQueries","assign","cloneDeep","rootsQuery","multiDatasetQuery","childrenQuery","parentsQuery","searchQuery","droppable","onSelectionChanged","selection","nodes","TreeSelection","leafs","size","SearchTreeInputSelected","allowForceSuggestion","serializeQuery","generateQueryForMultipleDatasets","setClauseBindingsParsed","selectedDatasets","datasetsConfig","defaultQuery","noSuggestionsTemplate","suggestionTupleTemplate","templates","empty","suggestion","displayKey","binding","RESOURCE_SEGGESTIONS_VARIABLES","SUGGESTION_LABEL","valueBindingName","SUGGESTION_IRI","labelBindingName","searchTermVariable","SEARCH_TERM_VAR","onSelected","patterns","parsedQuery","parseQuery","resourcePatternConfig","tryGetRelationPatterns","find","p","parsePatterns","queryPattern","prefixes","VariableRenameBinder","SEMANTIC_SEARCH_VARIABLES","RESOURCE_VAR","forEach","pattern","SearchDefaults","DefaultResourceSelectorRelationPattern","PatternBinder","RELATION_PATTERN_VAR","sparqlQuery","bindings","RELATION_VAR","DOMAIN_VAR","RANGE_VAR","SELECTED_ALIGNMENT","selectedAlignment","a","SparqlClient","setBindings","mapKeys","key","toOrderedMap","config","defaultProps","CategoryViewTemplate","RelationViewTemplate","DefaultResourceSelectorQuery","DefaultResourceSelectorSuggestionTemplate","DefaultResourceSelectorNoSuggestionsTemplate","QueryBuilder","MAP_REF","geometryFunction","coordinates","geometry","start","end","setCoordinates","selectionTool","vectorSource","wrapX","vectorStyle","fill","color","stroke","width","image","radius","vector_draw","view","center","fromLonLat","zoom","target","findDOMNode","refs","layers","controls","defaults","attributionOptions","collapsible","updateCurrentDraw","on","getFeatures","updateSelection","zoomTo","setCenter","transform","long","lat","setZoom","zoomLevel","transformToWGS84","metacor","wrapLongitudeOL","wgs84","wrapLong","wrapLongitude","selectedArea","feature","olCoords","getGeometry","getCoordinates","coords","firstPoint","secondPoint","southWest","minBy","point","northEast","maxBy","olCenter","getCenter","olRadius","getRadius","edgeCoordinate","wgs84Sphere","haversineDistance","wrappedCenter","distance","currentDraw","removeInteraction","maxPoints","event","clear","addInteraction","componentDidUpdate","prevProps","prevState","setSelectionTool","tool","body","tools","btnsWrap","role","classNames","toolsBtnSquare","btnActive","toolsBtnCircle","ref","OLMapSelection","focusItem","resource","focusedOption","Just","handleKeyDown","keyCode","focusPreviousOption","focusNextOption","preventDefault","option","optionsSeq","keySeq","newIndex","indexOf","newKey","first","fromNullable","focus","fcButtons","tabIndex","onMouseOver","onKeyDown","itemSelector","toArray","onSelectMounted","select","setAttribute","dropdown","autofocus","openOnFocus","options","optionRenderer","template","createElement","TemplateItem","componentProps","DropdownSelector","StackSelector","ItemSelector","initialSearch","_searchProperty","Action","_searchStateProperty","_counter","filterOnlySupportedCategories","_profileStore","rangesFor","filterNot","supportedCategoryTypes","intersection","SupportedCategoryTypes","getCategoryTypes","isEmpty","extendedValueToDisjunct","isResourceExtendedDisjunct","Resource","disjunctIndex","SavedSearch","_searchState","relationsFor","ConjunctKinds","_search","baseConjunct","getConjunctByIndex","dropRight","newConjunctIndex","clone","push","_selectRange","removeDisjunct","_selectRelation","deepestActiveState","getDeepestActiveState","updateNestedState","selectTextDisjunctState","newState","selectRelationState","selectTermState","newDisjunctIndex","getRelationDisjunctKinds","getConjunctType","getDisjunctType","termType","TextDisjunctKind","dateFormat","SpatialDisjunctKinds","Distance","BoundingBox","getDisjunctValue","updateNestedSearchTerm","existingConjunct","searhBase","getSearchBaseForConjunct","createInitialSearch","nestedState","existingParentConjunct","nestedConjunct","n","Array","baseSearch","addRelationDisjunction","addTextDisjunction","splice","normalizeSearch","isNothing","reject","removeNestedEmptyDisjuncts","updateConjunctIndexes","isEmptyConjuncts","every","baseIndex","i","j","slice","$property","maybeSearch","generateSelectQuery","updatedState","initialState","showSelectorDropdown","maybe","showDateInput","inputHolder","dateInput","simpleDate","SimpleDateInput","autoFocus","setSimpleDate","date","dateRange","setDateRangeBegin","dateSeparator","setDateRangeEnd","begin","v","dateDeviation","setDateDeviationDate","FormGroup","FormControl","deviationInput","placeholder","required","setDateDeviation","deviation","year","YearInput","setYear","yearRange","setYearRangeBegin","setYearRangeEnd","yearDeviation","setYearDeviationYear","setYearDeviation","dateSelectorDropdown","keys","TemporalDisjunctKinds","dateFormatSelect","clearable","selectDateFormat","bind","dateSelectorOptions","valueRenderer","holder","matchTemporalDisjunct","Date","DateRange","DateDeviation","Year","YearRange","YearDeviation","dateFormatSelect__ddMmYyyy","yearInput","dateFormatSelect__yyyyAcBc","dateFormatSelect__option","dateFormatSelectDdMmYyyyDateDeviation","dateFormatSelectDdMmYyyyYearDeviation","DateFormatSelectorComponent","onDayChange","day","number","parseInt","dayIsValid","isNaN","onMonthChange","month","onYearChange","triggerOnSelected","zeroIndexedMonth","moment","monthIsValid","yearIsValid","validationState","min","max","componentWillUpdate","nextState","PureComponent","isButtonDisabled","textValue","onValueChange","submitText","onKeyUp","helpUrl","Navigation","constructUrlForResource","uri","valueOf","href","helpQuestionCircle","inputGroup","Button","bsStyle","TextSelection","confirmSelection","onAreaSelected","zoomToOptions","showPlaceSelector","Number","mapSelection","MapSelectionOverlay"],"mappings":"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","file":"semantic-search-query-builder-fc88a68a2f3de551f38f.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2015-2020, © Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as React from 'react';\nimport * as D from 'react-dom-factories';\nimport * as Maybe from 'data.maybe';\nimport * as _ from 'lodash';\nimport * as classnames from 'classnames';\nimport * as nlp from 'nlp_compromise';\nimport { Tooltip, OverlayTrigger } from 'react-bootstrap';\nimport * as SparqlJs from 'sparqljs';\n\nimport { trigger } from 'platform/api/events';\nimport { Rdf, vocabularies } from 'platform/api/rdf';\nimport { QueryService } from 'platform/api/services/ldp-query';\nimport { SparqlUtil, SparqlClient, PatternBinder, VariableRenameBinder } from 'platform/api/sparql';\nimport { Component } from 'platform/api/components';\nimport { getOverlaySystem, OverlayDialog } from 'platform/components/ui/overlay';\nimport { AutoCompletionInput, AutoCompletionInputProps } from 'platform/components/ui/inputs';\nimport { isValidChild } from 'platform/components/utils';\nimport {\n  TreeSelection,\n  SemanticTreeInput,\n  Node as TreeNode,\n  createDefaultTreeQueries,\n  LightwightTreePatterns,\n  SemanticTreeInputProps,\n} from 'platform/components/semantic/lazy-tree';\n\nimport * as Model from 'platform/components/semantic/search/data/search/Model';\nimport * as ModelUtils from 'platform/components/semantic/search/data/search/ModelUtils';\nimport {\n  tryGetRelationPatterns,\n  generateQueryForMultipleDatasets,\n} from 'platform/components/semantic/search/data/search/SparqlQueryGenerator';\nimport {\n  ResourceSelectorConfig,\n  SemanticQueryBuilderConfig,\n  SEMANTIC_SEARCH_VARIABLES,\n  RESOURCE_SEGGESTIONS_VARIABLES,\n  getConfigPatternForCategory,\n  Resource as PatternResource,\n  Text as PatternText,\n  TreeSelectorConfig,\n} from 'platform/components/semantic/search/config/SearchConfig';\nimport * as SearchDefaults from 'platform/components/semantic/search/config/Defaults';\n\nimport ItemSelector, { renderResource } from './ItemSelector';\nimport * as styles from './QueryBuilder.scss';\nimport {\n  SearchStore,\n  SearchState,\n  DomainSelection,\n  RangeSelection,\n  RelationSelection,\n  RelationTermSelection,\n  ConjunctStep,\n  ConjunctIndex,\n  TermSelectionSearch,\n  TextTermSelection,\n  EditKinds,\n  ExtendedDomainSelection,\n  ExtendedRelationSelection,\n  TermType,\n} from './SearchStore';\nimport {\n  SemanticSearchContext,\n  InitialQueryContext,\n} from 'platform/components/semantic/search/web-components/SemanticSearchApi';\nimport * as SearchEvents from 'platform/components/search/query-builder/SearchEvents';\nimport DateFormatSelector from '../date/DateFormatSelector';\nimport TextSelection from './TextSelection';\nimport SearchSummary from './SearchSummary';\nimport MapSelectionOverlay from './MapSelectionOverlay';\nimport { SelectType, SelectedArea } from './OLMapSelection';\n\nconst DEFAULT_TEXT_HELP_PAGE = Rdf.iri('http://help.researchspace.org/resource/SolrFullTextSearchSyntax');\n\n/**\n * Assign unique id to search clause holders to facilitate integration testing.\n */\nfunction SearchClause({ clause, id, children }: { id: string; clause: Model.Conjunct; children?: React.ReactNode }) {\n  const generatedId = `${id}-searchClause-${clause.uniqueId}`;\n  return (\n    <div id={generatedId} className={styles.searchClause}>\n      {children}\n    </div>\n  );\n}\n\n/**\n * @author Artem Kozlov <ak@metaphacts.com>\n * @author Andrey Nikolov an@metaphacts.com\n * @author Alexey Morozov\n * @author Denis Ostapenko\n */\nclass QueryBuilder extends Component<SemanticQueryBuilderConfig, {}> {\n  render() {\n    return (\n      <SemanticSearchContext.Consumer>\n        {(context) => <QueryBuilderInner {...this.props} context={context} />}\n      </SemanticSearchContext.Consumer>\n    );\n  }\n}\n\ninterface InnerProps extends SemanticQueryBuilderConfig {\n  context: InitialQueryContext;\n}\n\ninterface State {\n  store?: SearchStore;\n  searchState?: SearchState;\n  search?: Data.Maybe<Model.Search>;\n  isSearchCollapsed?: boolean;\n}\n\nclass QueryBuilderInner extends React.Component<InnerProps, State> {\n  static defaultProps = {\n    categoryViewTemplate: SearchDefaults.CategoryViewTemplate,\n    relationViewTemplate: SearchDefaults.RelationViewTemplate,\n    resourceSelector: {\n      query: SearchDefaults.DefaultResourceSelectorQuery(),\n      suggestionTupleTemplate: SearchDefaults.DefaultResourceSelectorSuggestionTemplate,\n      noSuggestionsTemplate: SearchDefaults.DefaultResourceSelectorNoSuggestionsTemplate,\n    },\n    projectionVariable: 'subject',\n    treeSelectorRelations: [],\n    treeSelectorCategories: [],\n  };\n\n  constructor(props: InnerProps) {\n    super(props);\n    this.state = {\n      store: null,\n      searchState: null,\n      search: Maybe.Nothing<Model.Search>(),\n      isSearchCollapsed: false,\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.context.searchProfileStore.isJust) {\n      this.initSearch(this.props, this.props.context);\n    }\n  }\n\n  componentWillReceiveProps(nextProps: InnerProps) {\n    const { context: nextContext } = nextProps;\n    if (!_.isEqual(nextContext, this.props.context)) {\n      this.initSearch(nextProps, nextContext);\n    }\n  }\n\n  private initSearch(props: InnerProps, context: InitialQueryContext) {\n    context.searchProfileStore.map((profileStore) => {\n      let searchStore = this.state.store;\n      const isExtendedSearch = context.extendedSearch\n        .map((esNew) => this.props.context.extendedSearch.map((esOld) => !_.isEqual(esOld, esNew)).getOrElse(true))\n        .getOrElse(false);\n\n      if (!searchStore || isExtendedSearch) {\n        searchStore = new SearchStore(\n          profileStore,\n          context.baseConfig,\n          props.projectionVariable,\n          context.baseQueryStructure,\n          context.extendedSearch\n        );\n        this.setState({ store: searchStore });\n\n        searchStore.currentSearchState.onValue((currentState) => this.setState({ searchState: currentState }));\n        searchStore.currentSearch.onValue((currentSearch) => {\n          this.setState({ search: currentSearch });\n          if (currentSearch.isJust) {\n            this.props.context.setDomain(currentSearch.get().domain);\n          }\n          this.props.context.setBaseQueryStructure(currentSearch);\n        });\n        searchStore.currentSearchQuery.onValue(this.props.context.setBaseQuery);\n      }\n    });\n  }\n\n  private renderChild() {\n    const { children } = this.props;\n    if (!children) {\n      return null;\n    }\n    const child = React.Children.only(children);\n    if (!isValidChild(child)) {\n      throw new Error('Expected a single component as a child');\n    }\n    const className = classnames(child.props.className, {\n      invisible: !(this.state.searchState && this.state.searchState.kind === 'domain-selection'),\n    });\n    return React.cloneElement(child, { className });\n  }\n\n  render() {\n    return (\n      <div className={styles.searchAreaHolder}>\n        {this.renderChild()}\n        {this.renderSearchArea()}\n        {this.state.search.isJust ? <hr /> : null}\n      </div>\n    );\n  }\n\n  private renderSearchArea() {\n    if (this.state.search.isJust && this.props.context.searchProfileStore.isJust) {\n      return this.renderSearch(this.state.search.get(), this.state.searchState);\n    } else if (this.state.searchState && this.props.context.searchProfileStore.isJust) {\n      return <div className={styles.searchArea}>{this.renderSearchState(this.state.searchState)}</div>;\n    } else {\n      return null;\n    }\n  }\n\n  private renderSearchState(searchState: SearchState) {\n    if (searchState.kind === 'domain-selection') {\n      return (\n        <div>\n          {this.searchSummary()}\n          {this.domainSelection(searchState)}\n        </div>\n      );\n    } else if (searchState.kind === 'extended-domain-selection') {\n      return this.renderExtendedDomainSelection(searchState as ExtendedDomainSelection);\n    } else if (searchState.kind === 'extended-relation-selection') {\n      return this.renderExtendedRelationSelection(searchState as ExtendedRelationSelection);\n    } else {\n      return <div className={styles.searchClauseArea}>{this.renderActiveSearchClause(searchState, false)}</div>;\n    }\n  }\n\n  // pasive clause\n  private renderSearch = (search: Model.Search, searchState: SearchState, isNested = false) => {\n    let existingClauses = _(search.conjuncts)\n      .map((conjunct) => [\n        this.isActiveClause(conjunct.conjunctIndex, searchState as ConjunctStep)\n          ? this.renderActiveSearchClause(searchState, false, conjunct as Model.RelationConjunct)\n          : this.renderFullClause(search.domain, conjunct, searchState),\n        <div className={styles.andSeparator}>AND</div>,\n      ])\n      .flatten()\n      .initial()\n      .value();\n    if (this.isNewConjunct(search, searchState as ConjunctStep)) {\n      existingClauses = existingClauses.concat([\n        <div className={styles.andSeparator}>AND</div>,\n        this.renderActiveSearchClause(searchState, false),\n      ]);\n    }\n\n    const isSearchCollapsed = this.state.isSearchCollapsed;\n    return (\n      <div>\n        {isNested ? null : this.searchSummary(search)}\n        <div className={styles.searchArea} style={{ display: isSearchCollapsed ? 'none' : null }}>\n          {existingClauses}\n        </div>\n      </div>\n    );\n  };\n\n  private searchSummary = (search?: Model.Search) => {\n    const isSearchCollapsed = this.state.isSearchCollapsed;\n    return (\n      <div className={styles.searchSummaryHolder}>\n        {!_.isUndefined(search) ? (\n          <i\n            className={classnames({\n              [styles.searchExpand]: isSearchCollapsed,\n              [styles.searchCollapse]: !isSearchCollapsed,\n            })}\n            onClick={this.onSearchToggle}\n          />\n        ) : null}\n        <SearchSummary search={search} />\n      </div>\n    );\n  };\n\n  private onSearchToggle = () => this.setState((state) => ({ isSearchCollapsed: !state.isSearchCollapsed }));\n\n  private isNewConjunct(search: Model.Search, searchState?: ConjunctStep) {\n    if (searchState) {\n      return (\n        _.head(search.conjuncts).conjunctIndex.length === searchState.conjunctIndex.length &&\n        search.conjuncts.length <= _.last(searchState.conjunctIndex)\n      );\n    } else {\n      return false;\n    }\n  }\n\n  private isActiveClause(conjunctIndex: ConjunctIndex, searchState?: ConjunctStep) {\n    if (searchState) {\n      return _.isEqual(searchState.conjunctIndex, conjunctIndex);\n    } else {\n      return false;\n    }\n  }\n\n  private renderFullClause = (domain: Model.Category, clause: Model.Conjunct, searchState: SearchState) =>\n    Model.matchConjunct({\n      Relation: (c) => this.renderRelationClause(domain, c, searchState),\n      Text: (c) => this.renderTextClause(domain, c),\n    })(clause);\n\n  private renderRelationClause = (domain: Model.Category, clause: Model.RelationConjunct, searchState: SearchState) => (\n    <div>\n      <SearchClause id={this.props.context.baseConfig.id} clause={clause}>\n        {this.renderDomain(domain)}\n        {this.renderRelation(clause.relation, clause)}\n        {this.renderRange(clause.range, clause)}\n        {this.renderSimpleTerms(clause)}\n        {this.addDisjunctionButton(clause)}\n        {this.addConjunctionButton(clause)}\n        {this.removeConjunctionButton(clause)}\n      </SearchClause>\n      {this.renderNestedTerms(clause.disjuncts, searchState)}\n    </div>\n  );\n\n  private renderTextClause = (domain: Model.Category, clause: Model.TextConjunct) => (\n    <div>\n      <SearchClause id={this.props.context.baseConfig.id} clause={clause}>\n        {this.renderDomain(domain)}\n        {this.textSearchRelationPlaceholder()}\n        {this.renderSimpleTerms(clause)}\n        {this.addDisjunctionButton(clause)}\n        {this.addConjunctionButton(clause)}\n        {this.removeConjunctionButton(clause)}\n      </SearchClause>\n    </div>\n  );\n\n  private renderDomain = (category: Model.Category, isNested = false) => {\n    const domainElement = renderResource(\n      this.props.categoryViewTemplate,\n      category,\n      () => {\n        /**/\n      },\n      styles.selectedDomain\n    );\n    return isNested\n      ? this.withoutEdit(EditKinds.Domain)(domainElement)\n      : this.withEdit(EditKinds.Domain)(domainElement);\n  };\n\n  private renderRange = (category: Model.Category, conjunct?: Model.Conjunct) =>\n    this.withEdit(\n      EditKinds.Range,\n      conjunct\n    )(\n      renderResource(\n        this.props.categoryViewTemplate,\n        category,\n        () => {\n          /**/\n        },\n        styles.selectedRange\n      )\n    );\n\n  private renderRelation = (relation: Model.Relation, conjunct?: Model.Conjunct) =>\n    this.withEdit(\n      EditKinds.Relation,\n      conjunct\n    )(\n      renderResource(\n        this.props.relationViewTemplate,\n        relation,\n        () => {\n          /**/\n        },\n        styles.selectedRelation\n      )\n    );\n\n  private renderSimpleTerms = (conjunct: Model.Conjunct) =>\n    _.filter<Model.Disjunct>(conjunct.disjuncts, (term) => term.kind !== Model.EntityDisjunctKinds.Search).map(\n      this.renderSimpleTerm(conjunct)\n    );\n\n  private renderSimpleTerm = (conjunct: Model.Conjunct) => (disjunct: Model.Disjunct) =>\n    this.withEdit(\n      EditKinds.Disjunct,\n      conjunct,\n      disjunct\n    )(<div className={styles.selectedTerm}>{ModelUtils.disjunctToString(disjunct)}</div>);\n\n  private renderNestedTerms = (terms: Model.Disjuncts, searchState: SearchState) =>\n    terms.map((term) => this.renderNestedTerm(term, searchState));\n\n  private renderNestedTerm = (term: Model.Disjunct, searchState: SearchState) => {\n    switch (term.kind) {\n      case Model.EntityDisjunctKinds.Search:\n        return this.renderNestedSearch(term, searchState);\n    }\n  };\n\n  private renderNestedSearch = (term: Model.SearchDisjunct, searchState: SearchState) => {\n    return (\n      <div className={styles.nestedSearchHolder}>\n        <div className={styles.whereSeparator}>WHERE</div>\n        {this.renderSearch(term.value, searchState, true)}\n      </div>\n    );\n  };\n\n  private addDisjunctionButton = (conjunct: Model.Conjunct) => (\n    <div\n      className={styles.addDisjunctButton}\n      onClick={(e) => {\n        this.state.store.addDisjunction(conjunct);\n        trigger({ eventType: SearchEvents.SearchOrDisjunctSelected, source: this.props.id });\n      }}\n    >\n      or\n    </div>\n  );\n\n  private addConjunctionButton = (conjunct: Model.Conjunct) => (\n    <div\n      className={styles.addConjunctButton}\n      onClick={(e) => {\n        this.state.store.addConjunction(conjunct);\n        trigger({ eventType: SearchEvents.SearchAndConjunctSelected, source: this.props.id });\n      }}\n    >\n      and\n    </div>\n  );\n\n  private removeConjunctionButton = (conjunct: Model.Conjunct) => (\n    <button\n      className={classnames('btn', 'btn-link', styles.removeConjunctButton)}\n      onClick={(e) => this.state.store.removeConjunction(conjunct)}\n    >\n      remove\n    </button>\n  );\n\n  private removeActiveConjunctionButton = () => (\n    <button\n      className={classnames('btn', 'btn-link', styles.removeConjunctButton)}\n      onClick={(e) => this.state.store.resetEditMode()}\n    >\n      cancel\n    </button>\n  );\n\n  private withEdit = (editKind: EditKinds, conjunct?: Model.Conjunct, disjunct?: Model.Disjunct) => (\n    element: React.ReactElement<any>\n  ) => (\n    <div className={styles.itemHolder}>\n      {element}\n      <span\n        className={classnames('fa fa-times-circle fa-lg', styles.editButton)}\n        onClick={() => this.state.store.edit(editKind, conjunct as any, disjunct)}\n      />\n    </div>\n  );\n\n  private withoutEdit = (editKind: EditKinds, conjunct?: Model.Conjunct, disjunct?: Model.Disjunct) => (\n    element: React.ReactElement<any>\n  ) => <div className={styles.itemHolder}>{element}</div>;\n\n  // active clasue\n  private renderExtendedDomainSelection = (searchState: ExtendedDomainSelection) => (\n    <div className={styles.searchClause}>\n      {this.categorySelection(\n        searchState.domains,\n        styles.domainSelection,\n        this.state.store.selectExtendedDomain,\n        'search domain category selection'\n      )}\n      {this.relationSelectorPlaceholder()}\n      {this.renderRange(searchState.range, null)}\n      {this.renderSimpleTerm(null)(searchState.disjunct)}\n      {this.removeActiveConjunctionButton()}\n    </div>\n  );\n\n  private renderExtendedRelationSelection = (searchState: ExtendedRelationSelection) => (\n    <div className={styles.searchClause}>\n      {this.renderDomain(searchState.domain)}\n      {this.relationSelector(searchState.relations, this.state.store.selectExtendedRelation)}\n      {this.renderRange(searchState.range, null)}\n      {this.renderSimpleTerm(null)(searchState.disjunct)}\n      {this.removeActiveConjunctionButton()}\n    </div>\n  );\n\n  private renderActiveSearchClause(searchState: SearchState, isNestedSearch: boolean, clause?: Model.Conjunct) {\n    switch (searchState.kind) {\n      case 'range-selection':\n        return this.rangeSelection(searchState, isNestedSearch);\n      case 'relation-selection':\n        return this.relationSelection(searchState, isNestedSearch);\n      case 'term-selection':\n        return this.termSelection(searchState, isNestedSearch, clause as Model.RelationConjunct);\n      case 'text-term-selection':\n        return this.textTermSelection(searchState, clause as Model.TextConjunct, isNestedSearch);\n    }\n  }\n\n  private domainSelection(searchState: DomainSelection) {\n    return this.categorySelection(\n      searchState.domains,\n      styles.domainSelection,\n      this.state.store.selectDomain,\n      'search domain category selection'\n    );\n  }\n\n  private rangeSelection(searchState: RangeSelection, isNesteadSearch: boolean) {\n    return D.div(\n      { className: styles.searchClause },\n      this.renderDomain(searchState.domain, isNesteadSearch),\n      this.relationSelectorPlaceholder(),\n      this.categorySelection(\n        searchState.ranges,\n        styles.rangeSelection,\n        this.state.store.selectRange,\n        'search range category selection'\n      ),\n      this.removeActiveConjunctionButton()\n    );\n  }\n\n  private relationSelection = (searchState: RelationSelection, isNestedSearch: boolean) => (\n    <div className={styles.searchClause}>\n      {this.renderDomain(searchState.domain, isNestedSearch)}\n      {this.relationSelector(searchState.relations, this.state.store.selectRelation)}\n      {this.renderRange(searchState.range)}\n      {this.removeActiveConjunctionButton()}\n    </div>\n  );\n\n  private termSelection(state: RelationTermSelection, isNestedSearch: boolean, clause?: Model.RelationConjunct) {\n    return [\n      <div className={styles.searchClauseHolder}>\n        <div className={styles.searchClause}>\n          {this.renderDomain(state.domain, isNestedSearch)}\n          {this.renderRelation(state.relation, clause)}\n          {this.renderRange(state.range, clause)}\n          {clause ? this.renderSimpleTerms(clause) : null}\n          {this.removeActiveConjunctionButton()}\n        </div>\n        <div className={styles.activeTerm}>{this.termSelector(state, isNestedSearch)}</div>\n        {clause ? this.renderNestedTerms(clause.disjuncts, state) : null}\n      </div>,\n    ];\n  }\n\n  private textTermSelection(state: TextTermSelection, clause?: Model.TextConjunct, isNestedSearch?: boolean) {\n    return [\n      <div className={styles.searchClauseHolder}>\n        <div className={styles.searchClause}>\n          {this.renderDomain(state.domain, isNestedSearch)}\n          {this.textSearchRelationPlaceholder()}\n          {clause ? this.renderSimpleTerms(clause) : null}\n          {this.removeActiveConjunctionButton()}\n        </div>\n        <div className={styles.activeTerm}>{this.textDisjunctSelector(state)}</div>\n      </div>,\n    ];\n  }\n\n  private textSearchRelationPlaceholder = () => <div className={styles.relationPlaceholder}>... text search ...</div>;\n\n  private termSelector(searchState: RelationTermSelection, isNestedSearch: boolean) {\n    if (_.includes(searchState.termKind, 'nested-search')) {\n      return this.nestedSearch(searchState as any);\n    } else if (_.includes(searchState.termKind, 'date-range')) {\n      return <div className={styles.searchBasedTermSelectorHolder}>{this.dateTermSelector(searchState)}</div>;\n    } else {\n      const rangeLabel = searchState.range.label;\n      const label = `Find ${nlp.noun(rangeLabel).article()} ${rangeLabel}: `;\n      return (\n        <div className={styles.searchBasedTermSelectorHolder}>\n          <div className={styles.searchBasedTermSelector}>\n            <span className={styles.searchBasedTermSelectorLabel}>{label}</span>\n            {this.searchBasedTermSelector(searchState)}\n            {_.includes(searchState.termKind, 'place') ? this.placeTermSelector(searchState) : null}\n            {isNestedSearch ? null : this.nestedSearchButton(searchState.range)}\n          </div>\n        </div>\n      );\n    }\n  }\n\n  private textDisjunctSelector = (searchState: TextTermSelection) => {\n    const sCategoryIri = searchState.range.iri.toString();\n    const patternConfig = getConfigPatternForCategory(\n      this.props.context.baseConfig,\n      searchState.range.iri\n    ) as PatternText;\n    const helpPageIRI =\n      patternConfig && patternConfig.helpPage\n        ? Rdf.fullIri(patternConfig.helpPage)\n        : patternConfig && patternConfig.escapeLuceneSyntax === false\n        ? DEFAULT_TEXT_HELP_PAGE\n        : undefined;\n    return (\n      <div className={styles.searchBasedTermSelectorHolder}>\n        <TextSelection onSelect={this.onTextTermSelect} helpPage={helpPageIRI} />\n      </div>\n    );\n  };\n\n  private onTextTermSelect = (text: string) => {\n    this.state.store.selectTerm('text')(text);\n  };\n\n  private searchBasedTermSelector(searchState: RelationTermSelection) {\n    if (_.includes(searchState.termKind, 'hierarchy')) {\n      return this.hierarchyTermSelector(searchState);\n    } else {\n      return this.resourceTermSelector(searchState);\n    }\n  }\n\n  private nestedSearch(searhState: TermSelectionSearch) {\n    return (\n      <div className={styles.nestedSearchHolder}>\n        <div className={styles.whereSeparator}>WHERE</div>\n        {this.renderActiveSearchClause(searhState.state, true)}\n      </div>\n    );\n  }\n\n  private resourceTermSelector = (searchState: RelationTermSelection) => {\n    return (\n      <AutoCompletionInput\n        className={styles.resourceSelector}\n        {...this.prepareAutoCompletionInputConfig(searchState)}\n      />\n    );\n  };\n\n  private placeTermSelector = (searchState: RelationTermSelection) => {\n    const tooltip = <Tooltip>Search for places by map region</Tooltip>;\n    return (\n      <OverlayTrigger placement=\"bottom\" overlay={tooltip}>\n        <button\n          className={classnames('btn btn-default', styles.mapSelectionButton)}\n          onClick={this.showMapSelection}\n        ></button>\n      </OverlayTrigger>\n    );\n  };\n\n  private showMapSelection = () => {\n    const dialogKey = 'map-selection';\n    const onHide = () => getOverlaySystem().hide(dialogKey);\n    getOverlaySystem().show(\n      dialogKey,\n      <OverlayDialog show={true} type=\"lightbox\" title=\"Set selection on map\" onHide={onHide}>\n        <MapSelectionOverlay\n          suggestionConfig={this.props.geoSelector}\n          onCancel={onHide}\n          onSelect={this.onSearchAreaSelected}\n        />\n      </OverlayDialog>\n    );\n  };\n\n  private onSearchAreaSelected = (area: SelectedArea) => {\n    switch (area.type) {\n      case SelectType.Box:\n        this.state.store.selectTerm('place')(area.box);\n        break;\n      case SelectType.Circle:\n        this.state.store.selectTerm('place')(area.circle);\n        break;\n    }\n    getOverlaySystem().hide('map-selection');\n  };\n\n  private hierarchyTermSelector = (searchState: RelationTermSelection) => {\n    return (\n      <SemanticTreeInput\n        className={styles.hierarchySelector}\n        {...this.prepareHierarchySelectorInputConfig(searchState)}\n      />\n    );\n  };\n\n  private dateTermSelector = (searchState: RelationTermSelection) => {\n    const { id: source } = this.props;\n    return (\n      <DateFormatSelector\n        onSelect={(value) => {\n          this.state.store.selectTerm('date-range')(value);\n          trigger({ eventType: SearchEvents.SearchDateFormatSubmitted, source });\n        }}\n        onOpen={() => trigger({ eventType: SearchEvents.SearchSelectDateFormatOpened, source })}\n        onChange={(value) => trigger({ eventType: SearchEvents.SearchDateFormatSelected, source, data: value })}\n      />\n    );\n  };\n\n  private droppableConfig = (searchState: RelationTermSelection) => {\n    // TODO expose type check query\n    return {\n      query: this.setClauseBindings(\n        searchState,\n        `\n        ASK {\n          {\n            ?value a|<http://www.wikidata.org/prop/direct/P31> $__range__ .\n          } UNION {\n            ?value a ${vocabularies.VocabPlatform.Set} .\n          } UNION {\n            ?value a sp:Query .\n          }\n        }\n      `\n      ),\n      styles: {\n        enabled: { border: 'solid 1px green' },\n        disabled: { border: 'solid 1px red' },\n      },\n      components: {\n        disabledHover: <span>{searchState.range.label}, any set or saved search is required</span>,\n      },\n    };\n  };\n\n  private prepareHierarchySelectorInputConfig(searchState: RelationTermSelection): SemanticTreeInputProps {\n    const selectorPatterns = this.getTreeSelectorConfigForRelation(searchState.relation);\n    const hierarchySelectorConfig = this.isLightweightTreeConfig(selectorPatterns)\n      ? createDefaultTreeQueries(selectorPatterns)\n      : selectorPatterns;\n    return _.assign(_.cloneDeep(hierarchySelectorConfig), {\n      rootsQuery: this.multiDatasetQuery(searchState, hierarchySelectorConfig.rootsQuery),\n      childrenQuery: this.multiDatasetQuery(searchState, hierarchySelectorConfig.childrenQuery),\n      parentsQuery: this.multiDatasetQuery(searchState, hierarchySelectorConfig.parentsQuery),\n      searchQuery: this.multiDatasetQuery(searchState, hierarchySelectorConfig.searchQuery),\n      droppable: this.droppableConfig(searchState),\n      onSelectionChanged: (selection: TreeSelection<TreeNode>) => {\n        const nodes = TreeSelection.leafs(selection);\n        if (nodes.size === 0) {\n          return;\n        }\n        const { iri, label } = nodes.first();\n        this.selectResourceTerm('hierarchy')(iri, label.value, label.value, {});\n        trigger({\n          eventType: SearchEvents.SearchTreeInputSelected,\n          source: this.props.id,\n          data: iri.value,\n        });\n      },\n      allowForceSuggestion: true,\n    });\n  }\n\n  private multiDatasetQuery(searchState: RelationTermSelection, query: string) {\n    return SparqlUtil.serializeQuery(\n      generateQueryForMultipleDatasets(\n        this.setClauseBindingsParsed(searchState, query),\n        this.props.context.selectedDatasets,\n        this.props.context.baseConfig.datasetsConfig\n      )\n    );\n  }\n\n  private prepareAutoCompletionInputConfig(searchState: RelationTermSelection): AutoCompletionInputProps {\n    const {\n      query,\n      defaultQuery,\n      noSuggestionsTemplate,\n      suggestionTupleTemplate,\n      escapeLuceneSyntax,\n    } = this.getResourceSelectorConfigForRelation(searchState.relation);\n    return {\n      query: this.multiDatasetQuery(searchState, query),\n      defaultQuery: defaultQuery ? this.multiDatasetQuery(searchState, defaultQuery) : undefined,\n      droppable: this.droppableConfig(searchState),\n      templates: {\n        empty: noSuggestionsTemplate,\n        suggestion: suggestionTupleTemplate,\n        displayKey: (binding) => binding[RESOURCE_SEGGESTIONS_VARIABLES.SUGGESTION_LABEL].value,\n      },\n      valueBindingName: RESOURCE_SEGGESTIONS_VARIABLES.SUGGESTION_IRI,\n      labelBindingName: RESOURCE_SEGGESTIONS_VARIABLES.SUGGESTION_LABEL,\n      searchTermVariable: RESOURCE_SEGGESTIONS_VARIABLES.SEARCH_TERM_VAR,\n      actions: {\n        onSelected: (binding) =>\n          this.selectResourceTerm('resource')(\n            binding[RESOURCE_SEGGESTIONS_VARIABLES.SUGGESTION_IRI] as Rdf.Iri,\n            binding[RESOURCE_SEGGESTIONS_VARIABLES.SUGGESTION_LABEL].value,\n            binding[RESOURCE_SEGGESTIONS_VARIABLES.SUGGESTION_LABEL].value,\n            binding\n          ),\n      },\n      escapeLuceneSyntax: escapeLuceneSyntax,\n      allowForceSuggestion: true,\n    };\n  }\n\n  private selectResourceTerm = (type: TermType) => (iri: Rdf.Iri, label: string, description: string, tuple?: any) => {\n    if (_.includes(iri.value, 'container/queryContainer')) {\n      QueryService()\n        .getQuery(iri)\n        .onValue((query) =>\n          this.state.store.selectTerm(type)({\n            query: SparqlUtil.parseQuerySync(query.value),\n            label: query.label,\n          })\n        );\n    } else {\n      this.state.store.selectTerm(type)({\n        iri: iri,\n        label: label,\n        description: description,\n        tuple: tuple,\n      });\n    }\n  };\n\n  private setClauseBindingsParsed(searchState: RelationTermSelection, query: string): SparqlJs.SelectQuery {\n    const parsedQuery = SparqlUtil.parseQuery<SparqlJs.SelectQuery>(query);\n\n    // try to extract pattern from relation or category range\n    const resourcePatternConfig = tryGetRelationPatterns(this.props.context.baseConfig, searchState.relation).find(\n      (p) => p.kind === 'resource'\n    ) as PatternResource;\n\n    // parametrize query with found pattern or fallback to default one,\n    // which just uses pattern IRI\n    let patterns: SparqlJs.Pattern[];\n    if (resourcePatternConfig) {\n      patterns = SparqlUtil.parsePatterns(resourcePatternConfig.queryPattern, parsedQuery.prefixes);\n      // transform pattern to resource suggestion\n      const renamer = new VariableRenameBinder(\n        SEMANTIC_SEARCH_VARIABLES.RESOURCE_VAR,\n        RESOURCE_SEGGESTIONS_VARIABLES.SUGGESTION_IRI\n      );\n      patterns.forEach((p) => renamer.pattern(p));\n    } else {\n      patterns = SparqlUtil.parsePatterns(SearchDefaults.DefaultResourceSelectorRelationPattern, parsedQuery.prefixes);\n    }\n    new PatternBinder(SEMANTIC_SEARCH_VARIABLES.RELATION_PATTERN_VAR, patterns).sparqlQuery(parsedQuery);\n\n    const bindings = _.assign(\n      {\n        [SEMANTIC_SEARCH_VARIABLES.RELATION_VAR]: searchState.relation.iri,\n        [SEMANTIC_SEARCH_VARIABLES.DOMAIN_VAR]: searchState.domain.iri,\n        [SEMANTIC_SEARCH_VARIABLES.RANGE_VAR]: searchState.range.iri,\n      },\n      {\n        [SEMANTIC_SEARCH_VARIABLES.SELECTED_ALIGNMENT]: this.props.context.selectedAlignment\n          .map((a) => a.iri)\n          .getOrElse(undefined),\n      }\n    );\n\n    return SparqlClient.setBindings(parsedQuery, bindings);\n  }\n\n  private setClauseBindings(searchState: RelationTermSelection, query: string): string {\n    return SparqlUtil.serializeQuery(this.setClauseBindingsParsed(searchState, query));\n  }\n\n  private relationSelector(relations: Model.Relations, action: (relation: Model.Relation) => void) {\n    return (\n      <ItemSelector\n        mode={this.props.context.baseConfig.selectorMode}\n        tupleTemplate={this.props.relationViewTemplate}\n        resources={relations.mapKeys((key) => key.value.iri).toOrderedMap()}\n        className={styles.relationSelector}\n        label=\"search relation selection\"\n        actions={{\n          selectResource: (relation) => {\n            action(relation as Model.Relation);\n            trigger({\n              eventType: SearchEvents.CategoryOrRelationSelected,\n              source: this.props.id,\n              data: relation.iri.value,\n            });\n          },\n        }}\n      />\n    );\n  }\n\n  private relationSelectorPlaceholder = () => <div className={styles.relationPlaceholder}>... related to</div>;\n\n  private categorySelection = (\n    categories: Model.Categories,\n    className: string,\n    action: (category: Model.Category) => void,\n    label: string\n  ) => (\n    <ItemSelector\n      mode={this.props.context.baseConfig.selectorMode}\n      tupleTemplate={this.props.categoryViewTemplate}\n      resources={categories}\n      className={className}\n      itemClassName={styles.categorySelectionItem}\n      label={label}\n      actions={{\n        selectResource: (category) => {\n          action(category);\n          trigger({\n            eventType: SearchEvents.CategoryOrRelationSelected,\n            source: this.props.id,\n            data: category.iri.value,\n          });\n        },\n      }}\n    />\n  );\n\n  private nestedSearchButton = (category: Model.Category) => {\n    const tooltip = <Tooltip>Search for {nlp.noun(category.label).pluralize()} related to...</Tooltip>;\n    return (\n      <OverlayTrigger placement=\"bottom\" overlay={tooltip}>\n        <button\n          className={classnames('btn btn-default', styles.nestedSearchButton)}\n          onClick={this.state.store.selectSubSearchTerm}\n        >\n          <span style={{ position: category.thumbnail ? 'absolute' : 'relative' }} className={styles.magnifierIcon} />\n          {category.thumbnail ? <img src={category.thumbnail} /> : null}\n        </button>\n      </OverlayTrigger>\n    );\n  };\n\n  private getTreeSelectorConfigForRelation = (relation: Model.Relation) => {\n    const { treeSelectorRelations, treeSelector, treeSelectorCategories } = this.props;\n    if (_.has(treeSelectorRelations, relation.iri.toString())) {\n      return treeSelectorRelations[relation.iri.toString()];\n    } else if (_.has(treeSelectorCategories, relation.hasRange.iri.toString())) {\n      return treeSelectorCategories[relation.hasRange.iri.toString()];\n    } else {\n      return treeSelector;\n    }\n  };\n\n  private isLightweightTreeConfig(config: TreeSelectorConfig): config is LightwightTreePatterns {\n    return !_.has(config, 'rootsQuery');\n  }\n\n  private getResourceSelectorConfigForRelation = (relation: Model.Relation) => {\n    const { resourceSelector, resourceSelectorRelations, resourceSelectorCategories } = this.props;\n    if (_.has(resourceSelectorRelations, relation.iri.toString())) {\n      return resourceSelectorRelations[relation.iri.toString()];\n    } else if (_.has(resourceSelectorCategories, relation.hasRange.iri.toString())) {\n      return resourceSelectorCategories[relation.hasRange.iri.toString()];\n    } else {\n      return resourceSelector;\n    }\n  };\n}\n\nexport default QueryBuilder;\n","/**\n * ResearchSpace\n * Copyright (C) 2015-2020, © Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * @author Artem Kozlov <ak@metaphacts.com>\n * @author Alexey Morozov\n */\n\nimport * as React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport 'ol/ol.css';\nimport Map from 'ol/map';\nimport View from 'ol/view';\nimport Vector from 'ol/source/vector';\nimport OSM from 'ol/source/osm';\nimport TileLayer from 'ol/layer/tile';\nimport VectorLayer from 'ol/layer/vector';\nimport Style from 'ol/style/style';\nimport Stroke from 'ol/style/stroke';\nimport Circle from 'ol/style/circle';\nimport Fill from 'ol/style/fill';\nimport LineString from 'ol/geom/linestring';\nimport CircleGeometry from 'ol/geom/circle';\nimport PolygonGeometry from 'ol/geom/polygon';\nimport SimpleGeometry from 'ol/geom/simplegeometry';\nimport proj from 'ol/proj';\nimport control from 'ol/control';\nimport Draw from 'ol/interaction/draw';\nimport Sphere from 'ol/sphere';\nimport * as _ from 'lodash';\nimport * as classNames from 'classnames';\n\nimport { SpatialDistance, SpatialBoundingBox, Coordinate } from 'platform/components/semantic/search/data/search/Model';\nimport * as styles from './OLMapSelection.scss';\n\nexport interface ZoomToOptions {\n  lat: number;\n  long: number;\n  zoomLevel: number;\n}\n\nexport interface OLMapSelectionProps {\n  onSelect: (area: SelectedArea) => void;\n  zoomTo?: ZoomToOptions;\n}\n\nexport interface OLMapSelectionState {\n  selectionTool: SelectType;\n}\n\nexport enum SelectType {\n  Box,\n  Circle,\n}\n\nexport interface SelectedArea {\n  type: SelectType;\n  circle?: SpatialDistance;\n  box?: SpatialBoundingBox;\n}\n\ntype Coord = [number, number];\n\nconst MAP_REF = 'researchspace-map-selection';\n\n/**\n * Openlayers map selection component. Can select rectangles and circles.\n * Keep in mind that circle selection is incorrect due to different\n * coordinate systems used for selection and for actual search.\n */\nexport class OLMapSelection extends React.Component<OLMapSelectionProps, OLMapSelectionState> {\n  currentDraw: Draw;\n  map: Map;\n  vectorSource: Vector;\n  view: View;\n\n  constructor(props: OLMapSelectionProps) {\n    super(props);\n    this.state = {\n      selectionTool: SelectType.Box,\n    };\n  }\n\n  componentDidMount() {\n    this.vectorSource = new Vector({ wrapX: false });\n    let vectorStyle = new Style({\n      fill: new Fill({\n        color: 'rgba(255, 255, 255, 0.2)',\n      }),\n      stroke: new Stroke({\n        color: '#ffcc33',\n        width: 2,\n      }),\n      image: new Circle({\n        radius: 7,\n        fill: new Fill({\n          color: '#ffcc33',\n        }),\n      }),\n    });\n\n    let vector_draw = new VectorLayer({\n      source: this.vectorSource,\n      style: vectorStyle,\n    });\n\n    this.view = new View({\n      center: proj.fromLonLat([0, 0], undefined),\n      zoom: 3,\n    });\n\n    this.map = new Map({\n      target: findDOMNode(this.refs[MAP_REF]) as Element,\n      layers: [\n        new TileLayer({\n          source: new OSM(),\n        }),\n        vector_draw,\n      ],\n      controls: control.defaults({\n        attributionOptions: {\n          collapsible: false,\n        },\n      }),\n      view: this.view,\n    });\n\n    this.updateCurrentDraw();\n\n    this.vectorSource.on('change', (e) => {\n      if (this.vectorSource.getFeatures().length > 0) {\n        this.updateSelection();\n      }\n    });\n  }\n\n  componentWillReceiveProps(props: OLMapSelectionProps) {\n    if (props.zoomTo) {\n      this.view.setCenter(proj.transform([props.zoomTo.long, props.zoomTo.lat], 'EPSG:4326', 'EPSG:3857'));\n      this.view.setZoom(props.zoomTo.zoomLevel);\n    }\n  }\n\n  /**\n   * transforms coordinates from web metacor to wgs-84\n   * @param metacor\n   */\n  transformToWGS84(metacor: Coord): Coord {\n    let wgs84 = proj.transform(metacor, 'EPSG:3857', 'EPSG:4326') as Coord;\n    return wgs84;\n  }\n\n  /**\n   * wraps longitude to fall into -180,180\n   * @param wgs84\n   * @returns Coord\n   */\n  wrapLongitudeOL(wgs84: Coord): Coord {\n    const [long, lat] = wgs84;\n    return [this.wrapLong(long), lat];\n  }\n\n  /**\n   * wraps longitude to fall into -180,180\n   * @param wgs84\n   * @returns Coordinate\n   */\n  wrapLongitude(wgs84: Coordinate): Coordinate {\n    const { lat, long } = wgs84;\n    return { lat: lat, long: this.wrapLong(long) };\n  }\n  wrapLong(long: number) {\n    while (long > 180) {\n      long = long - 360;\n    }\n    while (long < -180) {\n      long = long + 360;\n    }\n    return long;\n  }\n\n  updateSelection() {\n    // there's small openlayers magic to get first feature,\n    // it's coords and transform into lat, long in WGS84\n    let feature = this.vectorSource.getFeatures()[0];\n    let selectedArea: SelectedArea;\n    switch (this.state.selectionTool) {\n      case SelectType.Box:\n        let olCoords = (feature.getGeometry() as LineString).getCoordinates()[0];\n        let coords = _.map(olCoords, this.transformToWGS84);\n        const firstPoint: Coordinate = { lat: coords[0][1], long: coords[0][0] };\n        const secondPoint: Coordinate = { lat: coords[2][1], long: coords[2][0] };\n        // User could draw rectangle in any direction, setting coordinates right\n        const southWest: Coordinate = {\n          lat: _.minBy([firstPoint, secondPoint], (point) => point.lat).lat,\n          long: _.minBy([firstPoint, secondPoint], (point) => point.long).long,\n        };\n        const northEast: Coordinate = {\n          lat: _.maxBy([firstPoint, secondPoint], (point) => point.lat).lat,\n          long: _.maxBy([firstPoint, secondPoint], (point) => point.long).long,\n        };\n        // dealing with an edge-case of selection of the entire world\n        if (northEast.long - southWest.long >= 360) {\n          northEast.long = 180;\n          southWest.long = -180;\n        }\n        selectedArea = {\n          type: SelectType.Box,\n          box: {\n            southWest: this.wrapLongitude(southWest),\n            northEast: this.wrapLongitude(northEast),\n          },\n        };\n        break;\n      case SelectType.Circle: {\n        const circle = feature.getGeometry() as CircleGeometry;\n        const olCenter = circle.getCenter() as Coord;\n        const olRadius = circle.getRadius();\n\n        // radius calculation in km for a circle drawn on projection map\n        // will have large error up to 30%. We calculate a distance to eastern side of the circle\n        const edgeCoordinate = this.transformToWGS84([olCenter[0] + olRadius, olCenter[1]]);\n\n        const wgs84Sphere = new Sphere(6378137);\n        const center = this.transformToWGS84(olCenter);\n        const radius = wgs84Sphere.haversineDistance(center, edgeCoordinate);\n\n        const wrappedCenter = this.wrapLongitudeOL(center);\n        selectedArea = {\n          type: SelectType.Circle,\n          circle: {\n            center: { lat: wrappedCenter[1], long: wrappedCenter[0] },\n            distance: radius / 1000, // km\n          },\n        };\n        break;\n      }\n    }\n\n    this.props.onSelect(selectedArea);\n  }\n\n  updateCurrentDraw() {\n    if (this.currentDraw) {\n      this.map.removeInteraction(this.currentDraw);\n    }\n    this.currentDraw = new Draw({\n      source: this.vectorSource,\n      type: this.state.selectionTool === SelectType.Box ? 'LineString' : 'Circle',\n      geometryFunction: this.state.selectionTool === SelectType.Box ? this.geometryFunction : undefined,\n      maxPoints: 2,\n      wrapX: false,\n    });\n    this.currentDraw.on('drawstart', (event) => this.vectorSource.clear());\n    this.map.addInteraction(this.currentDraw);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.selectionTool !== this.state.selectionTool) {\n      this.updateCurrentDraw();\n    }\n  }\n  geometryFunction = (coordinates: Coord[], geometry: PolygonGeometry): SimpleGeometry => {\n    if (!geometry) {\n      geometry = new PolygonGeometry(null);\n    }\n    let start = coordinates[0];\n    let end = coordinates[1];\n    geometry.setCoordinates([[start, [start[0], end[1]], end, [end[0], start[1]], start]]);\n    return geometry;\n  };\n\n  setSelectionTool(tool: SelectType) {\n    this.setState(_.assign({}, this.state, { selectionTool: tool }));\n  }\n\n  render() {\n    const selectionTool = this.state.selectionTool;\n    return (\n      <div className={styles.body}>\n        <div className={styles.tools}>\n          <div className={styles.btnsWrap} role=\"group\">\n            <button\n              onClick={() => this.setSelectionTool(SelectType.Box)}\n              className={classNames(styles.toolsBtnSquare, { [styles.btnActive]: selectionTool === SelectType.Box })}\n            ></button>\n            <button\n              onClick={() => this.setSelectionTool(SelectType.Circle)}\n              className={classNames(styles.toolsBtnCircle, { [styles.btnActive]: selectionTool === SelectType.Circle })}\n            ></button>\n          </div>\n        </div>\n        <div className={styles.map} ref={MAP_REF}></div>\n      </div>\n    );\n  }\n}\nexport default OLMapSelection;\n","/**\n * ResearchSpace\n * Copyright (C) 2015-2020, © Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * @author Artem Kozlov <ak@metaphacts.com>\n * @author Alexey Morozov\n */\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport * as classnames from 'classnames';\nimport * as _ from 'lodash';\nimport * as Maybe from 'data.maybe';\nimport ReactSelect from 'react-select';\n\nimport { TemplateItem } from 'platform/components/ui/template';\n\nimport { Resource, Resources } from 'platform/components/semantic/search/data/search/Model';\nimport * as styles from './ItemSelector.scss';\n\nexport interface Props {\n  mode: 'stack' | 'dropdown';\n  tupleTemplate: string;\n  resources: Resources;\n  className?: string;\n  itemClassName?: string;\n  label: string;\n  actions: {\n    selectResource: (resource: Resource) => void;\n  };\n}\n\ninterface StackSelectorState {\n  focusedOption: Data.Maybe<Resource>;\n}\n\nclass StackSelector extends Component<Props, StackSelectorState> {\n  refs: {\n    [key: string]: HTMLElement;\n  };\n\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      focusedOption: Maybe.Nothing<Resource>(),\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ focusedOption: Maybe.fromNullable(this.props.resources.first()) });\n  }\n\n  componentDidUpdate() {\n    this.state.focusedOption.map((option) => this.refs[option.iri.value].focus());\n  }\n\n  render() {\n    const { tupleTemplate, className, resources, actions, itemClassName, label } = this.props;\n    const fcButtons = resources.map((resource) => (\n      <li\n        key={resource.iri.value}\n        ref={resource.iri.value}\n        className={classnames('btn', styles.itemHolder, itemClassName)}\n        tabIndex={0}\n        aria-label={resource.label}\n        role=\"option\"\n        onMouseOver={() => this.focusItem(resource)}\n        onClick={(event) => this.props.actions.selectResource(resource)}\n      >\n        {renderResource(tupleTemplate, resource, actions.selectResource)}\n      </li>\n    ));\n    return (\n      <ul\n        role=\"listbox\"\n        tabIndex={0}\n        aria-label={label}\n        onKeyDown={this.handleKeyDown}\n        className={classnames(styles.itemSelector, className)}\n      >\n        {fcButtons.toArray()}\n      </ul>\n    );\n  }\n\n  private focusItem = (resource: Resource) => {\n    this.setState({ focusedOption: Maybe.Just(resource) });\n  };\n\n  private handleKeyDown = (event: React.KeyboardEvent<HTMLElement>) => {\n    switch (event.keyCode) {\n      case 13: // enter\n        this.state.focusedOption.map(this.props.actions.selectResource);\n        break;\n      case 38: // up\n        this.focusPreviousOption();\n        break;\n      case 40: // down\n        this.focusNextOption();\n        break;\n      case 9: // tab\n        this.focusNextOption();\n        break;\n    }\n    event.preventDefault();\n  };\n\n  private focusNextOption = () => {\n    this.setState((state) => ({\n      focusedOption: state.focusedOption.map((option) => {\n        const optionsSeq = this.props.resources.keySeq();\n        const focusedIndex = optionsSeq.indexOf(option.iri);\n        const newIndex = focusedIndex + 1;\n        const newKey = optionsSeq.size === newIndex ? optionsSeq.first() : optionsSeq.get(newIndex);\n        return this.props.resources.get(newKey);\n      }),\n    }));\n  };\n\n  private focusPreviousOption = () => {\n    this.setState((state) => ({\n      focusedOption: state.focusedOption.map((option) => {\n        const optionsSeq = this.props.resources.keySeq();\n        const focusedIndex = optionsSeq.indexOf(option.iri);\n        const newIndex = focusedIndex - 1;\n        const newKey = optionsSeq.size === 0 ? optionsSeq.get(optionsSeq.size - 1) : optionsSeq.get(newIndex);\n        return this.props.resources.get(newKey);\n      }),\n    }));\n  };\n}\n\nclass DropdownSelector extends Component<Props, {}> {\n  render() {\n    const { tupleTemplate, className, resources, actions, itemClassName } = this.props;\n    return (\n      <ReactSelect\n        ref={this.onSelectMounted}\n        className={classnames(styles.itemSelector, styles.dropdown, className)}\n        autofocus={true}\n        openOnFocus={true}\n        value={null}\n        options={resources.toArray()}\n        optionRenderer={(resource: Resource) =>\n          renderResource(tupleTemplate, resource, actions.selectResource, itemClassName)\n        }\n        onChange={(resource: Resource) => actions.selectResource(resource)}\n      />\n    );\n  }\n\n  private onSelectMounted = (select: any) => {\n    if (select) {\n      const node = findDOMNode(select) as Element;\n      node.setAttribute('aria-label', this.props.label);\n    }\n  };\n}\n\nexport function renderResource(\n  template: string,\n  resource: Resource,\n  onClick: (resource: Resource) => void,\n  className?: string\n) {\n  // make tuple as well as resource props available in template\n  const options = _.assign({}, resource.tuple, resource);\n  return React.createElement(TemplateItem, {\n    template: {\n      source: template,\n      options: options,\n    },\n    componentProps: {\n      className: className,\n    },\n  });\n}\n\nexport class ItemSelector extends Component<Props, {}> {\n  render() {\n    return this.props.mode === 'dropdown' ? <DropdownSelector {...this.props} /> : <StackSelector {...this.props} />;\n  }\n}\n\nexport default ItemSelector;\n","/**\n * ResearchSpace\n * Copyright (C) 2015-2020, © Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * @author Artem Kozlov <ak@metaphacts.com>\n * @author Alexey Morozov\n */\n\nimport * as Maybe from 'data.maybe';\nimport * as Kefir from 'kefir';\nimport * as _ from 'lodash';\nimport * as SparqlJs from 'sparqljs';\n\nimport { Action } from 'platform/components/utils';\n\nimport { SemanticSearchConfig } from 'platform/components/semantic/search/config/SearchConfig';\nimport { ExtendedSearchValue } from 'platform/components/semantic/search/web-components/SemanticSearchApi';\nimport * as Model from 'platform/components/semantic/search/data/search/Model';\nimport { getCategoryTypes } from 'platform/components/semantic/search/data/search/ModelUtils';\nimport SearchProfileStore from 'platform/components/semantic/search/data/profiles/SearchProfileStore';\nimport { generateSelectQuery } from 'platform/components/semantic/search/data/search/SparqlQueryGenerator';\n\nexport type SearchState =\n  | DomainSelection\n  | RangeSelection\n  | TextTermSelection\n  | RelationSelection\n  | TermSelection\n  | View\n  | ExtendedDomainSelection\n  | ExtendedRelationSelection;\n\nexport type ActiveState = RangeSelection | TextTermSelection | RelationSelection | TermSelection;\n\nexport interface View {\n  kind: 'search-view';\n}\n\nexport interface DomainSelection {\n  kind: 'domain-selection';\n  domains: Model.Categories;\n}\n\nexport interface ExtendedDomainSelection {\n  kind: 'extended-domain-selection';\n  domains: Model.Categories;\n  range: Model.Category;\n  disjunct: Model.ResourceDisjunct | Model.SavedSearchDisjunct;\n}\n\nexport interface ExtendedRelationSelection {\n  kind: 'extended-relation-selection';\n  domain: Model.Category;\n  range: Model.Category;\n  relations: Model.Relations;\n  disjunct: Model.ResourceDisjunct | Model.SavedSearchDisjunct;\n}\n\nexport type ConjunctIndex = Array<number>;\nexport type DisjunctIndex = Array<number>;\n\nexport interface ConjunctStep {\n  kind: string;\n  conjunctIndex: ConjunctIndex;\n}\n\nexport interface DisjunctStep extends ConjunctStep {\n  disjunctIndex: DisjunctIndex;\n}\n\nexport interface RangeSelection extends ConjunctStep {\n  kind: 'range-selection';\n  domain: Model.Category;\n  ranges: Model.Categories;\n}\n\nexport interface TextTermSelection extends DisjunctStep {\n  kind: 'text-term-selection';\n  range: Model.Category;\n  domain: Model.Category;\n}\n\nexport interface RelationSelection extends ConjunctStep {\n  kind: 'relation-selection';\n  domain: Model.Category;\n  range: Model.Category;\n  relations: Model.Relations;\n}\n\nexport type TermType = 'resource' | 'hierarchy' | 'date-range' | 'place' | 'nested-search' | 'text';\nexport type TermSelection = RelationTermSelection | TermSelectionSearch | TextTermSelection;\n\nexport interface RelationTermSelection extends DisjunctStep {\n  kind: 'term-selection';\n  termKind: [TermType];\n  domain: Model.Category;\n  range: Model.Category;\n  relation: Model.Relation;\n}\n\nexport interface TermSelectionSearch extends DisjunctStep {\n  kind: 'term-selection';\n  termKind: ['nested-search'];\n  domain: Model.Category;\n  range: Model.Category;\n  relation: Model.Relation;\n  state: ActiveState;\n}\n\nexport enum EditKinds {\n  Domain,\n  Range,\n  Relation,\n  Disjunct,\n}\n\nexport class SearchStore {\n  private _searchProperty = Action<Data.Maybe<Model.Search>>();\n  private _search: Data.Maybe<Model.Search>;\n\n  private _profileStore: SearchProfileStore;\n\n  private _searchStateProperty = Action<SearchState>();\n  private _searchState: SearchState;\n  private config: SemanticSearchConfig;\n  private projectionVariable: string;\n\n  /**\n   * We need to assign unique id to every new clause to facilitate integration testing.\n   */\n  private _counter = 0;\n\n  constructor(\n    profileStore: SearchProfileStore,\n    baseConfig: SemanticSearchConfig,\n    projectionVariable: string,\n    initialSearch: Data.Maybe<Model.Search>,\n    nestedSearch: Data.Maybe<{ value: ExtendedSearchValue; range: Model.Category }>\n  ) {\n    this.config = baseConfig;\n    this.projectionVariable = projectionVariable;\n    this._profileStore = profileStore;\n    if (nestedSearch.isJust) {\n      this.search = Maybe.Nothing<Model.Search>();\n      this.searchState = {\n        kind: 'extended-domain-selection',\n        domains: this.domains(),\n        range: nestedSearch.get().range,\n        disjunct: this.extendedValueToDisjunct(nestedSearch.get().value),\n      };\n    } else if (initialSearch.isJust) {\n      this.searchState = null;\n      this.search = initialSearch;\n    } else {\n      this.search = initialSearch;\n      this.searchState = {\n        kind: 'domain-selection',\n        domains: this.domains(),\n      };\n    }\n  }\n\n  /**\n   * Category types supported by QueryBuilder.\n   */\n  private static SupportedCategoryTypes = ['resource', 'hierarchy', 'date-range', 'text', 'place', 'set'];\n\n  private domains = (): Model.Categories => {\n    return this.filterOnlySupportedCategories(this._profileStore.domains);\n  };\n\n  private rangesFor = (domain: Model.Category): Model.Categories => {\n    return this.filterOnlySupportedCategories(this._profileStore.rangesFor(domain));\n  };\n\n  /**\n   * Filters for categories with types supported by QueryBuilder.\n   */\n  private filterOnlySupportedCategories = (categories: Model.Categories): Model.Categories => {\n    return categories.filterNot((domain) => {\n      const supportedCategoryTypes = _.intersection(\n        SearchStore.SupportedCategoryTypes,\n        getCategoryTypes(this.config, domain)\n      );\n      return _.isEmpty(supportedCategoryTypes);\n    }) as Model.Categories;\n  };\n\n  private extendedValueToDisjunct = (value: ExtendedSearchValue) => {\n    if (this.isResourceExtendedDisjunct(value)) {\n      return {\n        kind: Model.EntityDisjunctKinds.Resource,\n        value: value as Model.Resource,\n        conjunctIndex: [0],\n        disjunctIndex: [0, 0],\n      };\n    } else {\n      return {\n        kind: Model.EntityDisjunctKinds.SavedSearch,\n        value: {\n          query: value.query,\n          label: value.label,\n        },\n        conjunctIndex: [0],\n        disjunctIndex: [0, 0],\n      };\n    }\n  };\n\n  private isResourceExtendedDisjunct = (value: ExtendedSearchValue): value is Model.Resource => {\n    return _.has(value, 'iri');\n  };\n\n  public selectExtendedDomain = (domain: Model.Category) => {\n    this.searchState = _.assign({}, this._searchState, {\n      kind: 'extended-relation-selection',\n      domain: domain,\n      relations: this._profileStore.relationsFor({\n        domain: Maybe.Just(domain),\n        range: Maybe.Just((this._searchState as ExtendedDomainSelection).range),\n      }),\n    });\n  };\n\n  public selectExtendedRelation = (relation: Model.Relation) => {\n    const state = this._searchState as ExtendedRelationSelection;\n    this.search = Maybe.Just({\n      domain: state.domain,\n      conjuncts: [\n        {\n          kind: Model.ConjunctKinds.Relation,\n          range: state.range,\n          relation: relation,\n          conjunctIndex: [0],\n          disjuncts: [state.disjunct],\n        },\n      ],\n    });\n    this.searchState = null;\n  };\n\n  private set searchState(state: SearchState) {\n    this._searchState = state;\n    this._searchStateProperty(state);\n  }\n\n  public get currentSearchState(): Kefir.Property<SearchState> {\n    return this._searchStateProperty.$property;\n  }\n\n  public set search(search: Data.Maybe<Model.Search>) {\n    this._search = search;\n    this._searchProperty(search);\n  }\n\n  public get currentSearch(): Kefir.Property<Data.Maybe<Model.Search>> {\n    return this._searchProperty.$property;\n  }\n\n  public get currentSearchQuery(): Kefir.Property<Data.Maybe<SparqlJs.SelectQuery>> {\n    return this._searchProperty.$property.map((maybeSearch) =>\n      maybeSearch.map((search) => generateSelectQuery(this.config, this.projectionVariable, search))\n    );\n  }\n\n  public edit = (kind: EditKinds, conjunct?: Model.RelationConjunct, disjunct?: Model.Disjunct) => {\n    if (kind === EditKinds.Domain) {\n      this.search = Maybe.Nothing<Model.Search>();\n      this.searchState = {\n        kind: 'domain-selection',\n        domains: this.domains(),\n      };\n      return;\n    }\n\n    const editingPersistantState = conjunct || disjunct;\n    if (editingPersistantState) {\n      const domain = this._search.get().domain;\n      switch (kind) {\n        case EditKinds.Range:\n          if (conjunct.conjunctIndex.length > 1) {\n            const baseConjunct = this.getConjunctByIndex(\n              this._search.get(),\n              _.dropRight(conjunct.conjunctIndex, 2)\n            ) as Model.RelationConjunct;\n            this.removeConjunction(conjunct);\n            if (this._search.isJust) {\n              this.addConjunction(this._search.get().conjuncts[0]);\n              this.selectRange(baseConjunct.range);\n              this.selectRelation(baseConjunct.relation);\n              this.selectSubSearchTerm();\n            } else {\n              const newConjunctIndex = _.clone([0, 0]);\n              newConjunctIndex.push(0);\n              this.searchState = {\n                kind: 'term-selection',\n                termKind: ['nested-search'],\n                domain: domain,\n                range: baseConjunct.range,\n                relation: baseConjunct.relation,\n                conjunctIndex: [0],\n                disjunctIndex: [0, 0],\n                state: {\n                  kind: 'range-selection',\n                  domain: baseConjunct.range,\n                  ranges: this.rangesFor(baseConjunct.range),\n                  conjunctIndex: newConjunctIndex,\n                },\n              };\n            }\n          } else {\n            this.removeConjunction(conjunct);\n            if (this._search.isJust) {\n              this.addConjunction(this._search.get().conjuncts[0]);\n            } else {\n              this.selectDomain(domain);\n            }\n          }\n          break;\n\n        case EditKinds.Relation:\n          if (conjunct.conjunctIndex.length > 1) {\n            const baseConjunct = this.getConjunctByIndex(\n              this._search.get(),\n              _.dropRight(conjunct.conjunctIndex, 2)\n            ) as Model.RelationConjunct;\n            this.removeConjunction(conjunct);\n            if (this._search.isJust) {\n              this.addConjunction(this._search.get().conjuncts[0]);\n              this.selectRange(baseConjunct.range);\n              this.selectRelation(baseConjunct.relation);\n              this.selectSubSearchTerm();\n              this.selectRange(conjunct.range);\n            } else {\n              const newConjunctIndex = _.clone([0, 0]);\n              newConjunctIndex.push(0);\n              this.searchState = this._selectRange(\n                {\n                  kind: 'term-selection',\n                  termKind: ['nested-search'],\n                  domain: domain,\n                  range: baseConjunct.range,\n                  relation: baseConjunct.relation,\n                  conjunctIndex: [0],\n                  disjunctIndex: [0, 0],\n                  state: {\n                    kind: 'relation-selection',\n                    domain: baseConjunct.range,\n                    conjunctIndex: newConjunctIndex,\n                    // FIXME: should be specified?!\n                    range: undefined,\n                    relations: undefined,\n                  },\n                },\n                conjunct.range\n              );\n            }\n          } else {\n            this.removeConjunction(conjunct);\n            if (this._search.isJust) {\n              this.addConjunction(this._search.get().conjuncts[0]);\n              this.selectRange(conjunct.range);\n            } else {\n              this.selectDomain(domain);\n              this.selectRange(conjunct.range);\n            }\n          }\n          break;\n\n        case EditKinds.Disjunct:\n          if (conjunct.conjunctIndex.length > 1) {\n            const baseConjunct = this.getConjunctByIndex(\n              this._search.get(),\n              _.dropRight(conjunct.conjunctIndex, 2)\n            ) as Model.RelationConjunct;\n            this.removeDisjunct(conjunct as any, disjunct);\n            if (this._search.isJust) {\n              if (conjunct.disjuncts.length === 0) {\n                this.addConjunction(this._search.get().conjuncts[0]);\n                this.selectRange(baseConjunct.range);\n                this.selectRelation(baseConjunct.relation);\n                this.selectSubSearchTerm();\n                this.selectRange(conjunct.range);\n                this.selectRelation(conjunct.relation);\n              } else {\n                this.addDisjunction(conjunct);\n              }\n            } else {\n              const newConjunctIndex = _.clone([0, 0]);\n              newConjunctIndex.push(0);\n              this.searchState = this._selectRelation(\n                {\n                  kind: 'term-selection',\n                  termKind: ['nested-search'],\n                  domain: domain,\n                  range: baseConjunct.range,\n                  relation: baseConjunct.relation,\n                  conjunctIndex: [0],\n                  disjunctIndex: [0, 0],\n                  state: {\n                    kind: 'relation-selection',\n                    domain: baseConjunct.range,\n                    range: conjunct.range,\n                    conjunctIndex: newConjunctIndex,\n                    // FIXME: should be specified?!\n                    relations: undefined,\n                  },\n                },\n                conjunct.relation\n              );\n            }\n          } else {\n            this.removeDisjunct(conjunct as any, disjunct);\n            if (conjunct.disjuncts.length > 0) {\n              this.addDisjunction(conjunct);\n            } else {\n              if (this._search.isJust) {\n                this.addConjunction(this._search.get().conjuncts[0]);\n                this.selectRange(conjunct.range);\n                this.selectRelation(conjunct.relation);\n              } else {\n                this.selectDomain(domain);\n                this.selectRange(conjunct.range);\n                this.selectRelation(conjunct.relation);\n              }\n            }\n          }\n\n          break;\n      }\n    } else {\n      switch (kind) {\n        case EditKinds.Range:\n          if (this.isNestedSearch(this._searchState as any)) {\n            this.selectSubSearchTerm();\n          } else {\n            this.selectDomain((this._searchState as any).domain);\n          }\n          break;\n\n        case EditKinds.Relation:\n          this.selectRange((this._searchState as any).range);\n          break;\n      }\n    }\n  };\n\n  public selectDomain = (domain: Model.Category) => {\n    this.searchState = {\n      kind: 'range-selection',\n      domain: domain,\n      ranges: this.rangesFor(domain),\n      conjunctIndex: [0],\n    };\n  };\n\n  public selectRange = (range: Model.Category) => {\n    const state = this._searchState as ActiveState;\n    this.searchState = this._selectRange(state, range);\n  };\n\n  public _selectRange = (state: ActiveState, range: Model.Category) => {\n    const deepestActiveState = this.getDeepestActiveState(state) as RangeSelection;\n\n    if (_.includes(getCategoryTypes(this.config, range), 'text')) {\n      return this.updateNestedState(state, this.selectTextDisjunctState(deepestActiveState, range));\n    } else {\n      let newState: SearchState = this.selectRelationState(deepestActiveState, range);\n      if (newState.relations.size === 1) {\n        const relation = newState.relations.first();\n        newState = this.selectTermState(newState, relation);\n      }\n      return this.updateNestedState(state, newState);\n    }\n  };\n\n  private isNestedSearch = (state: ActiveState): state is TermSelectionSearch =>\n    state.kind === 'term-selection' && _.isEqual(state.termKind, ['nested-search']);\n\n  private updateNestedState(currentState: ActiveState, newState: ActiveState): ActiveState {\n    const updatedState = _.clone(currentState);\n    const deepestActiveState = this.getDeepestActiveState(updatedState);\n    _.assign(deepestActiveState, newState);\n    return updatedState;\n  }\n\n  private getDeepestActiveState(state: ActiveState): ActiveState {\n    if (this.isNestedSearch(state)) {\n      return this.getDeepestActiveState(state.state);\n    } else {\n      return state;\n    }\n  }\n\n  private selectTextDisjunctState(state: RangeSelection, range: Model.Category): TextTermSelection {\n    const { conjunctIndex } = this._searchState as ConjunctStep;\n    const newDisjunctIndex = _.clone(conjunctIndex);\n    newDisjunctIndex.push(0);\n    return _.assign({}, state as any, {\n      kind: 'text-term-selection',\n      range: range,\n      disjunctIndex: newDisjunctIndex,\n    });\n  }\n\n  private selectRelationState(state: RangeSelection, range: Model.Category): RelationSelection {\n    const { conjunctIndex } = this._searchState as ConjunctStep;\n    const relations = this._profileStore.relationsFor({\n      domain: Maybe.Just(state.domain),\n      range: Maybe.Just(range),\n    });\n    return _.assign({}, state as any, {\n      kind: 'relation-selection',\n      range: range,\n      relations: relations,\n    });\n  }\n\n  public selectRelation = (relation: Model.Relation) => {\n    const state = this._searchState as ActiveState;\n    this.searchState = this._selectRelation(state, relation);\n  };\n\n  private _selectRelation = (state: ActiveState, relation: Model.Relation) => {\n    const deepestActiveState = this.getDeepestActiveState(state) as RelationSelection;\n    return this.updateNestedState(state, this.selectTermState(deepestActiveState, relation));\n  };\n\n  public selectTermState = (state: RelationSelection, relation: Model.Relation): TermSelection => {\n    const { conjunctIndex } = state;\n    const newDisjunctIndex = _.clone(conjunctIndex);\n    newDisjunctIndex.push(0);\n\n    return _.assign({}, state as any, {\n      kind: 'term-selection',\n      termKind: this.getRelationDisjunctKinds(relation),\n      relation: relation,\n      disjunctIndex: newDisjunctIndex,\n    });\n  };\n\n  private getRelationDisjunctKinds(relation: Model.Relation) {\n    return getCategoryTypes(this.config, relation.hasRange);\n  }\n\n  private getConjunctType = (searchState: TermSelection): Model.ConjunctKind => {\n    if (searchState.kind === 'text-term-selection') {\n      return Model.ConjunctKinds.Text;\n    } else {\n      return Model.ConjunctKinds.Relation;\n    }\n  };\n\n  private getDisjunctType = (searchState: TermSelection, termType: TermType, value: any): Model.DisjunctKind => {\n    if (searchState.kind === 'text-term-selection') {\n      return Model.TextDisjunctKind;\n      // TODO need to properly check if entity is Set, when working on tests for search\n    } else if (value.iri && _.includes(value.iri.value, 'container/setContainer')) {\n      return Model.EntityDisjunctKinds.Set;\n    } else if (value.query) {\n      return Model.EntityDisjunctKinds.SavedSearch;\n    } else {\n      switch (termType) {\n        case 'resource':\n        case 'hierarchy':\n          return Model.EntityDisjunctKinds.Resource;\n        case 'date-range':\n          return value.dateFormat;\n        case 'place':\n          if (value['center']) {\n            return Model.SpatialDisjunctKinds.Distance;\n          } else {\n            return Model.SpatialDisjunctKinds.BoundingBox;\n          }\n      }\n    }\n  };\n\n  private getDisjunctValue = (value: any): any => {\n    if (value['dateFormat']) {\n      return value.value;\n    } else {\n      return value;\n    }\n  };\n\n  public selectTerm = (termType: TermType) => (value: any) => {\n    const searchState = this._searchState as TermSelection;\n    const { domain, range, conjunctIndex } = searchState;\n    if (this._search.isJust) {\n      if (_.isEqual((searchState as any).termKind, ['nested-search'])) {\n        this.search = Maybe.Just(this.updateNestedSearchTerm(this._search.get(), searchState as any, value, termType));\n      } else {\n        const existingConjunct = this.getConjunctByIndex(this._search.get(), conjunctIndex) as Model.RelationConjunct;\n        if (existingConjunct) {\n          existingConjunct.disjuncts.push({\n            kind: this.getDisjunctType(searchState, termType, value),\n            value: this.getDisjunctValue(value),\n            disjunctIndex: this.newDisjunctIndex(existingConjunct),\n          } as any);\n          this.search = this._search;\n        } else {\n          const searhBase = this.getSearchBaseForConjunct(this._search.get(), conjunctIndex);\n          const conjunct = {\n            uniqueId: this._counter++,\n            kind: this.getConjunctType(searchState),\n            range: range,\n            conjunctIndex: conjunctIndex,\n            disjuncts: [],\n          } as any;\n          if (conjunct.kind === Model.ConjunctKinds.Relation) {\n            conjunct['relation'] = searchState['relation'];\n          }\n          conjunct.disjuncts.push({\n            kind: this.getDisjunctType(searchState, termType, value),\n            disjunctIndex: this.newDisjunctIndex(conjunct),\n            value: this.getDisjunctValue(value),\n          });\n          searhBase.conjuncts.push(conjunct);\n          this.search = this._search;\n        }\n      }\n    } else {\n      this.search = Maybe.Just(this.createInitialSearch(this._searchState as any, value, termType));\n    }\n    this.searchState = null;\n  };\n\n  private updateNestedSearchTerm = (\n    search: Model.Search,\n    searchState: TermSelectionSearch,\n    resource: any,\n    termType: TermType\n  ): Model.Search => {\n    const nestedState = searchState.state as TermSelection;\n    const existingParentConjunct = this.getConjunctByIndex(search, searchState.conjunctIndex) as Model.RelationConjunct;\n    if (existingParentConjunct) {\n      const newDisjunctIndex = this.newDisjunctIndex(existingParentConjunct);\n      const newConjunctIndex = _.clone(newDisjunctIndex);\n      newConjunctIndex.push(0);\n      const conjunct = {\n        uniqueId: this._counter++,\n        kind: this.getConjunctType(nestedState),\n        range: nestedState.range,\n        relation: (nestedState as any).relation,\n        conjunctIndex: newConjunctIndex,\n        disjuncts: [],\n      } as any;\n      conjunct.disjuncts.push({\n        kind: this.getDisjunctType(nestedState, termType, resource),\n        disjunctIndex: this.newDisjunctIndex(conjunct),\n        value: resource,\n      } as any);\n\n      existingParentConjunct.disjuncts.push({\n        kind: Model.EntityDisjunctKinds.Search,\n        value: {\n          domain: nestedState.domain,\n          conjuncts: [conjunct],\n        },\n        disjunctIndex: newDisjunctIndex,\n      });\n      return search;\n    } else {\n      const conjunct: Model.RelationConjunct = {\n        kind: Model.ConjunctKinds.Relation,\n        range: searchState.range,\n        relation: searchState.relation,\n        conjunctIndex: searchState.conjunctIndex,\n        disjuncts: [],\n      };\n      const newDisjunctIndex = this.newDisjunctIndex(conjunct);\n      const newConjunctIndex = _.clone(newDisjunctIndex);\n      newConjunctIndex.push(0);\n      const nestedConjunct = {\n        uniqueId: this._counter++,\n        kind: this.getConjunctType(nestedState),\n        range: nestedState.range,\n        relation: (nestedState as any).relation,\n        conjunctIndex: newConjunctIndex,\n        disjuncts: [],\n      } as any;\n      nestedConjunct.disjuncts.push({\n        kind: this.getDisjunctType(searchState, termType, resource),\n        disjunctIndex: this.newDisjunctIndex(nestedConjunct),\n        value: this.getDisjunctValue(resource),\n      } as any);\n\n      conjunct.disjuncts.push({\n        kind: Model.EntityDisjunctKinds.Search,\n        disjunctIndex: newDisjunctIndex,\n        value: {\n          domain: nestedState.domain,\n          conjuncts: [nestedConjunct],\n        },\n      });\n      search.conjuncts.push(conjunct);\n      return search;\n    }\n  };\n\n  private createInitialSearch = (state: TermSelection, resource: any, termType: TermType, n = 1): Model.Search => {\n    const isNestedSearch = _.includes((state as any).termKind, 'nested-search');\n    return {\n      domain: state.domain,\n      conjuncts: [\n        {\n          uniqueId: this._counter++,\n          kind: (state as any).kind === 'text-term-selection' ? Model.ConjunctKinds.Text : Model.ConjunctKinds.Relation,\n          range: state.range,\n          relation: (state as any).relation,\n          conjunctIndex: _.fill(Array(n), 0),\n          disjuncts: [\n            {\n              kind: isNestedSearch ? Model.EntityDisjunctKinds.Search : this.getDisjunctType(state, termType, resource),\n              value: isNestedSearch\n                ? this.createInitialSearch((state as any).state, resource, termType, n + 2)\n                : this.getDisjunctValue(resource),\n              disjunctIndex: _.fill(Array(n + 1), 0),\n            },\n          ],\n        },\n      ],\n    } as any;\n  };\n\n  public selectSubSearchTerm = () => {\n    const { range, disjunctIndex } = this._searchState as TermSelection;\n    const newConjunctIndex = _.clone(disjunctIndex);\n    newConjunctIndex.push(0); // TODO it is not null, we need to account for existing disjuncts\n\n    this.searchState = _.assign({}, this._searchState, {\n      kind: 'term-selection',\n      termKind: ['nested-search'],\n      state: {\n        kind: 'range-selection',\n        domain: range,\n        ranges: this.rangesFor(range),\n        conjunctIndex: newConjunctIndex,\n      },\n    });\n  };\n\n  public addConjunction = (baseConjunct: Model.Conjunct) => {\n    const baseSearch = this.getSearchBaseForConjunct(this._search.get(), baseConjunct.conjunctIndex);\n    const { domain, conjuncts } = baseSearch;\n    const newConjunctIndex = _.clone(_.last(conjuncts).conjunctIndex);\n    newConjunctIndex[newConjunctIndex.length - 1] = conjuncts.length;\n\n    this.searchState = {\n      kind: 'range-selection',\n      domain: domain,\n      ranges: this.rangesFor(domain),\n      conjunctIndex: newConjunctIndex,\n    };\n  };\n\n  public addDisjunction = (conjunct: Model.Conjunct) => {\n    switch (conjunct.kind) {\n      case Model.ConjunctKinds.Relation:\n        this.addRelationDisjunction(conjunct);\n        break;\n      case Model.ConjunctKinds.Text:\n        this.addTextDisjunction(conjunct);\n        break;\n    }\n  };\n\n  public removeConjunction = (conjunct: Model.Conjunct) => {\n    const search = this.getSearchBaseForConjunct(this._search.get(), conjunct.conjunctIndex);\n    search.conjuncts.splice(_.last(conjunct.conjunctIndex), 1);\n\n    this.normalizeSearch(this._search.get());\n\n    if (_.isEmpty(this._search.get().conjuncts)) {\n      this.searchState = {\n        kind: 'domain-selection',\n        domains: this.domains(),\n      };\n      this.search = Maybe.Nothing<Model.Search>();\n    } else {\n      this.search = this._search;\n    }\n  };\n\n  public removeDisjunct = (conjunct: Model.RelationConjunct, disjunct: Model.Disjunct) => {\n    conjunct.disjuncts.splice(_.last(disjunct.disjunctIndex), 1);\n\n    this.normalizeSearch(this._search.get());\n\n    if (_.isEmpty(this._search.get().conjuncts)) {\n      this.searchState = {\n        kind: 'domain-selection',\n        domains: this.domains(),\n      };\n      this.search = Maybe.Nothing<Model.Search>();\n    } else {\n      this.search = this._search;\n    }\n  };\n\n  public resetEditMode = () => {\n    if (this._search.isNothing) {\n      this.searchState = {\n        kind: 'domain-selection',\n        domains: this.domains(),\n      };\n    } else {\n      this.searchState = null;\n    }\n  };\n\n  private normalizeSearch = (search: Model.Search) => {\n    const conjuncts = _.reject(\n      search.conjuncts,\n      (conjunct) => _.isEmpty(conjunct.disjuncts) || _.isEmpty(this.removeNestedEmptyDisjuncts(conjunct.disjuncts))\n    );\n\n    this.updateConjunctIndexes(conjuncts);\n    (this._search.get() as any).conjuncts = conjuncts;\n    this.search = this._search;\n  };\n\n  private removeNestedEmptyDisjuncts = (disjuncts: Model.Disjuncts) => {\n    return _.reject(disjuncts, (disjunct) => {\n      if (disjunct.kind === Model.EntityDisjunctKinds.Search) {\n        return _.isEmpty(disjunct.value.conjuncts) || this.isEmptyConjuncts(disjunct.value.conjuncts);\n      }\n      return false;\n    });\n  };\n\n  private isEmptyConjuncts = (conjuncts: Model.Conjuncts): boolean =>\n    _.every(conjuncts, (conjunct) => _.isEmpty(conjunct.disjuncts));\n\n  private updateConjunctIndexes = (conjuncts: Model.Conjuncts, baseIndex: Array<number> = []) => {\n    _.forEach(conjuncts, (conjunct, i) => {\n      const conjunctIndex = _.clone(baseIndex);\n      conjunctIndex.push(i);\n      conjunct.conjunctIndex = conjunctIndex;\n      _.forEach(conjunct.disjuncts, (disjunct, j) => {\n        const disjunctIndex = _.clone(conjunctIndex);\n        disjunctIndex.push(j as any);\n        disjunct.disjunctIndex = disjunctIndex;\n        if (disjunct.kind === 'search') {\n          this.updateConjunctIndexes(disjunct.value.conjuncts, disjunctIndex);\n        }\n      });\n    });\n  };\n\n  private addRelationDisjunction = (conjunct: Model.RelationConjunct) => {\n    const { domain } = this._search.get();\n    const { range, relation } = conjunct;\n\n    this.searchState = {\n      kind: 'term-selection',\n      termKind: this.getRelationDisjunctKinds(relation),\n      domain: domain,\n      range: range,\n      relation: relation,\n      conjunctIndex: conjunct.conjunctIndex,\n      disjunctIndex: this.newDisjunctIndex(conjunct),\n    } as any;\n  };\n\n  private addTextDisjunction = (conjunct: Model.TextConjunct) => {\n    const { domain } = this._search.get();\n    const { range } = conjunct;\n\n    this.searchState = {\n      kind: 'text-term-selection',\n      domain: domain,\n      range: range,\n      conjunctIndex: conjunct.conjunctIndex,\n      disjunctIndex: this.newDisjunctIndex(conjunct),\n    } as any;\n  };\n\n  private newDisjunctIndex = (conjunct: Model.Conjunct): Model.DisjunctIndex => {\n    const newIndex = _.clone(conjunct.conjunctIndex);\n    newIndex.push(conjunct.disjuncts.length);\n    return newIndex;\n  };\n\n  private getSearchBaseForConjunct = (search: Model.Search, conjunctIndex: ConjunctIndex): Model.Search => {\n    if (conjunctIndex.length <= 1) {\n      return search;\n    } else {\n      const conjunct = search.conjuncts[conjunctIndex[0]];\n      const disjunct = conjunct.disjuncts[conjunctIndex[1]] as Model.SearchDisjunct;\n      if (disjunct) {\n        return this.getSearchBaseForConjunct(disjunct.value, conjunctIndex.slice(2));\n      } else {\n        return null;\n      }\n    }\n  };\n\n  private getConjunctByIndex = (search: Model.Search, conjunctIndex: Array<number>) => {\n    const baseSearch = this.getSearchBaseForConjunct(search, conjunctIndex);\n    if (baseSearch) {\n      return baseSearch.conjuncts[_.last(conjunctIndex)];\n    } else {\n      return null;\n    }\n  };\n}\n","/**\n * ResearchSpace\n * Copyright (C) 2015-2020, © Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * @author Artem Kozlov <ak@metaphacts.com>\n */\n\nimport * as React from 'react';\nimport * as maybe from 'data.maybe';\nimport * as classNames from 'classnames';\nimport ReactSelect from 'react-select';\nimport { FormControl, FormGroup } from 'react-bootstrap';\nimport * as _ from 'lodash';\n\nimport {\n  TemporalDisjunct,\n  DateDisjunctValue,\n  TemporalDisjunctT,\n  DateRange,\n  DateDeviation,\n  YearValue,\n  YearRange,\n  YearDeviation,\n  matchTemporalDisjunct,\n  TemporalDisjunctKinds,\n} from 'platform/components/semantic/search/data/search/Model';\nimport { SimpleDateInput } from './SimpleDateInput';\nimport { YearInput } from './YearInput';\nimport * as styles from './DateFormatSelector.scss';\n\ninterface State {\n  showSelectorDropdown?: boolean;\n  dateFormat?: Data.Maybe<TemporalDisjunctT>;\n  value?: Data.Maybe<DateDisjunctValue>;\n}\n\nexport interface DateSelectorValue {\n  dateFormat?: TemporalDisjunctT;\n  value?: DateDisjunctValue;\n}\n\nexport interface DateFormatSelectorProps {\n  onSelect: (value: DateSelectorValue) => void;\n  onOpen?: () => void;\n  onChange?: (value: TemporalDisjunctT) => void;\n}\n\nexport class DateFormatSelectorComponent extends React.Component<DateFormatSelectorProps, State> {\n  private initialState = {\n    showSelectorDropdown: false,\n    dateFormat: maybe.Nothing<TemporalDisjunctT>(),\n    value: maybe.Nothing<DateDisjunctValue>(),\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = this.initialState;\n  }\n\n  render() {\n    return (\n      <div className={styles.holder}>\n        {this.dateSelectorDropdown()}\n        {this.state.dateFormat.map((dateFormat) => this.showDateInput(dateFormat)).getOrElse(<span />)}\n      </div>\n    );\n  }\n\n  private showDateInput = (dateFormat: TemporalDisjunctT) => (\n    <div className={styles.inputHolder}>\n      {this.dateInput({ kind: dateFormat } as any)}\n      <button className={classNames('btn', 'btn-primary')} onClick={this.onSelect}>\n        Select\n      </button>\n    </div>\n  );\n\n  private onSelect = () => {\n    this.props.onSelect({\n      dateFormat: this.state.dateFormat.get(),\n      value: this.state.value.get(),\n    });\n  };\n\n  private dateInput(disjunct: TemporalDisjunct): Array<React.ReactElement<any>> {\n    return matchTemporalDisjunct({\n      Date: this.simpleDate,\n      DateRange: this.dateRange,\n      DateDeviation: this.dateDeviation,\n      Year: this.year,\n      YearRange: this.yearRange,\n      YearDeviation: this.yearDeviation,\n    })(disjunct);\n  }\n\n  private simpleDate = () => [<SimpleDateInput autoFocus={true} onSelected={this.setSimpleDate} />];\n  private setSimpleDate = (date: moment.Moment) => this.setState({ value: maybe.Just(date) });\n\n  private dateRange = () => [\n    <SimpleDateInput key=\"date-range-begin\" autoFocus={true} onSelected={this.setDateRangeBegin} />,\n    <span className={styles.dateSeparator}>to</span>,\n    <SimpleDateInput key=\"date-range-end\" onSelected={this.setDateRangeEnd} />,\n  ];\n\n  private setDateRangeBegin = (date: moment.Moment) =>\n    this.setState((state) => ({\n      value: maybe.Just({\n        begin: date,\n        end: state.value.map((v: DateRange) => v.end).getOrElse(null),\n      }),\n    }));\n\n  private setDateRangeEnd = (date: moment.Moment) =>\n    this.setState((state) => ({\n      value: maybe.Just({\n        begin: state.value.map((v: DateRange) => v.begin).getOrElse(null),\n        end: date,\n      }),\n    }));\n\n  private dateDeviation = () => [\n    <SimpleDateInput key=\"date-deviation-date\" autoFocus={true} onSelected={this.setDateDeviationDate} />,\n    <span className={styles.dateSeparator}>±</span>,\n    <FormGroup>\n      <FormControl\n        key=\"date-deviation\"\n        type=\"number\"\n        className={styles.deviationInput}\n        placeholder=\"Days\"\n        required\n        onChange={this.setDateDeviation}\n        value={this.state.value.map((v: DateDeviation) => v.deviation).getOrElse(undefined)}\n      />\n    </FormGroup>,\n  ];\n  private setDateDeviationDate = (date: moment.Moment) =>\n    this.setState((state) => ({\n      value: maybe.Just({\n        date: date,\n        deviation: state.value.map((v: DateDeviation) => v.deviation).getOrElse(null),\n      }),\n    }));\n  private setDateDeviation = (event: any) => {\n    const value = event.target.value;\n    this.setState((state) => ({\n      value: maybe.Just({\n        date: state.value.map((v: DateDeviation) => v.date).getOrElse(null),\n        deviation: value,\n      }),\n    }));\n  };\n\n  private year = () => [<YearInput key=\"year\" autoFocus={true} onChange={this.setYear} />];\n  private setYear = (year: YearValue) =>\n    this.setState({\n      value: maybe.Just(year),\n    });\n\n  private yearRange = () => [\n    <YearInput key=\"year-range-begin\" autoFocus={true} onChange={this.setYearRangeBegin} />,\n    <span className={styles.dateSeparator}>to</span>,\n    <YearInput key=\"year-range-end\" onChange={this.setYearRangeEnd} />,\n  ];\n  private setYearRangeBegin = (year: YearValue) =>\n    this.setState((state) => ({\n      value: maybe.Just({\n        begin: year,\n        end: state.value.map((v: YearRange) => v.end).getOrElse(null),\n      }),\n    }));\n  private setYearRangeEnd = (year: YearValue) =>\n    this.setState((state) => ({\n      value: maybe.Just({\n        begin: state.value.map((v: YearRange) => v.begin).getOrElse(null),\n        end: year,\n      }),\n    }));\n\n  private yearDeviation = () => [\n    <YearInput key=\"year-deviation-year\" autoFocus={true} onChange={this.setYearDeviationYear} />,\n    <span className={styles.dateSeparator}>±</span>,\n    <FormGroup>\n      <FormControl\n        key=\"year-deviation\"\n        type=\"number\"\n        className={styles.deviationInput}\n        placeholder=\"Years\"\n        required\n        value={this.state.value.map((v: YearDeviation) => v.deviation).getOrElse(undefined)}\n        onChange={this.setYearDeviation}\n      />\n    </FormGroup>,\n  ];\n  private setYearDeviationYear = (year: YearValue) =>\n    this.setState((state) => ({\n      value: maybe.Just({\n        year: year,\n        deviation: state.value.map((v: YearDeviation) => v.deviation).getOrElse(null),\n      }),\n    }));\n  private setYearDeviation = (event: any) => {\n    const value = event.target.value;\n    this.setState((state) => ({\n      value: maybe.Just({\n        year: state.value.map((v: YearDeviation) => v.year).getOrElse(null),\n        deviation: value,\n      }),\n    }));\n  };\n\n  private dateSelectorDropdown = () => {\n    const options = _.keys(TemporalDisjunctKinds).map((v) => ({ value: v, label: v }));\n    return (\n      <ReactSelect\n        className={classNames(styles.dateFormatSelect)}\n        options={options}\n        value={this.state.dateFormat.getOrElse(undefined)}\n        clearable={false}\n        onOpen={() => {\n          if (this.props.onOpen) {\n            this.props.onOpen();\n          }\n        }}\n        onChange={this.selectDateFormat.bind(this)}\n        optionRenderer={this.dateSelectorOptions}\n        valueRenderer={this.dateSelectorOptions}\n        placeholder=\"Select Date or Range Type\"\n      />\n    );\n  };\n\n  private selectDateFormat(value: { value: TemporalDisjunctT }) {\n    this.setState(_.assign({}, this.initialState, { dateFormat: maybe.Just(value.value) }));\n    if (this.props.onChange) {\n      this.props.onChange(value.value);\n    }\n  }\n\n  private dateSelectorOptions(option: { value: TemporalDisjunctT }) {\n    const simpleDate = (\n      <div>\n        <span className={styles.dateFormatSelect__ddMmYyyy}>DD</span>\n        <span className={styles.dateFormatSelect__ddMmYyyy}>MM</span>\n        <span className={styles.dateFormatSelect__ddMmYyyy}>YYYY</span>\n      </div>\n    );\n\n    const yearInput = <span className={styles.dateFormatSelect__yyyyAcBc}>year</span>;\n\n    const disjunct = { kind: option.value } as any;\n    return matchTemporalDisjunct({\n      Date: () => <div className={styles.dateFormatSelect__option}>{simpleDate}</div>,\n      DateRange: () => (\n        <div className={styles.dateFormatSelect__option}>\n          {simpleDate}\n          <span className={styles.dateSeparator}>to</span>\n          {simpleDate}\n        </div>\n      ),\n      DateDeviation: () => (\n        <div className={styles.dateFormatSelect__option}>\n          {simpleDate}\n          <span className={styles.dateSeparator}>±</span>\n          <span className={styles.dateFormatSelectDdMmYyyyDateDeviation}>days</span>\n        </div>\n      ),\n      Year: () => <div className={styles.dateFormatSelect__option}>{yearInput}</div>,\n      YearRange: () => (\n        <div className={styles.dateFormatSelect__option}>\n          {yearInput}\n          <span className={styles.dateSeparator}>to</span>\n          {yearInput}\n        </div>\n      ),\n      YearDeviation: () => (\n        <div className={styles.dateFormatSelect__option}>\n          {yearInput}\n          <span className={styles.dateSeparator}>±</span>\n          <span className={styles.dateFormatSelectDdMmYyyyYearDeviation}>years</span>\n        </div>\n      ),\n    })(disjunct);\n  }\n}\n\nexport default DateFormatSelectorComponent;\n","/**\n * ResearchSpace\n * Copyright (C) 2015-2020, © Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * @author Artem Kozlov <ak@metaphacts.com>\n */\n\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport * as moment from 'moment';\nimport { FormControl, FormGroup } from 'react-bootstrap';\nimport * as _ from 'lodash';\n\nimport * as styles from './SimpleDateInput.scss';\n\nexport interface SimpleDateInputProps extends React.Props<SimpleDateInput> {\n  className?: string;\n  onSelected: (date: moment.Moment) => void;\n  autoFocus?: boolean;\n}\n\ninterface State {\n  day?: string;\n  dayIsValid?: 'success' | 'warning' | 'error';\n  month?: string;\n  monthIsValid?: 'success' | 'warning' | 'error';\n  year?: string;\n  yearIsValid?: 'success' | 'warning' | 'error';\n}\n\nexport class SimpleDateInput extends React.PureComponent<SimpleDateInputProps, State> {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      day: '',\n      dayIsValid: undefined,\n      month: '',\n      monthIsValid: undefined,\n      year: '',\n      yearIsValid: undefined,\n    };\n  }\n\n  render() {\n    return (\n      <div className={styles.holder}>\n        <FormGroup validationState={this.state.dayIsValid}>\n          <FormControl\n            className={classNames('form-control', styles.day)}\n            autoFocus={this.props.autoFocus}\n            value={this.state.day}\n            onChange={this.onDayChange}\n            type=\"number\"\n            min=\"1\"\n            max=\"31\"\n            placeholder=\"DD\"\n            required={true}\n          />\n        </FormGroup>\n        <FormGroup validationState={this.state.monthIsValid}>\n          <FormControl\n            className={classNames('form-control', styles.month)}\n            value={this.state.month}\n            onChange={this.onMonthChange}\n            type=\"number\"\n            min=\"1\"\n            max=\"12\"\n            placeholder=\"MM\"\n            required={true}\n          />\n        </FormGroup>\n        <FormGroup validationState={this.state.yearIsValid}>\n          <FormControl\n            className={classNames('form-control', styles.year)}\n            value={this.state.year}\n            onChange={this.onYearChange}\n            type=\"number\"\n            placeholder=\"YYYY\"\n            required={true}\n          />\n        </FormGroup>\n      </div>\n    );\n  }\n\n  componentWillUpdate(nextProps, nextState: State) {\n    this.triggerOnSelected(nextState);\n  }\n\n  private onDayChange = (event: React.FormEvent<FormControl>) => {\n    const value = (event.target as any).value;\n    if (this.state.day !== value) {\n      const number = parseInt(value);\n      this.setState({\n        day: value,\n        dayIsValid: _.isNaN(number) || number < 1 || number > 31 ? 'error' : 'success',\n      });\n    }\n  };\n\n  private onMonthChange = (event: React.FormEvent<FormControl>) => {\n    this.setState({ month: (event.target as any).value });\n  };\n\n  private onYearChange = (event: React.FormEvent<FormControl>) => {\n    this.setState({ year: (event.target as any).value });\n  };\n\n  private triggerOnSelected = (state: State) => {\n    const { day, month, year } = state;\n    const isFullDate = !_.isEmpty(day) && !_.isEmpty(month) && !_.isEmpty(year);\n    if (isFullDate) {\n      const zeroIndexedMonth = parseInt(month) - 1; // months in MomentJS are zero indexed\n      this.props.onSelected(moment({ day: day, month: zeroIndexedMonth, year: year }));\n    }\n  };\n}\n\nexport default SimpleDateInput;\n","/**\n * ResearchSpace\n * Copyright (C) 2015-2020, © Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * @author Artem Kozlov <ak@metaphacts.com>\n * @author Andrey Nikolov an@metaphacts.com\n */\n\nimport * as React from 'react';\nimport * as _ from 'lodash';\nimport { FormControl, FormGroup, Button } from 'react-bootstrap';\n\nimport * as Navigation from 'platform/api/navigation';\nimport { Rdf } from 'platform/api/rdf';\n\nimport * as styles from './TextSelection.scss';\n\nconst ENTER_KEY_CODE = 13;\n\ninterface Props {\n  onSelect: (text: string) => void;\n  helpPage?: Rdf.Iri;\n}\n\ninterface State {\n  textValue?: string;\n  helpUrl?: string;\n}\n\nexport class TextSelection extends React.PureComponent<Props, State> {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      textValue: '',\n      helpUrl: '',\n    };\n\n    if (props.helpPage)\n      Navigation.constructUrlForResource(props.helpPage).onValue((uri) => this.setState({ helpUrl: uri.valueOf() }));\n  }\n\n  render() {\n    return (\n      <div className={styles.holder}>\n        {this.props.helpPage ? (\n          <a href={this.state.helpUrl} target=\"_blank\">\n            <i className={styles.helpQuestionCircle}></i>\n          </a>\n        ) : null}\n        <FormGroup className={styles.inputGroup}>\n          <FormControl\n            value={this.state.textValue}\n            autoFocus={true}\n            onChange={this.onValueChange}\n            onKeyUp={this.onKeyUp}\n            placeholder=\"text\"\n          />\n        </FormGroup>\n        <Button bsStyle=\"primary\" disabled={this.isButtonDisabled()} onClick={this.submitText}>\n          Find Text\n        </Button>\n      </div>\n    );\n  }\n\n  private isButtonDisabled = () => _.isEmpty(this.state.textValue);\n\n  private onValueChange = (event) => this.setState({ textValue: event.target.value });\n\n  private submitText = (event) => this.props.onSelect(this.state.textValue);\n\n  private onKeyUp = (event) => {\n    if (event.keyCode === ENTER_KEY_CODE) {\n      this.submitText(event);\n    }\n  };\n}\nexport default TextSelection;\n","/**\n * ResearchSpace\n * Copyright (C) 2015-2020, © Trustees of the British Museum\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * @author Artem Kozlov <ak@metaphacts.com>\n * @author Alexey Morozov\n */\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport * as assign from 'object-assign';\n\nimport { AutoCompletionInput } from 'platform/components/ui/inputs';\n\nimport { SelectedArea, OLMapSelection, ZoomToOptions } from './OLMapSelection';\nimport { ResourceSelectorConfig } from 'platform/components/semantic/search/config/SearchConfig';\nimport * as styles from './MapSelectionOverlay.scss';\n\nexport interface MapSelectionProps {\n  suggestionConfig: ResourceSelectorConfig;\n  onCancel: () => void;\n  onSelect: (area: SelectedArea) => void;\n}\n\ninterface MapSelectionState {\n  selection?: SelectedArea;\n  zoomToOptions?: ZoomToOptions;\n}\n\n/**\n * Displays map selection overlay with geo places search, select and cancel buttons\n */\nexport class MapSelectionOverlay extends Component<MapSelectionProps, MapSelectionState> {\n  constructor(props: MapSelectionProps, context: any) {\n    super(props, context);\n    this.state = {\n      selection: undefined,\n      zoomToOptions: undefined,\n    };\n  }\n\n  showPlaceSelector() {\n    return React.createElement(AutoCompletionInput, {\n      query: this.props.suggestionConfig.query,\n      templates: {},\n      actions: {\n        onSelected: (binding) => {\n          this.setState(\n            assign({}, this.state, {\n              zoomToOptions: {\n                lat: Number(binding['lat'].value),\n                long: Number(binding['long'].value),\n                zoomLevel: 10,\n              },\n            })\n          );\n        },\n      },\n      placeholder: 'Search for place',\n    });\n  }\n\n  render() {\n    return (\n      <div className={styles.mapSelection}>\n        <div className={styles.search}>{this.showPlaceSelector()}</div>\n        <OLMapSelection onSelect={this.onAreaSelected} zoomTo={this.state.zoomToOptions} />\n        <div className={styles.actions}>\n          <div className=\"form-group\">\n            <div className=\"btn-group\" role=\"group\">\n              <button type=\"button\" className=\"btn btn-danger\" onClick={this.props.onCancel}>\n                Cancel\n              </button>\n              <button\n                type=\"submit\"\n                className=\"btn btn-primary\"\n                disabled={!this.state.selection}\n                onClick={this.confirmSelection}\n              >\n                Select\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  private confirmSelection = () => {\n    this.props.onSelect(this.state.selection);\n  };\n\n  private onAreaSelected = (selectedArea: SelectedArea) => {\n    this.setState(assign({}, this.state, { selection: selectedArea }));\n  };\n}\nexport default MapSelectionOverlay;\n"],"sourceRoot":""}