{"version":3,"sources":["webpack:///./src/main/web/components/workflow/WorkflowCreateComponent.tsx","webpack:///./src/main/web/components/workflow/WorkflowEvents.ts"],"names":["props","context","cancellation","Cancellation","queryCancellation","derive","workflowService","WorkflowService","state","componentDidMount","subject","id","useEventSystem","Error","this","initializeEventListener","deriveAndCancel","map","isWorkflowExist","Rdf","iri","observe","value","exists","setState","error","listen","eventType","WorkflowEvents","WorkflowCreate","target","result","data","createWorkflowInstantiation","addNotification","level","message","componentWillUnmount","cancelAll","definition","assignee","firstStep","metadataQuery","newWorkflowIriTemplate","workflowData","Iri","flatMap","Kefir","never","workflowIri","trigger","WorkflowCreated","source","SubjectGetInWorkflow","undefined","render","className","disabled","title","onClick","Alert","bsStyle","ErrorPresenter","Component","WorkflowCreateComponent","event","EventMaker"],"mappings":"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","file":"mp-workflow-create-acb1979e5c6466d6320d.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\nimport * as Kefir from 'kefir';\n\nimport { Cancellation } from 'platform/api/async';\nimport { Component } from 'platform/api/components';\nimport { Rdf } from 'platform/api/rdf';\nimport { listen, trigger } from 'platform/api/events';\nimport { addNotification } from 'platform/components/ui/notification';\nimport { WorkflowService, WorkflowData } from 'platform/api/services/WorkflowService';\nimport { ErrorPresenter } from 'platform/components/ui/notification';\nimport { Alert } from 'react-bootstrap';\n\nimport * as WorkflowEvents from './WorkflowEvents';\n\nexport interface WorkflowCreateConfig {\n  /**\n   * IRI of a workflow definition\n   */\n  definition: string;\n\n  /**\n   * First step of workflow instantiation\n   */\n  firstStep: string;\n\n  /**\n   * IRI of a resource to handled by workflow\n   */\n  subject?: string;\n\n  /**\n   * Unique id to refer to in case of using in couple with event system.\n   */\n  id?: string;\n\n  /**\n   * In that case the body of the component is empty,\n   * component listen to 'Workflow.Create' event and\n   * fires 'Workflow.Created' event.\n   */\n  useEventSystem?: boolean;\n\n  /**\n   * IRI of the first step assignee (by default unassigned)\n   */\n  assignee?: string;\n\n  /**\n   * Sparql query to construct metadata for worflow instantiation\n   * Example:\n   * ```\n   * metadata-query='CONSTRUCT {\n   *   ?metadataIri <http://example.com/hasLanguage>\n   *   \"english\"^^<http://www.w3.org/2001/XMLSchema#string>;\n   *   <http://example.com/hasPrice> \"1000\"^^<http://www.w3.org/2001/XMLSchema#integer> .\n   * } WHERE {}\n   * ```\n   */\n  metadataQuery?: string;\n\n  /**\n   * URI template to customize worflow IRI generation.\n   * `{{UUID}}` placeholder allows to substitute a random UUID.\n   */\n  newWorkflowIriTemplate?: string;\n\n  /**\n   * CSS class for the component\n   */\n  className?: string;\n}\n\ninterface State {\n  readonly error?: any;\n  readonly exists?: boolean;\n}\n\n/**\n * Component creates the workflow instantiation for a target resource.\n * There are two modes of using this component:\n * - UI mode - this mode provides user interface with a button to manually crete the instantiation\n * - Event System mode - component listen to the \"Workflow.Create\" event and creates instantiations\n * in response to the event.\n *\n * Examples:\n * 1) Create workflow using the basic component UI\n * <mp-workflow-create\n *   id='workflow-create-1'\n *   definition='http://example.com/workflow/definition'\n *   first-step='http://example.com/workflow/step/toDo'\n *   resource-iri='http://example.com/resource/example-source-12345'\n *   new-subject-template='http://example.com/workflow-example-{{UUID}}'\n *   metadata-query='CONSTRUCT {\n *     ?subject <http://example.com/hasLanguage>\n *     \"english\"^^<http://www.w3.org/2001/XMLSchema#string>;\n *     <http://example.com/hasPrice> \"1000\"^^<http://www.w3.org/2001/XMLSchema#integer>;\n *     <http://example.com/hasTime> \"12:45\"^^<http://www.w3.org/2001/XMLSchema#dateTime>;\n *     <http://example.com/hasPower> <http://example.com/ability/teleport> .\n *   } WHERE {}'\n *   assignee='http://example.com/assignee-example'>\n * </mp-workflow-create>\n *\n * 2) Create workflow using event system where the event system listen events from a semantic form\n * <!-- a) Create a new entity using Form and fire 'Form.ResourceCreated' event -->\n * <semantic-form\n *   id='semantic-form-example'\n *   post-action='event'\n *   new-subject-template='http://example.com/person-name-{{UUID}}'\n *   fields='[\n *     {\n *       \"id\": \"name\",\n *       \"label\": \"Name\",\n *       \"description\": \"\",\n *       \"xsdDatatype\": \"xsd:string\",\n *       \"minOccurs\": \"1\",\n *       \"maxOccurs\": \"1\",\n *       \"selectPattern\": \"SELECT $value WHERE {$subject rdfs:label $value}\",\n *       \"insertPattern\": \"INSERT {$subject rdfs:label $value}WHERE{}\"\n *     }\n *   ]'>\n *   <semantic-form-text-input for='name'></semantic-form-text-input>\n *   <button name='submit'>Create</button>\n *   <button name='reset'>Reset</button>\n * </semantic-form>\n *\n * <!-- b) Catch 'Form.ResourceCreated' event and proxy it to the <mp-workflow-create/> -->\n * <mp-event-proxy id='form-resource-created' on-event-type='Form.ResourceCreated'\n *   proxy-event-type='Workflow.Create' proxy-targets='[\"workflow-form-resource\"]'>\n * </mp-event-proxy>\n *\n * <!-- c) Create workflow for the new antity and fire 'Workflow.Created' event -->\n * <mp-workflow-create\n *   id='workflow-form-resource'\n *   first-step='http://example.com/workflow/toDo'\n *   new-workflow-iri-template='http://example.com/workflow-example-{{UUID}}'\n *   definition='http://example.com/workflow/definition'\n *   assignee='http://example.com/person/alice'\n *   use-event-system=true>\n * </mp-workflow-create>\n *\n * <!-- d) Catch 'Workflow.Created' event and proxy it to the <mp-event-target-redirect/> -->\n * <mp-event-proxy id='workflow-proxy' on-event-type='Workflow.SubjectGetInWorkflow'\n *   proxy-event-type='RedirectAction.perform' proxy-targets='[\"redirect-to-resource\"]'>\n * </mp-event-proxy>\n *\n * <!-- e) Redirect to the created resource -->\n * <mp-event-target-redirect\n *   id='redirect-to-resource'\n *   action='redirect'\n * ></mp-event-target-redirect>\n */\nexport class WorkflowCreateComponent extends Component<WorkflowCreateConfig, State> {\n  private readonly cancellation = new Cancellation();\n  private queryCancellation = this.cancellation.derive();\n\n  private workflowService = new WorkflowService();\n\n  constructor(props: WorkflowCreateConfig, context: any) {\n    super(props, context);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    const { subject, id, useEventSystem } = this.props;\n\n    if (!(subject || useEventSystem)) {\n      throw new Error(\n        'Component is used in the basic mode. You should provide \"subject\" ' +\n          'because it wont be provided via event system.'\n      );\n    }\n    if (useEventSystem && !id) {\n      throw new Error('You should provide \"id\" if you want ' + 'the component to be used as event target or source.');\n    }\n\n    if (useEventSystem) {\n      this.initializeEventListener();\n    } else {\n      this.queryCancellation = this.cancellation.deriveAndCancel(this.queryCancellation);\n      this.queryCancellation.map(this.workflowService.isWorkflowExist(Rdf.iri(subject))).observe({\n        value: (exists) => this.setState({ exists }),\n        error: (error) => this.setState({ error }),\n      });\n    }\n  }\n\n  private initializeEventListener() {\n    const { id } = this.props;\n    this.cancellation\n      .map(\n        listen({\n          eventType: WorkflowEvents.WorkflowCreate,\n          target: id,\n        })\n      )\n      .observe({\n        value: (result) => {\n          if (result.data && result.data.iri) {\n            this.createWorkflowInstantiation(result.data.iri);\n          } else {\n            addNotification({\n              level: 'error',\n              message: 'Supplied event doesn\\'t provide the \"iri\" parameter',\n            });\n          }\n        },\n        error: (error) => this.setState({ error }),\n      });\n  }\n\n  componentWillUnmount() {\n    this.cancellation.cancelAll();\n  }\n\n  private createWorkflowInstantiation(subject: string) {\n    const { definition, assignee, firstStep, metadataQuery, newWorkflowIriTemplate, useEventSystem } = this.props;\n    const workflowData: WorkflowData = {\n      subject: new Rdf.Iri(subject),\n      definition: new Rdf.Iri(definition),\n      firstStep: new Rdf.Iri(firstStep),\n      metadataQuery,\n      assignee: new Rdf.Iri(assignee),\n      newWorkflowIriTemplate: newWorkflowIriTemplate,\n    };\n\n    this.queryCancellation = this.cancellation.deriveAndCancel(this.queryCancellation);\n    this.queryCancellation\n      .map(this.workflowService.isWorkflowExist(workflowData.subject))\n      .flatMap((exists) => {\n        if (exists) {\n          addNotification({\n            level: 'error',\n            message: `The worflow instantiation for \"${subject}\" already exists.`,\n          });\n          return Kefir.never<Rdf.Iri>();\n        } else {\n          return this.workflowService.createWorkflowInstantiation(workflowData);\n        }\n      })\n      .observe({\n        value: (workflowIri) => {\n          addNotification({\n            level: 'success',\n            message: `The workflow instantiation has been created.`,\n          });\n\n          if (useEventSystem) {\n            trigger({\n              eventType: WorkflowEvents.WorkflowCreated,\n              source: this.props.id,\n              data: { iri: workflowIri.value },\n            });\n            trigger({\n              eventType: WorkflowEvents.SubjectGetInWorkflow,\n              source: this.props.id,\n              data: { iri: subject },\n            });\n          }\n          this.setState({ exists: !useEventSystem, error: undefined });\n        },\n        error: (error) => {\n          addNotification({\n            level: 'error',\n            message: `The workflow instantiation hasn\\'t been created.`,\n          });\n          this.setState({ error });\n        },\n      });\n  }\n\n  render() {\n    const { className, useEventSystem, subject } = this.props;\n\n    if (useEventSystem) {\n      return null;\n    }\n\n    const { error, exists } = this.state;\n\n    return useEventSystem ? null : (\n      <div className={className}>\n        <button\n          className={'btn btn-success'}\n          disabled={exists}\n          title={exists ? `Worflow instantiation for \"${subject}\" already exists.` : 'Create workflow instantiation'}\n          onClick={() => {\n            this.createWorkflowInstantiation(subject);\n          }}\n        >\n          Create workflow\n        </button>\n        {error ? (\n          <Alert bsStyle=\"warning\">\n            <ErrorPresenter error={error}></ErrorPresenter>\n          </Alert>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default WorkflowCreateComponent;\n","/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { EventMaker } from 'platform/api/events';\n\nexport interface WorkflowEventData {\n  /**\n   * WorflowCreateComponent listen to this event and once event is fired\n   * the new workflow instantiations for specified iri is created\n   */\n  'Workflow.Create': { iri: string };\n  /**\n   * WorflowCreateComponent fires this event after a\n   * new worflow instantiation is created\n   * where the iri is the workflow IRI\n   */\n  'Workflow.Created': { iri: string };\n  /**\n   * WorflowCreateComponent fires this event after a\n   * new worflow instantiation is created\n   * where the iri is the subject IRI\n   */\n  'Workflow.SubjectGetInWorkflow': { iri: string };\n}\nconst event: EventMaker<WorkflowEventData> = EventMaker;\n\nexport const WorkflowCreate = event('Workflow.Create');\nexport const WorkflowCreated = event('Workflow.Created');\nexport const SubjectGetInWorkflow = event('Workflow.SubjectGetInWorkflow');\n"],"sourceRoot":""}