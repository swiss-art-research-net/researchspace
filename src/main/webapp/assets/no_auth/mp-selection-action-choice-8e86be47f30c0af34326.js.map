{"version":3,"sources":["webpack:///./src/main/web/components/ui/selection/SelectionActionChoiceComponent.tsx"],"names":["props","context","cancellation","Cancellation","onSelectionChange","event","data","setState","prevState","values","tag","value","renderTypeSelector","selection","_","toPairs","state","filter","pair","map","key","style","title","children","DropdownButton","id","disabled","isEmpty","every","val","open","onToggle","onDropdownToggle","Children","child","cloneElement","closeMenu","isOpen","componentDidMount","this","listen","eventType","SelectionEvents","Toggle","target","onValue","componentDidUpdate","prevProps","onChange","componentWillUnmount","cancelAll","render","contextTypes","SelectionGroupContextTypes","Component","SelectionActionChoiceComponent"],"mappings":"6IAsBA,OACA,OACA,QACA,QACA,SACA,QACA,UACA,UAmCA,cAME,wCAAYA,EAAOC,GAAnB,MACE,YAAMD,EAAOC,IAAQ,K,OANf,EAAAC,aAAe,IAAI,EAAAC,aAkC3B,EAAAC,kBAAoB,SAACC,GACnB,IAAMC,EAAOD,EAAMC,KACnB,EAAKC,UAAS,SAACC,G,MAA4B,OAAGC,OAAQ,EAAF,uBAAOD,EAAUC,SAAM,OAAGH,EAAKI,KAAMJ,EAAKK,MAAK,SAO7F,EAAAC,mBAAqB,WAC3B,IAAMC,EAAaC,EAAEC,QAAQ,EAAKC,MAAMP,QACrCQ,QAAO,SAACC,GAAS,OAAAA,EAAK,MACtBC,KAAI,SAAC,G,IAACC,EAAA,KAAK,KAAW,OAAAA,KACnB,UAAEC,EAAA,EAAAA,MAAOC,EAAA,EAAAA,MAAOC,EAAA,EAAAA,SACtB,OACE,gBAAC,EAAAC,eAAc,CACbC,GAAI,EAAKzB,MAAMyB,GACfC,SAAUZ,EAAEa,QAAQ,EAAKX,MAAMP,SAAWK,EAAEc,MAAM,EAAKZ,MAAMP,QAAQ,SAACoB,GAAQ,OAAQ,IAARA,KAC9EC,KAAM,EAAKd,MAAMc,KACjBC,SAAU,EAAKC,iBACfX,MAAOA,EACPC,MAAOA,GAEN,EAAAW,SAASd,IAAII,GAAU,SAACW,GACvB,SAAAC,aAAaD,EAAO,CAAErB,UAAS,EAAEuB,UAAW,EAAKA,iBAMjD,EAAAA,UAAY,WAClB,EAAK7B,SAAS,CAAEuB,MAAM,KAGhB,EAAAE,iBAAmB,SAACK,GAC1B,EAAK9B,SAAS,CAAEuB,KAAMO,KA9DtB,EAAKrB,MAAQ,CACXP,OAAQ,GACRqB,MAAM,G,EA8DZ,OAxEoD,8CAclD,yCAAAQ,kBAAA,WACEC,KAAKrC,aACFiB,IACC,EAAAqB,OAAO,CACLC,UAAW,EAAAC,gBAAgBC,OAC3BC,OAAQL,KAAKvC,MAAMa,aAGtBgC,QAAQN,KAAKnC,oBAGlB,yCAAA0C,mBAAA,SAAmBC,EAAkBvC,GAC/B+B,KAAKvB,MAAMP,SAAWD,EAAUC,QAAU8B,KAAKtC,QAAQ+C,UACzDT,KAAKtC,QAAQ+C,SAAST,KAAKvB,MAAMP,SAIrC,yCAAAwC,qBAAA,WACEV,KAAKrC,aAAagD,aAQpB,yCAAAC,OAAA,WACE,OAAOZ,KAAK3B,sBAtCP,+BAAAwC,aAAe,EAAAC,2BAqExB,+BAxEA,CAAoD,EAAAC,WAAvC,EAAAC,iCAyEb,UAAeA","file":"mp-selection-action-choice-8e86be47f30c0af34326.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @author Philip Polkovnikov\n */\n\nimport * as React from 'react';\nimport { Component, Children, ReactNode, cloneElement, ReactElement, SyntheticEvent } from 'react';\nimport { DropdownButton } from 'react-bootstrap';\nimport * as _ from 'lodash';\nimport { Event, listen } from 'platform/api/events';\nimport { Cancellation } from 'platform/api/async';\nimport { SelectionEvents } from 'platform/components/ui/selection';\nimport { SelectionGroupContext, SelectionGroupContextTypes } from './SelectionGroupComponent';\n\ninterface Props {\n  /**\n   * id prop is required to make dropdown available to screen reader software\n   */\n  id: string;\n\n  /**\n   * Action group name\n   */\n  selection: string;\n\n  /**\n   * Dropdown caption\n   */\n  title: string;\n\n  /**\n   * CSS style\n   */\n  style?: any;\n\n  /**\n   * CSS class\n   */\n  className?: string;\n}\n\ninterface State {\n  values?: { [tag: string]: boolean };\n\n  open?: boolean;\n}\n\nexport class SelectionActionChoiceComponent extends Component<Props, State> {\n  private cancellation = new Cancellation();\n\n  static contextTypes = SelectionGroupContextTypes;\n  context: SelectionGroupContext;\n\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      values: {},\n      open: false,\n    };\n  }\n\n  componentDidMount() {\n    this.cancellation\n      .map(\n        listen({\n          eventType: SelectionEvents.Toggle,\n          target: this.props.selection,\n        })\n      )\n      .onValue(this.onSelectionChange);\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    if (this.state.values !== prevState.values && this.context.onChange) {\n      this.context.onChange(this.state.values);\n    }\n  }\n\n  componentWillUnmount() {\n    this.cancellation.cancelAll();\n  }\n\n  onSelectionChange = (event: Event<any>) => {\n    const data = event.data;\n    this.setState((prevState: State): State => ({ values: { ...prevState.values, [data.tag]: data.value } }));\n  };\n\n  render() {\n    return this.renderTypeSelector();\n  }\n\n  private renderTypeSelector = () => {\n    const selection = (_.toPairs(this.state.values) as [string, boolean][])\n      .filter((pair) => pair[1])\n      .map(([key, value]) => key);\n    const { style, title, children } = this.props;\n    return (\n      <DropdownButton\n        id={this.props.id}\n        disabled={_.isEmpty(this.state.values) || _.every(this.state.values, (val) => val === false)}\n        open={this.state.open}\n        onToggle={this.onDropdownToggle}\n        style={style}\n        title={title}\n      >\n        {Children.map(children, (child: ReactElement<any>) =>\n          cloneElement(child, { selection, closeMenu: this.closeMenu })\n        )}\n      </DropdownButton>\n    );\n  };\n\n  private closeMenu = () => {\n    this.setState({ open: false });\n  };\n\n  private onDropdownToggle = (isOpen: boolean) => {\n    this.setState({ open: isOpen });\n  };\n}\nexport default SelectionActionChoiceComponent;\n"],"sourceRoot":""}