{"version":3,"sources":["webpack:///./src/main/web/components/ui/json/json-renderer.tsx"],"names":["props","state","cancellation","Cancellation","renderData","data","dataKey","isPrimitive","key","toString","Array","isArray","renderArray","renderObject","arrayKey","length","every","map","obj","keySet","Set","item","Object","keys","forEach","add","from","_","startCase","object","i","objectKey","isLoading","render","loadingError","getUrl","template","Alert","bsStyle","ErrorPresenter","error","Spinner","TemplateItem","source","options","this","componentWillUnmount","cancelAll","componentDidMount","GenericRestService","getJson","observe","value","setState","Component","val","GenericJsonRenderer"],"mappings":"6IAkBA,OAEA,QACA,QACA,SACA,SACA,UACA,QACA,SACA,QAuCA,cAGE,6BAAYA,EAAcC,GAA1B,MACE,YAAMD,EAAOC,IAAM,K,OAHJ,EAAAC,aAAe,IAAI,EAAAC,aA0D5B,EAAAC,WAAa,SAACC,EAAUC,GAC9B,OAAIC,YAAYF,GACgB,OAAvBA,EAA+B,wBAAMG,IAAKH,EAAKI,YAAaJ,EAAKI,YAAqB,6BAE3FC,MAAMC,QAAQN,GACT,EAAKO,YAAYP,EAAMC,GAEzB,EAAKO,aAAaR,EAAMC,IAGzB,EAAAM,YAAc,SAACP,EAAaS,GAClC,GAAoB,IAAhBT,EAAKU,OACP,OAAO,KAKT,GAAIV,EAAKW,MAAMT,aACb,OAAOF,EAAKY,KAAI,SAACC,GAAQ,SAAKd,WAAWc,EAAKJ,MAKhD,IADA,IAAMK,EAAS,IAAIC,IACA,MAAAf,EAAA,eAAM,CAApB,IAAMgB,EAAI,KACbC,OAAOC,KAAKF,GAAMG,SAAQ,SAAChB,GAAQ,OAAAW,EAAOM,IAAIjB,MAEhD,IAAMe,EAAOb,MAAMgB,KAAKP,GACxB,OACE,yBAAOX,IAAQM,EAAQ,UACrB,6BACE,0BACE,+BACCS,EAAKN,KAAI,SAACT,GAAQ,OACjB,sBAAIA,IAAKA,GAAMmB,EAAEC,UAAUpB,SAIjC,6BACGH,EAAKY,KAAI,SAACY,EAAQC,GAAM,OACvB,sBAAItB,IAAQM,EAAQ,QAAQgB,GAC1B,sBAAItB,IAAQM,EAAQ,eAAegB,GAAMA,GACxCP,EAAKN,KAAI,SAACT,GAAQ,OACjB,sBAAIA,IAAQM,EAAQ,iBAAiBgB,EAAC,IAAItB,GAAQ,EAAKJ,WAAWyB,EAAOrB,GAAMsB,cASrF,EAAAjB,aAAe,SAACR,EAAW0B,GACjC,OACE,yBAAOvB,IAAQuB,EAAS,UACtB,6BACGT,OAAOC,KAAKlB,GAAMY,KAAI,SAACT,GAAQ,OAC9B,sBAAIA,IAAQuB,EAAS,QAAQvB,GAC3B,sBAAIA,IAAQuB,EAAS,eAAevB,GAAQA,GAC5C,sBAAIA,IAAQuB,EAAS,iBAAiBvB,GACnC,EAAKJ,WAAWC,EAAKG,GAASuB,EAAS,wBAAwBvB,WAjH5E,EAAKP,MAAQ,CACX+B,WAAW,G,EAwHjB,OA9H4C,mCAUnC,8BAAAC,OAAP,WACQ,iBAAEC,EAAA,EAAAA,aAAcF,EAAA,EAAAA,UAAW3B,EAAA,EAAAA,KAC3B,aAAE8B,EAAA,EAAAA,OAAQC,EAAA,EAAAA,SAChB,OAAIF,EAEA,gBAAC,EAAAG,MAAK,CAACC,QAAQ,WACb,gBAAC,EAAAC,eAAc,CAACC,MAAON,KAIzBF,EACK,gBAAC,EAAAS,QAAO,MAEbL,GAAY/B,EAEZ,gBAAC,EAAAqC,aAAY,CACXN,SAAU,CACRO,OAAQP,EACRQ,QAASvC,KAMVwC,KAAKzC,WAAWyC,KAAK5C,MAAMI,KAAM8B,IAG1C,8BAAAW,qBAAA,WACED,KAAK3C,aAAa6C,aAGb,8BAAAC,kBAAP,sBACUb,EAAA,WAAAA,OACRU,KAAK3C,aAAae,IAAI,EAAAgC,mBAAmBC,QAAiBf,IAASgB,QAAQ,CACzEC,MAAO,SAACA,GACN,EAAKC,SAAS,CACZrB,WAAW,EACX3B,KAAM+C,KAGVZ,MAAO,SAACA,GACN,EAAKa,SAAS,CACZrB,WAAW,EACXE,aAAcM,QAyExB,oBA9HA,CAA4C,EAAAc,WAgI5C,SAAS/C,YAAYgD,GACnB,MAAmB,iBAARA,EACM,OAARA,EAEa,mBAARA,EApIH,EAAAC,sBAuIb,UAAeA","file":"mp-json-renderer-916d11885f12a4acbce4.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\n\nimport { Cancellation } from 'platform/api/async';\nimport { Alert } from 'react-bootstrap';\nimport { TemplateItem } from 'platform/components/ui/template';\nimport { ErrorPresenter } from 'platform/components/ui/notification';\nimport { GenericRestService } from 'platform/api/services/generic-rest';\nimport { Component } from 'platform/api/components';\nimport { Spinner } from 'platform/components/ui/spinner';\nimport * as _ from 'lodash';\n\ninterface State {\n  isLoading: boolean;\n  data?: any;\n  loadingError?: any;\n}\n\ninterface Props {\n  /**\n   * A handlebars template. The json object retrieved from the getUrl\n   *  will be set as handlebars context if a custom template is provided\n   *  i.e. available as {{this}}.\n   *\n   * @default\n   *  a nested tabular representation of the json object\n   */\n  template?: string;\n  /**\n   * The GET REST url, relative to the platform base url.\n   */\n  getUrl: string;\n}\n\n/**\n * Renders a JSON result from a GET REST request as table or\n * according to the specified handlebars template.\n * @see Props\n * @example\n *  <mp-json-renderer\n *      get-url='/rest/data/rdf/namespace/getRegisteredPrefixes'\n *      template='<ul>{{#each this as |e|}}<li>{{@index}} : {{e}}</li> {{/each}}</ul>'\n *  ></mp-json-renderer>\n *\n *  With default table rendering:\n *  <mp-json-renderer\n *      get-url='/rest/data/rdf/namespace/getRegisteredPrefixes'\n *  ></mp-json-renderer>\n */\nexport class GenericJsonRenderer<T> extends Component<Props, State> {\n  private readonly cancellation = new Cancellation();\n\n  constructor(props: Props, state: State) {\n    super(props, state);\n    this.state = {\n      isLoading: true,\n    };\n  }\n\n  public render() {\n    const { loadingError, isLoading, data } = this.state;\n    const { getUrl, template } = this.props;\n    if (loadingError) {\n      return (\n        <Alert bsStyle=\"warning\">\n          <ErrorPresenter error={loadingError} />\n        </Alert>\n      );\n    }\n    if (isLoading) {\n      return <Spinner />;\n    }\n    if (template && data) {\n      return (\n        <TemplateItem\n          template={{\n            source: template,\n            options: data,\n          }}\n        />\n      );\n    }\n\n    return this.renderData(this.state.data, getUrl);\n  }\n\n  componentWillUnmount() {\n    this.cancellation.cancelAll();\n  }\n\n  public componentDidMount() {\n    const { getUrl } = this.props;\n    this.cancellation.map(GenericRestService.getJson<T[] | T>(getUrl)).observe({\n      value: (value) => {\n        this.setState({\n          isLoading: false,\n          data: value,\n        });\n      },\n      error: (error) => {\n        this.setState({\n          isLoading: false,\n          loadingError: error,\n        });\n      },\n    });\n  }\n\n  private renderData = (data: {}, dataKey: string | number) => {\n    if (isPrimitive(data)) {\n      return data !== (undefined || null) ? <span key={data.toString()}>{data.toString()}</span> : <span></span>;\n    }\n    if (Array.isArray(data)) {\n      return this.renderArray(data, dataKey);\n    }\n    return this.renderObject(data, dataKey);\n  };\n\n  private renderArray = (data: any[], arrayKey: string | number) => {\n    if (data.length === 0) {\n      return null;\n    }\n\n    // we check whether the array of is of flat objects / primitives only,\n    // i.e. _.some checks whether function / predicate return true for element in the array\n    if (data.every(isPrimitive)) {\n      return data.map((obj) => this.renderData(obj, arrayKey));\n    }\n\n    // get unique list of keys\n    const keySet = new Set<string>();\n    for (const item of data) {\n      Object.keys(item).forEach((key) => keySet.add(key));\n    }\n    const keys = Array.from(keySet);\n    return (\n      <table key={`${arrayKey}-table`}>\n        <thead>\n          <tr>\n            <th>#</th>\n            {keys.map((key) => (\n              <th key={key}>{_.startCase(key)}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {data.map((object, i) => (\n            <tr key={`${arrayKey}-row-${i}`}>\n              <td key={`${arrayKey}-column-key-${i}`}>{i}</td>\n              {keys.map((key) => (\n                <td key={`${arrayKey}-column-value-${i}-${key}`}>{this.renderData(object[key], i)}</td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  };\n\n  private renderObject = (data: any, objectKey: string | number) => {\n    return (\n      <table key={`${objectKey}-table`}>\n        <tbody>\n          {Object.keys(data).map((key) => (\n            <tr key={`${objectKey}-row-${key}`}>\n              <td key={`${objectKey}-column-key-${key}`}>{key}</td>\n              <td key={`${objectKey}-column-value-${key}`}>\n                {this.renderData(data[key], `${objectKey}-column-nested-value-${key}`)}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  };\n}\n\nfunction isPrimitive(val: any) {\n  if (typeof val === 'object') {\n    return val === null;\n  }\n  return typeof val !== 'function';\n}\n\nexport default GenericJsonRenderer;\n"],"sourceRoot":""}