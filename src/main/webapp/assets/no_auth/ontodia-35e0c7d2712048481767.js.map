{"version":3,"sources":["webpack:///./src/main/web/components/3-rd-party/ontodia/Ontodia.ts","webpack:///./src/main/web/components/3-rd-party/ontodia/data/DiagramService.ts","webpack:///./src/main/web/components/3-rd-party/ontodia/data/OntodiaVocabulary.ts","webpack:///./src/main/web/components/3-rd-party/ontodia/data/OntodiaDataProvider.ts","webpack:///./src/main/web/components/3-rd-party/ontodia/data/DataProviderProfiles.ts","webpack:///./src/main/web/components/3-rd-party/ontodia/data/RdfExt.ts","webpack:///./src/main/web/components/3-rd-party/ontodia/Toolbar.tsx","webpack:///./src/main/web/components/3-rd-party/ontodia/authoring/EntityForm.tsx","webpack:///./src/main/web/components/3-rd-party/ontodia/authoring/FieldBasedValidationApi.ts","webpack:///./src/main/web/components/3-rd-party/ontodia/authoring/FormBasedPersistence.ts"],"names":["DEFAULT_FACTORY","createWorkspace","componentProps","workspaceProps","createElement","Workspace","createToolbar","toolbarProps","Toolbar","onNewDigaramInitialized","workspace","forceLayout","zoomToFit","getPersistence","mode","FormBasedPersistence","props","context","cancellation","Cancellation","listener","EventObserver","nodeTemplates","getWorkspace","onIriClick","iri","clickIntent","originalEvent","Rdf","elementIri","isSimpleClick","navigateToResource","onEnd","openResourceInNewWindow","target","openExternalLink","URI","value","getRepositories","repository","repositories","prepareImages","elementsInfo","imageQuery","imageIris","DiagramService","fetchThumbnails","semanticContext","prepareLabels","resources","iris","Array","from","getLabels","map","labels","result","Map","forEach","label","literal","language","set","toPromise","initWorkspace","onLoadWorkspace","provisionQuery","acceptBlankNodes","settings","autoZoom","hideNavigationConfirmation","fieldConfiguration","options","endpointUrl","undefined","imagePropertyUris","queryMethod","SparqlQueryMethod","POST","dataProvider","createDataProvider","configName","createRDFStorage","fields","allFields","providerSettings","forceFields","datatypeFields","validationApi","setDataProvider","importLayout","listen","getEditor","events","registerNavigationConfirmation","subscribeOnEvents","authoringMode","subscribeOnAuthoringEvents","onSaveDiagramPressed","diagramIri","getModel","exportLayout","parsedMetadata","flatMap","metadata","updateDiagram","results","trigger","eventType","OntodiaEvents","DiagramSaved","source","id","data","resourceIri","state","DiagramIsDirty","hasChanges","observe","history","reset","addNotification","level","message","error","openSaveModal","onPersistAuthoredChanges","showWaitIndicatorWhile","persistAuthoredChanges","onChangesPersisted","model","editor","elements","element","changed","finalizedEntities","get","setData","removeElement","links","link","event","authoringState","deleted","removeLink","setAuthoringState","AuthoringState","empty","cancelSelection","DiagramChanged","temporaryState","importProvisionData","Promise","resolve","getRdfExtGraphBySparqlQuery","then","graph","addGraphToRDFDataProvider","rdfDataProvider","dataProviders","name","RDF_DATA_PROVIDER_NAME","addGraph","makeRdfExtGraph","importModelLayout","layout","validateLinks","requestLinksOnInit","params","preloadedElements","diagram","getOverlaySystem","show","CreateResourceDialog","onSave","onSaveModalSubmit","onHide","hide","title","saveDiagramLabel","placeholder","renderPropertyEditor","getEntityMetadata","elementData","rawModel","convertElementModelToCompositeValue","elementState","subject","isNewElement","elementNewIri","type","AuthoringKind","ChangeElement","before","newIri","persistence","makePersistenceFromConfig","acceptIriAuthoring","supportsIriEditing","fieldByIri","toArray","newSubjectTemplate","onSubmit","newData","editedModel","convertCompositeValueToElementModel","onCancel","formBody","formChildren","Forms","generateFormFromFields","filter","f","isObjectProperty","overrides","inputOverrides","EntityForm","ErrorNotification","errorMessage","types","join","resolveElementTemplate","template","defaultNodeTemplate","prepareElementTemplates","Object","keys","getElementTemplate","inAuthoringMode","render","AuthoredEntity","templateProps","this","children","TemplateItem","componentMapper","component","mapTemplateComponent","mapElement","isValidChild","cloneElement","disabled","canEdit","onClick","onEdit","canDelete","onDelete","universalChildren","Children","resolveLinkTemplate","linkTypeId","edgeStyles","defaultEdgeStyle","markerSource","markerTarget","linkStyle","editable","renderLink","linkState","customLabel","attrs","text","setLinkLabel","setLinkState","suggestProperties","propertySuggestionQuery","token","getDiagram","getElement","elementId","formatLabel","values","resolveNodeStyles","nodeStyles","indexOf","icon","image","color","loading","componentDidUpdate","prevProps","setState","loadFieldConfiguration","ct","fieldConfigElement","find","child","componentHasType","OntodiaFieldConfiguration","extractFieldConfiguration","configurationError","aborted","metadataApi","FieldBasedMetadataApi","FieldBasedValidationApi","enforceConstraints","Spinner","preferredLanguage","getPreferredUserLanguage","globalLanguages","ConfigHolder","getUIConfig","preferredLanguages","lang","code","readonly","groupBy","hidePanels","hideNavigator","collapseNavigator","hideToolbar","hideHalo","hideScrollBars","persistChangesLabel","zoomRequireCtrl","leftPanelInitiallyOpen","rightPanelInitiallyOpen","ref","languages","length","onSaveDiagram","onPersistChanges","toolbar","onSaveDiagramAs","onPersistChangesAndSaveDiagram","viewOptions","zoomOptions","min","maxFit","requireCtrl","typeStyleResolver","elementTemplateResolver","linkTemplateResolver","selectLabelLanguage","propertyEditor","componentDidMount","deriveCancellationToken","parseMetadata","registerEventSources","componentWillUnmount","cancelAll","stopListening","navigationListenerUnsubscribe","unregisterEventSources","registerEventSource","unregisterEventSource","triggerEvent","debounce","key","FocusOnElement","x","y","width","height","zoomToFitRect","setSelection","CreateElement","elementModel","generateIriForModel","targets","createNewEntity","targetIri","el","linkModel","sourceId","targetId","Link","typeId","createNewLink","EditElement","changeEntityData","DeleteElement","deleteEntity","layoutImporting","Kefir","combine","fromPromise","setLayout","end","BuiltInEvents","ComponentLoaded","ComponentLoading","toProperty","navigationConfirmation","turtle","deserialize","turtleToTriples","mapErrors","WrappingError","constant","existingModels","persist","entityMetadata","fetchModel","has","elementInfo","elementIds","query","linkSettings","setLayoutByDiagram","setLayoutBySparqlQuery","setLayoutByIri","setLayoutByIris","makeSerializedDiagram","linkTypeOptions","loadingLayout","GraphBuilder","getGraphFromRDFGraph","res","performDiagramLayout","getDiagramByIri","centerTo","position","size","showConnectionsMenu","buildingGraph","createGraph","saveDiagram","addToDefaultSet","postSaving","queryParams","navigateTo","defaultProps","Component","Ontodia","selectPreferredLabel","OntodiaContextV1","parametrized","parsedQuery","SparqlUtil","parseQuery","Error","SparqlClient","prepareParsedQuery","reject","select","response","images","bindings","elem","getThumbnails","mapKeys","toObject","JSONLD_DIAGRAM_FRAME","layoutData","makeDiagramResource","jsonldDiagram","DIAGRAM_CONTEXT_URL_V1","rdfs","row","p","o","isLiteral","ldpService","LdpService","VocabPlatform","OntodiaDiagramContainer","documentLoader","JsonLd","makeDocumentLoader","overrideContexts","getResourceRequest","resource","fromRdf","format","useNativeTypes","json","ontodiaNsv0","oldDiagram","JSON","parse","diagramLayoutString","convertToSerializedDiagram","frame","createResourceRequest","stringify","maybe","Just","Iri","jsonLdDiagram","sendUpdateResourceRequest","properties","term","toLowerCase","prop","push","property","prepareQuery","prepared","setBindings","bound","dictionary","propertyIri","score","parseFloat","_NAMESPACE","s","ontodiaNsv1","SUPPORTED_PROFILES","default","OwlStatsSettings","nostats","OwlNoStatsSettings","wikidata","WikidataSettings","getEndpointUrlForRepository","getBaseUrl","sparqlProfile","dataLabelProperty","labelPropertyPattern","fieldConfigDefaults","createFieldConfiguration","linkConfigurations","createLinkConfigurations","field","xsd","anyURI","equals","xsdDatatype","fieldToLinkConfig","propertyConfigurations","createPropertyConfiguration","fieldToPropertyConfig","elementInfoQuery","effectiveSettings","OptimizingDataProvider","RDFDataProvider","parsers","CompositeDataProvider","executeSparqlQuery","optimizedQuery","optimizeAndAddPrefixes","executeSparqlConstruct","serializeQuery","err","console","warn","SparqlDataProvider","parseSelectPattern","domain","directPredicate","parseDirectPredicate","where","path","VariableRenameBinder","serializePatterns","selectPattern","queryType","patterns","simpleQuery","variables","prefixes","prefixLength","substr","predicate","isIri","pattern","triples","t","isPredicateTriple","test","object","isLabelTriple","defaultPrefix","schemaLabelProperty","fullTextSearch","prefix","queryPattern","classTreeQuery","linksInfoQuery","imageQueryPattern","linkTypesOfQuery","linkTypesStatisticsQuery","filterRefElementLinkPattern","filterTypePattern","filterAdditionalRestriction","filterElementInfoPattern","extractLabel","makeRdfExtNode","node","createNamedNode","createLiteral","construct","flatten","triple","uniqWith","isEqual","ToolbarStyles","styles","onExportPng","onExportPNG","onExportSvg","onExportSVG","onChangeLanguage","currentTarget","forceUpdate","renderSaveButton","canPersistChanges","hasUnpersistedChanges","canSaveDiagram","Dropdown","className","Button","bsStyle","saveButton","Toggle","Menu","MenuItem","href","redo","undo","HasPermission","permission","Permissions","toLdp","ButtonGroup","bsSize","group","enabled","invoke","onForceLayout","onClearAll","onZoomIn","onZoomOut","onZoomToFit","onPrint","renderLanguages","selectedLanguage","classnames","languageSelector","onChange","getUndoReduCommands","undoCommand","last","undoStack","Boolean","redoCommand","redoStack","array","formRef","finalize","onReset","initModel","isIriGeneratedByTemplate","modelEqualToSuggested","suggestIri","componentWillReceiveProps","nextProps","mapChildren","onModelUpdate","newModel","modelToSet","modifyModelsIriBySuggestion","generateSubjectByTemplate","wasIriGeneratedByTemplate","onChangeIri","e","prevState","onChangeSuggestingMode","newSuggestionMode","curModel","renderIri","style","display","marginLeft","opacity","checked","mapped","dialog","content","SemanticForm","form","onLoaded","onChanged","shouldEnforceConstraints","validate","combinedTask","domainRangeErrors","checkDomainRangeCompatibility","relatedElementsErrors","checkRelatedElements","flatMapErrors","observableToCancellablePromise","outboundLinks","typeRequest","BaseTypeClosureRequest","addAll","linkSource","findLinkSource","linkTarget","findLinkTarget","typeClosure","errors","definition","sourceTypes","hasCompatibleType","domainStr","targetTypes","range","rangeStr","CompositeValue","definitions","Immutable","List","fetchExistingEnitityState","linkTypesOf","linkCounts","foundFields","Set","outCount","add","fieldsToFetchById","toMap","fetchInitialModel","initialModel","composite","applyEventsToCompositeValue","FieldValue","isEmpty","validateWholeComposite","emptyComposite","clear","validations","fieldState","fieldId","validationTask","tryBeginValidation","zip","changes","validated","change","extractValidationErrorsFromComposite","collectedErrors","collectErrors","propertyType","linkByType","checkCardinalityAndDuplicates","constantError","foundLink","sourceOf","targetOf","formPersistence","LdpPersistence","SparqlPersistence","targetGraphIri","targetInsertGraphIri","collectEntitiesState","toFetch","after","fetchEntities","entities","tasks","fetched","entity","initials","diffAndFinalizeEntities","previousStates","currentStates","previousState","currentState","initial","newElementModel","getNewElementModel","current","debug","previous","log","computeValuePatch","isComposite","filterObjectProperties","filteredProperties","prototype","hasOwnProperty","call","batch"],"mappings":"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","file":"ontodia-35e0c7d2712048481767.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport {\n  ClassAttributes,\n  Component as ReactComponent,\n  ReactElement,\n  Children,\n  cloneElement,\n  createElement,\n} from 'react';\nimport * as Kefir from 'kefir';\nimport { debounce } from 'lodash';\nimport {\n  Workspace,\n  WorkspaceProps,\n  RDFDataProvider,\n  SparqlDataProvider,\n  SparqlDataProviderSettings,\n  CompositeDataProvider,\n  GraphBuilder,\n  Triple,\n  Dictionary,\n  ElementModel,\n  SparqlQueryMethod,\n  TemplateProps,\n  ElementTemplate,\n  LinkMarkerStyle,\n  LinkStyle,\n  LinkTemplate,\n  LinkTypeOptions,\n  ElementIri,\n  PropertyEditorOptions,\n  PropertySuggestionParams,\n  PropertyScore,\n  AuthoringState,\n  AuthoringKind,\n  AuthoredEntity,\n  AuthoredEntityContext,\n  CustomTypeStyle,\n  EventObserver,\n  SerializedDiagram,\n  makeSerializedDiagram,\n  Link,\n  IriClickEvent,\n  LabelLanguageSelector,\n  SparqlDataProviderOptions,\n  LocalizedString,\n  LinkModel,\n  LinkTypeIri,\n  CancellationToken,\n} from 'ontodia';\nimport * as URI from 'urijs';\n\nimport { BuiltInEvents, trigger, listen, registerEventSource, unregisterEventSource } from 'platform/api/events';\nimport { Cancellation, WrappingError } from 'platform/api/async';\nimport { Component } from 'platform/api/components';\nimport { Rdf, turtle } from 'platform/api/rdf';\nimport {\n  navigateToResource,\n  navigationConfirmation,\n  openResourceInNewWindow,\n  openExternalLink,\n} from 'platform/api/navigation';\nimport { isSimpleClick } from 'platform/api/navigation/components/ResourceLink';\n\nimport * as Forms from 'platform/components/forms';\nimport { CreateResourceDialog } from 'platform/components/ldp';\nimport { addToDefaultSet } from 'platform/api/services/ldp-set';\nimport { getOverlaySystem } from 'platform/components/ui/overlay';\nimport { addNotification, ErrorNotification } from 'platform/components/ui/notification';\nimport { Spinner } from 'platform/components/ui/spinner';\nimport { TemplateItem } from 'platform/components/ui/template';\nimport { isValidChild, universalChildren } from 'platform/components/utils';\nimport { getPreferredUserLanguage, selectPreferredLabel } from 'platform/api/services/language';\nimport { ConfigHolder } from 'platform/api/services/config-holder';\nimport { getLabels } from 'platform/api/services/resource-label';\nimport { componentHasType } from 'platform/components/utils';\n\nimport * as DiagramService from './data/DiagramService';\nimport { SupportedConfigName, RDF_DATA_PROVIDER_NAME, createDataProvider } from './data/OntodiaDataProvider';\nimport { RawTriple, getRdfExtGraphBySparqlQuery, makeRdfExtGraph } from './data/RdfExt';\n\nimport { Toolbar } from './Toolbar';\n\nimport { EntityForm, EntityFormProps } from './authoring/EntityForm';\nimport { FieldBasedMetadataApi } from './authoring/FieldBasedMetadataApi';\nimport { FieldBasedValidationApi } from './authoring/FieldBasedValidationApi';\nimport { FieldConfiguration, isObjectProperty } from './authoring/FieldConfigurationCommon';\nimport {\n  OntodiaFieldConfiguration,\n  OntodiaFieldConfigurationProps,\n  extractFieldConfiguration,\n} from './authoring/OntodiaFieldConfiguration';\nimport { OntodiaPersistenceResult } from './authoring/OntodiaPersistence';\nimport {\n  getEntityMetadata,\n  convertCompositeValueToElementModel,\n  convertElementModelToCompositeValue,\n} from './authoring/OntodiaPersistenceCommon';\nimport { FormBasedPersistence, FormBasedPersistenceProps } from './authoring/FormBasedPersistence';\n\nimport { deriveCancellationToken } from './AsyncAdapters';\nimport * as OntodiaEvents from './OntodiaEvents';\n\nexport interface EdgeStyle {\n  markerSource?: LinkMarkerStyle;\n  markerTarget?: LinkMarkerStyle;\n  linkStyle?: LinkStyle;\n  editable?: boolean;\n}\n\nexport interface OntodiaConfig {\n  /**\n   * Used as source id for emitted events.\n   */\n  id?: string;\n\n  /**\n   * Diagram identifier to display saved diagram.\n   */\n  diagram?: string;\n  /**\n   * SPARQL query to store data that do not exist in the database\n   */\n  provisionQuery?: string;\n  /**\n   * SPARQL query to display data on layout.\n   * If property diagram is defined, this property will be ignored.\n   */\n  query?: string;\n  /**\n   * Iri to be used as a single diagram element\n   * If property diagram or query is defined, this will be ignored.\n   */\n  iri?: string;\n  /**\n   * Elements to display on initialization\n   */\n  iris?: string[];\n\n  /**\n   * Controls if component should re-request all links from data provider when showing existing\n   * graph (via loading the diagram or executing CONSTRUCT query), if link is not found in the\n   * data, it is shown as dashed. Setting this to false speeds up initialization and the links on\n   * the diagram will be shown exactly as they were when the diagram was saved.\n   * @default true\n   */\n  requestLinksOnInit?: boolean;\n\n  /**\n   * Sparql SELECT query to get images of elements.\n   *\n   * Parametrized with `VALUES(?element) {...}` and should contains the following bindings:\n   *  - `?element`: IRI of element on graph;\n   *  - `?image`: image of the element.\n   */\n  imageQuery?: string;\n  /**\n   * Array of link types to get images of elements.\n   * If property imageQuery is defined, this property will be ignored.\n   */\n  imageIris?: string[];\n  /**\n   * Configs are predefined configs for particular data sets.\n   * Config specifies data provider to run and elements customizations to apply.\n   * Later customizations could be brought to the level of component configuration if needed.\n   * @default 'default'\n   */\n  settings?: SupportedConfigName;\n  /**\n   * Sparql data provider settings to override default settings.\n   * See definition of `SparqlDataProviderSettings`.\n   */\n  providerSettings?: SparqlDataProviderSettings;\n  /**\n   * Additional turtle data that will be parsed and attached to the saved diagram.\n   */\n  metadata?: string;\n  /**\n   * URI to navigate after diagram created.\n   * Newly created diagram IRI will be appended as `diagram` query parameter.\n   */\n  navigateTo?: string;\n  /**\n   * Query parameters that will be appended to URL after diagram created.\n   */\n  queryParams?: { [key: string]: string };\n  /**\n   * When true saving the diagram is disabled and side panels are collapsed by default.\n   */\n  readonly?: boolean;\n\n  /**\n   * `true` if persisted component should be added to the default set of the current user\n   *\n   * @default false\n   */\n  addToDefaultSet?: boolean;\n\n  /**\n   * Custom templates of the elements\n   */\n  nodeTemplates?: { [type: string]: string };\n\n  /**\n   * Default custom template of the elements\n   */\n  defaultNodeTemplate?: string;\n\n  /**\n   * Custom images and colors of the elements\n   */\n  nodeStyles?: { [type: string]: { image: string; color: string } };\n\n  /**\n   * Custom styles of the links\n   */\n  edgeStyles?: { [linkTypeId: string]: EdgeStyle };\n\n  /**\n   * Default custom style of the links\n   */\n  defaultEdgeStyle?: EdgeStyle;\n\n  /**\n   * Links to group the nodes\n   */\n  groupBy?: { linkType: string; linkDirection: 'in' | 'out' }[];\n\n  /**\n   * Ids of repositories\n   */\n  repositories?: string[];\n\n  /**\n   * Custom options for the links\n   */\n  linkSettings?: ReadonlyArray<{\n    property: string;\n    visible: boolean;\n    showLabel?: boolean;\n  }>;\n\n  /**\n   * Disable side panels\n   */\n  hidePanels?: boolean;\n\n  /**\n   * Disable navigator panel\n   */\n  hideNavigator?: boolean;\n\n  /**\n   * Collapse navigator panel by default\n   */\n  collapseNavigator?: boolean;\n\n  /**\n   * Disable toolbar\n   */\n  hideToolbar?: boolean;\n\n  /**\n   * Set if zoom operation need ctrl or not\n   */\n  zoomRequireCtrl?: boolean;\n\n  /**\n   * Disable scrollbars\n   */\n  hideScrollBars?: boolean;\n\n  /**\n   * If true zoomToFit to call on each addElements event.\n   */\n  autoZoom?: boolean;\n\n  /**\n   * Disable navigation\n   */\n  hideHalo?: boolean;\n\n  /**\n   * Sparql query to get suggested properties of elements.\n   */\n  propertySuggestionQuery?: string;\n\n  /**\n   * Allow blank nodes in navigation queries. Significantly increases complexity of the queries\n   * and may lead to unexpected query execution plans and timeouts in triple stores.\n   *\n   * @default false\n   */\n  acceptBlankNodes?: boolean;\n\n  /**\n   * Custom label for \"Save diagram\" button.\n   */\n  saveDiagramLabel?: string;\n\n  /**\n   * Custom label for \"Save data\" button.\n   */\n  persistChangesLabel?: string;\n\n  /**\n   * Sparql query to find a relationship between two elements.\n   */\n  findRelationshipQuery?: string;\n\n  /**\n   * Disable navigation confirmation dialog, resource links will be followed without confirmation.\n   */\n  hideNavigationConfirmation?: boolean;\n\n  /**\n   * Controls whether Ontodia should navigate to a newly saved diagram.\n   */\n  postSaving?: 'navigate' | 'none';\n\n\n  /*\n   * If true left panel is initially open.\n   */\n  leftPanelInitiallyOpen?: boolean;\n\n  /*\n   * If true right panel is initially open.\n   */\n  rightPanelInitiallyOpen?: boolean;\n}\n\nexport type OntodiaPersistenceMode = FormBasedPersistenceProps;\n\nexport interface OntodiaProps extends OntodiaConfig, ClassAttributes<Ontodia> {\n  onLoadWorkspace?: (workspace: Workspace) => void;\n}\n\ninterface State {\n  readonly label?: string;\n  readonly fieldConfiguration?: FieldConfiguration;\n  readonly configurationError?: any;\n  readonly diagramIri?: string;\n  readonly loading: boolean;\n}\n\nconst DEFAULT_FACTORY = {\n  createWorkspace: (componentProps, workspaceProps) => createElement(Workspace, workspaceProps),\n  createToolbar: (componentProps, toolbarProps) => createElement(Toolbar, toolbarProps),\n  onNewDigaramInitialized: (componentProps, workspace: Workspace) => {\n    workspace.forceLayout();\n    workspace.zoomToFit();\n  },\n  getPersistence: (mode) => {\n    return new FormBasedPersistence(mode);\n  },\n};\n\nconst DEBOUNCE_DELAY = 300;\n\n/**\n * This component will render Ontodia diagram,\n * load and save it from VocabPlatform.OntodiaDiagramContainer.\n * This component _MUST_ be wrapped in HTML element with defined height.\n *\n * Ontodia will listen to `SemanticContext` and will load and save diagram layouts into specified\n * repository. Hovewer, Data will always be loaded from default repository.\n *\n * @example\n * Display component with empty canvas:\n * ```\n * <ontodia></ontodia>\n * ```\n *\n * Load diagram from resource and display it:\n * ```\n * <ontodia diagram=[[this]]></ontodia>\n * ```\n *\n * Display diagram with result elements and links created by construct query:\n * ```\n * <ontodia\n *   query='\n *     CONSTRUCT { <[[this.value]]> ?p ?o }\n *     WHERE {\n *       <[[this.value]]> ?p ?o\n *       FILTER (ISIRI(?o))\n *     } LIMIT 50\n * '></ontodia>\n * ```\n *\n * Display diagram with only one element to start with\n * ```\n * <ontodia iri=\"http://www.cidoc-crm.org/cidoc-crm/E22_Man-Made_Object\"></ontodia>\n * ```\n *\n * Specify a property to display image for elements:\n * ```\n * <ontodia\n * query='\n *   CONSTRUCT {\n *     ?inst ?propType1 ?propValue1.\n *   } WHERE {\n *     BIND (<http://www.cidoc-crm.org/cidoc-crm/E22_Man-Made_Object> as ?inst)\n *     OPTIONAL {?propValue1 ?propType1 ?inst.  FILTER(isURI(?propValue1)). }\n *   } LIMIT 100\n * ' image-iris='[\"http://collection.britishmuseum.org/id/ontology/PX_has_main_representation\"]'>\n * </ontodia>\n * ```\n *\n * Specifying a query to resolve image URLs:\n * ```\n * <ontodia\n * query='\n *   CONSTRUCT {\n *     ?inst ?propType1 ?propValue1.\n *   } WHERE {\n *     BIND (<http://www.cidoc-crm.org/cidoc-crm/E22_Man-Made_Object> as ?inst)\n *     OPTIONAL {?propValue1 ?propType1 ?inst.  FILTER(isURI(?propValue1)). }\n *   } LIMIT 100\n * '\n * image-query='\n *   SELECT ?element ?image {\n *     ?element <http://collection.britishmuseum.org/id/ontology/PX_has_main_representation> ?image\n *   }\n * '\n * ></ontodia>\n * ```\n *\n * Using 'setting' property to apply combination of data provider and elements customization\n * ```\n * <ontodia image-query='\n *   PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n *   SELECT ?element ?image {\n *     ?element wdt:P18|wdt:P41|wdt:P154 ?img.\n *     BIND(CONCAT(\n *       \"https://commons.wikimedia.org/w/thumb.php?f=\",\n *       STRAFTER(STR(?img), \"Special:FilePath/\"),\n *       \"&w=200\"\n *     ) as ?image)\n *   }' settings='wikidata'>\n * </ontodia>\n * ```\n */\nexport class Ontodia extends Component<OntodiaProps, State> {\n  static defaultProps: Partial<OntodiaProps> = {\n    navigateTo: 'http://www.researchspace.org/resource/assets/OntodiaView',\n    queryParams: {},\n    addToDefaultSet: false,\n    nodeTemplates: {},\n    edgeStyles: {},\n    // disable blank nodes support to prevent too complex queries to be generated by default\n    acceptBlankNodes: false,\n    postSaving: 'navigate',\n  };\n\n  private readonly cancellation = new Cancellation();\n  private readonly listener = new EventObserver();\n\n  private metadataApi: FieldBasedMetadataApi;\n  private validationApi: FieldBasedValidationApi;\n  private parsedMetadata: Kefir.Property<ReadonlyArray<Rdf.Triple>>;\n\n  workspace: Workspace;\n  private dataProvider: SparqlDataProvider | CompositeDataProvider;\n  private nodeTemplates: { [type: string]: ElementTemplate } = {};\n  private defaultNodeTemplate: ElementTemplate;\n\n  private navigationListenerUnsubscribe?: () => void;\n\n  constructor(props: OntodiaProps, context: any) {\n    super(props, context);\n\n    this.state = {\n      diagramIri: props.diagram,\n      loading: true,\n    };\n  }\n\n  componentDidUpdate(prevProps: OntodiaProps) {\n    const { diagram } = this.props;\n    if (diagram !== prevProps.diagram) {\n      this.setState({ diagramIri: diagram });\n    }\n  }\n\n  private async loadFieldConfiguration(ct: CancellationToken) {\n    const fieldConfigElement = Children.toArray(this.props.children).find((child) =>\n      componentHasType(child, OntodiaFieldConfiguration)\n    ) as ReactElement<OntodiaFieldConfigurationProps>;\n\n    let fieldConfiguration: FieldConfiguration | undefined;\n    let configurationError: unknown;\n    try {\n      fieldConfiguration = await extractFieldConfiguration(\n        fieldConfigElement ? fieldConfigElement.props : undefined,\n        ct\n      );\n    } catch (err) {\n      // err also could be a CancellationError\n      configurationError = err;\n    }\n\n    if (!ct.aborted) {\n      if (fieldConfiguration) {\n        if (fieldConfiguration.authoringMode) {\n          this.metadataApi = new FieldBasedMetadataApi(fieldConfiguration.metadata);\n          this.validationApi =\n            new FieldBasedValidationApi(\n              fieldConfiguration.metadata, fieldConfiguration.enforceConstraints\n            );\n        }\n        this.setState({ fieldConfiguration });\n      } else {\n        this.setState({ configurationError });\n      }\n    }\n  }\n\n  render() {\n    if (this.state.configurationError) {\n      return createElement(ErrorNotification, { errorMessage: this.state.configurationError });\n    } else if (this.state.loading) {\n      return createElement(Spinner, {});\n    }\n\n    const preferredLanguage = getPreferredUserLanguage();\n    const globalLanguages = ConfigHolder.getUIConfig().preferredLanguages.map((lang) => {\n      return { code: lang, label: lang };\n    });\n\n    const {\n      readonly,\n      groupBy,\n      hidePanels,\n      hideNavigator,\n      collapseNavigator,\n      hideToolbar,\n      hideHalo,\n      hideScrollBars,\n      saveDiagramLabel,\n      persistChangesLabel,\n      propertySuggestionQuery,\n      zoomRequireCtrl,\n      nodeStyles,\n      leftPanelInitiallyOpen,\n      rightPanelInitiallyOpen,\n    } = this.props;\n    const { fieldConfiguration } = this.state;\n\n    const { createWorkspace, createToolbar } = DEFAULT_FACTORY;\n    const props: WorkspaceProps & ClassAttributes<Workspace> = {\n      ref: this.initWorkspace,\n      languages: globalLanguages.length > 0 ? globalLanguages : [{ code: preferredLanguage, label: preferredLanguage }],\n      language: preferredLanguage,\n      onSaveDiagram: readonly ? undefined : this.onSaveDiagramPressed,\n      onPersistChanges: fieldConfiguration.authoringMode ? this.onPersistAuthoredChanges : undefined,\n      leftPanelInitiallyOpen: readonly ? false : leftPanelInitiallyOpen,\n      rightPanelInitiallyOpen: readonly ? false : rightPanelInitiallyOpen,\n      toolbar: createToolbar(this.props, {\n        saveDiagramLabel,\n        persistChangesLabel,\n        getWorkspace: this.getWorkspace,\n        onSaveDiagramAs: () => this.openSaveModal(),\n        onPersistChangesAndSaveDiagram: () => this.onPersistChangesAndSaveDiagram(),\n      }),\n      metadataApi: this.metadataApi,\n      validationApi: this.validationApi,\n      viewOptions: {\n        onIriClick: this.onIriClick,\n        groupBy,\n        suggestProperties: propertySuggestionQuery ? this.suggestProperties : undefined,\n      },\n      zoomOptions: {\n        min: 0.002,\n        maxFit: 1,\n        requireCtrl: zoomRequireCtrl,\n      },\n      hidePanels,\n      hideToolbar,\n      hideScrollBars,\n      hideHalo,\n      hideNavigator,\n      collapseNavigator,\n      typeStyleResolver: nodeStyles ? this.resolveNodeStyles : undefined,\n      elementTemplateResolver: this.resolveElementTemplate,\n      linkTemplateResolver: this.resolveLinkTemplate,\n      selectLabelLanguage,\n      propertyEditor: this.renderPropertyEditor,\n    };\n    return createWorkspace(this.props, props);\n  }\n\n  componentDidMount() {\n    this.loadFieldConfiguration(deriveCancellationToken(this.cancellation))\n      .then(() => this.setState({loading: false}));\n\n    this.parsedMetadata = this.parseMetadata();\n    this.prepareElementTemplates();\n\n    this.registerEventSources();\n  }\n\n  componentWillUnmount() {\n    this.cancellation.cancelAll();\n    this.listener.stopListening();\n    if (this.navigationListenerUnsubscribe) {\n      this.navigationListenerUnsubscribe();\n    }\n\n    this.unregisterEventSources();\n  }\n\n  private registerEventSources() {\n    const { id } = this.props;\n    registerEventSource({\n      source: id,\n      eventType: OntodiaEvents.DiagramChanged,\n    });\n    registerEventSource({\n      source: id,\n      eventType: OntodiaEvents.DiagramIsDirty,\n    });\n  }\n\n  private unregisterEventSources() {\n    const { id } = this.props;\n    unregisterEventSource({\n      source: id,\n      eventType: OntodiaEvents.DiagramChanged,\n    });\n    unregisterEventSource({\n      source: id,\n      eventType: OntodiaEvents.DiagramIsDirty,\n    });\n  }\n\n  private getWorkspace = () => this.workspace;\n\n  private onIriClick = ({ iri: elementIri, clickIntent, originalEvent }: IriClickEvent) => {\n    const iri = Rdf.iri(elementIri);\n    if (clickIntent === 'jumpToEntity' || clickIntent === 'openEntityIri') {\n      if (isSimpleClick(originalEvent)) {\n        navigateToResource(iri).onEnd(() => {\n          /* nothing */\n        });\n      } else {\n        openResourceInNewWindow(iri);\n      }\n    } else {\n      const { target = '_blank' } = originalEvent.target as HTMLAnchorElement;\n      openExternalLink(URI(iri.value), target).onEnd(() => {\n        /* nothing */\n      });\n    }\n  };\n\n  private getRepositories = (): string[] => {\n    const { repository = 'default' } = this.context.semanticContext;\n    const { repositories = [repository] } = this.props;\n\n    return repositories;\n  };\n\n  private prepareImages = (elementsInfo: Dictionary<ElementModel>) => {\n    const { imageQuery, imageIris } = this.props;\n\n    if (!imageQuery && !imageIris) {\n      return DiagramService.fetchThumbnails(elementsInfo, this.context.semanticContext);\n    } else if (imageQuery) {\n      return DiagramService.prepareImages(elementsInfo, imageQuery);\n    }\n  };\n\n  private prepareLabels = (resources: Set<string>): Promise<Map<string, LocalizedString[]>> => {\n    const iris = Array.from(resources, Rdf.iri);\n    const context = this.context.semanticContext;\n    return getLabels(iris, { context })\n      .map((labels) => {\n        const result = new Map<string, LocalizedString[]>();\n        labels.forEach((label, iri) => {\n          const literal: LocalizedString = { value: label, language: '' };\n          result.set(iri.value, [literal]);\n        });\n        return result;\n      })\n      .toPromise();\n  };\n\n  /**\n   * Initializes workspace\n   */\n  private initWorkspace = (workspace: Workspace) => {\n    if (workspace) {\n      const {\n        onLoadWorkspace,\n        imageIris,\n        provisionQuery,\n        acceptBlankNodes,\n        settings: configName,\n        autoZoom,\n        hideNavigationConfirmation,\n        imageQuery,\n      } = this.props;\n      const { fieldConfiguration } = this.state;\n\n      this.workspace = workspace;\n      if (onLoadWorkspace) {\n        onLoadWorkspace(workspace);\n      }\n\n      // if there is no imageIris or only imageQuery is provided then\n      // then we resolve thumbnail through the platform thumbnail service, otherwise\n      // we use default thumbnail resolution mechanism from ontodia\n      const prepareImages = (!imageIris && !imageQuery) || imageQuery ? this.prepareImages : undefined;\n      const options: SparqlDataProviderOptions = {\n        endpointUrl: '',\n        prepareImages: prepareImages,\n        prepareLabels: this.prepareLabels,\n        imagePropertyUris: imageIris,\n        queryMethod: SparqlQueryMethod.POST,\n        acceptBlankNodes: acceptBlankNodes,\n      };\n      const repositories = this.getRepositories();\n      this.dataProvider = createDataProvider({\n        configName,\n        options,\n        repositories,\n        createRDFStorage: provisionQuery !== undefined,\n        fields: fieldConfiguration.allFields,\n        settings: this.props.providerSettings,\n        forceFields: fieldConfiguration.datatypeFields,\n      });\n      if (this.validationApi) {\n        this.validationApi.setDataProvider(this.dataProvider);\n      }\n\n      this.importLayout();\n\n      if (autoZoom) {\n        this.listener.listen(this.workspace.getEditor().events, 'addElements', () => {\n          this.workspace.zoomToFit();\n        });\n      }\n\n      if (!hideNavigationConfirmation) {\n        this.registerNavigationConfirmation();\n      }\n\n      this.subscribeOnEvents();\n      if (fieldConfiguration.authoringMode) {\n        this.subscribeOnAuthoringEvents();\n      }\n    }\n  };\n\n  private subscribeOnEvents() {\n    const { id } = this.props;\n    const model = this.workspace.getModel();\n    const editor = this.workspace.getEditor();\n\n    const triggerEvent = debounce(() => {\n      trigger({\n        source: id,\n        eventType: OntodiaEvents.DiagramChanged,\n        data: {\n          model: model,\n          authoringState: editor.authoringState,\n          temporaryState: editor.temporaryState,\n        },\n      });\n    }, DEBOUNCE_DELAY);\n\n    this.listener.listen(model.events, 'changeCells', triggerEvent);\n    this.listener.listen(model.events, 'elementEvent', (event) => {\n      if (event.key === 'changeData') {\n        triggerEvent();\n      }\n    });\n    this.listener.listen(editor.events, 'changeAuthoringState', triggerEvent);\n    this.listener.listen(editor.events, 'changeTemporaryState', triggerEvent);\n\n    this.cancellation\n      .map(\n        listen({\n          eventType: OntodiaEvents.FocusOnElement,\n          target: id,\n        })\n      )\n      .observe({\n        value: ({ data }) => {\n          const element = model.elements.find(({ iri }) => iri === data.iri);\n          if (element) {\n            const { x, y } = element.position;\n            const { width, height } = element.size;\n            this.workspace.zoomToFitRect({ x, y, width, height });\n            editor.setSelection([element]);\n          }\n        },\n      });\n  }\n\n  private subscribeOnAuthoringEvents() {\n    const { id } = this.props;\n    const editor = this.workspace.getEditor();\n    this.cancellation\n      .map(\n        listen({\n          eventType: OntodiaEvents.CreateElement,\n          target: id,\n        })\n      )\n      .map((event): typeof event.data & { elementModel: ElementModel } => {\n        const elementData = event.data.elementData as ElementModel;\n        return {\n          ...event.data,\n          elementModel: {\n            ...elementData,\n            id: this.metadataApi.generateIriForModel(elementData),\n          },\n        };\n      })\n      .observe({\n        value: ({ elementModel, targets }) => {\n          const element = editor.createNewEntity({ elementModel: elementModel as ElementModel });\n          targets.forEach(({ targetIri, linkTypeId }) => {\n            const target = editor.model.elements.find((el) => el.iri === targetIri);\n            if (target) {\n              const linkModel: LinkModel = {\n                linkTypeId: linkTypeId as LinkTypeIri,\n                sourceId: element.iri,\n                targetId: target.iri,\n              };\n              const link = new Link({\n                typeId: linkTypeId as LinkTypeIri,\n                sourceId: element.id,\n                targetId: target.id,\n                data: linkModel,\n              });\n              editor.createNewLink({ link });\n            }\n          });\n        },\n      });\n\n    this.cancellation\n      .map(\n        listen({\n          eventType: OntodiaEvents.EditElement,\n          target: id,\n        })\n      )\n      .observe({\n        value: (event) => {\n          const { targetIri, elementData } = event.data;\n          editor.changeEntityData(targetIri as ElementIri, elementData as ElementModel);\n        },\n      });\n\n    this.cancellation\n      .map(\n        listen({\n          eventType: OntodiaEvents.DeleteElement,\n          target: id,\n        })\n      )\n      .observe({\n        value: (event) => {\n          editor.deleteEntity(event.data.iri as ElementIri);\n        },\n      });\n  }\n\n  private importLayout() {\n    const layoutImporting = Kefir.combine([Kefir.fromPromise(this.setLayout()), this.parsedMetadata]);\n    this.cancellation.map(layoutImporting).observe({\n      error: (configurationError) => this.setState({ configurationError }),\n      end: () => {\n        if (this.props.id) {\n          trigger({ eventType: BuiltInEvents.ComponentLoaded, source: this.props.id });\n        }\n      },\n    });\n    if (this.props.id) {\n      trigger({\n        eventType: BuiltInEvents.ComponentLoading,\n        source: this.props.id,\n        data: layoutImporting.toProperty(),\n      });\n    }\n  }\n\n  private registerNavigationConfirmation() {\n    const model = this.workspace.getModel();\n    this.listener.listen(model.history.events, 'historyChanged', ({ hasChanges }) => {\n      if (hasChanges && this.props.id) {\n        trigger({\n          eventType: OntodiaEvents.DiagramIsDirty,\n          source: this.props.id,\n          data: { hasChanges },\n        });\n      }\n      if (hasChanges && !this.navigationListenerUnsubscribe) {\n        const message = 'Changes you made to the diagram will not be saved.';\n        this.navigationListenerUnsubscribe = navigationConfirmation(message);\n      } else if (!hasChanges && this.navigationListenerUnsubscribe) {\n        this.navigationListenerUnsubscribe();\n        this.navigationListenerUnsubscribe = undefined;\n      }\n    });\n  }\n\n  private parseMetadata(): Kefir.Property<ReadonlyArray<Rdf.Triple>> {\n    const { metadata } = this.props;\n    if (metadata) {\n      return this.cancellation.map(\n        turtle.deserialize\n          .turtleToTriples(this.props.metadata)\n          .mapErrors((error) => new WrappingError(`Invalid metadata format`, error))\n      );\n    } else {\n      return Kefir.constant([]);\n    }\n  }\n\n  private onSaveDiagramPressed = () => {\n    const { diagramIri } = this.state;\n    if (diagramIri) {\n      const layout = this.workspace.getModel().exportLayout();\n      const { label } = this.state;\n      this.cancellation\n        .map(\n          this.parsedMetadata\n            .flatMap((metadata) => DiagramService.updateDiagram(diagramIri, layout, label, metadata))\n            .map((results) => {\n              trigger({\n                eventType: OntodiaEvents.DiagramSaved,\n                source: this.props.id,\n                data: { resourceIri: this.state.diagramIri },\n              });\n              trigger({\n                eventType: OntodiaEvents.DiagramIsDirty,\n                source: this.props.id,\n                data: { hasChanges: false },\n              });\n              return results;\n            })\n        )\n        .observe({\n          value: () => {\n            this.workspace.getModel().history.reset();\n            addNotification({\n              level: 'success',\n              message: `Saved diagram ${label}`,\n            });\n          },\n          error: (error) =>\n            addNotification(\n              {\n                level: 'error',\n                message: `Error saving diagram ${label}`,\n              },\n              error\n            ),\n        });\n    } else {\n      this.openSaveModal();\n    }\n  };\n\n  private onPersistAuthoredChanges = () => {\n    this.workspace.showWaitIndicatorWhile(this.persistAuthoredChanges());\n  };\n\n  private onPersistChangesAndSaveDiagram() {\n    this.workspace.showWaitIndicatorWhile(this.persistAuthoredChanges().then(() => this.onSaveDiagramPressed()));\n  }\n\n  private persistAuthoredChanges(): Promise<void> {\n    const { fieldConfiguration } = this.state;\n    const persistence = makePersistenceFromConfig(fieldConfiguration.persistence);\n    const model = this.workspace.getModel();\n    const editor = this.workspace.getEditor();\n\n    const existingModels = new Map<ElementIri, ElementModel>();\n    model.elements.forEach((element) => existingModels.set(element.iri, element.data));\n\n    const fetchModel = (iri: ElementIri): Kefir.Property<ElementModel> => {\n      if (existingModels.has(iri)) {\n        return Kefir.constant(existingModels.get(iri));\n      }\n      return Kefir.fromPromise(\n        model.dataProvider.elementInfo({ elementIds: [iri] }).then((result) => result[iri])\n      ).toProperty();\n    };\n\n    return persistence\n      .persist({\n        entityMetadata: fieldConfiguration.metadata,\n        state: editor.authoringState,\n        fetchModel,\n      })\n      .map(this.onChangesPersisted)\n      .toPromise();\n  }\n\n  private onChangesPersisted = (result: OntodiaPersistenceResult) => {\n    const model = this.workspace.getModel();\n    const editor = this.workspace.getEditor();\n\n    for (const element of [...model.elements]) {\n      const changed = result.finalizedEntities.get(element.iri);\n      if (changed) {\n        element.setData(changed);\n      } else if (changed === null) {\n        model.removeElement(element.id);\n      }\n    }\n\n    for (const link of [...model.links]) {\n      const event = editor.authoringState.links.get(link.data);\n      if (event && event.deleted) {\n        model.removeLink(link.id);\n      }\n    }\n\n    editor.setAuthoringState(AuthoringState.empty);\n    editor.cancelSelection();\n    model.history.reset();\n\n    trigger({\n      source: this.props.id,\n      eventType: OntodiaEvents.DiagramChanged,\n      data: {\n        model: model,\n        authoringState: editor.authoringState,\n        temporaryState: editor.temporaryState,\n      },\n    });\n  };\n\n  /**\n   * Set diagram layout\n   */\n  private setLayout(): Promise<void> {\n    return this.importProvisionData()\n      .then(() => {\n        const { query, iri, linkSettings, iris } = this.props;\n        const { diagramIri } = this.state;\n\n        if (diagramIri) {\n          return this.setLayoutByDiagram(diagramIri);\n        } else if (query) {\n          return this.setLayoutBySparqlQuery(query);\n        } else if (iri) {\n          return this.setLayoutByIri(iri);\n        } else if (iris) {\n          return this.setLayoutByIris(iris);\n        } else {\n          return this.importModelLayout({\n            preloadedElements: {},\n            diagram: makeSerializedDiagram({\n              linkTypeOptions: linkSettings as ReadonlyArray<LinkTypeOptions>,\n            }),\n          });\n        }\n      })\n      .then(() => {\n        this.workspace.getModel().history.reset();\n      });\n  }\n\n  /**\n   * Sets diagram layout by sparql query\n   */\n  private setLayoutBySparqlQuery(query: string): Promise<void> {\n    const { onNewDigaramInitialized: performDiagramLayout } = DEFAULT_FACTORY;\n    const repositories = this.getRepositories();\n    const loadingLayout = getRdfExtGraphBySparqlQuery(query, repositories).then((graph) => {\n      const layoutProvider = new GraphBuilder(this.dataProvider);\n      return layoutProvider.getGraphFromRDFGraph(graph as Triple[]);\n    });\n    this.workspace.showWaitIndicatorWhile(loadingLayout);\n\n    return loadingLayout\n      .then((res) =>\n        this.importModelLayout({\n          preloadedElements: res.preloadedElements,\n          diagram: res.diagram,\n        })\n      )\n      .then(() => {\n        performDiagramLayout(this.props, this.workspace);\n      });\n  }\n\n  private importProvisionData = (): Promise<void> => {\n    const { provisionQuery } = this.props;\n\n    if (!provisionQuery) {\n      return Promise.resolve();\n    }\n\n    const repositories = this.getRepositories();\n\n    return getRdfExtGraphBySparqlQuery(provisionQuery, repositories).then((graph) =>\n      this.addGraphToRDFDataProvider(graph)\n    );\n  };\n\n  private addGraphToRDFDataProvider = (graph: RawTriple[]) => {\n    const dataProviders = (this.dataProvider as CompositeDataProvider).dataProviders;\n    let rdfDataProvider: RDFDataProvider;\n\n    for (const { name, dataProvider } of dataProviders) {\n      if (name !== RDF_DATA_PROVIDER_NAME) {\n        continue;\n      }\n\n      rdfDataProvider = dataProvider as RDFDataProvider;\n    }\n\n    if (rdfDataProvider) {\n      rdfDataProvider.addGraph(makeRdfExtGraph(graph) as object);\n    }\n  };\n\n  /**\n   * Sets diagram layout by diagram id\n   */\n  private setLayoutByDiagram(diagram: string): Promise<void> {\n    const loadingLayout = DiagramService.getDiagramByIri(diagram, { repository: 'assets' });\n    this.workspace.showWaitIndicatorWhile(loadingLayout);\n\n    return loadingLayout\n      .then((res) => {\n        this.setState({ label: res.label });\n        return this.importModelLayout({\n          diagram: res.diagram,\n        });\n      })\n      .then(() => {\n        this.workspace.zoomToFit();\n      });\n  }\n\n  private setLayoutByIri(iri: string): Promise<void> {\n    return this.setLayoutByIris([iri]).then(() => {\n      const editor = this.workspace.getEditor();\n      const element = editor.model.elements.find(({ data }) => data.id === iri);\n      if (element) {\n        // shift canvas to the right to encompass newly opened connections menu\n        this.workspace.centerTo({\n          x: element.position.x + element.size.width / 2 + 500,\n          y: element.position.y + element.size.height / 2,\n        });\n        editor.showConnectionsMenu(element);\n      }\n    });\n  }\n  private setLayoutByIris(iris: string[]): Promise<void> {\n    const { onNewDigaramInitialized: performDiagramLayout } = DEFAULT_FACTORY;\n    const layoutProvider = new GraphBuilder(this.dataProvider);\n    const buildingGraph = layoutProvider.createGraph({\n      elementIds: iris.map((iri) => iri as ElementIri),\n      links: [],\n    });\n    this.workspace.showWaitIndicatorWhile(buildingGraph);\n\n    return buildingGraph.then((res) =>\n      this.importModelLayout({\n        preloadedElements: res.preloadedElements,\n        diagram: {\n          ...res.diagram,\n          linkTypeOptions: this.props.linkSettings as ReadonlyArray<LinkTypeOptions>,\n        },\n      }).then(() => {\n        performDiagramLayout(this.props, this.workspace);\n      })\n    );\n  }\n\n  /**\n   * Imports layout to diagram model\n   */\n  private importModelLayout = (layout?: {\n    preloadedElements?: Dictionary<ElementModel>;\n    diagram?: SerializedDiagram;\n  }): Promise<void> => {\n    const validateLinks = this.props.requestLinksOnInit === undefined ? true : this.props.requestLinksOnInit;\n    const model = this.workspace.getModel(),\n      params = layout || {};\n    return model.importLayout({\n      dataProvider: this.dataProvider,\n      preloadedElements: params.preloadedElements || {},\n      diagram: params.diagram,\n      validateLinks: validateLinks,\n    });\n  };\n\n  /**\n   * Opens save modal\n   */\n  private openSaveModal = (): void => {\n    const dialogRef = 'create-new-resource';\n    const layout = this.workspace.getModel().exportLayout();\n\n    getOverlaySystem().show(\n      dialogRef,\n      createElement(CreateResourceDialog, {\n        onSave: (label) => this.onSaveModalSubmit(label, layout),\n        onHide: () => getOverlaySystem().hide(dialogRef),\n        show: true,\n        title: this.props.saveDiagramLabel || 'Save Ontodia diagram',\n        placeholder: 'Enter diagram name',\n      })\n    );\n  };\n\n  private renderPropertyEditor = (options: PropertyEditorOptions) => {\n    const { fieldConfiguration } = this.state;\n    const metadata = getEntityMetadata(options.elementData, fieldConfiguration.metadata);\n    const authoringState = this.workspace.getEditor().authoringState;\n\n    if (metadata) {\n      const rawModel = convertElementModelToCompositeValue(options.elementData, metadata);\n      const elementState = authoringState.elements.get(rawModel.subject.value as ElementIri);\n\n      let isNewElement = false;\n      let elementNewIri: ElementIri | undefined;\n      if (elementState && elementState.type === AuthoringKind.ChangeElement) {\n        isNewElement = !elementState.before;\n        elementNewIri = elementState.newIri;\n      }\n\n      const model: Forms.CompositeValue = {\n        ...rawModel,\n        subject: typeof elementNewIri === 'string' ? Rdf.iri(elementNewIri) : rawModel.subject,\n      };\n\n      const persistence = makePersistenceFromConfig(fieldConfiguration.persistence);\n      const props: EntityFormProps = {\n        acceptIriAuthoring: isNewElement || persistence.supportsIriEditing,\n        fields: metadata.fieldByIri.toArray(),\n        newSubjectTemplate: metadata.newSubjectTemplate,\n        model,\n        onSubmit: (newData) => {\n          const editedModel = convertCompositeValueToElementModel(newData, metadata);\n          options.onSubmit(editedModel);\n        },\n        onCancel: () => options.onCancel && options.onCancel(),\n      };\n      const formBody =\n        metadata.formChildren ||\n        Forms.generateFormFromFields({\n          fields: metadata.fields.filter((f) => !isObjectProperty(f, metadata)),\n          overrides: fieldConfiguration.inputOverrides,\n        });\n      return createElement(EntityForm, props, formBody);\n    } else {\n      return createElement(ErrorNotification, {\n        errorMessage:\n          `<ontodia-entity-metadata> is not defined for the ` + `'${options.elementData.types.join(', ')}' types`,\n      });\n    }\n  };\n\n  private onSaveModalSubmit(label: string, layout: SerializedDiagram): Kefir.Property<{}> {\n    this.setState({ label });\n    return this.cancellation\n      .map(this.parsedMetadata.flatMap((metadata) => DiagramService.saveDiagram(label, layout, metadata)))\n      .flatMap((res) => (this.props.addToDefaultSet ? addToDefaultSet(res, this.props.id) : Kefir.constant(res)))\n      .flatMap((diagramIri) => {\n        this.workspace.getModel().history.reset();\n        if (this.props.postSaving === 'navigate') {\n          const props = { ...this.props.queryParams, diagram: diagramIri.value };\n          return navigateToResource(Rdf.iri(this.props.navigateTo), props);\n        }\n        this.setState({ diagramIri: diagramIri.value });\n        return Kefir.constant(undefined);\n      })\n      .map((results) => {\n        trigger({\n          eventType: OntodiaEvents.DiagramSaved,\n          source: this.props.id,\n          data: { resourceIri: this.state.diagramIri },\n        });\n        trigger({\n          eventType: OntodiaEvents.DiagramIsDirty,\n          source: this.props.id,\n          data: { hasChanges: false },\n        });\n        return results;\n      })\n      .mapErrors((error) => {\n        addNotification({ level: 'error', message: `Error saving diagram ${label}` }, error);\n        return error;\n      })\n      .toProperty();\n  }\n\n  private resolveElementTemplate = (types: string[]): ElementTemplate | undefined => {\n    for (let type of types) {\n      const template = this.nodeTemplates[type];\n      if (template) {\n        return template;\n      }\n    }\n\n    return this.defaultNodeTemplate;\n  };\n\n  private prepareElementTemplates = () => {\n    const { nodeTemplates, defaultNodeTemplate } = this.props;\n\n    Object.keys(nodeTemplates).forEach((type) => {\n      const template = nodeTemplates[type];\n      this.nodeTemplates[type] = this.getElementTemplate(template);\n    });\n\n    if (defaultNodeTemplate) {\n      this.defaultNodeTemplate = this.getElementTemplate(defaultNodeTemplate);\n    }\n  };\n\n  private getElementTemplate = (template: string): ElementTemplate => {\n    const inAuthoringMode = () => this.state.fieldConfiguration.authoringMode;\n    return class extends ReactComponent<TemplateProps, {}> {\n      render() {\n        if (inAuthoringMode()) {\n          return createElement(AuthoredEntity, {\n            templateProps: this.props,\n            children: (context: AuthoredEntityContext) => {\n              return createElement(TemplateItem, {\n                template: { source: template, options: this.props },\n                componentMapper: (component) => mapTemplateComponent(component, context),\n              });\n            },\n          });\n        } else {\n          return createElement(TemplateItem, {\n            template: { source: template, options: this.props },\n          });\n        }\n      }\n    };\n  };\n\n  private resolveLinkTemplate = (linkTypeId: string): LinkTemplate | undefined => {\n    const { edgeStyles, defaultEdgeStyle } = this.props;\n    const template = edgeStyles[linkTypeId] || defaultEdgeStyle;\n\n    if (!template) {\n      return;\n    }\n\n    const { markerSource, markerTarget, linkStyle = {}, editable } = template;\n\n    return {\n      markerSource,\n      markerTarget,\n      renderLink: (link: Link) => {\n        if (editable && link.linkState) {\n          const customLabel: Array<LocalizedString> = [\n            {\n              value: link.linkState['ontodia:customLabel'],\n              language: '',\n            },\n          ];\n          const { label = {} } = linkStyle;\n          const { attrs = {} } = label;\n          const { text = {} } = attrs;\n          return {\n            ...linkStyle,\n            label: {\n              ...label,\n              attrs: {\n                ...attrs,\n                text: {\n                  ...text,\n                  text: customLabel,\n                },\n              },\n            },\n          };\n        }\n        return linkStyle;\n      },\n      setLinkLabel: editable\n        ? (link: Link, label: string) => {\n            link.setLinkState({ ['ontodia:customLabel']: label });\n          }\n        : undefined,\n    };\n  };\n\n  private suggestProperties = (params: PropertySuggestionParams): Promise<Dictionary<PropertyScore>> => {\n    const { propertySuggestionQuery } = this.props;\n\n    if (!params.token) {\n      const model = this.workspace.getModel();\n      const diagram = this.workspace.getDiagram();\n      const element = model.getElement(params.elementId);\n\n      params.token = element ? diagram.formatLabel(element.data.label.values, element.data.id) : '';\n    }\n\n    return DiagramService.suggestProperties(params, propertySuggestionQuery);\n  };\n\n  private resolveNodeStyles = (types: string[]): CustomTypeStyle => {\n    const { nodeStyles } = this.props;\n    for (const type in nodeStyles) {\n      if (types.indexOf(type) >= 0) {\n        const { image, color } = nodeStyles[type];\n        return { icon: image, color };\n      }\n    }\n    return undefined;\n  };\n}\n\nfunction makePersistenceFromConfig(mode: OntodiaPersistenceMode = { type: 'form' }) {\n  const factory = DEFAULT_FACTORY;\n  return factory.getPersistence(mode);\n}\n\nfunction mapTemplateComponent(component: JSX.Element, context: AuthoredEntityContext): JSX.Element {\n  function mapElement(element: JSX.Element): JSX.Element {\n    if (!isValidChild(element)) {\n      return element;\n    }\n\n    if (element.type === 'button') {\n      switch (element.props.name) {\n        case 'edit':\n          return cloneElement(element, {\n            disabled: !context.canEdit,\n            onClick: context.onEdit,\n          });\n        case 'delete':\n          return cloneElement(element, {\n            disabled: !context.canDelete,\n            onClick: context.onDelete,\n          });\n      }\n      return element;\n    }\n\n    if ('children' in element.props) {\n      return cloneElement(element, {}, universalChildren(Children.map(element.props.children, mapElement)));\n    }\n\n    return element;\n  }\n\n  return mapElement(component);\n}\n\nconst selectLabelLanguage: LabelLanguageSelector = (labels, language) => {\n  return selectPreferredLabel(labels, language);\n};\n\nexport default Ontodia;\n","/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as Kefir from 'kefir';\nimport * as maybe from 'data.maybe';\nimport * as SparqlJs from 'sparqljs';\nimport {\n  Dictionary,\n  ElementModel,\n  PropertySuggestionParams,\n  PropertyScore,\n  SerializedDiagram,\n  DIAGRAM_CONTEXT_URL_V1,\n} from 'ontodia';\n\nimport { Rdf } from 'platform/api/rdf';\nimport * as JsonLd from 'platform/api/rdf/formats/JsonLd';\nimport { rdf, rdfs, VocabPlatform } from 'platform/api/rdf/vocabularies/vocabularies';\nimport { SparqlClient, SparqlUtil, QueryContext } from 'platform/api/sparql';\nimport { LdpService } from 'platform/api/services/ldp';\nimport { getThumbnails } from 'platform/api/services/resource-thumbnail';\nimport { convertToSerializedDiagram } from 'ontodia';\n\nimport { ontodiaNsv0 } from './OntodiaVocabulary';\n\nexport const OntodiaContextV1 = require('platform/ontodia/schema/context-v1.json');\n\n/**\n * Returns dictionary of images by sparql query\n * Will run on default context\n */\nexport function prepareImages(elementsInfo: Dictionary<ElementModel>, imageQuery: string) {\n  let parametrized: SparqlJs.Query;\n  try {\n    const parsedQuery = SparqlUtil.parseQuery(imageQuery);\n    if (parsedQuery.type !== 'query') {\n      throw new Error('Image query must be a SELECT query');\n    }\n\n    const params = Object.keys(elementsInfo).map((id): Dictionary<Rdf.Node> => ({ element: Rdf.iri(id) }));\n    parametrized = SparqlClient.prepareParsedQuery(params)(parsedQuery);\n  } catch (error) {\n    return Promise.reject(error);\n  }\n\n  return SparqlClient.select(parametrized)\n    .map((response) => {\n      const elements = response.results.bindings;\n      const images: { [elementIri: string]: string } = {};\n\n      for (const elem of elements) {\n        images[elem['element'].value] = elem['image'].value;\n      }\n\n      return images;\n    })\n    .toPromise();\n}\n\nexport function fetchThumbnails(elementsInfo: Dictionary<ElementModel>, context: QueryContext) {\n  const iris = Object.keys(elementsInfo).map((iri) => Rdf.iri(iri));\n  return getThumbnails(iris, { context })\n    .map((res) => res.mapKeys((iri) => iri.value).toObject())\n    .toPromise();\n}\n\nconst JSONLD_DIAGRAM_FRAME: object = {\n  '@context': OntodiaContextV1['@context'],\n  '@type': 'Diagram',\n  layoutData: {\n    '@type': 'Layout',\n    elements: {\n      '@type': 'Element',\n      '@embed': '@always',\n      'ontodia:resource': { '@embed': '@never' },\n    },\n    links: {\n      '@type': 'Link',\n      source: { '@embed': '@never' },\n      target: { '@embed': '@never' },\n    },\n  },\n};\n\n/**\n * Returns label and layout of diagram by diagram id\n * will run on specified context\n */\nexport function getDiagramByIri(\n  diagramIri: string,\n  context: QueryContext\n): Promise<{\n  label: string;\n  diagram: SerializedDiagram;\n}> {\n  const ldpService = new LdpService(VocabPlatform.OntodiaDiagramContainer.value, context);\n  const documentLoader = JsonLd.makeDocumentLoader({\n    overrideContexts: {\n      [DIAGRAM_CONTEXT_URL_V1]: OntodiaContextV1,\n    },\n  });\n  return ldpService\n    .getResourceRequest(diagramIri, 'text/turtle')\n    .flatMap((resource) =>\n      JsonLd.fromRdf(resource, {\n        documentLoader,\n        format: 'text/turtle',\n        useNativeTypes: true,\n      })\n    )\n    .flatMap(\n      (json): Kefir.Property<{ label: string; diagram: SerializedDiagram }> => {\n        // check for old version\n        if (\n          json.length > 0 &&\n          json[0] &&\n          json[0]['@type'] &&\n          json[0]['@type'] instanceof Array &&\n          json[0]['@type'].indexOf(ontodiaNsv0.diagram.value) >= 0\n        ) {\n          // this assumes json-ld to be in expanded mode, and it should be right after toRDF\n          const oldDiagram = JSON.parse(json[0][ontodiaNsv0.diagramLayoutString.value][0]['@value']);\n          return Kefir.constant({\n            label: json[0][rdfs.label.value] as string,\n            diagram: convertToSerializedDiagram({\n              layoutData: oldDiagram.layoutData,\n              linkTypeOptions: oldDiagram.linkSettings,\n            }),\n          });\n        } else {\n          return JsonLd.frame(json, JSONLD_DIAGRAM_FRAME, { documentLoader }).map((diagram) => ({\n            label: diagram['@graph'][0][rdfs.label.value] as string,\n            diagram: {\n              linkTypeOptions: [],\n              ...diagram['@graph'][0],\n              ...{ '@context': diagram['@context'] },\n            } as SerializedDiagram,\n          }));\n        }\n      }\n    )\n    .toPromise();\n}\n\nfunction makeDiagramResource(\n  diagram: SerializedDiagram,\n  name: string,\n  metadata: ReadonlyArray<Rdf.Triple>,\n  diagramIri = ''\n) {\n  const jsonldDiagram: any = { ...diagram };\n\n  // force inline context to disable fetching of the context by RDF4J\n  if ((jsonldDiagram['@context'] = DIAGRAM_CONTEXT_URL_V1)) {\n    jsonldDiagram['@context'] = OntodiaContextV1['@context'];\n  }\n\n  jsonldDiagram[rdfs.label.value] = name;\n  jsonldDiagram['@id'] = diagramIri;\n  // warning! this heavily assumes that RDF will only place predicates to diagram resource\n  // otherwise proper ttl-to-jsonld parsing is required, assumed to be done in 3.0\n  metadata.forEach((row) => {\n    jsonldDiagram[row.p.value] = row.o.isLiteral() ? row.o.value : { '@id': row.o.value };\n  });\n\n  return jsonldDiagram;\n}\n\n/**\n * Save diagram\n */\nexport function saveDiagram(\n  name: string,\n  diagram: SerializedDiagram,\n  metadata: ReadonlyArray<Rdf.Triple>\n): Kefir.Property<Rdf.Iri> {\n  const jsonldDiagram = makeDiagramResource(diagram, name, metadata);\n  return new LdpService(VocabPlatform.OntodiaDiagramContainer.value)\n    .createResourceRequest(\n      VocabPlatform.OntodiaDiagramContainer,\n      { data: JSON.stringify(jsonldDiagram), format: 'application/ld+json' },\n      maybe.Just(name)\n    )\n    .map((iri) => new Rdf.Iri(iri));\n}\n\n/**\n * Update diagram\n */\nexport function updateDiagram(\n  diagramIri: string,\n  diagram: SerializedDiagram,\n  label: string,\n  metadata: ReadonlyArray<Rdf.Triple>\n): Kefir.Property<void> {\n  const jsonLdDiagram = makeDiagramResource(diagram, label, metadata, diagramIri);\n  return new LdpService(VocabPlatform.OntodiaDiagramContainer.value)\n    .sendUpdateResourceRequest(Rdf.iri(diagramIri), {\n      data: JSON.stringify(jsonLdDiagram),\n      format: 'application/ld+json',\n    })\n    .map(() => {\n      /* void */\n    });\n}\n\nexport function suggestProperties(params: PropertySuggestionParams, query: string): Promise<Dictionary<PropertyScore>> {\n  const { token, properties } = params;\n  const options = {\n    context: {\n      repository: 'wikidata-property-suggester',\n    },\n  };\n\n  const term = Rdf.literal(token.toLowerCase());\n  const queryParams = [];\n\n  properties.forEach((prop) => {\n    queryParams.push({ property: Rdf.iri(prop) });\n  });\n\n  return SparqlClient.prepareQuery(query, queryParams)\n    .map((prepared) => SparqlClient.setBindings(prepared, { term }))\n    .flatMap((bound) => SparqlClient.select(bound, options))\n    .map((response) => {\n      const result = response.results.bindings;\n      const dictionary: Dictionary<PropertyScore> = {};\n\n      result.forEach((res) => {\n        const propertyIri = res.id.value;\n        const score = parseFloat(res.score.value);\n        dictionary[propertyIri] = { propertyIri, score };\n      });\n\n      properties.forEach((propertyIri) => {\n        if (dictionary[propertyIri]) {\n          return;\n        }\n        dictionary[propertyIri] = { propertyIri, score: 0 };\n      });\n\n      return dictionary;\n    })\n    .toPromise();\n}\n","/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { Rdf } from 'platform/api/rdf';\n\nexport module ontodiaNsv0 {\n  export const _NAMESPACE = 'http://www.ontodia.org/schema/v1#';\n  export const iri = (s: string) => Rdf.iri(_NAMESPACE + s);\n\n  export const diagram = iri('diagram');\n  export const diagramLayoutString = iri('diagramLayoutString');\n}\n\nexport module ontodiaNsv1 {\n  export const _NAMESPACE = 'http://ontodia.org/schema/v1#';\n  export const iri = (s: string) => Rdf.iri(_NAMESPACE + s);\n  export const diagram = iri('Diagram');\n}\n","/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as SparqlJs from 'sparqljs';\nimport {\n  RDFDataProvider,\n  SparqlDataProvider,\n  SparqlDataProviderSettings,\n  DPDefinition,\n  SparqlDataProviderOptions,\n  LinkConfiguration,\n  CompositeDataProvider,\n  PropertyConfiguration,\n} from 'ontodia';\n\nimport { WrappingError } from 'platform/api/async';\nimport { SparqlUtil, SparqlTypeGuards, VariableRenameBinder } from 'platform/api/sparql';\nimport { ConfigHolder } from 'platform/api/services/config-holder';\nimport { getBaseUrl } from 'platform/api/http';\nimport { FieldDefinition } from 'platform/components/forms';\nimport { xsd, rdf } from 'platform/api/rdf/vocabularies';\n\nimport { OwlStatsSettings, OwlNoStatsSettings, WikidataSettings } from './DataProviderProfiles';\n\nexport const RDF_DATA_PROVIDER_NAME = 'rdf';\n\nconst SUPPORTED_PROFILES = {\n  default: OwlStatsSettings,\n  nostats: OwlNoStatsSettings,\n  wikidata: WikidataSettings,\n};\n\nexport type SupportedConfigName = keyof typeof SUPPORTED_PROFILES;\n\nexport function createDataProvider(params: {\n  configName?: SupportedConfigName;\n  options: SparqlDataProviderOptions;\n  settings: SparqlDataProviderSettings;\n  repositories: string[];\n  createRDFStorage?: boolean;\n  fields?: ReadonlyArray<FieldDefinition>;\n  forceFields?: ReadonlyMap<string, FieldDefinition>;\n}): SparqlDataProvider | CompositeDataProvider {\n  const { configName, options, settings, repositories, createRDFStorage, fields, forceFields } = params;\n\n  let sparqlProfile: SparqlDataProviderSettings;\n  if (configName) {\n    sparqlProfile = SUPPORTED_PROFILES[configName];\n    if (!sparqlProfile) {\n      throw new Error(`Unknown Ontodia configuration '${configName}'`);\n    }\n  } else {\n    sparqlProfile = SUPPORTED_PROFILES['default'];\n  }\n\n  // apply label properties from the config to full text search in Ontodia\n  sparqlProfile.dataLabelProperty = ConfigHolder.getUIConfig().labelPropertyPattern;\n\n  // this is workaround for field-based navigation\n  const fieldConfigDefaults = createFieldConfiguration(fields, forceFields);\n\n  const effectiveSettings: SparqlDataProviderSettings = {\n    ...sparqlProfile,\n    ...fieldConfigDefaults,\n    ...settings,\n  };\n\n  if (repositories.length === 1 && !createRDFStorage) {\n    const [repository] = repositories;\n    return new OptimizingDataProvider(\n      { ...options, endpointUrl: getEndpointUrlForRepository(repository) },\n      effectiveSettings\n    );\n  }\n\n  const dataProviders: DPDefinition[] = repositories.map((repository) => ({\n    name: repository,\n    dataProvider: new OptimizingDataProvider(\n      { ...options, endpointUrl: getEndpointUrlForRepository(repository) },\n      effectiveSettings\n    ),\n  }));\n\n  if (createRDFStorage) {\n    dataProviders.push({\n      name: RDF_DATA_PROVIDER_NAME,\n      dataProvider: new RDFDataProvider({ data: [], parsers: {} }),\n    });\n  }\n\n  return new CompositeDataProvider(dataProviders);\n}\n\nfunction getEndpointUrlForRepository(repository: string) {\n  const baseEndpointUrl = getBaseUrl() ? getBaseUrl() + '/sparql' : '/sparql';\n  return `${baseEndpointUrl}?repository=${repository}`;\n}\n\nfunction createFieldConfiguration(\n  fields?: ReadonlyArray<FieldDefinition>,\n  forceFields?: ReadonlyMap<string, FieldDefinition>\n): Partial<SparqlDataProviderSettings> {\n  const linkConfigurations = createLinkConfigurations(fields);\n  const propertyConfigurations = createPropertyConfiguration(fields, forceFields);\n\n  let fieldConfigDefaults: Partial<SparqlDataProviderSettings> = {\n    linkConfigurations,\n    propertyConfigurations,\n  };\n  if (linkConfigurations.length > 0) {\n    fieldConfigDefaults = {\n      ...fieldConfigDefaults,\n      elementInfoQuery: `\n        PREFIX ontodia: <https://ontodia.org/context/v1.json/>\n        CONSTRUCT {\n            ?inst ontodia:type ?class .\n            ?inst ontodia:label ?label .\n            ?inst ?propType ?propValue.\n        } WHERE {\n            VALUES (?inst) {\\${ids}}\n            OPTIONAL { ?inst a ?class }\n            OPTIONAL { ?inst \\${dataLabelProperty} ?label }\n            OPTIONAL {\n              \\${propertyConfigurations}\n            }\n        }\n      `,\n    };\n  }\n  return fieldConfigDefaults;\n}\n\nclass OptimizingDataProvider extends SparqlDataProvider {\n  executeSparqlQuery<Binding>(query: string) {\n    const optimizedQuery = this.optimizeAndAddPrefixes(query);\n    return super.executeSparqlQuery<Binding>(optimizedQuery);\n  }\n\n  executeSparqlConstruct(query: string) {\n    const optimizedQuery = this.optimizeAndAddPrefixes(query);\n    return super.executeSparqlConstruct(optimizedQuery);\n  }\n\n  private optimizeAndAddPrefixes(query: string): string {\n    try {\n      const parsedQuery = SparqlUtil.parseQuery(query);\n      return SparqlUtil.serializeQuery(parsedQuery);\n    } catch (err) {\n      console.warn('Failed to optimize Ontodia query:');\n      console.warn(query);\n      console.warn(err);\n      return query;\n    }\n  }\n}\n\nfunction createLinkConfigurations(fields?: ReadonlyArray<FieldDefinition>): LinkConfiguration[] {\n  if (!fields || fields.length === 0) {\n    return [];\n  }\n  return fields\n    .filter((field) => {\n      // if it's non-literal field or at least have something in range\n      return xsd.anyURI.equals(field.xsdDatatype);\n    })\n    .map(fieldToLinkConfig);\n}\n\nfunction createPropertyConfiguration(\n  fields?: ReadonlyArray<FieldDefinition>,\n  forceFields?: ReadonlyMap<string, FieldDefinition>\n): PropertyConfiguration[] {\n  if (!fields || fields.length === 0) {\n    return [];\n  }\n  return fields\n    .filter((field) => {\n      // pass only literal values\n      return (forceFields && forceFields.has(field.iri)) || !xsd.anyURI.equals(field.xsdDatatype);\n    })\n    .map(fieldToPropertyConfig);\n}\n\nfunction fieldToLinkConfig(field: FieldDefinition): LinkConfiguration {\n  const parsedQuery = parseSelectPattern(field);\n  const domain = field.domain ? field.domain.map((iri) => iri.value) : undefined;\n\n  const directPredicate = parseDirectPredicate(parsedQuery.where);\n  if (directPredicate) {\n    return { id: field.iri, domain, path: directPredicate };\n  }\n\n  new VariableRenameBinder('subject', 'source').query(parsedQuery);\n  new VariableRenameBinder('value', 'target').query(parsedQuery);\n\n  return {\n    id: field.iri,\n    domain,\n    path: serializePatterns(parsedQuery.where),\n  };\n}\n\nfunction fieldToPropertyConfig(field: FieldDefinition): PropertyConfiguration {\n  const parsedQuery = parseSelectPattern(field);\n  const domain = field.domain ? field.domain.map((iri) => iri.value) : undefined;\n\n  const directPredicate = parseDirectPredicate(parsedQuery.where);\n  if (directPredicate) {\n    return { id: field.iri, domain, path: directPredicate };\n  }\n\n  new VariableRenameBinder('subject', 'inst').query(parsedQuery);\n  /* keep the same name for 'value' variable */\n\n  return {\n    id: field.iri,\n    domain,\n    path: serializePatterns(parsedQuery.where),\n  };\n}\n\nfunction parseSelectPattern(field: FieldDefinition): SparqlJs.SelectQuery {\n  if (!field.selectPattern) {\n    throw new Error(`Expected a selectPattern for field: ${field.iri}`);\n  }\n  let parsedQuery: SparqlJs.SelectQuery;\n  try {\n    parsedQuery = SparqlUtil.parseQuery(field.selectPattern);\n  } catch (err) {\n    throw new WrappingError(`Failed to parse selectPattern for field: ${field.iri}`, err);\n  }\n  if (!(parsedQuery.type === 'query' && parsedQuery.queryType === 'SELECT')) {\n    throw new Error(`Expected a SELECT query in selectPattern for field: ${field.iri}`);\n  }\n  return parsedQuery;\n}\n\nfunction serializePatterns(patterns: SparqlJs.Pattern[]): string {\n  const simpleQuery: SparqlJs.SelectQuery = {\n    type: 'query',\n    queryType: 'SELECT',\n    variables: ['*'],\n    prefixes: {},\n    where: patterns,\n  };\n  const query = SparqlUtil.serializeQuery(simpleQuery);\n  const prefixLength = 'SELECT * WHERE { '.length;\n  const serialized = query.substr(prefixLength, query.length - prefixLength - 2);\n  return serialized;\n}\n\nfunction parseDirectPredicate(patterns: SparqlJs.Pattern[]): string | undefined {\n  const { isIri } = SparqlTypeGuards;\n\n  let predicate: SparqlJs.Term | undefined;\n  for (const pattern of patterns) {\n    switch (pattern.type) {\n      case 'bgp':\n        for (const t of pattern.triples) {\n          const isPredicateTriple =\n            /^[?$]subject$/.test(t.subject) && /^[?$]value$/.test(t.object) && isIri(t.predicate);\n          const isLabelTriple = /^[?$]label$/.test(t.object);\n          if (isPredicateTriple) {\n            predicate = t.predicate as SparqlJs.Term;\n          } else if (isLabelTriple) {\n            // ignore\n          } else {\n            // pattern is too complex\n            return undefined;\n          }\n        }\n        break;\n      case 'bind':\n        // ignore\n        break;\n      default:\n        // pattern is too complex\n        return undefined;\n    }\n  }\n  return predicate;\n}\n","/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { SparqlDataProviderSettings } from 'ontodia';\n\nexport const WikidataSettings: SparqlDataProviderSettings = {\n  linkConfigurations: [],\n  propertyConfigurations: [],\n\n  defaultPrefix: `PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nPREFIX wd: <http://www.wikidata.org/entity/>\nPREFIX owl:  <http://www.w3.org/2002/07/owl#>\n\\n`,\n\n  schemaLabelProperty: 'rdfs:label',\n  dataLabelProperty: 'rdfs:label',\n\n  fullTextSearch: {\n    prefix: 'PREFIX bds: <http://www.bigdata.com/rdf/search#>\\n',\n    queryPattern: `?inst rdfs:label ?searchLabel.\nSERVICE bds:search {\n  ?searchLabel bds:search \"\\${text}*\" ;\n    bds:minRelevance '0.5' ;\n    bds:matchAllTerms 'true' .\n}\nBIND(IF(STRLEN(?strInst) > 33,\n  0-<http://www.w3.org/2001/XMLSchema#integer>(SUBSTR(?strInst, 33)),\n  -10000\n) as ?score)\n`,\n  },\n\n  classTreeQuery: `SELECT distinct ?class ?parent WHERE {\n  { ?class wdt:P279 wd:Q35120. }\n    UNION\n  { ?parent wdt:P279 wd:Q35120.\n    ?class wdt:P279 ?parent. }\n    UNION\n  { ?parent wdt:P279/wdt:P279 wd:Q35120.\n    ?class wdt:P279 ?parent. }\n}`,\n\n  linksInfoQuery: `SELECT ?source ?type ?target WHERE {\n  \\${linkConfigurations}\n  VALUES (?source) {\\${ids}}\n  VALUES (?target) {\\${ids}}\n}`,\n\n  elementInfoQuery: `PREFIX ontodia: <https://ontodia.org/context/v1.json/>\nCONSTRUCT {\n  ?inst ontodia:type ?class .\n  ?inst ?propType ?propValue.\n} WHERE {\n  VALUES (?inst) {\\${ids}}\n  OPTIONAL {\n    ?inst wdt:P31 ?class\n  }\n  OPTIONAL {\n    \\${propertyConfigurations}\n    FILTER (isLiteral(?propValue))\n  }\n}`,\n\n  imageQueryPattern: `{ ?inst ?linkType ?fullImage } UNION { ?inst wdt:P163/wdt:P18 ?fullImage }\nBIND(CONCAT(\"https://commons.wikimedia.org/w/thumb.php?f=\",\n  STRAFTER(STR(?fullImage), \"Special:FilePath/\"), \"&w=200\") AS ?image)\n`,\n\n  linkTypesOfQuery: `SELECT DISTINCT ?link WHERE {\n  \\${linkConfigurations}\n  ?claim <http://wikiba.se/ontology#directClaim> ?link .\n}`,\n\n  linkTypesStatisticsQuery: `SELECT (\\${linkId} as ?link) (COUNT(?outObject) AS ?outCount) (COUNT(?inObject) AS ?inCount)\nWHERE {\n  {\n    {\n      SELECT DISTINCT ?outObject WHERE {\n        \\${linkConfigurationOut}\n        FILTER(ISIRI(?outObject))\n        ?outObject ?someprop ?someobj.\n      }\n      LIMIT 101\n    }\n  } UNION {\n    {\n      SELECT DISTINCT ?inObject WHERE {\n        \\${linkConfigurationIn}\n        FILTER(ISIRI(?inObject))\n        ?inObject ?someprop ?someobj.\n      }\n      LIMIT 101\n    }\n  }\n}`,\n\n  filterRefElementLinkPattern: '?claim <http://wikiba.se/ontology#directClaim> ?link .',\n  filterTypePattern: `?inst wdt:P31 ?instType. ?instType wdt:P279* ?class`,\n  filterAdditionalRestriction: `FILTER ISIRI(?inst)\nBIND(STR(?inst) as ?strInst)\nFILTER EXISTS { ?inst ?someprop ?someobj }\n`,\n\n  filterElementInfoPattern: `OPTIONAL { ?inst wdt:P31 ?foundClass }\nBIND (COALESCE(?foundClass, owl:Thing) as ?class)\nOPTIONAL { ?inst rdfs:label ?label }\n`,\n};\n\nexport const OwlNoStatsSettings: SparqlDataProviderSettings = {\n  linkConfigurations: [],\n  propertyConfigurations: [],\n\n  defaultPrefix: `PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX owl:  <http://www.w3.org/2002/07/owl#>\n\\n`,\n\n  schemaLabelProperty: 'rdfs:label',\n  dataLabelProperty: 'rdfs:label',\n\n  fullTextSearch: {\n    prefix: '',\n    queryPattern: `OPTIONAL { ?inst \\${dataLabelProperty} ?search1 }\nFILTER REGEX(COALESCE(STR(?search1), STR(?extractedLabel)), \"\\${text}\", \"i\")\nBIND(0 as ?score)\n`,\n    extractLabel: true,\n  },\n\n  classTreeQuery: `SELECT ?class ?parent WHERE {\n  { ?class a rdfs:Class }\n  UNION\n  { ?class a owl:Class }\n  FILTER ISIRI(?class)\n  OPTIONAL { ?class rdfs:subClassOf ?parent. FILTER ISIRI(?parent) }\n}`,\n\n  linksInfoQuery: `SELECT ?source ?type ?target WHERE {\n  \\${linkConfigurations}\n  VALUES (?source) {\\${ids}}\n  VALUES (?target) {\\${ids}}\n}`,\n\n  elementInfoQuery: `PREFIX ontodia: <https://ontodia.org/context/v1.json/>\n\nCONSTRUCT {\n  ?inst ontodia:type ?class .\n  ?inst ontodia:label ?label .\n  ?inst ?propType ?propValue.\n} WHERE {\n  VALUES (?inst) {\\${ids}}\n  OPTIONAL { ?inst a ?class }\n  OPTIONAL { ?inst \\${dataLabelProperty} ?label }\n  OPTIONAL {\n    \\${propertyConfigurations}\n    FILTER (isLiteral(?propValue))\n  }\n}\n`,\n\n  imageQueryPattern: `{ ?inst ?linkType ?image }\nUNION\n{ [] ?linkType ?inst. BIND(?inst as ?image) }\n`,\n\n  linkTypesOfQuery: `SELECT DISTINCT ?link WHERE {\n  \\${linkConfigurations}\n}\n`,\n\n  linkTypesStatisticsQuery: `SELECT ?link ?outCount ?inCount WHERE {\n  {\n    SELECT (\\${linkId} as ?link) (count(?outObject) as ?outCount) WHERE {\n      \\${linkConfigurationOut} .\n      \\${navigateElementFilterOut}\n    } LIMIT 101\n  }\n  {\n    SELECT (\\${linkId} as ?link) (count(?inObject) as ?inCount) WHERE {\n      \\${linkConfigurationIn} .\n      \\${navigateElementFilterIn}\n    } LIMIT 101\n  }\n}`,\n\n  filterRefElementLinkPattern: '',\n  filterTypePattern: `?inst a ?instType. ?instType rdfs:subClassOf* ?class`,\n  filterElementInfoPattern: `OPTIONAL { ?inst rdf:type ?foundClass }\nBIND (COALESCE(?foundClass, owl:Thing) as ?class)\nOPTIONAL { ?inst \\${dataLabelProperty} ?label }\n`,\n\n  filterAdditionalRestriction: '',\n};\n\nexport const OwlStatsSettings: SparqlDataProviderSettings = {\n  ...OwlNoStatsSettings,\n\n  classTreeQuery: `SELECT ?class ?instcount ?label ?parent WHERE {\n  {\n    SELECT ?class (count(?inst) as ?instcount)\n    WHERE {\n      ?inst rdf:type ?class.\n      FILTER ISIRI(?class)\n    }\n    GROUP BY ?class\n  }\n  UNION\n  { ?class rdf:type rdfs:Class }\n  UNION\n  { ?class rdf:type owl:Class }\n  OPTIONAL { ?class rdfs:label ?label }\n  OPTIONAL { ?class rdfs:subClassOf ?parent. FILTER ISIRI(?parent) }\n}`,\n};\n","/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as Kefir from 'kefir';\nimport { flatten, isEqual, uniqWith } from 'lodash';\nimport { createGraph, createNamedNode, createLiteral } from 'rdf-ext';\n\nimport { SparqlClient } from 'platform/api/sparql';\n\nexport interface RawNode {\n  type: 'uri' | 'literal';\n  value: string;\n}\n\nexport interface RawTriple {\n  subject: RawNode;\n  predicate: RawNode;\n  object: RawNode;\n}\n\n/**\n * Returns graph to build diagram by sparql query\n * Will run on default context\n */\nexport function getRdfExtGraphBySparqlQuery(query: string, repositories: string[]): Promise<RawTriple[]> {\n  return Kefir.combine(repositories.map((repository) => SparqlClient.construct(query, { context: { repository } })))\n    .map((triples) => {\n      const graph: RawTriple[] = [];\n\n      flatten(triples).forEach(function (triple) {\n        graph.push({\n          subject: {\n            type: triple.s.isIri() ? 'uri' : 'literal',\n            value: triple.s.value,\n          },\n          predicate: {\n            type: triple.p.isIri() ? 'uri' : 'literal',\n            value: triple.p.value,\n          },\n          object: {\n            type: triple.o.isIri() ? 'uri' : 'literal',\n            value: triple.o.value,\n          },\n        });\n      });\n\n      const uniqueGraph = uniqWith(graph, isEqual);\n      return uniqueGraph;\n    })\n    .toPromise();\n}\n\nexport function makeRdfExtGraph(graph: RawTriple[]) {\n  const triples = graph.map(({ subject, predicate, object }) => ({\n    subject: makeRdfExtNode(subject),\n    predicate: makeRdfExtNode(predicate),\n    object: makeRdfExtNode(object),\n  }));\n\n  return createGraph(triples);\n}\n\nfunction makeRdfExtNode(node: RawNode) {\n  const { type, value } = node;\n  return type === 'uri' ? createNamedNode(value) : createLiteral(value);\n}\n","/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\nimport { Button, ButtonGroup, Dropdown, MenuItem } from 'react-bootstrap';\nimport * as classnames from 'classnames';\nimport { Workspace, ToolbarProps as BaseProps, CommandHistory, EventObserver } from 'ontodia';\n\nimport { Component } from 'platform/api/components';\nimport { VocabPlatform } from 'platform/api/rdf/vocabularies';\nimport { Permissions } from 'platform/api/services/security';\n\nimport { HasPermission } from 'platform/components/security/HasPermission';\n\nimport * as styles from './Toolbar.scss';\nexport const ToolbarStyles = styles;\n\nexport interface ToolbarProps extends BaseProps {\n  getWorkspace?: () => Workspace;\n  history?: CommandHistory;\n  persistChangesLabel?: string;\n  saveDiagramLabel?: string;\n  onClearAll?: () => void;\n  onSaveDiagramAs?: () => void;\n  onPersistChangesAndSaveDiagram?: () => void;\n}\n\nexport interface ToolbarCommand {\n  readonly enabled: boolean;\n  readonly title: string;\n  readonly invoke: () => void;\n}\n\nexport class Toolbar<P extends ToolbarProps = ToolbarProps, S = {}> extends Component<P, S> {\n  static defaultProps: Partial<ToolbarProps> = {\n    saveDiagramLabel: 'Save diagram',\n    persistChangesLabel: 'Save data',\n  };\n  protected readonly listener = new EventObserver();\n\n  componentDidMount() {\n    const { history } = this.props;\n    if (history) {\n      this.listener.listen(history.events, 'historyChanged', () => {\n        this.forceUpdate();\n      });\n    }\n  }\n\n  protected renderSaveButton() {\n    const {\n      canPersistChanges,\n      hasUnpersistedChanges,\n      canSaveDiagram,\n      saveDiagramLabel,\n      persistChangesLabel,\n      onPersistChanges,\n      onPersistChangesAndSaveDiagram,\n      onSaveDiagram,\n      onSaveDiagramAs,\n    } = this.props;\n    if (onPersistChanges && hasUnpersistedChanges) {\n      return (\n        <Dropdown id=\"persist-changes-button\" className=\"btn-group-sm\"\n          disabled={!canPersistChanges}\n        >\n          <Button disabled={!canPersistChanges}\n                  bsStyle=\"success\"\n                  onClick={onPersistChanges} \n                  className={styles.saveButton}\n          >\n            <span className=\"fa fa-floppy-o\" aria-hidden=\"true\" />\n            &nbsp;\n            {persistChangesLabel}\n          </Button>\n          <Dropdown.Toggle bsStyle=\"success\" />\n          <Dropdown.Menu>\n            <MenuItem href=\"#\" onClick={onPersistChangesAndSaveDiagram}>\n              {persistChangesLabel} &amp; {saveDiagramLabel}\n            </MenuItem>\n          </Dropdown.Menu>\n        </Dropdown>\n      );\n    }\n    if (onSaveDiagram && canSaveDiagram) {\n      return (\n        <Dropdown id=\"save-diagram-button\" className=\"btn-group-sm\">\n          <Button bsStyle=\"primary\" \n                  onClick={onSaveDiagram} \n                  className={styles.saveButton}>\n            <span className=\"fa fa-floppy-o\" aria-hidden=\"true\" />\n            &nbsp;\n            {saveDiagramLabel}\n          </Button>\n          <Dropdown.Toggle bsStyle=\"primary\" />\n          <Dropdown.Menu>\n            <MenuItem href=\"#\" onClick={onSaveDiagramAs}>\n              {saveDiagramLabel} as...\n            </MenuItem>\n          </Dropdown.Menu>\n        </Dropdown>\n      );\n    }\n    return null;\n  }\n\n  render() {\n    const { redo, undo } = this.getUndoReduCommands(this.props.history);\n\n    return (\n      <div className={styles.component}>\n        <HasPermission\n          permission={Permissions.toLdp('container', VocabPlatform.OntodiaDiagramContainer, 'create', 'any')}\n        >\n          <ButtonGroup bsSize=\"small\" className={styles.group}>\n            {this.renderSaveButton()}\n          </ButtonGroup>\n        </HasPermission>\n        {undo && redo ? (\n          <ButtonGroup bsSize=\"small\" className={styles.group}>\n            <Button\n              className=\"ontodia-btn ontodia-btn-default\"\n              title={undo.title}\n              disabled={!undo.enabled}\n              onClick={undo.invoke}\n            >\n              <span className=\"fa fa-undo\" aria-hidden=\"true\" />\n            </Button>\n            <Button\n              className=\"ontodia-btn ontodia-btn-default\"\n              title={redo.title}\n              disabled={!redo.enabled}\n              onClick={redo.invoke}\n            >\n              <span className=\"fa fa-repeat\" aria-hidden=\"true\" />\n            </Button>\n          </ButtonGroup>\n        ) : null}\n        <ButtonGroup bsSize=\"small\" className={styles.group}>\n          <Button type=\"button\" className=\"ontodia-btn ontodia-btn-default\" onClick={this.props.onForceLayout}>\n            <span title=\"Force layout\" className=\"fa fa-snowflake-o\" aria-hidden=\"true\" />\n          </Button>\n          {this.props.onClearAll ? (\n            <Button onClick={this.props.onClearAll}>\n              <span className=\"fa fa-trash\" aria-hidden=\"true\" />\n              &nbsp;Clear All\n            </Button>\n          ) : null}\n          <Button title=\"Zoom In\" onClick={this.props.onZoomIn}>\n            <span className=\"fa fa-search-plus\" aria-hidden=\"true\" />\n          </Button>\n          <Button title=\"Zoom Out\" onClick={this.props.onZoomOut}>\n            <span className=\"fa fa-search-minus\" aria-hidden=\"true\" />\n          </Button>\n          <Button title=\"Fit to Screen\" onClick={this.props.onZoomToFit}>\n            <span className=\"fa fa-arrows-alt\" aria-hidden=\"true\" />\n          </Button>\n          <Button title=\"Export diagram as PNG\" onClick={this.onExportPng}>\n            <span className=\"fa fa-picture-o\" aria-hidden=\"true\" />\n            &nbsp;PNG\n          </Button>\n          <Button title=\"Export diagram as SVG\" onClick={this.onExportSvg}>\n            <span className=\"fa fa-picture-o\" aria-hidden=\"true\" />\n            &nbsp;SVG\n          </Button>\n          <Button title=\"Print diagram\" onClick={this.props.onPrint}>\n            <span className=\"fa fa-print\" aria-hidden=\"true\" />\n          </Button>\n        </ButtonGroup>\n        {this.renderLanguages()}\n      </div>\n    );\n  }\n\n  protected renderLanguages() {\n    const { selectedLanguage, languages } = this.props;\n    if (languages.length <= 1) {\n      return null;\n    }\n    return (\n      <ButtonGroup bsSize=\"small\" className={classnames(styles.group, styles.languageSelector)}>\n        <label>\n          <span>Data Language&nbsp;-&nbsp;</span>\n          <select value={selectedLanguage} onChange={this.onChangeLanguage}>\n            {languages.map(({ code, label }) => (\n              <option key={code} value={code}>\n                {label}\n              </option>\n            ))}\n          </select>\n        </label>\n      </ButtonGroup>\n    );\n  }\n\n  protected getUndoReduCommands(history: CommandHistory) {\n    let undo: ToolbarCommand;\n    let redo: ToolbarCommand;\n    if (history) {\n      const undoCommand = last(history.undoStack);\n      undo = {\n        title: undoCommand && undoCommand.title ? `Undo (${undoCommand.title})` : 'Undo',\n        enabled: Boolean(undoCommand),\n        invoke: () => history.undo(),\n      };\n      const redoCommand = last(history.redoStack);\n      redo = {\n        title: redoCommand && redoCommand.title ? `Redo (${redoCommand.title})` : 'Redo',\n        enabled: Boolean(redoCommand),\n        invoke: () => history.redo(),\n      };\n    }\n\n    return { undo, redo };\n  }\n\n  protected onExportPng = () => this.props.onExportPNG();\n  protected onExportSvg = () => this.props.onExportSVG();\n\n  protected onChangeLanguage = (event: React.SyntheticEvent<HTMLSelectElement>) => {\n    const value = event.currentTarget.value;\n    this.props.onChangeLanguage(value);\n  };\n}\n\nfunction last<T>(array: ReadonlyArray<T>): T | undefined {\n  return array.length > 0 ? array[array.length - 1] : undefined;\n}\n","/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as React from 'react';\nimport { Children, ReactNode, cloneElement } from 'react';\n\nimport { Component } from 'platform/api/components';\n\nimport {\n  CompositeValue,\n  FieldDefinition,\n  SemanticForm,\n  generateSubjectByTemplate,\n  wasIriGeneratedByTemplate,\n} from 'platform/components/forms';\nimport { isValidChild, universalChildren } from 'platform/components/utils';\n\nimport * as styles from './EntityForm.scss';\nimport { Rdf } from 'platform/api/rdf';\n\nexport interface EntityFormProps {\n  newSubjectTemplate?: string;\n  acceptIriAuthoring?: boolean;\n  fields: ReadonlyArray<FieldDefinition>;\n  model: CompositeValue;\n  onSubmit: (newData: CompositeValue) => void;\n  onCancel: () => void;\n}\n\ninterface State {\n  model: CompositeValue;\n  suggestIri: boolean;\n}\n\nexport class EntityForm extends Component<EntityFormProps, State> {\n  private initModel: CompositeValue;\n  private formRef: SemanticForm;\n  constructor(props: EntityFormProps, context) {\n    super(props, context);\n    const isIriGeneratedByTemplate = this.modelEqualToSuggested(this.props.model);\n    this.initModel = this.props.model;\n    this.state = {\n      model: this.initModel,\n      suggestIri: Boolean(this.props.acceptIriAuthoring) && isIriGeneratedByTemplate,\n    };\n  }\n\n  componentWillReceiveProps(nextProps: EntityFormProps) {\n    if (this.props.model !== nextProps.model) {\n      this.initModel = nextProps.model;\n      this.setState({ model: this.initModel });\n    }\n  }\n\n  private mapChildren(children: ReactNode): ReactNode {\n    return Children.map(children, (child) => {\n      if (isValidChild(child)) {\n        if (child.type === 'button') {\n          if (child.props.name === 'reset') {\n            return cloneElement(child, { onClick: this.onReset });\n          } else if (child.props.name === 'submit') {\n            return cloneElement(child, { onClick: this.onSubmit });\n          } else if (child.props.name === 'cancel') {\n            return cloneElement(child, { onClick: () => this.props.onCancel() });\n          }\n        }\n        if (child.props.children) {\n          return cloneElement(child, {}, universalChildren(this.mapChildren(child.props.children)));\n        }\n      }\n      return child;\n    });\n  }\n\n  private onModelUpdate(newModel: CompositeValue) {\n    const modelToSet =\n      this.props.acceptIriAuthoring && this.state.suggestIri ? this.modifyModelsIriBySuggestion(newModel) : newModel;\n    this.setState({ model: modelToSet });\n  }\n\n  private modifyModelsIriBySuggestion(model: CompositeValue): CompositeValue {\n    if (this.modelEqualToSuggested(model)) {\n      return model;\n    }\n    return {\n      ...model,\n      subject: generateSubjectByTemplate(this.props.newSubjectTemplate, undefined, {\n        ...model,\n        subject: new Rdf.Iri(''),\n      }),\n    };\n  }\n\n  private modelEqualToSuggested(model: CompositeValue): boolean {\n    return wasIriGeneratedByTemplate(model.subject.value, this.props.newSubjectTemplate, undefined, {\n      ...model,\n      subject: new Rdf.Iri(''),\n    });\n  }\n\n  private onSubmit = () => {\n    this.formRef.finalize(this.state.model).observe({\n      value: (model) => {\n        this.props.onSubmit(model);\n      },\n      error: () => this.props.onSubmit(this.state.model),\n    });\n  };\n\n  private onReset = () => {\n    this.setState({ model: this.initModel });\n  };\n\n  private onChangeIri(e: React.FormEvent<HTMLInputElement>) {\n    const target = e.target as HTMLInputElement;\n    const iri = target.value;\n    this.setState((prevState) => {\n      return {\n        suggestIri: false,\n        model: {\n          ...prevState.model,\n          subject: new Rdf.Iri(iri),\n        },\n      };\n    });\n  }\n\n  private onChangeSuggestingMode() {\n    this.setState((prevState) => {\n      const newSuggestionMode = !prevState.suggestIri;\n      const curModel = prevState.model;\n      return {\n        suggestIri: newSuggestionMode,\n        model: newSuggestionMode ? this.modifyModelsIriBySuggestion(curModel) : curModel,\n      };\n    });\n  }\n\n  private renderIri() {\n    const { model, suggestIri } = this.state;\n    return (\n      <div className=\"semantic-form-input-decorator semantic-form-input-decorator--with-header\">\n        <div style={{ display: 'flex' }}>\n          <label style={{ marginLeft: -12 }}>IRI</label>\n          <label style={{ marginLeft: 5, opacity: 0.8 }}>\n            (Suggest IRI\n            <input type=\"checkbox\" checked={suggestIri} onClick={() => this.onChangeSuggestingMode()} />)\n          </label>\n        </div>\n        <input\n          className=\"plain-text-field__text form-control\"\n          value={model.subject.value}\n          onChange={(e) => this.onChangeIri(e)}\n        />\n      </div>\n    );\n  }\n\n  render() {\n    const mapped = this.mapChildren(this.props.children);\n    return (\n      <div className={styles.dialog}>\n        <div className={styles.content}>\n          {this.props.acceptIriAuthoring ? this.renderIri() : null}\n          <SemanticForm\n            newSubjectTemplate={this.props.newSubjectTemplate}\n            ref={(form) => (this.formRef = form)}\n            fields={this.props.fields}\n            model={this.state.model}\n            onLoaded={() => {\n              /* nothing */\n            }}\n            onChanged={(model) => this.onModelUpdate(model)}\n          >\n            {mapped}\n          </SemanticForm>\n        </div>\n      </div>\n    );\n  }\n}\n","/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport {\n  ValidationApi,\n  ElementError,\n  LinkTypeIri,\n  PropertyTypeIri,\n  ElementIri,\n  ElementTypeIri,\n  LinkModel,\n  LinkError,\n  ValidationEvent,\n  Element,\n  DiagramModel,\n  AuthoringState,\n  DataProvider,\n} from 'ontodia';\n\nimport * as Immutable from 'immutable';\nimport * as Kefir from 'kefir';\n\nimport { Rdf } from 'platform/api/rdf';\n\nimport {\n  FieldValue,\n  FieldDefinition,\n  checkCardinalityAndDuplicates,\n  CompositeValue,\n  EmptyValue,\n} from 'platform/components/forms';\nimport { CollectedError, collectErrors } from 'platform/components/forms/static/FormErrors';\nimport { tryBeginValidation } from 'platform/components/forms/FormModel';\n\nimport { observableToCancellablePromise } from '../AsyncAdapters';\nimport { BaseTypeClosureRequest, hasCompatibleType } from './FieldBasedMetadataApi';\nimport { EntityMetadata, isObjectProperty } from './FieldConfigurationCommon';\nimport { fetchInitialModel, getEntityMetadata, applyEventsToCompositeValue } from './OntodiaPersistenceCommon';\n\nexport class FieldBasedValidationApi implements ValidationApi {\n  private dataProvider: DataProvider | undefined;\n\n  constructor(\n    private entityMetadata: Map<ElementTypeIri, EntityMetadata>,\n    private enforceConstraints: boolean\n  ) { }\n\n  setDataProvider(dataProvider: DataProvider) {\n    this.dataProvider = dataProvider;\n  }\n\n  shouldEnforceConstraints() {\n    return this.enforceConstraints;\n  }\n\n  validate(e: ValidationEvent): Promise<Array<ElementError | LinkError>> {\n    const { target, state } = e;\n    const metadata = getEntityMetadata(target, this.entityMetadata);\n\n    if (metadata === undefined && state.elements.has(target.id)) {\n      const error: ElementError = {\n        type: 'element',\n        target: target.id,\n        message: `Cannot find metadata for any of the entity types`,\n      };\n      return Promise.resolve([error]);\n    }\n\n    const combinedTask = Kefir.combine(\n      {\n        domainRangeErrors: this.checkDomainRangeCompatibility(e, metadata),\n        relatedElementsErrors: this.checkRelatedElements(e, metadata),\n      },\n      ({ domainRangeErrors, relatedElementsErrors }) => {\n        return [...domainRangeErrors, ...relatedElementsErrors];\n      }\n    ).flatMapErrors<Array<ElementError | LinkError>>((err) => {\n      const error: ElementError = {\n        type: 'element',\n        target: target.id,\n        message: `Unexpected error during the validation process: ${err.message}`,\n      };\n      return Kefir.constant([error]);\n    });\n    return observableToCancellablePromise(combinedTask, e.cancellation);\n  }\n\n  private checkDomainRangeCompatibility(e: ValidationEvent, metadata: EntityMetadata): Kefir.Property<LinkError[]> {\n    const { target, outboundLinks, model } = e;\n\n    const typeRequest = new BaseTypeClosureRequest();\n    typeRequest.addAll(target.types);\n\n    for (const link of outboundLinks) {\n      const linkSource = findLinkSource(model, link);\n      if (linkSource) {\n        typeRequest.addAll(linkSource.data.types);\n      }\n\n      const linkTarget = findLinkTarget(model, link);\n      if (linkTarget) {\n        typeRequest.addAll(linkTarget.data.types);\n      }\n    }\n\n    return typeRequest.query().map((typeClosure) => {\n      const errors: LinkError[] = [];\n      for (const link of outboundLinks) {\n        const definition = metadata.fieldByIri.get(link.linkTypeId);\n        if (!definition) {\n          continue;\n        }\n\n        const linkSource = findLinkSource(model, link);\n        const sourceTypes = linkSource ? linkSource.data.types : undefined;\n        if (sourceTypes && !hasCompatibleType(definition.domain, sourceTypes, typeClosure)) {\n          const domainStr = definition.domain.map(({ value }) => value).join(', ');\n          errors.push({\n            type: 'link',\n            target: link,\n            message: `The source element should have one of the types '${domainStr}'`,\n          });\n        }\n\n        const linkTarget = findLinkTarget(model, link);\n        const targetTypes = linkTarget ? linkTarget.data.types : undefined;\n        if (targetTypes && !hasCompatibleType(definition.range, targetTypes, typeClosure)) {\n          const rangeStr = definition.range.map(({ value }) => value).join(', ');\n          errors.push({\n            type: 'link',\n            target: link,\n            message: `The target element should have one of the types '${rangeStr}'`,\n          });\n        }\n      }\n      return errors;\n    });\n  }\n\n  private checkRelatedElements(\n    e: ValidationEvent,\n    metadata: EntityMetadata\n  ): Kefir.Property<Array<ElementError | LinkError>> {\n    const { target, state } = e;\n\n    if (!this.dataProvider) {\n      return Kefir.constantError<any>(new Error('Missing data provider to fetch entity state'));\n    }\n\n    const initialModelTask = AuthoringState.isNewElement(state, target.id)\n      ? Kefir.constant<CompositeValue>({\n        type: CompositeValue.type,\n        subject: Rdf.iri(target.id),\n        definitions: metadata.fieldByIri,\n        fields: Immutable.Map(),\n        errors: Immutable.List(),\n      })\n      : fetchExistingEnitityState(target.id, metadata, this.dataProvider);\n\n    return initialModelTask\n      .flatMap<CompositeValue | EmptyValue>((initialModel) => {\n        const composite = applyEventsToCompositeValue({\n          elementIri: target.id,\n          state,\n          metadata,\n          initialModel,\n        });\n        return FieldValue.isEmpty(composite) ? Kefir.constant(composite) : validateWholeComposite(composite);\n      })\n      .map<Array<ElementError | LinkError>>((composite) => {\n        return extractValidationErrorsFromComposite(e, composite, metadata);\n      })\n      .toProperty();\n  }\n}\n\nfunction findLinkSource(model: DiagramModel, data: LinkModel): Element | undefined {\n  const foundLink = model.links.find((link) => link.data === data);\n  return foundLink ? model.sourceOf(foundLink) : undefined;\n}\n\nfunction findLinkTarget(model: DiagramModel, data: LinkModel): Element | undefined {\n  const foundLink = model.links.find((link) => link.data === data);\n  return foundLink ? model.targetOf(foundLink) : undefined;\n}\n\nfunction validateWholeComposite(composite: CompositeValue): Kefir.Property<CompositeValue> {\n  const emptyComposite = CompositeValue.set(composite, {\n    fields: composite.fields.clear(),\n    errors: composite.errors.clear(),\n  });\n\n  const validations: Array<ReturnType<typeof tryBeginValidation>> = [];\n\n  composite.fields.forEach((fieldState, fieldId) => {\n    const definition = composite.definitions.get(fieldId);\n    if (definition) {\n      const validationTask = tryBeginValidation(definition, emptyComposite, composite);\n      if (validationTask) {\n        validations.push(validationTask);\n      }\n    }\n  });\n\n  if (validations.length === 0) {\n    return Kefir.constant(composite);\n  } else {\n    return Kefir.zip(validations)\n      .map((changes) => {\n        let validated = composite;\n        for (const change of changes) {\n          validated = change(composite);\n        }\n        return validated;\n      })\n      .toProperty();\n  }\n}\n\nfunction extractValidationErrorsFromComposite(\n  e: ValidationEvent,\n  composite: CompositeValue | EmptyValue,\n  metadata: EntityMetadata\n): Array<ElementError | LinkError> {\n  const { target, outboundLinks } = e;\n\n  if (FieldValue.isEmpty(composite)) {\n    return [];\n  }\n\n  const collectedErrors: CollectedError[] = [];\n  collectErrors([], composite, collectedErrors);\n\n  const errors: Array<ElementError | LinkError> = [];\n  collectedErrors.forEach(({ message, path }) => {\n    errors.push({\n      type: 'element',\n      target: target.id,\n      message: message,\n      propertyType: path.join('/') as PropertyTypeIri,\n    });\n  });\n\n  const linkByType = new Map<LinkTypeIri, LinkModel[]>();\n  for (const link of outboundLinks) {\n    if (!linkByType.has(link.linkTypeId)) {\n      linkByType.set(link.linkTypeId, []);\n    }\n    linkByType.get(link.linkTypeId).push(link);\n  }\n\n  composite.fields.forEach((fieldState, fieldId) => {\n    const definition = composite.definitions.get(fieldId);\n    checkCardinalityAndDuplicates(fieldState.values, definition).forEach(({ message }) => {\n      if (isObjectProperty(definition, metadata)) {\n        const links = linkByType.get(definition.iri as LinkTypeIri);\n        if (links) {\n          for (const link of links) {\n            errors.push({\n              type: 'link',\n              target: link,\n              message,\n            });\n          }\n        }\n      }\n      errors.push({\n        type: 'element',\n        target: target.id,\n        message,\n        propertyType: definition.iri as PropertyTypeIri,\n      });\n    });\n  });\n\n  return errors;\n}\n\nfunction fetchExistingEnitityState(\n  target: ElementIri,\n  metadata: EntityMetadata,\n  dataProvider: DataProvider\n): Kefir.Property<CompositeValue> {\n  return Kefir.fromPromise(dataProvider.linkTypesOf({ elementId: target }))\n    .flatMap((linkCounts) => {\n      const foundFields = new Set<FieldDefinition>();\n      for (const { id, outCount } of linkCounts) {\n        const field = metadata.fieldByIri.get(id);\n        if (field && outCount > 0) {\n          foundFields.add(field);\n        }\n      }\n      const fieldsToFetchById = metadata.fieldByIri.filter((field) => foundFields.has(field)).toMap();\n      return fetchInitialModel(Rdf.iri(target), metadata, fieldsToFetchById);\n    })\n    .toProperty();\n}\n","/**\n * ResearchSpace\n * Copyright (C) 2020, © Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as Kefir from 'kefir';\nimport { ElementIri, ElementModel, AuthoringState, ElementChange } from 'ontodia';\n\nimport { Rdf } from 'platform/api/rdf';\n\nimport {\n  CompositeValue,\n  EmptyValue,\n  FieldValue,\n  LdpPersistence,\n  computeValuePatch,\n  TriplestorePersistence,\n} from 'platform/components/forms';\nimport { SparqlPersistence } from 'platform/components/forms/persistence/SparqlPersistence';\n\nimport { EntityMetadata, isObjectProperty } from './FieldConfigurationCommon';\nimport { OntodiaPersistence, OntodiaPersistenceParams, OntodiaPersistenceResult } from './OntodiaPersistence';\nimport {\n  fetchInitialModel,\n  getEntityMetadata,\n  convertElementModelToCompositeValue,\n  convertCompositeValueToElementModel,\n  applyEventsToCompositeValue,\n} from './OntodiaPersistenceCommon';\n\n\nexport type FormBasedPersistenceProps =\n  LdpBasedPersistenceProps | SparqlPersistenceProps;\n\nexport interface LdpBasedPersistenceProps {\n  readonly type: 'form';\n  readonly debug?: boolean;\n}\n\nexport interface SparqlPersistenceProps {\n  readonly type: 'sparql';\n\n  // target graph for delete and insert operations\n  readonly targetGraphIri?: string;\n\n  // target graph for insert operations only\n  readonly targetInsertGraphIri?: string;\n  readonly debug?: boolean;\n}\n\nexport class FormBasedPersistence implements OntodiaPersistence {\n  constructor(private props: FormBasedPersistenceProps) {}\n\n  get supportsIriEditing() {\n    return false;\n  }\n\n  persist(params: OntodiaPersistenceParams): Kefir.Property<OntodiaPersistenceResult> {\n    let formPersistence: TriplestorePersistence;\n    switch (this.props.type) {\n      case 'form': formPersistence = new LdpPersistence(); break;\n      case 'sparql':\n        formPersistence =\n          new SparqlPersistence({\n            targetGraphIri: this.props.targetGraphIri,\n            targetInsertGraphIri: this.props.targetInsertGraphIri\n          });\n        break;\n      default: throw new Error('Undefined data persistence type.');\n    }\n\n    const { toFetch, changed } = collectEntitiesState(params);\n    return fetchEntities(params, toFetch)\n      .flatMap((initials) => {\n        const { previousStates, currentStates, finalizedEntities } = diffAndFinalizeEntities(\n          this.props,\n          params,\n          changed,\n          initials\n        );\n\n        const batch: Kefir.Property<void>[] = [];\n        previousStates.forEach((previousState) => {\n          const currentState = currentStates.get(previousState.iri);\n          batch.push(formPersistence.persist(previousState.value, currentState.value));\n        });\n\n        return Kefir.zip(batch)\n          .map(() => ({ finalizedEntities }))\n          .toProperty();\n      })\n      .toProperty();\n  }\n}\n\ninterface IntialEntityData {\n  model: ElementModel;\n  value: CompositeValue;\n}\n\ninterface EntityState {\n  iri: ElementIri;\n  newIri?: ElementIri;\n  metadata: EntityMetadata;\n  value: CompositeValue | EmptyValue;\n}\n\nfunction collectEntitiesState(params: OntodiaPersistenceParams) {\n  const { state } = params;\n\n  const toFetch = new Set<ElementIri>();\n  const changed = new Set<ElementIri>();\n\n  state.elements.forEach((event) => {\n    if (event.deleted) {\n      const { after } = event;\n      changed.add(after.id);\n      toFetch.add(after.id);\n    } else {\n      const { before, after } = event;\n      if (before) {\n        if (after.id !== before.id) {\n          throw new Error(`Changing IRIs of existing entities is not supported via ldp`);\n        }\n        changed.add(after.id);\n        toFetch.add(after.id);\n      } else {\n        changed.add(after.id);\n      }\n    }\n  });\n\n  state.links.forEach((event) => {\n    if (event.deleted) {\n      const { after } = event;\n      changed.add(after.sourceId);\n      toFetch.add(after.sourceId);\n      toFetch.add(after.targetId);\n    } else {\n      const { before, after } = event;\n      if (before) {\n        changed.add(before.sourceId);\n        toFetch.add(before.sourceId);\n        toFetch.add(before.targetId);\n      }\n      changed.add(after.sourceId);\n      toFetch.add(after.sourceId);\n      toFetch.add(after.targetId);\n    }\n  });\n\n  return { toFetch, changed };\n}\n\nfunction diffAndFinalizeEntities(\n  props: FormBasedPersistenceProps,\n  params: OntodiaPersistenceParams,\n  changed: Set<ElementIri>,\n  initials: Map<ElementIri, IntialEntityData>\n) {\n  const { state, entityMetadata } = params;\n  const previousStates = new Map<ElementIri, EntityState>();\n  const currentStates = new Map<ElementIri, EntityState>();\n\n  changed.forEach((elementIri) => {\n    const initial = initials.get(elementIri);\n    const newElementModel = getNewElementModel(state, elementIri);\n    let previousState: EntityState;\n    let currentState: EntityState;\n\n    if (newElementModel) {\n      const metadata = getEntityMetadata(newElementModel, entityMetadata);\n      let current: CompositeValue | EmptyValue = convertElementModelToCompositeValue(newElementModel, metadata);\n      current = applyEventsToCompositeValue({\n        elementIri,\n        state,\n        metadata,\n        initialModel: current,\n      });\n      const iri = newElementModel.id;\n      previousState = { iri, metadata, value: FieldValue.empty };\n      currentState = { iri, metadata, value: current };\n    } else if (initial) {\n      const { model, value: initialModel } = initial;\n      const metadata = getEntityMetadata(model, entityMetadata);\n      const current = applyEventsToCompositeValue({\n        elementIri,\n        state,\n        metadata,\n        initialModel,\n      });\n      const iri = model.id;\n      const newIri: ElementIri = FieldValue.isEmpty(current) ? model.id : (current.subject.value as ElementIri);\n      previousState = { iri, metadata, value: initialModel };\n      currentState = {\n        iri,\n        newIri: newIri !== iri ? newIri : undefined,\n        metadata,\n        value: current,\n      };\n    } else {\n      throw new Error(`Failed to load intial state for entity <${elementIri}>`);\n    }\n    previousStates.set(elementIri, previousState);\n    currentStates.set(elementIri, currentState);\n  });\n\n  if (props.debug) {\n    if (previousStates.size !== currentStates.size) {\n      console.error('Different diff lengths!');\n    }\n    previousStates.forEach((previous, iri) => {\n      const current = currentStates.get(iri);\n      console.log(`Diff for entity`, iri, computeValuePatch(previous.value, current.value));\n      console.log(' where previous', computeValuePatch(FieldValue.empty, previous.value));\n      console.log(' where current', computeValuePatch(FieldValue.empty, current.value));\n    });\n  }\n\n  const finalizedEntities = new Map<ElementIri, ElementModel | null>();\n  currentStates.forEach((current, elementIri) => {\n    const { value, metadata } = current;\n    let model: ElementModel | null = null;\n    if (FieldValue.isComposite(value)) {\n      const modelWithLinks = convertCompositeValueToElementModel(value, metadata);\n      model = filterObjectProperties(modelWithLinks, metadata);\n    }\n    finalizedEntities.set(elementIri, model);\n  });\n\n  return { previousStates, currentStates, finalizedEntities };\n}\n\nfunction getNewElementModel(state: AuthoringState, elementIri: ElementIri) {\n  const event = state.elements.get(elementIri);\n  if (event) {\n    const { before, after } = event as ElementChange;\n    if (!before) {\n      return after;\n    }\n  }\n  return undefined;\n}\n\nfunction fetchEntities(\n  params: OntodiaPersistenceParams,\n  entities: ReadonlySet<ElementIri>\n): Kefir.Property<Map<ElementIri, IntialEntityData>> {\n  const { fetchModel, entityMetadata } = params;\n  const tasks = Array.from(entities as Set<ElementIri>, (iri) => {\n    return fetchModel(iri).flatMap(\n      (model): Kefir.Property<IntialEntityData | undefined> => {\n        const metadata = getEntityMetadata(model, entityMetadata);\n        if (!metadata) {\n          return Kefir.constant(undefined);\n        }\n        return fetchInitialModel(Rdf.iri(iri), metadata).map((value): IntialEntityData => ({ model, value }));\n      }\n    );\n  });\n\n  if (tasks.length === 0) {\n    return Kefir.constant(new Map<ElementIri, IntialEntityData>());\n  }\n\n  return Kefir.zip(tasks)\n    .map((fetched) => {\n      const result = new Map<ElementIri, IntialEntityData>();\n      fetched.forEach((entity) => {\n        if (entity) {\n          result.set(entity.model.id, entity);\n        }\n      });\n      return result;\n    })\n    .toProperty();\n}\n\nfunction filterObjectProperties(model: ElementModel, metadata: EntityMetadata): ElementModel {\n  const filteredProperties: ElementModel['properties'] = {};\n  for (const propertyIri in model.properties) {\n    if (Object.prototype.hasOwnProperty.call(model.properties, propertyIri)) {\n      const field = metadata.fieldByIri.get(propertyIri);\n      if (!(field && isObjectProperty(field, metadata))) {\n        filteredProperties[propertyIri] = model.properties[propertyIri];\n      }\n    }\n  }\n  return { ...model, properties: filteredProperties };\n}\n"],"sourceRoot":""}