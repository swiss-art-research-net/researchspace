{"version":3,"sources":["webpack:///./src/main/web/components/3-rd-party/ontodia/DiagramSearchResult.tsx"],"names":["TemplateProperties","render","semanticContext","SemanticSearchContext","Consumer","context","DiagramSearchResultInner","props","Component","DiagramSearchResult","cancellation","Cancellation","query","Action","loadQueryData","config","querying","SparqlClient","select","onValue","queryResult","setState","iris","buildElements","isLoading","onError","errorMessage","onEnd","id","trigger","eventType","BuiltInEvents","ComponentLoaded","source","onLoadWorkspace","workspace","model","getModel","onLoaded","pinRelevantProperties","graphScopeResults","isJust","propertiesToPin","Set","results","get","columns","column","type","add","Rdf","fullIri","attribute","iri","value","element","forEach","propertyIri","data","properties","pinned","elementState","PinnedProperties","undefined","state","setElementState","elements","events","on","onCancel","off","map","$property","debounce","flatMap","componentWillReceiveProps","nextProps","this","Spinner","ErrorNotification","searchProfileStore","profileStore","categories","category","image","thumbnail","color","child","React","Children","only","children","componentHasType","Ontodia","Error","baseOntodia","cloneElement","nodeStyles","length","Immutable","_","bindings","b","values","filter","el","isIri","toArray"],"mappings":"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","file":"diagram-search-result-94a786856e54a7d4573c.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as Immutable from 'immutable';\nimport * as _ from 'lodash';\nimport * as React from 'react';\nimport { Workspace, DiagramModel, ElementTemplateState, InternalApi } from 'ontodia';\n\nimport { Cancellation } from 'platform/api/async';\nimport { Component, SemanticContext } from 'platform/api/components';\nimport { BuiltInEvents, trigger } from 'platform/api/events';\nimport { Rdf } from 'platform/api/rdf';\nimport { SparqlClient } from 'platform/api/sparql';\n\nimport { Ontodia, OntodiaConfig } from 'platform/components/3-rd-party/ontodia/Ontodia';\nimport { SemanticSearchContext, ResultContext, GraphScopeContext } from 'platform/components/semantic/search';\nimport { Action, componentHasType } from 'platform/components/utils';\nimport { ErrorNotification } from 'platform/components/ui/notification';\nimport { Spinner } from 'platform/components/ui/spinner';\n\nconst { TemplateProperties } = InternalApi;\n\nexport interface DiagramSearchResultConfig {\n  /**\n   * SPARQL select query where all resource values will be treated as elements\n   */\n  query: string;\n  id?: string;\n}\n\ninterface State {\n  queryResult?: SparqlClient.SparqlSelectResult;\n  isLoading: boolean;\n  errorMessage?: string;\n  iris?: string[];\n}\n\nexport interface DiagramSearchResultProps extends DiagramSearchResultConfig {}\n\nexport class DiagramSearchResult extends Component<DiagramSearchResultProps, {}> {\n  render() {\n    const { semanticContext } = this.context;\n    return (\n      <SemanticSearchContext.Consumer>\n        {(context) => <DiagramSearchResultInner {...this.props} context={{ ...context, semanticContext }} />}\n      </SemanticSearchContext.Consumer>\n    );\n  }\n}\n\ninterface InnerProps extends DiagramSearchResultProps {\n  context: ResultContext & GraphScopeContext & SemanticContext;\n}\n\nclass DiagramSearchResultInner extends React.Component<InnerProps, State> {\n  private readonly cancellation = new Cancellation();\n  private query = Action<DiagramSearchResultConfig>();\n\n  constructor(props: InnerProps) {\n    super(props);\n    this.state = { isLoading: true };\n    this.cancellation\n      .map(this.query.$property.debounce(300))\n      .flatMap(this.loadQueryData)\n      .onValue(() => {\n        /**/\n      });\n    this.loadQueryData(this.props);\n  }\n\n  componentWillReceiveProps(nextProps: InnerProps) {\n    if (nextProps.query !== this.props.query) {\n      this.setState({ isLoading: true, errorMessage: undefined });\n      // this.query(nextProps);\n      this.loadQueryData(nextProps);\n    }\n  }\n\n  private loadQueryData = (config: DiagramSearchResultConfig) => {\n    const context = this.props.context.semanticContext;\n    const querying = SparqlClient.select(config.query, { context });\n    querying.onValue((queryResult) => {\n      this.setState({\n        queryResult: queryResult,\n        iris: this.buildElements(config, queryResult),\n        isLoading: false,\n      });\n    });\n    querying.onError((errorMessage) => {\n      this.setState({\n        errorMessage: errorMessage,\n        isLoading: false,\n      });\n    });\n    querying.onEnd(() => {\n      if (this.props.id) {\n        trigger({ eventType: BuiltInEvents.ComponentLoaded, source: this.props.id });\n      }\n    });\n    return querying;\n  };\n\n  render() {\n    const { iris, isLoading, errorMessage } = this.state;\n    if (isLoading) {\n      return <Spinner />;\n    } else if (errorMessage) {\n      return (\n        <div>\n          <ErrorNotification errorMessage={errorMessage} />\n        </div>\n      );\n    } else if (iris) {\n      const nodeStyles: OntodiaConfig['nodeStyles'] = {};\n      this.props.context.searchProfileStore.map((profileStore) =>\n        profileStore.categories.forEach(\n          (category) => (nodeStyles[category.iri.value] = { image: category.thumbnail, color: category.color })\n        )\n      );\n      const child = React.Children.only(this.props.children);\n      if (!componentHasType(child, Ontodia)) {\n        throw Error('The child element should be Ontodia');\n      }\n      const baseOntodia = React.cloneElement(child, {\n        onLoadWorkspace: this.onLoadWorkspace,\n        nodeStyles,\n      });\n      return iris.length === 1\n        ? React.cloneElement(baseOntodia, { iri: iris[0] })\n        : React.cloneElement(baseOntodia, { iris });\n    }\n  }\n\n  private buildElements(config: DiagramSearchResultConfig, queryResult: SparqlClient.SparqlSelectResult) {\n    return Immutable.Set(_.flatMap(queryResult.results.bindings, (b) => _.values(b)))\n      .filter((el) => el.isIri())\n      .map((el) => el.value)\n      .toArray();\n  }\n\n  private onLoadWorkspace = (workspace: Workspace) => {\n    const model = workspace.getModel();\n    const onLoaded = () => pinRelevantProperties(model, this.props.context);\n    model.events.on('loadingSuccess', onLoaded);\n    this.cancellation.onCancel(() => model.events.off('loadingSuccess', onLoaded));\n  };\n}\n\nfunction pinRelevantProperties(model: DiagramModel, context: GraphScopeContext) {\n  if (!(context.graphScopeResults && context.graphScopeResults.isJust)) {\n    return;\n  }\n\n  const propertiesToPin = new Set<string>();\n  const results = context.graphScopeResults.get();\n\n  for (const column of results.columns) {\n    if (column.type === 'var-value') {\n      propertiesToPin.add(Rdf.fullIri(column.attribute.iri).value);\n    }\n  }\n\n  for (const element of model.elements) {\n    propertiesToPin.forEach((propertyIri) => {\n      if (element.data.properties[propertyIri]) {\n        const pinned: { [propertyIri: string]: boolean } = element.elementState\n          ? element.elementState[TemplateProperties.PinnedProperties]\n          : undefined;\n        const state: ElementTemplateState = {\n          ...element.elementState,\n          [TemplateProperties.PinnedProperties]: { ...pinned, [propertyIri]: true },\n        };\n        element.setElementState(state);\n      }\n    });\n  }\n}\n\nexport default DiagramSearchResult;\n"],"sourceRoot":""}