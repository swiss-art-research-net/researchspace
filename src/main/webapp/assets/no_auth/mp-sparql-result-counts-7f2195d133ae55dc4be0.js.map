{"version":3,"sources":["webpack:///./src/main/web/components/semantic/results/ResultsNumber.ts"],"names":["props","context","calcResultsNumber","query","setState","isLoading","countQuery","prepareCountQuery","SparqlUtil","parseQuerySync","loading","SparqlClient","select","semanticContext","map","res","parseInt","results","bindings","value","onValue","updateCounts","onError","id","trigger","eventType","BuiltInEvents","ComponentLoading","source","data","visitor","limits","limit","this","push","QueryVisitor","sparqlQuery","length","Math","min","undefined","prefixes","serializeQuery","number","Maybe","Just","totalNumber","Nothing","error","state","componentDidMount","componentWillReceiveProps","nextProps","_","isEqual","render","isJust","createElement","TemplateItem","template","options","numberOfResults","get","totalNumberOfResults","getOrElse","hasLimit","Spinner","defaultProps","Component","ResultsNumberComponent"],"mappings":"6IAmBA,OACA,QACA,QAGA,QACA,SACA,QAEA,SACA,SAkCA,cASE,gCAAYA,EAAcC,GAA1B,MACE,YAAMD,EAAOC,IAAQ,K,OAkBf,EAAAC,kBAAoB,SAACC,GAC3B,EAAKC,SAAS,CACZC,WAAW,IAGb,IAAMC,EAAa,EAAKC,kBAAkB,EAAAC,WAAWC,eAAqCN,IACpFO,EAAU,EAAAC,aAAaC,OAAON,EAAY,CAAEL,QAAS,EAAKA,QAAQY,kBACrEC,KAAI,SAACC,GAAQ,OAAAC,SAASD,EAAIE,QAAQC,SAAS,GAAU,MAAEC,UACvDC,QAAQ,EAAKC,cACbC,QAAQ,EAAKA,SAEZ,EAAKtB,MAAMuB,IACb,EAAAC,QAAQ,CACNC,UAAW,EAAAC,cAAcC,iBACzBC,OAAQ,EAAK5B,MAAMuB,GACnBM,KAAMnB,KAUJ,EAAAH,kBAAoB,SAACJ,GAG3B,IAAM2B,EAAU,IAAI,YAAC,iE,OACZ,EAAAC,OAAS,G,EAQlB,OATmC,uBAEjC,kBAAAnB,OAAA,SAAOA,GAKL,OAJIA,EAAOoB,QACTC,KAAKF,OAAOG,KAAKtB,EAAOoB,cACjBpB,EAAOoB,OAET,YAAMpB,OAAM,UAACA,IAExB,QAToB,CAAe,EAAAuB,eAkBnC,OARAL,EAAQM,YAAYjC,GAEpB,EAAK6B,MAAQF,EAAQC,OAAOM,OAASC,KAAKC,IAAG,MAARD,KAAYR,EAAQC,aAAUS,EAGnErC,EAAMsC,SAAW,GAGV,uCAAuC,EAAAjC,WAAWkC,eAAevC,GAAM,MAMxE,EAAAkB,aAAe,SAACsB,GACtB,EAAKvC,SAAS,CACZuC,OAAQC,EAAMC,KAAK,EAAKb,OAASW,EAAS,EAAKX,MAAQW,GACvDG,YAAa,EAAKd,OAAS,EAAKA,MAAQW,EAASC,EAAMC,KAAKF,GAAUC,EAAMG,UAC5E1C,WAAW,KAIP,EAAAiB,QAAU,SAAC0B,GACjB,MAAMA,GA9EN,EAAKC,MAAQ,CACXN,OAAQC,EAAMG,UACdD,YAAaF,EAAMG,UACnB1C,WAAW,G,EAgGjB,OA9G4C,sCAkBnC,iCAAA6C,kBAAP,WACEjB,KAAK/B,kBAAkB+B,KAAKjC,MAAMG,QAG7B,iCAAAgD,0BAAP,SAAiCC,GAC1BC,EAAEC,QAAQF,EAAUjD,MAAO8B,KAAKjC,MAAMG,QACzC8B,KAAK/B,kBAAkBkD,EAAUjD,QAoErC,iCAAAoD,OAAA,WACE,OAAItB,KAAKgB,MAAMN,OAAOa,SAAWvB,KAAKgB,MAAM5C,UACnC,EAAAoD,cAAc,EAAAC,aAAc,CACjCC,SAAU,CACR/B,OAAQK,KAAKjC,MAAM2D,SACnBC,QAAS,CACPC,gBAAiB5B,KAAKgB,MAAMN,OAAOmB,MACnCC,qBAAsB9B,KAAKgB,MAAMH,YAAYkB,eAAUxB,GACvDyB,SAAUhC,KAAKgB,MAAMH,YAAYU,WAI9BvB,KAAKgB,MAAM5C,UACb,EAAAoD,cAAc,EAAAS,SAEd,MAxGJ,uBAAAC,aAAe,CACpBR,SAAU,oGA0Gd,uBA9GA,CAA4C,EAAAS,WAA/B,EAAAC,yBAgHb,UAAeA","file":"mp-sparql-result-counts-7f2195d133ae55dc4be0.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport { createElement } from 'react';\nimport * as Maybe from 'data.maybe';\nimport * as _ from 'lodash';\nimport * as SparqlJs from 'sparqljs';\n\nimport { Component } from 'platform/api/components';\nimport { BuiltInEvents, trigger } from 'platform/api/events';\nimport { QueryVisitor, SparqlClient, SparqlUtil } from 'platform/api/sparql';\n\nimport { Spinner } from 'platform/components/ui/spinner';\nimport { TemplateItem } from 'platform/components/ui/template';\n\nexport interface Props {\n  /**\n   * SPARQL query\n   */\n  query: string;\n\n  /**\n   * Handlebars template that will be rendered on query execution.\n   * Special variables will be available in the template:\n   * - numberOfResults\n   * - totalNumberOfResults\n   * - hasLimit\n   */\n  template?: string;\n\n  /**\n   * ID for issuing component events.\n   */\n  id?: string;\n}\n\nexport interface State {\n  number?: Data.Maybe<number>;\n  totalNumber?: Data.Maybe<number>;\n  isLoading?: boolean;\n}\n\n/**\n * This component render number of SPARQL query results.\n * If query has a limit and number of results is larger than a limit,\n * this component will render also total number of results.\n */\nexport class ResultsNumberComponent extends Component<Props, State> {\n  private limit: number;\n\n  static defaultProps = {\n    template: `\n        showing {{numberOfResults}} {{#if hasLimit}} of {{totalNumberOfResults}} {{/if}}\n    `,\n  };\n\n  constructor(props: Props, context: any) {\n    super(props, context);\n    this.state = {\n      number: Maybe.Nothing<number>(),\n      totalNumber: Maybe.Nothing<number>(),\n      isLoading: false,\n    };\n  }\n\n  public componentDidMount() {\n    this.calcResultsNumber(this.props.query);\n  }\n\n  public componentWillReceiveProps(nextProps: Props) {\n    if (!_.isEqual(nextProps.query, this.props.query)) {\n      this.calcResultsNumber(nextProps.query);\n    }\n  }\n\n  private calcResultsNumber = (query: string) => {\n    this.setState({\n      isLoading: true,\n    });\n\n    const countQuery = this.prepareCountQuery(SparqlUtil.parseQuerySync<SparqlJs.SelectQuery>(query));\n    const loading = SparqlClient.select(countQuery, { context: this.context.semanticContext })\n      .map((res) => parseInt(res.results.bindings[0]['count'].value))\n      .onValue(this.updateCounts)\n      .onError(this.onError);\n\n    if (this.props.id) {\n      trigger({\n        eventType: BuiltInEvents.ComponentLoading,\n        source: this.props.id,\n        data: loading,\n      });\n    }\n  };\n\n  /**\n   * Wraps query into 'select (count(*) as ?count) {}'.\n   * Calculates value of limit.\n   * Removes all limits from query.\n   */\n  private prepareCountQuery = (query: SparqlJs.SelectQuery): string => {\n    // calculate value of limit\n    // and remove all limits from query by iterate through all nested queries\n    const visitor = new (class extends QueryVisitor {\n      public limits = [];\n      select(select: SparqlJs.SelectQuery): SparqlJs.Query | SparqlJs.Pattern {\n        if (select.limit) {\n          this.limits.push(select.limit);\n          delete select.limit;\n        }\n        return super.select(select);\n      }\n    })();\n    visitor.sparqlQuery(query);\n\n    this.limit = visitor.limits.length ? Math.min(...visitor.limits) : undefined;\n\n    // remove prefixes to wrap query\n    query.prefixes = {};\n\n    // wrap query into 'select (count(*) as ?count) {}'\n    return `SELECT (COUNT(*) AS ?count) WHERE {{${SparqlUtil.serializeQuery(query)}}}`;\n  };\n\n  /**\n   * Calculates and sets number of results and total number of results\n   */\n  private updateCounts = (number: number) => {\n    this.setState({\n      number: Maybe.Just(this.limit <= number ? this.limit : number),\n      totalNumber: this.limit && this.limit < number ? Maybe.Just(number) : Maybe.Nothing<number>(),\n      isLoading: false,\n    });\n  };\n\n  private onError = (error) => {\n    throw error;\n  };\n\n  render() {\n    if (this.state.number.isJust && !this.state.isLoading) {\n      return createElement(TemplateItem, {\n        template: {\n          source: this.props.template,\n          options: {\n            numberOfResults: this.state.number.get(),\n            totalNumberOfResults: this.state.totalNumber.getOrElse(undefined),\n            hasLimit: this.state.totalNumber.isJust,\n          },\n        },\n      });\n    } else if (this.state.isLoading) {\n      return createElement(Spinner);\n    } else {\n      return null;\n    }\n  }\n}\n\nexport default ResultsNumberComponent;\n"],"sourceRoot":""}