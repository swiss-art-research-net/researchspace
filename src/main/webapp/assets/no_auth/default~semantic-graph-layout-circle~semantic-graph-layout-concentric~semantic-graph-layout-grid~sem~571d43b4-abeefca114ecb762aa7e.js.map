{"version":3,"sources":["webpack:///./src/main/web/components/semantic/graph/api/LayoutHelpers.ts"],"names":["getNumberValueForProperty","prop","element","propValue","data","getLiteralNumberValue","maybe","Nothing","node","isLiteral","isNaN","value","Just","sort","sortBy","getValue","a","b","cmp","chain","aValue","map","bValue","isNothing","console","warn","getOrElse"],"mappings":"iIAmBA,YAsBA,SAAgBA,0BAA0BC,GACxC,OAAO,SAAUC,GACf,IAAMC,EAAYD,EAAQE,KAAKH,GAC/B,OAAOE,EAAYE,sBAAsBF,EAAU,IAAMG,EAAMC,WAOnE,SAAgBF,sBAAsBG,GACpC,OAAIA,EAAKC,YAEFC,OAAOF,EAAKG,OAIRL,EAAMC,UAHND,EAAMM,MAAMJ,EAAKG,OAOnBL,EAAMC,UApCjB,gBAAgBM,KAAKC,GACnB,IAAMC,EAAWf,0BAA0Bc,GAC3C,OAAO,SAAUE,EAA2BC,GAC1C,IAAMC,EAAMH,EAASC,GAAGG,OAAM,SAACC,GAAW,OAAAL,EAASE,GAAGI,KAAI,SAACC,GAAW,OAAAF,EAASE,QAK/E,OAHIJ,EAAIK,WACNC,QAAQC,KAAK,0DAA4DX,GAEpEI,EAAIQ,UAAU,KAOzB,sDAUA","file":"default~semantic-graph-layout-circle~semantic-graph-layout-concentric~semantic-graph-layout-grid~sem~571d43b4-abeefca114ecb762aa7e.js","sourcesContent":["/**\n * ResearchSpace\n * Copyright (C) 2020, Â© Trustees of the British Museum\n * Copyright (C) 2015-2019, metaphacts GmbH\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport * as maybe from 'data.maybe';\n\nimport { Rdf } from 'platform/api/rdf';\n\n/**\n * Convert predicate to sort function that can be used in many cytoscape layouts.\n */\nexport function sort(sortBy: string) {\n  const getValue = getNumberValueForProperty(sortBy);\n  return function (a: Cy.CollectionFirstNode, b: Cy.CollectionFirstNode): number {\n    const cmp = getValue(a).chain((aValue) => getValue(b).map((bValue) => aValue - bValue));\n\n    if (cmp.isNothing) {\n      console.warn('Graph Layout: trying to sort by non numerical property ' + sortBy);\n    }\n    return cmp.getOrElse(0);\n  };\n}\n\n/**\n * Function to get number value from some node property.\n */\nexport function getNumberValueForProperty(prop: string) {\n  return function (element: Cy.CollectionFirstNode): Data.Maybe<number> {\n    const propValue = element.data(prop); // Array of property values\n    return propValue ? getLiteralNumberValue(propValue[0]) : maybe.Nothing<number>();\n  };\n}\n\n/**\n * Try to parse node value as number.\n */\nexport function getLiteralNumberValue(node: Rdf.Node): Data.Maybe<number> {\n  if (node.isLiteral()) {\n    // trying to parse literal value as a number\n    if (!isNaN(+node.value)) {\n      return maybe.Just(+node.value);\n    } else {\n      // literal value can't be parsed as a number\n      return maybe.Nothing<number>();\n    }\n  } else {\n    // not a literal data-type\n    return maybe.Nothing<number>();\n  }\n}\n"],"sourceRoot":""}